!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	//
$(EXE)	build/_deps/imgui-proj-src/examples/example_glfw_metal/Makefile	/^$(EXE): $(OBJS)$/;"	t
$(EXE)	build/_deps/imgui-proj-src/examples/example_glfw_opengl2/Makefile	/^$(EXE): $(OBJS)$/;"	t
$(EXE)	build/_deps/imgui-proj-src/examples/example_glfw_opengl3/Makefile	/^$(EXE): $(OBJS)$/;"	t
$(EXE)	build/_deps/imgui-proj-src/examples/example_glut_opengl2/Makefile	/^$(EXE): $(OBJS)$/;"	t
$(EXE)	build/_deps/imgui-proj-src/examples/example_null/Makefile	/^$(EXE): $(OBJS)$/;"	t
$(EXE)	build/_deps/imgui-proj-src/examples/example_sdl2_metal/Makefile	/^$(EXE): $(OBJS)$/;"	t
$(EXE)	build/_deps/imgui-proj-src/examples/example_sdl2_opengl2/Makefile	/^$(EXE): $(OBJS)$/;"	t
$(EXE)	build/_deps/imgui-proj-src/examples/example_sdl2_opengl3/Makefile	/^$(EXE): $(OBJS)$/;"	t
$(EXE)	build/_deps/imgui-proj-src/examples/example_sdl2_sdlrenderer2/Makefile	/^$(EXE): $(OBJS)$/;"	t
$(EXE)	build/_deps/imgui-proj-src/examples/example_sdl3_opengl3/Makefile	/^$(EXE): $(OBJS)$/;"	t
$(EXE)	build/_deps/imgui-proj-src/examples/example_sdl3_sdlrenderer3/Makefile	/^$(EXE): $(OBJS)$/;"	t
$(VERBOSE).SILENT	build/Makefile	/^$(VERBOSE).SILENT:$/;"	t
$(VERBOSE).SILENT	build/_deps/imgui-proj-subbuild/Makefile	/^$(VERBOSE).SILENT:$/;"	t
$(VERBOSE)MAKESILENT	build/Makefile	/^$(VERBOSE)MAKESILENT = -s$/;"	m
$(VERBOSE)MAKESILENT	build/_deps/imgui-proj-subbuild/Makefile	/^$(VERBOSE)MAKESILENT = -s$/;"	m
%	build/Makefile	/^% : %,v$/;"	t
%	build/Makefile	/^% : RCS\/%$/;"	t
%	build/Makefile	/^% : RCS\/%,v$/;"	t
%	build/Makefile	/^% : SCCS\/s.%$/;"	t
%	build/Makefile	/^% : s.%$/;"	t
%	build/_deps/imgui-proj-subbuild/Makefile	/^% : %,v$/;"	t
%	build/_deps/imgui-proj-subbuild/Makefile	/^% : RCS\/%$/;"	t
%	build/_deps/imgui-proj-subbuild/Makefile	/^% : RCS\/%,v$/;"	t
%	build/_deps/imgui-proj-subbuild/Makefile	/^% : SCCS\/s.%$/;"	t
%	build/_deps/imgui-proj-subbuild/Makefile	/^% : s.%$/;"	t
%.o	build/_deps/imgui-proj-src/examples/example_glfw_metal/Makefile	/^%.o:$(IMGUI_DIR)\/%.cpp$/;"	t
%.o	build/_deps/imgui-proj-src/examples/example_glfw_metal/Makefile	/^%.o:$(IMGUI_DIR)\/backends\/%.cpp$/;"	t
%.o	build/_deps/imgui-proj-src/examples/example_glfw_metal/Makefile	/^%.o:$(IMGUI_DIR)\/backends\/%.mm$/;"	t
%.o	build/_deps/imgui-proj-src/examples/example_glfw_metal/Makefile	/^%.o:%.cpp$/;"	t
%.o	build/_deps/imgui-proj-src/examples/example_glfw_metal/Makefile	/^%.o:%.mm$/;"	t
%.o	build/_deps/imgui-proj-src/examples/example_glfw_opengl2/Makefile	/^%.o:$(IMGUI_DIR)\/%.cpp$/;"	t
%.o	build/_deps/imgui-proj-src/examples/example_glfw_opengl2/Makefile	/^%.o:$(IMGUI_DIR)\/backends\/%.cpp$/;"	t
%.o	build/_deps/imgui-proj-src/examples/example_glfw_opengl2/Makefile	/^%.o:%.cpp$/;"	t
%.o	build/_deps/imgui-proj-src/examples/example_glfw_opengl3/Makefile	/^%.o:$(IMGUI_DIR)\/%.cpp$/;"	t
%.o	build/_deps/imgui-proj-src/examples/example_glfw_opengl3/Makefile	/^%.o:$(IMGUI_DIR)\/backends\/%.cpp$/;"	t
%.o	build/_deps/imgui-proj-src/examples/example_glfw_opengl3/Makefile	/^%.o:%.cpp$/;"	t
%.o	build/_deps/imgui-proj-src/examples/example_glut_opengl2/Makefile	/^%.o:$(IMGUI_DIR)\/%.cpp$/;"	t
%.o	build/_deps/imgui-proj-src/examples/example_glut_opengl2/Makefile	/^%.o:$(IMGUI_DIR)\/backends\/%.cpp$/;"	t
%.o	build/_deps/imgui-proj-src/examples/example_glut_opengl2/Makefile	/^%.o:%.cpp$/;"	t
%.o	build/_deps/imgui-proj-src/examples/example_null/Makefile	/^%.o:$(IMGUI_DIR)\/%.cpp$/;"	t
%.o	build/_deps/imgui-proj-src/examples/example_null/Makefile	/^%.o:$(IMGUI_DIR)\/backends\/%.cpp$/;"	t
%.o	build/_deps/imgui-proj-src/examples/example_null/Makefile	/^%.o:$(IMGUI_DIR)\/misc\/freetype\/%.cpp$/;"	t
%.o	build/_deps/imgui-proj-src/examples/example_null/Makefile	/^%.o:%.cpp$/;"	t
%.o	build/_deps/imgui-proj-src/examples/example_sdl2_metal/Makefile	/^%.o:$(IMGUI_DIR)\/%.cpp$/;"	t
%.o	build/_deps/imgui-proj-src/examples/example_sdl2_metal/Makefile	/^%.o:$(IMGUI_DIR)\/backends\/%.cpp$/;"	t
%.o	build/_deps/imgui-proj-src/examples/example_sdl2_metal/Makefile	/^%.o:$(IMGUI_DIR)\/backends\/%.mm$/;"	t
%.o	build/_deps/imgui-proj-src/examples/example_sdl2_metal/Makefile	/^%.o:%.cpp$/;"	t
%.o	build/_deps/imgui-proj-src/examples/example_sdl2_metal/Makefile	/^%.o:%.mm$/;"	t
%.o	build/_deps/imgui-proj-src/examples/example_sdl2_opengl2/Makefile	/^%.o:$(IMGUI_DIR)\/%.cpp$/;"	t
%.o	build/_deps/imgui-proj-src/examples/example_sdl2_opengl2/Makefile	/^%.o:$(IMGUI_DIR)\/backends\/%.cpp$/;"	t
%.o	build/_deps/imgui-proj-src/examples/example_sdl2_opengl2/Makefile	/^%.o:%.cpp$/;"	t
%.o	build/_deps/imgui-proj-src/examples/example_sdl2_opengl3/Makefile	/^%.o:$(IMGUI_DIR)\/%.cpp$/;"	t
%.o	build/_deps/imgui-proj-src/examples/example_sdl2_opengl3/Makefile	/^%.o:$(IMGUI_DIR)\/backends\/%.cpp$/;"	t
%.o	build/_deps/imgui-proj-src/examples/example_sdl2_opengl3/Makefile	/^%.o:%.cpp$/;"	t
%.o	build/_deps/imgui-proj-src/examples/example_sdl2_sdlrenderer2/Makefile	/^%.o:$(IMGUI_DIR)\/%.cpp$/;"	t
%.o	build/_deps/imgui-proj-src/examples/example_sdl2_sdlrenderer2/Makefile	/^%.o:$(IMGUI_DIR)\/backends\/%.cpp$/;"	t
%.o	build/_deps/imgui-proj-src/examples/example_sdl2_sdlrenderer2/Makefile	/^%.o:%.cpp$/;"	t
%.o	build/_deps/imgui-proj-src/examples/example_sdl3_opengl3/Makefile	/^%.o:$(IMGUI_DIR)\/%.cpp$/;"	t
%.o	build/_deps/imgui-proj-src/examples/example_sdl3_opengl3/Makefile	/^%.o:$(IMGUI_DIR)\/backends\/%.cpp$/;"	t
%.o	build/_deps/imgui-proj-src/examples/example_sdl3_opengl3/Makefile	/^%.o:%.cpp$/;"	t
%.o	build/_deps/imgui-proj-src/examples/example_sdl3_sdlrenderer3/Makefile	/^%.o:$(IMGUI_DIR)\/%.cpp$/;"	t
%.o	build/_deps/imgui-proj-src/examples/example_sdl3_sdlrenderer3/Makefile	/^%.o:$(IMGUI_DIR)\/backends\/%.cpp$/;"	t
%.o	build/_deps/imgui-proj-src/examples/example_sdl3_sdlrenderer3/Makefile	/^%.o:%.cpp$/;"	t
'Issues' vs 'Discussions'	build/_deps/imgui-proj-src/docs/CONTRIBUTING.md	/^## 'Issues' vs 'Discussions'$/;"	s
(1) Invalid filename due to use of `\\` or unexpected working directory.	build/_deps/imgui-proj-src/docs/FONTS.md	/^### (1) Invalid filename due to use of `\\` or unexpected working directory.$/;"	S
(2) Invalid UTF-8 encoding of your non-ASCII strings.	build/_deps/imgui-proj-src/docs/FONTS.md	/^### (2) Invalid UTF-8 encoding of your non-ASCII strings.$/;"	S
(3) Missing glyph ranges.	build/_deps/imgui-proj-src/docs/FONTS.md	/^### (3) Missing glyph ranges.$/;"	S
(4) Font atlas texture fails to upload to GPU.	build/_deps/imgui-proj-src/docs/FONTS.md	/^### (4) Font atlas texture fails to upload to GPU.$/;"	S
0	build/_deps/imgui-proj-subbuild/CMakeFiles/imgui-proj-populate.dir/Labels.json	/^			"imgui-proj-populate"$/;"	s	array:target.labels
0	build/_deps/imgui-proj-subbuild/CMakeFiles/imgui-proj-populate.dir/Labels.json	/^		{$/;"	o	array:sources
0	build/compile_commands.json	/^{$/;"	o
1	build/_deps/imgui-proj-subbuild/CMakeFiles/imgui-proj-populate.dir/Labels.json	/^		{$/;"	o	array:sources
1	build/compile_commands.json	/^{$/;"	o
10	build/_deps/imgui-proj-subbuild/CMakeFiles/imgui-proj-populate.dir/Labels.json	/^		{$/;"	o	array:sources
2	build/_deps/imgui-proj-subbuild/CMakeFiles/imgui-proj-populate.dir/Labels.json	/^		{$/;"	o	array:sources
2	build/compile_commands.json	/^{$/;"	o
3	build/_deps/imgui-proj-subbuild/CMakeFiles/imgui-proj-populate.dir/Labels.json	/^		{$/;"	o	array:sources
3	build/compile_commands.json	/^{$/;"	o
4	build/_deps/imgui-proj-subbuild/CMakeFiles/imgui-proj-populate.dir/Labels.json	/^		{$/;"	o	array:sources
4	build/compile_commands.json	/^{$/;"	o
5	build/_deps/imgui-proj-subbuild/CMakeFiles/imgui-proj-populate.dir/Labels.json	/^		{$/;"	o	array:sources
5	build/compile_commands.json	/^{$/;"	o
6	build/_deps/imgui-proj-subbuild/CMakeFiles/imgui-proj-populate.dir/Labels.json	/^		{$/;"	o	array:sources
6	build/compile_commands.json	/^{$/;"	o
7	build/_deps/imgui-proj-subbuild/CMakeFiles/imgui-proj-populate.dir/Labels.json	/^		{$/;"	o	array:sources
7	build/compile_commands.json	/^{$/;"	o
8	build/_deps/imgui-proj-subbuild/CMakeFiles/imgui-proj-populate.dir/Labels.json	/^		{$/;"	o	array:sources
9	build/_deps/imgui-proj-subbuild/CMakeFiles/imgui-proj-populate.dir/Labels.json	/^		{$/;"	o	array:sources
ALLEGRO_HAS_CLIPBOARD	build/_deps/imgui-proj-src/backends/imgui_impl_allegro5.cpp	/^#define ALLEGRO_HAS_CLIPBOARD /;"	d	file:
ALLEGRO_HAS_DRAW_INDEXED_PRIM	build/_deps/imgui-proj-src/backends/imgui_impl_allegro5.cpp	/^#define ALLEGRO_HAS_DRAW_INDEXED_PRIM /;"	d	file:
APIENTRY	build/_deps/imgui-proj-src/backends/imgui_impl_opengl2.cpp	/^#define APIENTRY /;"	d	file:
APIENTRY	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define APIENTRY$/;"	d
APIENTRY	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^  #define APIENTRY /;"	d
APIENTRYP	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define APIENTRYP /;"	d
APPLE_HAS_BUTTON_OPTIONS	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^#define APPLE_HAS_BUTTON_OPTIONS (__IPHONE_OS_VERSION_MIN_REQUIRED >= 130000 || __MAC_OS_X_VERSI/;"	M
APPLE_HAS_CONTROLLER	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^#define APPLE_HAS_CONTROLLER     (__IPHONE_OS_VERSION_MIN_REQUIRED >= 140000 || __MAC_OS_X_VERSI/;"	M
APPLE_HAS_THUMBSTICKS	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^#define APPLE_HAS_THUMBSTICKS    (__IPHONE_OS_VERSION_MIN_REQUIRED >= 120100 || __MAC_OS_X_VERSI/;"	M
APP_USE_VULKAN_DEBUG_REPORT	build/_deps/imgui-proj-src/examples/example_glfw_vulkan/main.cpp	/^#define APP_USE_VULKAN_DEBUG_REPORT$/;"	d	file:
APP_USE_VULKAN_DEBUG_REPORT	build/_deps/imgui-proj-src/examples/example_sdl2_vulkan/main.cpp	/^#define APP_USE_VULKAN_DEBUG_REPORT$/;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^#   define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^#  define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^#  define ARCHITECTURE_ID$/;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.26.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.26.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.26.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define ARCHITECTURE_ID$/;"	d	file:
About Filenames	build/_deps/imgui-proj-src/docs/FONTS.md	/^## About Filenames$/;"	s
About Gamma Correct Blending	build/_deps/imgui-proj-src/misc/freetype/README.md	/^### About Gamma Correct Blending$/;"	S
About UTF-8 Encoding	build/_deps/imgui-proj-src/docs/FONTS.md	/^## About UTF-8 Encoding$/;"	s
AcceptDragDropPayload	build/_deps/imgui-proj-src/imgui.cpp	/^const ImGuiPayload* ImGui::AcceptDragDropPayload(const char* type, ImGuiDragDropFlags flags)$/;"	f	class:ImGui	typeref:typename:const ImGuiPayload *
ActivateItemByID	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::ActivateItemByID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
Active	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    Active;                             \/\/ Set to true on Begin(), unl/;"	m	struct:ImGuiWindow	typeref:typename:bool
ActiveId	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                 ActiveId;                           \/\/ Active widget$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
ActiveIdAllowOverlap	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    ActiveIdAllowOverlap;               \/\/ Active widget allows anothe/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdClickOffset	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2                  ActiveIdClickOffset;                \/\/ Clicked offset from upper-l/;"	m	struct:ImGuiContext	typeref:typename:ImVec2
ActiveIdFromShortcut	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    ActiveIdFromShortcut;$/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdHasBeenEditedBefore	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    ActiveIdHasBeenEditedBefore;        \/\/ Was the value associated to/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdHasBeenEditedThisFrame	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    ActiveIdHasBeenEditedThisFrame;$/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdHasBeenPressedBefore	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    ActiveIdHasBeenPressedBefore;       \/\/ Track whether the active id/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdIsAlive	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                 ActiveIdIsAlive;                    \/\/ Active widget has been seen/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
ActiveIdIsJustActivated	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    ActiveIdIsJustActivated;            \/\/ Set at the time of activati/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdMouseButton	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                     ActiveIdMouseButton : 8;$/;"	m	struct:ImGuiContext	typeref:typename:int:8
ActiveIdNoClearOnFocusLoss	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    ActiveIdNoClearOnFocusLoss;         \/\/ Disable losing active id if/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdPreviousFrame	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                 ActiveIdPreviousFrame;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
ActiveIdPreviousFrameHasBeenEditedBefore	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    ActiveIdPreviousFrameHasBeenEditedBefore;$/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdPreviousFrameIsAlive	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    ActiveIdPreviousFrameIsAlive;$/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdPreviousFrameWindow	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiWindow*            ActiveIdPreviousFrameWindow;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
ActiveIdSource	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiInputSource        ActiveIdSource;                     \/\/ Activating source: ImGuiInp/;"	m	struct:ImGuiContext	typeref:typename:ImGuiInputSource
ActiveIdTimer	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   ActiveIdTimer;$/;"	m	struct:ImGuiContext	typeref:typename:float
ActiveIdUsingAllKeyboardKeys	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    ActiveIdUsingAllKeyboardKeys;       \/\/ Active widget will want to /;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdUsingNavDirMask	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImU32                   ActiveIdUsingNavDirMask;            \/\/ Active widget will want to /;"	m	struct:ImGuiContext	typeref:typename:ImU32
ActiveIdUsingNavInputMask	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImU32                   ActiveIdUsingNavInputMask;          \/\/ If you used this. Since (IM/;"	m	struct:ImGuiContext	typeref:typename:ImU32
ActiveIdWindow	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiWindow*            ActiveIdWindow;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
ActiveTexture	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^        PFNGLACTIVETEXTUREPROC            ActiveTexture;$/;"	m	struct:ImGL3WProcs::__anon6bce6ebe0108	typeref:typename:PFNGLACTIVETEXTUREPROC
Add	build/_deps/imgui-proj-src/imgui_internal.h	/^    T*          Add()                               { int idx = FreeIdx; if (idx == Buf.Size) { /;"	f	struct:ImPool	typeref:typename:T *
Add	build/_deps/imgui-proj-src/imgui_internal.h	/^    void        Add(const ImRect& r)                { if (Min.x > r.Min.x) Min.x = r.Min.x; if (/;"	f	struct:ImRect	typeref:typename:void
Add	build/_deps/imgui-proj-src/imgui_internal.h	/^    void        Add(const ImVec2& p)                { if (Min.x > p.x)     Min.x = p.x;     if (/;"	f	struct:ImRect	typeref:typename:void
Add your files	README.md	/^## Add your files$/;"	s
AddBezierCubic	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImDrawList::AddBezierCubic(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVe/;"	f	class:ImDrawList	typeref:typename:void
AddBezierQuadratic	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImDrawList::AddBezierQuadratic(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, ImU32 /;"	f	class:ImDrawList	typeref:typename:void
AddCallback	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImDrawList::AddCallback(ImDrawCallback callback, void* callback_data)$/;"	f	class:ImDrawList	typeref:typename:void
AddChar	build/_deps/imgui-proj-src/imgui.h	/^    inline void     AddChar(ImWchar c)      { SetBit(c); }                      \/\/ Add charact/;"	f	struct:ImFontGlyphRangesBuilder	typeref:typename:void
AddCircle	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImDrawList::AddCircle(const ImVec2& center, float radius, ImU32 col, int num_segments, floa/;"	f	class:ImDrawList	typeref:typename:void
AddCircleFilled	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImDrawList::AddCircleFilled(const ImVec2& center, float radius, ImU32 col, int num_segments/;"	f	class:ImDrawList	typeref:typename:void
AddContextHook	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiID ImGui::AddContextHook(ImGuiContext* ctx, const ImGuiContextHook* hook)$/;"	f	class:ImGui	typeref:typename:ImGuiID
AddConvexPolyFilled	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImDrawList::AddConvexPolyFilled(const ImVec2* points, const int points_count, ImU32 col)$/;"	f	class:ImDrawList	typeref:typename:void
AddCustomRectFontGlyph	build/_deps/imgui-proj-src/imgui_draw.cpp	/^int ImFontAtlas::AddCustomRectFontGlyph(ImFont* font, ImWchar id, int width, int height, float a/;"	f	class:ImFontAtlas	typeref:typename:int
AddCustomRectRegular	build/_deps/imgui-proj-src/imgui_draw.cpp	/^int ImFontAtlas::AddCustomRectRegular(int width, int height)$/;"	f	class:ImFontAtlas	typeref:typename:int
AddDrawCmd	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImDrawList::AddDrawCmd()$/;"	f	class:ImDrawList	typeref:typename:void
AddDrawList	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImDrawData::AddDrawList(ImDrawList* draw_list)$/;"	f	class:ImDrawData	typeref:typename:void
AddDrawListToDrawDataEx	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImGui::AddDrawListToDrawDataEx(ImDrawData* draw_data, ImVector<ImDrawList*>* out_list, ImDr/;"	f	class:ImGui	typeref:typename:void
AddEllipse	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImDrawList::AddEllipse(const ImVec2& center, float radius_x, float radius_y, ImU32 col, flo/;"	f	class:ImDrawList	typeref:typename:void
AddEllipseFilled	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImDrawList::AddEllipseFilled(const ImVec2& center, float radius_x, float radius_y, ImU32 co/;"	f	class:ImDrawList	typeref:typename:void
AddFocusEvent	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGuiIO::AddFocusEvent(bool focused)$/;"	f	class:ImGuiIO	typeref:typename:void
AddFont	build/_deps/imgui-proj-src/imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFont(const ImFontConfig* font_cfg)$/;"	f	class:ImFontAtlas	typeref:typename:ImFont *
AddFontDefault	build/_deps/imgui-proj-src/imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFontDefault(const ImFontConfig* font_cfg_template)$/;"	f	class:ImFontAtlas	typeref:typename:ImFont *
AddFontFromFileTTF	build/_deps/imgui-proj-src/imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFontFromFileTTF(const char* filename, float size_pixels, const ImFontCon/;"	f	class:ImFontAtlas	typeref:typename:ImFont *
AddFontFromMemoryCompressedBase85TTF	build/_deps/imgui-proj-src/imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFontFromMemoryCompressedBase85TTF(const char* compressed_ttf_data_base85/;"	f	class:ImFontAtlas	typeref:typename:ImFont *
AddFontFromMemoryCompressedTTF	build/_deps/imgui-proj-src/imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFontFromMemoryCompressedTTF(const void* compressed_ttf_data, int compres/;"	f	class:ImFontAtlas	typeref:typename:ImFont *
AddFontFromMemoryTTF	build/_deps/imgui-proj-src/imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFontFromMemoryTTF(void* font_data, int font_data_size, float size_pixels/;"	f	class:ImFontAtlas	typeref:typename:ImFont *
AddGlyph	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImFont::AddGlyph(const ImFontConfig* cfg, ImWchar codepoint, float x0, float y0, float x1, /;"	f	class:ImFont	typeref:typename:void
AddImage	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImDrawList::AddImage(ImTextureID user_texture_id, const ImVec2& p_min, const ImVec2& p_max,/;"	f	class:ImDrawList	typeref:typename:void
AddImageQuad	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImDrawList::AddImageQuad(ImTextureID user_texture_id, const ImVec2& p1, const ImVec2& p2, c/;"	f	class:ImDrawList	typeref:typename:void
AddImageRounded	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImDrawList::AddImageRounded(ImTextureID user_texture_id, const ImVec2& p_min, const ImVec2&/;"	f	class:ImDrawList	typeref:typename:void
AddInputCharacter	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGuiIO::AddInputCharacter(unsigned int c)$/;"	f	class:ImGuiIO	typeref:typename:void
AddInputCharacterUTF16	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGuiIO::AddInputCharacterUTF16(ImWchar16 c)$/;"	f	class:ImGuiIO	typeref:typename:void
AddInputCharactersUTF8	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGuiIO::AddInputCharactersUTF8(const char* utf8_chars)$/;"	f	class:ImGuiIO	typeref:typename:void
AddKeyAnalogEvent	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGuiIO::AddKeyAnalogEvent(ImGuiKey key, bool down, float analog_value)$/;"	f	class:ImGuiIO	typeref:typename:void
AddKeyEvent	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGuiIO::AddKeyEvent(ImGuiKey key, bool down)$/;"	f	class:ImGuiIO	typeref:typename:void
AddLine	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImDrawList::AddLine(const ImVec2& p1, const ImVec2& p2, ImU32 col, float thickness)$/;"	f	class:ImDrawList	typeref:typename:void
AddLog	build/_deps/imgui-proj-src/imgui_demo.cpp	/^    void    AddLog(const char* fmt, ...) IM_FMTARGS(2)$/;"	f	struct:ExampleAppConsole	typeref:typename:void	file:
AddLog	build/_deps/imgui-proj-src/imgui_demo.cpp	/^    void    AddLog(const char* fmt, ...) IM_FMTARGS(2)$/;"	f	struct:ExampleAppLog	typeref:typename:void	file:
AddMouseButtonEvent	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGuiIO::AddMouseButtonEvent(int mouse_button, bool down)$/;"	f	class:ImGuiIO	typeref:typename:void
AddMousePosEvent	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGuiIO::AddMousePosEvent(float x, float y)$/;"	f	class:ImGuiIO	typeref:typename:void
AddMouseSourceEvent	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGuiIO::AddMouseSourceEvent(ImGuiMouseSource source)$/;"	f	class:ImGuiIO	typeref:typename:void
AddMouseViewportEvent	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGuiIO::AddMouseViewportEvent(ImGuiID viewport_id)$/;"	f	class:ImGuiIO	typeref:typename:void
AddMouseWheelEvent	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGuiIO::AddMouseWheelEvent(float wheel_x, float wheel_y)$/;"	f	class:ImGuiIO	typeref:typename:void
AddNgon	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImDrawList::AddNgon(const ImVec2& center, float radius, ImU32 col, int num_segments, float /;"	f	class:ImDrawList	typeref:typename:void
AddNgonFilled	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImDrawList::AddNgonFilled(const ImVec2& center, float radius, ImU32 col, int num_segments)$/;"	f	class:ImDrawList	typeref:typename:void
AddPolyline	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImDrawList::AddPolyline(const ImVec2* points, const int points_count, ImU32 col, ImDrawFlag/;"	f	class:ImDrawList	typeref:typename:void
AddQuad	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImDrawList::AddQuad(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec2& p4,/;"	f	class:ImDrawList	typeref:typename:void
AddQuadFilled	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImDrawList::AddQuadFilled(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec/;"	f	class:ImDrawList	typeref:typename:void
AddRanges	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImFontGlyphRangesBuilder::AddRanges(const ImWchar* ranges)$/;"	f	class:ImFontGlyphRangesBuilder	typeref:typename:void
AddRect	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImDrawList::AddRect(const ImVec2& p_min, const ImVec2& p_max, ImU32 col, float rounding, Im/;"	f	class:ImDrawList	typeref:typename:void
AddRectFilled	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImDrawList::AddRectFilled(const ImVec2& p_min, const ImVec2& p_max, ImU32 col, float roundi/;"	f	class:ImDrawList	typeref:typename:void
AddRectFilledMultiColor	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImDrawList::AddRectFilledMultiColor(const ImVec2& p_min, const ImVec2& p_max, ImU32 col_upr/;"	f	class:ImDrawList	typeref:typename:void
AddRemapChar	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImFont::AddRemapChar(ImWchar dst, ImWchar src, bool overwrite_dst)$/;"	f	class:ImFont	typeref:typename:void
AddRootWindowToDrawData	build/_deps/imgui-proj-src/imgui.cpp	/^static inline void AddRootWindowToDrawData(ImGuiWindow* window)$/;"	f	typeref:typename:void	file:
AddSettingsHandler	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::AddSettingsHandler(const ImGuiSettingsHandler* handler)$/;"	f	class:ImGui	typeref:typename:void
AddText	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImDrawList::AddText(const ImFont* font, float font_size, const ImVec2& pos, ImU32 col, cons/;"	f	class:ImDrawList	typeref:typename:void
AddText	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImDrawList::AddText(const ImVec2& pos, ImU32 col, const char* text_begin, const char* text_/;"	f	class:ImDrawList	typeref:typename:void
AddText	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImFontGlyphRangesBuilder::AddText(const char* text, const char* text_end)$/;"	f	class:ImFontGlyphRangesBuilder	typeref:typename:void
AddTriangle	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImDrawList::AddTriangle(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, ImU32 col, fl/;"	f	class:ImDrawList	typeref:typename:void
AddTriangleFilled	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImDrawList::AddTriangleFilled(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, ImU32 c/;"	f	class:ImDrawList	typeref:typename:void
AddUpdateViewport	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiViewportP* ImGui::AddUpdateViewport(ImGuiWindow* window, ImGuiID id, const ImVec2& pos, con/;"	f	class:ImGui	typeref:typename:ImGuiViewportP *
AddWindowToDrawData	build/_deps/imgui-proj-src/imgui.cpp	/^static void AddWindowToDrawData(ImGuiWindow* window, int layer)$/;"	f	typeref:typename:void	file:
AddWindowToSortBuffer	build/_deps/imgui-proj-src/imgui.cpp	/^static void AddWindowToSortBuffer(ImVector<ImGuiWindow*>* out_sorted_windows, ImGuiWindow* windo/;"	f	typeref:typename:void	file:
AddedByTestEngine	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                            AddedByTestEngine;$/;"	m	struct:ImGuiInputEvent	typeref:typename:bool
AdvanceX	build/_deps/imgui-proj-src/imgui.h	/^    float           AdvanceX;           \/\/ Distance to next character (= data from font + ImFo/;"	m	struct:ImFontGlyph	typeref:typename:float
AdvanceX	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^        float       AdvanceX;           \/\/ The distance from the origin to the origin of the n/;"	m	struct:__anon9c8900c20110::GlyphInfo	typeref:typename:float	file:
AlignBufferSize	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^static inline VkDeviceSize AlignBufferSize(VkDeviceSize size, VkDeviceSize alignment)$/;"	f	typeref:typename:VkDeviceSize	file:
AlignTextToFramePadding	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::AlignTextToFramePadding()$/;"	f	class:ImGui	typeref:typename:void
AliveCount	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImPoolIdx       AliveCount; \/\/ Number of active\/alive items (for display purpose)$/;"	m	struct:ImPool	typeref:typename:ImPoolIdx
AllocCount	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImS16       AllocCount;$/;"	m	struct:ImGuiDebugAllocEntry	typeref:typename:ImS16
Allocator	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.h	/^    const VkAllocationCallbacks*    Allocator;$/;"	m	struct:ImGui_ImplVulkan_InitInfo	typeref:typename:const VkAllocationCallbacks *
Alpha	build/_deps/imgui-proj-src/imgui.h	/^    float       Alpha;                      \/\/ Global alpha applies to everything in Dear ImGu/;"	m	struct:ImGuiStyle	typeref:typename:float
Alpha	build/_deps/imgui-proj-src/imgui_internal.h	/^    float               Alpha;                  \/\/ Window opacity (when dragging dockable wind/;"	m	struct:ImGuiViewportP	typeref:typename:float
AnalogValue	build/_deps/imgui-proj-src/imgui.h	/^    float       AnalogValue;        \/\/ 0.0f..1.0f for gamepad values$/;"	m	struct:ImGuiKeyData	typeref:typename:float
AnalogValue	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiInputEventKey           { ImGuiKey Key; bool Down; float AnalogValue; };$/;"	m	struct:ImGuiInputEventKey	typeref:typename:float
AngleMax12	build/_deps/imgui-proj-src/imgui.cpp	/^    int     AngleMin12, AngleMax12;$/;"	m	struct:ImGuiResizeGripDef	typeref:typename:int	file:
AngleMin12	build/_deps/imgui-proj-src/imgui.cpp	/^    int     AngleMin12, AngleMax12;$/;"	m	struct:ImGuiResizeGripDef	typeref:typename:int	file:
AngledHeadersCount	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTableColumnIdx         AngledHeadersCount;         \/\/ Count columns with angled heade/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
AngledHeadersExtraWidth	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                       AngledHeadersExtraWidth;    \/\/ Used in EndTable()$/;"	m	struct:ImGuiTableTempData	typeref:typename:float
AngledHeadersHeight	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                       AngledHeadersHeight;        \/\/ Set by TableAngledHeadersRow(),/;"	m	struct:ImGuiTable	typeref:typename:float
AngledHeadersSlope	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                       AngledHeadersSlope;         \/\/ Set by TableAngledHeadersRow(),/;"	m	struct:ImGuiTable	typeref:typename:float
AntiAliasedFill	build/_deps/imgui-proj-src/imgui.h	/^    bool        AntiAliasedFill;            \/\/ Enable anti-aliased edges around filled shapes /;"	m	struct:ImGuiStyle	typeref:typename:bool
AntiAliasedLines	build/_deps/imgui-proj-src/imgui.h	/^    bool        AntiAliasedLines;           \/\/ Enable anti-aliased lines\/borders. Disable if /;"	m	struct:ImGuiStyle	typeref:typename:bool
AntiAliasedLinesUseTex	build/_deps/imgui-proj-src/imgui.h	/^    bool        AntiAliasedLinesUseTex;     \/\/ Enable anti-aliased lines\/borders using textur/;"	m	struct:ImGuiStyle	typeref:typename:bool
AppAcceptingEvents	build/_deps/imgui-proj-src/imgui.h	/^    bool        AppAcceptingEvents;                 \/\/ Only modify via SetAppAcceptingEvents()$/;"	m	struct:ImGuiIO	typeref:typename:bool
AppDelegate	build/_deps/imgui-proj-src/examples/example_apple_metal/main.mm	/^@implementation AppDelegate$/;"	I
AppDelegate	build/_deps/imgui-proj-src/examples/example_apple_metal/main.mm	/^@interface AppDelegate : NSObject <NSApplicationDelegate>$/;"	i
AppDelegate	build/_deps/imgui-proj-src/examples/example_apple_metal/main.mm	/^@interface AppDelegate : UIResponder <UIApplicationDelegate>$/;"	i
AppDelegate	build/_deps/imgui-proj-src/examples/example_apple_opengl2/main.mm	/^@implementation AppDelegate$/;"	I
AppDelegate	build/_deps/imgui-proj-src/examples/example_apple_opengl2/main.mm	/^@interface AppDelegate : NSObject <NSApplicationDelegate>$/;"	i
AppFocusLost	build/_deps/imgui-proj-src/imgui.h	/^    bool        AppFocusLost;                       \/\/ Only modify via AddFocusEvent()$/;"	m	struct:ImGuiIO	typeref:typename:bool
AppFocused	build/_deps/imgui-proj-src/imgui_internal.h	/^        ImGuiInputEventAppFocused   AppFocused;     \/\/ if Type == ImGuiInputEventType_Focus$/;"	m	union:ImGuiInputEvent::__anonc52b7f12040a	typeref:typename:ImGuiInputEventAppFocused
AppView	build/_deps/imgui-proj-src/examples/example_apple_opengl2/main.mm	/^@implementation AppView$/;"	I
AppView	build/_deps/imgui-proj-src/examples/example_apple_opengl2/main.mm	/^@interface AppView : NSOpenGLView$/;"	i
AppViewController	build/_deps/imgui-proj-src/examples/example_apple_metal/main.mm	/^@implementation AppViewController$/;"	I
AppViewController	build/_deps/imgui-proj-src/examples/example_apple_metal/main.mm	/^@interface AppViewController () <MTKViewDelegate>$/;"	i
AppViewController	build/_deps/imgui-proj-src/examples/example_apple_metal/main.mm	/^@interface AppViewController : NSViewController<NSWindowDelegate>$/;"	i
AppViewController	build/_deps/imgui-proj-src/examples/example_apple_metal/main.mm	/^@interface AppViewController : UIViewController$/;"	i
Appearing	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    Appearing;                          \/\/ Set during the frame where /;"	m	struct:ImGuiWindow	typeref:typename:bool
ApplyAllFn	build/_deps/imgui-proj-src/imgui_internal.h	/^    void        (*ApplyAllFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler);                /;"	m	struct:ImGuiSettingsHandler	typeref:typename:void (*)(ImGuiContext * ctx,ImGuiSettingsHandler * handler)
ApplyHoverFlagsForTooltip	build/_deps/imgui-proj-src/imgui.cpp	/^static ImGuiHoveredFlags ApplyHoverFlagsForTooltip(ImGuiHoveredFlags user_flags, ImGuiHoveredFla/;"	f	typeref:typename:ImGuiHoveredFlags	file:
ApplyWindowSettings	build/_deps/imgui-proj-src/imgui.cpp	/^static void ApplyWindowSettings(ImGuiWindow* window, ImGuiWindowSettings* settings)$/;"	f	typeref:typename:void	file:
ArcFastRadiusCutoff	build/_deps/imgui-proj-src/imgui_internal.h	/^    float           ArcFastRadiusCutoff;                        \/\/ Cutoff radius after which a/;"	m	struct:ImDrawListSharedData	typeref:typename:float
ArcFastVtx	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2          ArcFastVtx[IM_DRAWLIST_ARCFAST_TABLE_SIZE]; \/\/ Sample points on the quarte/;"	m	struct:ImDrawListSharedData	typeref:typename:ImVec2[]
ArrowButton	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::ArrowButton(const char* str_id, ImGuiDir dir)$/;"	f	class:ImGui	typeref:typename:bool
ArrowButtonEx	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::ArrowButtonEx(const char* str_id, ImGuiDir dir, ImVec2 size, ImGuiButtonFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
Ascender	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^        float       Ascender;           \/\/ The pixel extents above the baseline in pixels (typ/;"	m	struct:__anon9c8900c20110::FontInfo	typeref:typename:float	file:
Ascent	build/_deps/imgui-proj-src/imgui.h	/^    float                       Ascent, Descent;    \/\/ 4+4   \/\/ out \/\/            \/\/ Asc/;"	m	struct:ImFont	typeref:typename:float
AspectRatio	build/_deps/imgui-proj-src/imgui_demo.cpp	/^        static void AspectRatio(ImGuiSizeCallbackData* data)$/;"	f	struct:ShowExampleAppConstrainedResize::CustomConstraints	typeref:typename:void	file:
AttachShader	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^        PFNGLATTACHSHADERPROC             AttachShader;$/;"	m	struct:ImGL3WProcs::__anon6bce6ebe0108	typeref:typename:PFNGLATTACHSHADERPROC
AttribLocationProjMtx	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp	/^    GLint           AttribLocationProjMtx;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:GLint	file:
AttribLocationTex	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp	/^    GLint           AttribLocationTex;       \/\/ Uniforms location$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:GLint	file:
AttribLocationVtxColor	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp	/^    GLuint          AttribLocationVtxColor;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:GLuint	file:
AttribLocationVtxPos	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp	/^    GLuint          AttribLocationVtxPos;    \/\/ Vertex attributes location$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:GLuint	file:
AttribLocationVtxUV	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp	/^    GLuint          AttribLocationVtxUV;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:GLuint	file:
AuthorityForPos	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDataAuthority      AuthorityForPos         :3;$/;"	m	struct:ImGuiDockNode	typeref:typename:ImGuiDataAuthority:3
AuthorityForSize	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDataAuthority      AuthorityForSize        :3;$/;"	m	struct:ImGuiDockNode	typeref:typename:ImGuiDataAuthority:3
AuthorityForViewport	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDataAuthority      AuthorityForViewport    :3;$/;"	m	struct:ImGuiDockNode	typeref:typename:ImGuiDataAuthority:3
Authors and acknowledgment	README.md	/^## Authors and acknowledgment$/;"	s
AutoFitFramesX	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImS8                    AutoFitFramesX, AutoFitFramesY;$/;"	m	struct:ImGuiWindow	typeref:typename:ImS8
AutoFitFramesY	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImS8                    AutoFitFramesX, AutoFitFramesY;$/;"	m	struct:ImGuiWindow	typeref:typename:ImS8
AutoFitOnlyGrows	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    AutoFitOnlyGrows;$/;"	m	struct:ImGuiWindow	typeref:typename:bool
AutoFitQueue	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImU8                    AutoFitQueue;                   \/\/ Queue of 8 values for the next /;"	m	struct:ImGuiTableColumn	typeref:typename:ImU8
AutoFitSingleColumn	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTableColumnIdx         AutoFitSingleColumn;        \/\/ Index of single column requesti/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
AutoPosLastDirection	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDir                AutoPosLastDirection;$/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiDir
AutoScroll	build/_deps/imgui-proj-src/imgui_demo.cpp	/^    bool                  AutoScroll;$/;"	m	struct:ExampleAppConsole	typeref:typename:bool	file:
AutoScroll	build/_deps/imgui-proj-src/imgui_demo.cpp	/^    bool                AutoScroll;  \/\/ Keep scrolling if already at the bottom.$/;"	m	struct:ExampleAppLog	typeref:typename:bool	file:
BACKUP_DX10_STATE	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^    struct BACKUP_DX10_STATE$/;"	s	function:ImGui_ImplDX10_RenderDrawData	file:
BACKUP_DX11_STATE	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^    struct BACKUP_DX11_STATE$/;"	s	function:ImGui_ImplDX11_RenderDrawData	file:
Backbuffer	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.h	/^    VkImage             Backbuffer;$/;"	m	struct:ImGui_ImplVulkanH_Frame	typeref:typename:VkImage
BackbufferView	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.h	/^    VkImageView         BackbufferView;$/;"	m	struct:ImGui_ImplVulkanH_Frame	typeref:typename:VkImageView
BackendFlags	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiBackendFlags  BackendFlags;            \/\/ = 0              \/\/ See ImGuiBackendFlags/;"	m	struct:ImGuiIO	typeref:typename:ImGuiBackendFlags
BackendLanguageUserData	build/_deps/imgui-proj-src/imgui.h	/^    void*       BackendLanguageUserData;        \/\/ = NULL           \/\/ User data for non C++/;"	m	struct:ImGuiIO	typeref:typename:void *
BackendPlatformName	build/_deps/imgui-proj-src/imgui.h	/^    const char* BackendPlatformName;            \/\/ = NULL$/;"	m	struct:ImGuiIO	typeref:typename:const char *
BackendPlatformUserData	build/_deps/imgui-proj-src/imgui.h	/^    void*       BackendPlatformUserData;        \/\/ = NULL           \/\/ User data for platfor/;"	m	struct:ImGuiIO	typeref:typename:void *
BackendRendererName	build/_deps/imgui-proj-src/imgui.h	/^    const char* BackendRendererName;            \/\/ = NULL$/;"	m	struct:ImGuiIO	typeref:typename:const char *
BackendRendererUserData	build/_deps/imgui-proj-src/imgui.h	/^    void*       BackendRendererUserData;        \/\/ = NULL           \/\/ User data for rendere/;"	m	struct:ImGuiIO	typeref:typename:void *
BackendUsingLegacyKeyArrays	build/_deps/imgui-proj-src/imgui.h	/^    ImS8        BackendUsingLegacyKeyArrays;        \/\/ -1: unknown, 0: using AddKeyEvent(), 1:/;"	m	struct:ImGuiIO	typeref:typename:ImS8
BackendUsingLegacyNavInputArray	build/_deps/imgui-proj-src/imgui.h	/^    bool        BackendUsingLegacyNavInputArray;    \/\/ 0: using AddKeyAnalogEvent(), 1: writin/;"	m	struct:ImGuiIO	typeref:typename:bool
Backends for third-party frameworks, graphics API or other languages	build/_deps/imgui-proj-src/docs/BACKENDS.md	/^### Backends for third-party frameworks, graphics API or other languages$/;"	S
BackupActiveIdIsAlive	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID     BackupActiveIdIsAlive;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImGuiID
BackupActiveIdPreviousFrameIsAlive	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool        BackupActiveIdPreviousFrameIsAlive;$/;"	m	struct:ImGuiGroupData	typeref:typename:bool
BackupCurrLineSize	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2      BackupCurrLineSize;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImVec2
BackupCurrLineTextBaseOffset	build/_deps/imgui-proj-src/imgui_internal.h	/^    float       BackupCurrLineTextBaseOffset;$/;"	m	struct:ImGuiGroupData	typeref:typename:float
BackupCursorMaxPos	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2          BackupCursorMaxPos;$/;"	m	struct:ImGuiComboPreviewData	typeref:typename:ImVec2
BackupCursorMaxPos	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2      BackupCursorMaxPos;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImVec2
BackupCursorPos	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2              BackupCursorPos;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImVec2
BackupCursorPos	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2          BackupCursorPos;$/;"	m	struct:ImGuiComboPreviewData	typeref:typename:ImVec2
BackupCursorPos	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2      BackupCursorPos;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImVec2
BackupCursorPosPrevLine	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2          BackupCursorPosPrevLine;$/;"	m	struct:ImGuiComboPreviewData	typeref:typename:ImVec2
BackupCursorPosPrevLine	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2      BackupCursorPosPrevLine;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImVec2
BackupFloat	build/_deps/imgui-proj-src/imgui_internal.h	/^    union           { int BackupInt[2]; float BackupFloat[2]; };$/;"	m	union:ImGuiStyleMod::__anonc52b7f12030a	typeref:typename:float[2]
BackupGroupOffset	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec1      BackupGroupOffset;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImVec1
BackupHoveredIdIsAlive	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool        BackupHoveredIdIsAlive;$/;"	m	struct:ImGuiGroupData	typeref:typename:bool
BackupIndent	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec1      BackupIndent;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImVec1
BackupInt	build/_deps/imgui-proj-src/imgui_internal.h	/^    union           { int BackupInt[2]; float BackupFloat[2]; };$/;"	m	union:ImGuiStyleMod::__anonc52b7f12030a	typeref:typename:int[2]
BackupIsSameLine	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool        BackupIsSameLine;$/;"	m	struct:ImGuiGroupData	typeref:typename:bool
BackupLayout	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiLayoutType BackupLayout;$/;"	m	struct:ImGuiComboPreviewData	typeref:typename:ImGuiLayoutType
BackupNavWindow	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiWindow*        BackupNavWindow;\/\/ Set on OpenPopup(), a NavWindow that will be restor/;"	m	struct:ImGuiPopupData	typeref:typename:ImGuiWindow *
BackupPrevLineTextBaseOffset	build/_deps/imgui-proj-src/imgui_internal.h	/^    float           BackupPrevLineTextBaseOffset;$/;"	m	struct:ImGuiComboPreviewData	typeref:typename:float
BackupSDLRendererState	build/_deps/imgui-proj-src/backends/imgui_impl_sdlrenderer2.cpp	/^    struct BackupSDLRendererState$/;"	s	function:ImGui_ImplSDLRenderer2_RenderDrawData	file:
BackupSDLRendererState	build/_deps/imgui-proj-src/backends/imgui_impl_sdlrenderer3.cpp	/^    struct BackupSDLRendererState$/;"	s	function:ImGui_ImplSDLRenderer3_RenderDrawData	file:
BackupValue	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec4          BackupValue;$/;"	m	struct:ImGuiColorMod	typeref:typename:ImVec4
Badges	README.md	/^## Badges$/;"	s
BarRect	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImRect              BarRect;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImRect
BasePtr	build/_deps/imgui-proj-src/imgui_internal.h	/^    char*   BasePtr;$/;"	m	struct:ImSpanAllocator	typeref:typename:char *
Begin	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::Begin(const char* name, bool* p_open, ImGuiWindowFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
Begin	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGuiListClipper::Begin(int items_count, float items_height)$/;"	f	class:ImGuiListClipper	typeref:typename:void
BeginChild	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::BeginChild(ImGuiID id, const ImVec2& size_arg, ImGuiChildFlags child_flags, ImGuiWin/;"	f	class:ImGui	typeref:typename:bool
BeginChild	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::BeginChild(const char* str_id, const ImVec2& size_arg, ImGuiChildFlags child_flags, /;"	f	class:ImGui	typeref:typename:bool
BeginChildEx	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::BeginChildEx(const char* name, ImGuiID id, const ImVec2& size_arg, ImGuiChildFlags c/;"	f	class:ImGui	typeref:typename:bool
BeginChildFrame	build/_deps/imgui-proj-src/imgui.h	/^    static inline bool  BeginChildFrame(ImGuiID id, const ImVec2& size, ImGuiWindowFlags window_/;"	f	namespace:ImGui	typeref:typename:bool
BeginColumns	build/_deps/imgui-proj-src/imgui_tables.cpp	/^void ImGui::BeginColumns(const char* str_id, int columns_count, ImGuiOldColumnFlags flags)$/;"	f	class:ImGui	typeref:typename:void
BeginCombo	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::BeginCombo(const char* label, const char* preview_value, ImGuiComboFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginComboDepth	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                     BeginComboDepth;$/;"	m	struct:ImGuiContext	typeref:typename:int
BeginComboPopup	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::BeginComboPopup(ImGuiID popup_id, const ImRect& bb, ImGuiComboFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginComboPreview	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::BeginComboPreview()$/;"	f	class:ImGui	typeref:typename:bool
BeginCount	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImS8                BeginCount;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImS8
BeginCount	build/_deps/imgui-proj-src/imgui_internal.h	/^    short                   BeginCount;                         \/\/ Number of Begin() during th/;"	m	struct:ImGuiWindow	typeref:typename:short
BeginCountPreviousFrame	build/_deps/imgui-proj-src/imgui_internal.h	/^    short                   BeginCountPreviousFrame;            \/\/ Number of Begin() during th/;"	m	struct:ImGuiWindow	typeref:typename:short
BeginDisabled	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::BeginDisabled(bool disabled)$/;"	f	class:ImGui	typeref:typename:void
BeginDockableDragDropSource	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::BeginDockableDragDropSource(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
BeginDockableDragDropTarget	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::BeginDockableDragDropTarget(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
BeginDocked	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::BeginDocked(ImGuiWindow* window, bool* p_open)$/;"	f	class:ImGui	typeref:typename:void
BeginDragDropSource	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::BeginDragDropSource(ImGuiDragDropFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginDragDropTarget	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::BeginDragDropTarget()$/;"	f	class:ImGui	typeref:typename:bool
BeginDragDropTargetCustom	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::BeginDragDropTargetCustom(const ImRect& bb, ImGuiID id)$/;"	f	class:ImGui	typeref:typename:bool
BeginGroup	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::BeginGroup()$/;"	f	class:ImGui	typeref:typename:void
BeginItemTooltip	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::BeginItemTooltip()$/;"	f	class:ImGui	typeref:typename:bool
BeginListBox	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::BeginListBox(const char* label, const ImVec2& size_arg)$/;"	f	class:ImGui	typeref:typename:bool
BeginMainMenuBar	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::BeginMainMenuBar()$/;"	f	class:ImGui	typeref:typename:bool
BeginMenu	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::BeginMenu(const char* label, bool enabled)$/;"	f	class:ImGui	typeref:typename:bool
BeginMenuBar	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::BeginMenuBar()$/;"	f	class:ImGui	typeref:typename:bool
BeginMenuDepth	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                     BeginMenuDepth;$/;"	m	struct:ImGuiContext	typeref:typename:int
BeginMenuEx	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::BeginMenuEx(const char* label, const char* icon, bool enabled)$/;"	f	class:ImGui	typeref:typename:bool
BeginOrder	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImS16               BeginOrder;             \/\/ BeginTabItem() order, used to re-order tabs/;"	m	struct:ImGuiTabItem	typeref:typename:ImS16
BeginOrderWithinContext	build/_deps/imgui-proj-src/imgui_internal.h	/^    short                   BeginOrderWithinContext;            \/\/ Begin() order within entire/;"	m	struct:ImGuiWindow	typeref:typename:short
BeginOrderWithinParent	build/_deps/imgui-proj-src/imgui_internal.h	/^    short                   BeginOrderWithinParent;             \/\/ Begin() order within immedi/;"	m	struct:ImGuiWindow	typeref:typename:short
BeginPopup	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::BeginPopup(const char* str_id, ImGuiWindowFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginPopupContextItem	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::BeginPopupContextItem(const char* str_id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginPopupContextVoid	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::BeginPopupContextVoid(const char* str_id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginPopupContextWindow	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::BeginPopupContextWindow(const char* str_id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginPopupEx	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::BeginPopupEx(ImGuiID id, ImGuiWindowFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginPopupModal	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::BeginPopupModal(const char* name, bool* p_open, ImGuiWindowFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginPopupStack	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVector<ImGuiPopupData>        BeginPopupStack;            \/\/ Which level of BeginPopup()/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiPopupData>
BeginTabBar	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool    ImGui::BeginTabBar(const char* str_id, ImGuiTabBarFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginTabBarEx	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool    ImGui::BeginTabBarEx(ImGuiTabBar* tab_bar, const ImRect& tab_bar_bb, ImGuiTabBarFlags fl/;"	f	class:ImGui	typeref:typename:bool
BeginTabItem	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool    ImGui::BeginTabItem(const char* label, bool* p_open, ImGuiTabItemFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginTable	build/_deps/imgui-proj-src/imgui_tables.cpp	/^bool    ImGui::BeginTable(const char* str_id, int columns_count, ImGuiTableFlags flags, const Im/;"	f	class:ImGui	typeref:typename:bool
BeginTableEx	build/_deps/imgui-proj-src/imgui_tables.cpp	/^bool    ImGui::BeginTableEx(const char* name, ImGuiID id, int columns_count, ImGuiTableFlags fla/;"	f	class:ImGui	typeref:typename:bool
BeginTooltip	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::BeginTooltip()$/;"	f	class:ImGui	typeref:typename:bool
BeginTooltipEx	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::BeginTooltipEx(ImGuiTooltipFlags tooltip_flags, ImGuiWindowFlags extra_window_flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginTooltipHidden	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::BeginTooltipHidden()$/;"	f	class:ImGui	typeref:typename:bool
BeginViewportSideBar	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::BeginViewportSideBar(const char* name, ImGuiViewport* viewport_p, ImGuiDir dir, floa/;"	f	class:ImGui	typeref:typename:bool
Bg0ClipRectForDrawCmd	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImRect                      Bg0ClipRectForDrawCmd;      \/\/ Actual ImDrawCmd clip rect for /;"	m	struct:ImGuiTable	typeref:typename:ImRect
Bg2ClipRectForDrawCmd	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImRect                      Bg2ClipRectForDrawCmd;      \/\/ Actual ImDrawCmd clip rect for /;"	m	struct:ImGuiTable	typeref:typename:ImRect
Bg2DrawChannelCurrent	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTableDrawChannelIdx    Bg2DrawChannelCurrent;      \/\/ For Selectable() and other widg/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableDrawChannelIdx
Bg2DrawChannelUnfrozen	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTableDrawChannelIdx    Bg2DrawChannelUnfrozen;$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableDrawChannelIdx
BgAlphaVal	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                       BgAlphaVal;             \/\/ Override background alpha$/;"	m	struct:ImGuiNextWindowData	typeref:typename:float
BgClipRect	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImRect                      BgClipRect;                 \/\/ We use this to cpu-clip cell ba/;"	m	struct:ImGuiTable	typeref:typename:ImRect
BgColor	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImU32                       BgColor;    \/\/ Actual color$/;"	m	struct:ImGuiTableCellData	typeref:typename:ImU32
BgFgDrawLists	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImDrawList*         BgFgDrawLists[2];       \/\/ Convenience background (0) and foreground (/;"	m	struct:ImGuiViewportP	typeref:typename:ImDrawList * [2]
BgFgDrawListsLastFrame	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                 BgFgDrawListsLastFrame[2]; \/\/ Last frame number the background (0) and/;"	m	struct:ImGuiViewportP	typeref:typename:int[2]
BindBuffer	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^        PFNGLBINDBUFFERPROC               BindBuffer;$/;"	m	struct:ImGL3WProcs::__anon6bce6ebe0108	typeref:typename:PFNGLBINDBUFFERPROC
BindSampler	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^        PFNGLBINDSAMPLERPROC              BindSampler;$/;"	m	struct:ImGL3WProcs::__anon6bce6ebe0108	typeref:typename:PFNGLBINDSAMPLERPROC
BindTexture	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^        PFNGLBINDTEXTUREPROC              BindTexture;$/;"	m	struct:ImGL3WProcs::__anon6bce6ebe0108	typeref:typename:PFNGLBINDTEXTUREPROC
BindVertexArray	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^        PFNGLBINDVERTEXARRAYPROC          BindVertexArray;$/;"	m	struct:ImGL3WProcs::__anon6bce6ebe0108	typeref:typename:PFNGLBINDVERTEXARRAYPROC
BitmapData	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^    unsigned int*       BitmapData;         \/\/ Point within one of the dst_tmp_bitmap_buffers[/;"	m	struct:ImFontBuildSrcGlyphFT	typeref:typename:unsigned int *	file:
BlendEquation	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^        PFNGLBLENDEQUATIONPROC            BlendEquation;$/;"	m	struct:ImGL3WProcs::__anon6bce6ebe0108	typeref:typename:PFNGLBLENDEQUATIONPROC
BlendEquationSeparate	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^        PFNGLBLENDEQUATIONSEPARATEPROC    BlendEquationSeparate;$/;"	m	struct:ImGL3WProcs::__anon6bce6ebe0108	typeref:typename:PFNGLBLENDEQUATIONSEPARATEPROC
BlendFactor	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^        FLOAT                       BlendFactor[4];$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:FLOAT[4]	file:
BlendFactor	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^        FLOAT                       BlendFactor[4];$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:FLOAT[4]	file:
BlendFuncSeparate	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^        PFNGLBLENDFUNCSEPARATEPROC        BlendFuncSeparate;$/;"	m	struct:ImGL3WProcs::__anon6bce6ebe0108	typeref:typename:PFNGLBLENDFUNCSEPARATEPROC
BlendState	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^        ID3D10BlendState*           BlendState;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:ID3D10BlendState *	file:
BlendState	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^        ID3D11BlendState*           BlendState;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:ID3D11BlendState *	file:
BlitGlyph	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^    void FreeTypeFont::BlitGlyph(const FT_Bitmap* ft_bitmap, uint32_t* dst, uint32_t dst_pitch, /;"	f	class:__anon9c8900c20110::FreeTypeFont	typeref:typename:void
BorderColorLight	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImU32                       BorderColorLight;$/;"	m	struct:ImGuiTable	typeref:typename:ImU32
BorderColorStrong	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImU32                       BorderColorStrong;$/;"	m	struct:ImGuiTable	typeref:typename:ImU32
BorderX1	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                       BorderX1;$/;"	m	struct:ImGuiTable	typeref:typename:float
BorderX2	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                       BorderX2;$/;"	m	struct:ImGuiTable	typeref:typename:float
BringWindowToDisplayBack	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::BringWindowToDisplayBack(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
BringWindowToDisplayBehind	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::BringWindowToDisplayBehind(ImGuiWindow* window, ImGuiWindow* behind_window)$/;"	f	class:ImGui	typeref:typename:void
BringWindowToDisplayFront	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::BringWindowToDisplayFront(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
BringWindowToFocusFront	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::BringWindowToFocusFront(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
Buf	build/_deps/imgui-proj-src/imgui.h	/^    ImVector<char>      Buf;$/;"	m	struct:ImGuiTextBuffer	typeref:typename:ImVector<char>
Buf	build/_deps/imgui-proj-src/imgui.h	/^    char*               Buf;            \/\/ Text buffer                          \/\/ Read-writ/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:char *
Buf	build/_deps/imgui-proj-src/imgui_demo.cpp	/^    ImGuiTextBuffer     Buf;$/;"	m	struct:ExampleAppLog	typeref:typename:ImGuiTextBuffer	file:
Buf	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVector<T>     Buf;        \/\/ Contiguous data$/;"	m	struct:ImPool	typeref:typename:ImVector<T>
Buf	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVector<char>  Buf;$/;"	m	struct:ImChunkStream	typeref:typename:ImVector<char>
BufCapacityA	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                     BufCapacityA;           \/\/ end-user buffer capacity$/;"	m	struct:ImGuiInputTextState	typeref:typename:int
BufDirty	build/_deps/imgui-proj-src/imgui.h	/^    bool                BufDirty;       \/\/ Set if you modify Buf\/BufTextLen!    \/\/ Write   /;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:bool
BufIndices	build/_deps/imgui-proj-src/backends/imgui_impl_allegro5.cpp	/^    ImVector<int>               BufIndices;$/;"	m	struct:ImGui_ImplAllegro5_Data	typeref:typename:ImVector<int>	file:
BufSize	build/_deps/imgui-proj-src/imgui.h	/^    int                 BufSize;        \/\/ Buffer size (in bytes) = capacity+1  \/\/ Read-only/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:int
BufTextLen	build/_deps/imgui-proj-src/imgui.h	/^    int                 BufTextLen;     \/\/ Text length (in bytes)               \/\/ Read-writ/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:int
BufVertices	build/_deps/imgui-proj-src/backends/imgui_impl_allegro5.cpp	/^    ImVector<ImDrawVertAllegro> BufVertices;$/;"	m	struct:ImGui_ImplAllegro5_Data	typeref:typename:ImVector<ImDrawVertAllegro>	file:
BufferData	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^        PFNGLBUFFERDATAPROC               BufferData;$/;"	m	struct:ImGL3WProcs::__anon6bce6ebe0108	typeref:typename:PFNGLBUFFERDATAPROC
BufferMemoryAlignment	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^    VkDeviceSize                BufferMemoryAlignment;$/;"	m	struct:ImGui_ImplVulkan_Data	typeref:typename:VkDeviceSize	file:
BufferSubData	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^        PFNGLBUFFERSUBDATAPROC            BufferSubData;$/;"	m	struct:ImGL3WProcs::__anon6bce6ebe0108	typeref:typename:PFNGLBUFFERSUBDATAPROC
Build	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGuiTextFilter::Build()$/;"	f	class:ImGuiTextFilter	typeref:typename:void
Build	build/_deps/imgui-proj-src/imgui_draw.cpp	/^bool    ImFontAtlas::Build()$/;"	f	class:ImFontAtlas	typeref:typename:bool
BuildLookupTable	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImFont::BuildLookupTable()$/;"	f	class:ImFont	typeref:typename:void
BuildRanges	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImFontGlyphRangesBuilder::BuildRanges(ImVector<ImWchar>* out_ranges)$/;"	f	class:ImFontGlyphRangesBuilder	typeref:typename:void
BuildSortByKey	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGuiStorage::BuildSortByKey()$/;"	f	class:ImGuiStorage	typeref:typename:void
BuildWorkOffsetMax	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2              BuildWorkOffsetMax;     \/\/ Work Area: Offset being built during curren/;"	m	struct:ImGuiViewportP	typeref:typename:ImVec2
BuildWorkOffsetMin	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2              BuildWorkOffsetMin;     \/\/ Work Area: Offset being built during curren/;"	m	struct:ImGuiViewportP	typeref:typename:ImVec2
Bullet	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::Bullet()$/;"	f	class:ImGui	typeref:typename:void
BulletText	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::BulletText(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
BulletTextV	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::BulletTextV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
Button	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiInputEventMouseButton   { int Button; bool Down; ImGuiMouseSource MouseSource; };$/;"	m	struct:ImGuiInputEventMouseButton	typeref:typename:int
Button	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::Button(const char* label, const ImVec2& size_arg)$/;"	f	class:ImGui	typeref:typename:bool
ButtonBehavior	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::ButtonBehavior(const ImRect& bb, ImGuiID id, bool* out_hovered, bool* out_held, ImGu/;"	f	class:ImGui	typeref:typename:bool
ButtonEx	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::ButtonEx(const char* label, const ImVec2& size_arg, ImGuiButtonFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
ButtonTextAlign	build/_deps/imgui-proj-src/imgui.h	/^    ImVec2      ButtonTextAlign;            \/\/ Alignment of button text when button is larger /;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
CALLBACK	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^ #define CALLBACK /;"	d
CFBundleDevelopmentRegion	build/_deps/imgui-proj-src/examples/example_apple_metal/iOS/Info-iOS.plist	/^	<key>CFBundleDevelopmentRegion<\/key>$/;"	k
CFBundleDevelopmentRegion	build/_deps/imgui-proj-src/examples/example_apple_metal/macOS/Info-macOS.plist	/^	<key>CFBundleDevelopmentRegion<\/key>$/;"	k
CFBundleExecutable	build/_deps/imgui-proj-src/examples/example_apple_metal/iOS/Info-iOS.plist	/^	<key>CFBundleExecutable<\/key>$/;"	k
CFBundleExecutable	build/_deps/imgui-proj-src/examples/example_apple_metal/macOS/Info-macOS.plist	/^	<key>CFBundleExecutable<\/key>$/;"	k
CFBundleIconFile	build/_deps/imgui-proj-src/examples/example_apple_metal/macOS/Info-macOS.plist	/^	<key>CFBundleIconFile<\/key>$/;"	k
CFBundleIdentifier	build/_deps/imgui-proj-src/examples/example_apple_metal/iOS/Info-iOS.plist	/^	<key>CFBundleIdentifier<\/key>$/;"	k
CFBundleIdentifier	build/_deps/imgui-proj-src/examples/example_apple_metal/macOS/Info-macOS.plist	/^	<key>CFBundleIdentifier<\/key>$/;"	k
CFBundleInfoDictionaryVersion	build/_deps/imgui-proj-src/examples/example_apple_metal/iOS/Info-iOS.plist	/^	<key>CFBundleInfoDictionaryVersion<\/key>$/;"	k
CFBundleInfoDictionaryVersion	build/_deps/imgui-proj-src/examples/example_apple_metal/macOS/Info-macOS.plist	/^	<key>CFBundleInfoDictionaryVersion<\/key>$/;"	k
CFBundleName	build/_deps/imgui-proj-src/examples/example_apple_metal/iOS/Info-iOS.plist	/^	<key>CFBundleName<\/key>$/;"	k
CFBundleName	build/_deps/imgui-proj-src/examples/example_apple_metal/macOS/Info-macOS.plist	/^	<key>CFBundleName<\/key>$/;"	k
CFBundlePackageType	build/_deps/imgui-proj-src/examples/example_apple_metal/iOS/Info-iOS.plist	/^	<key>CFBundlePackageType<\/key>$/;"	k
CFBundlePackageType	build/_deps/imgui-proj-src/examples/example_apple_metal/macOS/Info-macOS.plist	/^	<key>CFBundlePackageType<\/key>$/;"	k
CFBundleShortVersionString	build/_deps/imgui-proj-src/examples/example_apple_metal/iOS/Info-iOS.plist	/^	<key>CFBundleShortVersionString<\/key>$/;"	k
CFBundleShortVersionString	build/_deps/imgui-proj-src/examples/example_apple_metal/macOS/Info-macOS.plist	/^	<key>CFBundleShortVersionString<\/key>$/;"	k
CFBundleVersion	build/_deps/imgui-proj-src/examples/example_apple_metal/iOS/Info-iOS.plist	/^	<key>CFBundleVersion<\/key>$/;"	k
CFBundleVersion	build/_deps/imgui-proj-src/examples/example_apple_metal/macOS/Info-macOS.plist	/^	<key>CFBundleVersion<\/key>$/;"	k
CFLAGS	build/_deps/imgui-proj-src/examples/example_glfw_metal/Makefile	/^CFLAGS = $(CXXFLAGS)$/;"	m
CFLAGS	build/_deps/imgui-proj-src/examples/example_glfw_opengl2/Makefile	/^	CFLAGS = $(CXXFLAGS)$/;"	m
CFLAGS	build/_deps/imgui-proj-src/examples/example_glfw_opengl3/Makefile	/^	CFLAGS = $(CXXFLAGS)$/;"	m
CFLAGS	build/_deps/imgui-proj-src/examples/example_glut_opengl2/Makefile	/^	CFLAGS = $(CXXFLAGS)$/;"	m
CFLAGS	build/_deps/imgui-proj-src/examples/example_null/Makefile	/^	CFLAGS = $(CXXFLAGS)$/;"	m
CFLAGS	build/_deps/imgui-proj-src/examples/example_sdl2_metal/Makefile	/^CFLAGS = $(CXXFLAGS)$/;"	m
CFLAGS	build/_deps/imgui-proj-src/examples/example_sdl2_opengl2/Makefile	/^	CFLAGS = $(CXXFLAGS)$/;"	m
CFLAGS	build/_deps/imgui-proj-src/examples/example_sdl2_opengl3/Makefile	/^	CFLAGS = $(CXXFLAGS)$/;"	m
CFLAGS	build/_deps/imgui-proj-src/examples/example_sdl2_opengl3/Makefile	/^    CFLAGS = $(CXXFLAGS)$/;"	m
CFLAGS	build/_deps/imgui-proj-src/examples/example_sdl2_sdlrenderer2/Makefile	/^	CFLAGS = $(CXXFLAGS)$/;"	m
CFLAGS	build/_deps/imgui-proj-src/examples/example_sdl3_opengl3/Makefile	/^	CFLAGS = $(CXXFLAGS)$/;"	m
CFLAGS	build/_deps/imgui-proj-src/examples/example_sdl3_opengl3/Makefile	/^    CFLAGS = $(CXXFLAGS)$/;"	m
CFLAGS	build/_deps/imgui-proj-src/examples/example_sdl3_sdlrenderer3/Makefile	/^	CFLAGS = $(CXXFLAGS)$/;"	m
CFLAGS	build/_deps/imgui-proj-src/examples/example_sdl3_sdlrenderer3/Makefile	/^    CFLAGS = $(CXXFLAGS)$/;"	m
CMAKE_AR	build/CMakeFiles/3.26.5/CMakeCCompiler.cmake	/^set(CMAKE_AR "\/usr\/bin\/ar")$/;"	v
CMAKE_AR	build/CMakeFiles/3.26.5/CMakeCXXCompiler.cmake	/^set(CMAKE_AR "\/usr\/bin\/ar")$/;"	v
CMAKE_BINARY_DIR	build/Makefile	/^CMAKE_BINARY_DIR = \/home\/xundaoxd\/Workdir\/neditor\/build$/;"	m
CMAKE_BINARY_DIR	build/_deps/imgui-proj-subbuild/Makefile	/^CMAKE_BINARY_DIR = \/mnt\/data\/Workdir\/neditor\/build\/_deps\/imgui-proj-subbuild$/;"	m
CMAKE_BUILD_TYPE	build/_deps/imgui-proj-src/examples/example_glfw_vulkan/CMakeLists.txt	/^  set(CMAKE_BUILD_TYPE Debug CACHE STRING "" FORCE)$/;"	v
CMAKE_C11_COMPILE_FEATURES	build/CMakeFiles/3.26.5/CMakeCCompiler.cmake	/^set(CMAKE_C11_COMPILE_FEATURES "c_std_11;c_static_assert")$/;"	v
CMAKE_C17_COMPILE_FEATURES	build/CMakeFiles/3.26.5/CMakeCCompiler.cmake	/^set(CMAKE_C17_COMPILE_FEATURES "c_std_17")$/;"	v
CMAKE_C23_COMPILE_FEATURES	build/CMakeFiles/3.26.5/CMakeCCompiler.cmake	/^set(CMAKE_C23_COMPILE_FEATURES "c_std_23")$/;"	v
CMAKE_C90_COMPILE_FEATURES	build/CMakeFiles/3.26.5/CMakeCCompiler.cmake	/^set(CMAKE_C90_COMPILE_FEATURES "c_std_90;c_function_prototypes")$/;"	v
CMAKE_C99_COMPILE_FEATURES	build/CMakeFiles/3.26.5/CMakeCCompiler.cmake	/^set(CMAKE_C99_COMPILE_FEATURES "c_std_99;c_restrict;c_variadic_macros")$/;"	v
CMAKE_CL_SHOWINCLUDES_PREFIX	build/CMakeFiles/3.26.5/CMakeCCompiler.cmake	/^  set(CMAKE_CL_SHOWINCLUDES_PREFIX "${CMAKE_C_CL_SHOWINCLUDES_PREFIX}")$/;"	v
CMAKE_CL_SHOWINCLUDES_PREFIX	build/CMakeFiles/3.26.5/CMakeCXXCompiler.cmake	/^  set(CMAKE_CL_SHOWINCLUDES_PREFIX "${CMAKE_CXX_CL_SHOWINCLUDES_PREFIX}")$/;"	v
CMAKE_COMMAND	build/Makefile	/^CMAKE_COMMAND = \/home\/xundaoxd\/.software\/cmake-3.26.5-linux-x86_64\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/_deps/imgui-proj-subbuild/Makefile	/^CMAKE_COMMAND = \/home\/xundaoxd\/.software\/cmake-3.26.5-linux-x86_64\/bin\/cmake$/;"	m
CMAKE_COMPILER_IS_GNUCC	build/CMakeFiles/3.26.5/CMakeCCompiler.cmake	/^set(CMAKE_COMPILER_IS_GNUCC 1)$/;"	v
CMAKE_COMPILER_IS_GNUCXX	build/CMakeFiles/3.26.5/CMakeCXXCompiler.cmake	/^set(CMAKE_COMPILER_IS_GNUCXX 1)$/;"	v
CMAKE_CROSSCOMPILING	build/CMakeFiles/3.26.5/CMakeSystem.cmake	/^set(CMAKE_CROSSCOMPILING "FALSE")$/;"	v
CMAKE_CROSSCOMPILING	build/_deps/imgui-proj-subbuild/CMakeFiles/3.26.5/CMakeSystem.cmake	/^set(CMAKE_CROSSCOMPILING "FALSE")$/;"	v
CMAKE_CROSSCOMPILING	build/_deps/imgui-proj-subbuild/cmake_install.cmake	/^  set(CMAKE_CROSSCOMPILING "FALSE")$/;"	v
CMAKE_CROSSCOMPILING	build/cmake_install.cmake	/^  set(CMAKE_CROSSCOMPILING "FALSE")$/;"	v
CMAKE_CXX11_COMPILE_FEATURES	build/CMakeFiles/3.26.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX11_COMPILE_FEATURES "cxx_std_11;cxx_alias_templates;cxx_alignas;cxx_alignof;cxx_att/;"	v
CMAKE_CXX14_COMPILE_FEATURES	build/CMakeFiles/3.26.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX14_COMPILE_FEATURES "cxx_std_14;cxx_aggregate_default_initializers;cxx_attribute_de/;"	v
CMAKE_CXX17_COMPILE_FEATURES	build/CMakeFiles/3.26.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX17_COMPILE_FEATURES "cxx_std_17")$/;"	v
CMAKE_CXX20_COMPILE_FEATURES	build/CMakeFiles/3.26.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX20_COMPILE_FEATURES "cxx_std_20")$/;"	v
CMAKE_CXX23_COMPILE_FEATURES	build/CMakeFiles/3.26.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX23_COMPILE_FEATURES "")$/;"	v
CMAKE_CXX98_COMPILE_FEATURES	build/CMakeFiles/3.26.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX98_COMPILE_FEATURES "cxx_std_98;cxx_template_template_parameters")$/;"	v
CMAKE_CXX_ABI_COMPILED	build/CMakeFiles/3.26.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_ABI_COMPILED TRUE)$/;"	v
CMAKE_CXX_BYTE_ORDER	build/CMakeFiles/3.26.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_BYTE_ORDER "LITTLE_ENDIAN")$/;"	v
CMAKE_CXX_CL_SHOWINCLUDES_PREFIX	build/CMakeFiles/3.26.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_CL_SHOWINCLUDES_PREFIX "")$/;"	v
CMAKE_CXX_COMPILER	build/CMakeFiles/3.26.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER "\/usr\/bin\/c++")$/;"	v
CMAKE_CXX_COMPILER_ABI	build/CMakeFiles/3.26.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_ABI "ELF")$/;"	v
CMAKE_CXX_COMPILER_AR	build/CMakeFiles/3.26.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_AR "\/usr\/bin\/gcc-ar-9")$/;"	v
CMAKE_CXX_COMPILER_ARG1	build/CMakeFiles/3.26.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_ARG1 "")$/;"	v
CMAKE_CXX_COMPILER_ENV_VAR	build/CMakeFiles/3.26.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_ENV_VAR "CXX")$/;"	v
CMAKE_CXX_COMPILER_FRONTEND_VARIANT	build/CMakeFiles/3.26.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_FRONTEND_VARIANT "GNU")$/;"	v
CMAKE_CXX_COMPILER_ID	build/CMakeFiles/3.26.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_ID "GNU")$/;"	v
CMAKE_CXX_COMPILER_ID_RUN	build/CMakeFiles/3.26.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_ID_RUN 1)$/;"	v
CMAKE_CXX_COMPILER_LOADED	build/CMakeFiles/3.26.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_LOADED 1)$/;"	v
CMAKE_CXX_COMPILER_RANLIB	build/CMakeFiles/3.26.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_RANLIB "\/usr\/bin\/gcc-ranlib-9")$/;"	v
CMAKE_CXX_COMPILER_VERSION	build/CMakeFiles/3.26.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_VERSION "9.4.0")$/;"	v
CMAKE_CXX_COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.26.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_VERSION_INTERNAL "")$/;"	v
CMAKE_CXX_COMPILER_WORKS	build/CMakeFiles/3.26.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_WORKS TRUE)$/;"	v
CMAKE_CXX_COMPILER_WRAPPER	build/CMakeFiles/3.26.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_WRAPPER "")$/;"	v
CMAKE_CXX_COMPILE_FEATURES	build/CMakeFiles/3.26.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILE_FEATURES "cxx_std_98;cxx_template_template_parameters;cxx_std_11;cxx_alias/;"	v
CMAKE_CXX_EXTENSIONS	build/_deps/imgui-proj-src/examples/example_android_opengl3/CMakeLists.txt	/^set(CMAKE_CXX_EXTENSIONS OFF)$/;"	v
CMAKE_CXX_EXTENSIONS_COMPUTED_DEFAULT	build/CMakeFiles/3.26.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_EXTENSIONS_COMPUTED_DEFAULT "ON")$/;"	v
CMAKE_CXX_FLAGS	CMakeLists.txt	/^set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -pipe")$/;"	v
CMAKE_CXX_FLAGS	build/_deps/imgui-proj-src/examples/example_glfw_vulkan/CMakeLists.txt	/^set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DVK_PROTOTYPES")$/;"	v
CMAKE_CXX_FLAGS_DEBUG	CMakeLists.txt	/^set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -O0 -rdynamic -fno-omit-frame-pointer -fno-o/;"	v
CMAKE_CXX_FLAGS_RELEASE	CMakeLists.txt	/^set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O3")$/;"	v
CMAKE_CXX_IGNORE_EXTENSIONS	build/CMakeFiles/3.26.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_IGNORE_EXTENSIONS inl;h;hpp;HPP;H;o;O;obj;OBJ;def;DEF;rc;RC)$/;"	v
CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES	build/CMakeFiles/3.26.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES "\/usr\/include\/c++\/9;\/usr\/include\/x86_64-linux-/;"	v
CMAKE_CXX_IMPLICIT_LINK_DIRECTORIES	build/CMakeFiles/3.26.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_IMPLICIT_LINK_DIRECTORIES "\/usr\/lib\/gcc\/x86_64-linux-gnu\/9;\/usr\/lib\/x86_64/;"	v
CMAKE_CXX_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES	build/CMakeFiles/3.26.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES "")$/;"	v
CMAKE_CXX_IMPLICIT_LINK_LIBRARIES	build/CMakeFiles/3.26.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_IMPLICIT_LINK_LIBRARIES "stdc++;m;gcc_s;gcc;c;gcc_s;gcc")$/;"	v
CMAKE_CXX_INCLUDE_REGEX_COMPLAIN	build/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_CXX_INCLUDE_REGEX_COMPLAIN ${CMAKE_C_INCLUDE_REGEX_COMPLAIN})$/;"	v
CMAKE_CXX_INCLUDE_REGEX_COMPLAIN	build/_deps/imgui-proj-subbuild/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_CXX_INCLUDE_REGEX_COMPLAIN ${CMAKE_C_INCLUDE_REGEX_COMPLAIN})$/;"	v
CMAKE_CXX_INCLUDE_REGEX_SCAN	build/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_CXX_INCLUDE_REGEX_SCAN ${CMAKE_C_INCLUDE_REGEX_SCAN})$/;"	v
CMAKE_CXX_INCLUDE_REGEX_SCAN	build/_deps/imgui-proj-subbuild/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_CXX_INCLUDE_REGEX_SCAN ${CMAKE_C_INCLUDE_REGEX_SCAN})$/;"	v
CMAKE_CXX_LIBRARY_ARCHITECTURE	build/CMakeFiles/3.26.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_LIBRARY_ARCHITECTURE "x86_64-linux-gnu")$/;"	v
CMAKE_CXX_LINKER_PREFERENCE	build/CMakeFiles/3.26.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_LINKER_PREFERENCE 30)$/;"	v
CMAKE_CXX_LINKER_PREFERENCE_PROPAGATES	build/CMakeFiles/3.26.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_LINKER_PREFERENCE_PROPAGATES 1)$/;"	v
CMAKE_CXX_PLATFORM_ID	build/CMakeFiles/3.26.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_PLATFORM_ID "Linux")$/;"	v
CMAKE_CXX_SIMULATE_ID	build/CMakeFiles/3.26.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_SIMULATE_ID "")$/;"	v
CMAKE_CXX_SIMULATE_VERSION	build/CMakeFiles/3.26.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_SIMULATE_VERSION "")$/;"	v
CMAKE_CXX_SIZEOF_DATA_PTR	build/CMakeFiles/3.26.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_SIZEOF_DATA_PTR "8")$/;"	v
CMAKE_CXX_SOURCE_FILE_EXTENSIONS	build/CMakeFiles/3.26.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_SOURCE_FILE_EXTENSIONS C;M;c++;cc;cpp;cxx;m;mm;mpp;CPP;ixx;cppm)$/;"	v
CMAKE_CXX_STANDARD	CMakeLists.txt	/^set(CMAKE_CXX_STANDARD 17 CACHE STRING "C++ standard to conform to")$/;"	v
CMAKE_CXX_STANDARD	build/_deps/imgui-proj-src/examples/example_android_opengl3/CMakeLists.txt	/^set(CMAKE_CXX_STANDARD 11)$/;"	v
CMAKE_CXX_STANDARD	build/_deps/imgui-proj-src/examples/example_glfw_vulkan/CMakeLists.txt	/^set(CMAKE_CXX_STANDARD 11)$/;"	v
CMAKE_CXX_STANDARD_COMPUTED_DEFAULT	build/CMakeFiles/3.26.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_STANDARD_COMPUTED_DEFAULT "14")$/;"	v
CMAKE_CXX_STANDARD_REQUIRED	CMakeLists.txt	/^set(CMAKE_CXX_STANDARD_REQUIRED ON CACHE BOOL "Require the specified C++ standard for all target/;"	v
CMAKE_CXX_STANDARD_REQUIRED	build/_deps/imgui-proj-src/examples/example_android_opengl3/CMakeLists.txt	/^set(CMAKE_CXX_STANDARD_REQUIRED ON)$/;"	v
CMAKE_C_ABI_COMPILED	build/CMakeFiles/3.26.5/CMakeCCompiler.cmake	/^set(CMAKE_C_ABI_COMPILED TRUE)$/;"	v
CMAKE_C_BYTE_ORDER	build/CMakeFiles/3.26.5/CMakeCCompiler.cmake	/^set(CMAKE_C_BYTE_ORDER "LITTLE_ENDIAN")$/;"	v
CMAKE_C_CL_SHOWINCLUDES_PREFIX	build/CMakeFiles/3.26.5/CMakeCCompiler.cmake	/^set(CMAKE_C_CL_SHOWINCLUDES_PREFIX "")$/;"	v
CMAKE_C_COMPILER	build/CMakeFiles/3.26.5/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER "\/usr\/bin\/cc")$/;"	v
CMAKE_C_COMPILER_ABI	build/CMakeFiles/3.26.5/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_ABI "ELF")$/;"	v
CMAKE_C_COMPILER_AR	build/CMakeFiles/3.26.5/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_AR "\/usr\/bin\/gcc-ar-9")$/;"	v
CMAKE_C_COMPILER_ARG1	build/CMakeFiles/3.26.5/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_ARG1 "")$/;"	v
CMAKE_C_COMPILER_ENV_VAR	build/CMakeFiles/3.26.5/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_ENV_VAR "CC")$/;"	v
CMAKE_C_COMPILER_FRONTEND_VARIANT	build/CMakeFiles/3.26.5/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_FRONTEND_VARIANT "GNU")$/;"	v
CMAKE_C_COMPILER_ID	build/CMakeFiles/3.26.5/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_ID "GNU")$/;"	v
CMAKE_C_COMPILER_ID_RUN	build/CMakeFiles/3.26.5/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_ID_RUN 1)$/;"	v
CMAKE_C_COMPILER_LOADED	build/CMakeFiles/3.26.5/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_LOADED 1)$/;"	v
CMAKE_C_COMPILER_RANLIB	build/CMakeFiles/3.26.5/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_RANLIB "\/usr\/bin\/gcc-ranlib-9")$/;"	v
CMAKE_C_COMPILER_VERSION	build/CMakeFiles/3.26.5/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_VERSION "9.4.0")$/;"	v
CMAKE_C_COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.26.5/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_VERSION_INTERNAL "")$/;"	v
CMAKE_C_COMPILER_WORKS	build/CMakeFiles/3.26.5/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_WORKS TRUE)$/;"	v
CMAKE_C_COMPILER_WRAPPER	build/CMakeFiles/3.26.5/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_WRAPPER "")$/;"	v
CMAKE_C_COMPILE_FEATURES	build/CMakeFiles/3.26.5/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILE_FEATURES "c_std_90;c_function_prototypes;c_std_99;c_restrict;c_variadic_macr/;"	v
CMAKE_C_EXTENSIONS_COMPUTED_DEFAULT	build/CMakeFiles/3.26.5/CMakeCCompiler.cmake	/^set(CMAKE_C_EXTENSIONS_COMPUTED_DEFAULT "ON")$/;"	v
CMAKE_C_FLAGS	build/_deps/imgui-proj-src/examples/example_glfw_vulkan/CMakeLists.txt	/^set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DVK_PROTOTYPES")$/;"	v
CMAKE_C_IGNORE_EXTENSIONS	build/CMakeFiles/3.26.5/CMakeCCompiler.cmake	/^set(CMAKE_C_IGNORE_EXTENSIONS h;H;o;O;obj;OBJ;def;DEF;rc;RC)$/;"	v
CMAKE_C_IMPLICIT_INCLUDE_DIRECTORIES	build/CMakeFiles/3.26.5/CMakeCCompiler.cmake	/^set(CMAKE_C_IMPLICIT_INCLUDE_DIRECTORIES "\/usr\/lib\/gcc\/x86_64-linux-gnu\/9\/include;\/usr\/l/;"	v
CMAKE_C_IMPLICIT_LINK_DIRECTORIES	build/CMakeFiles/3.26.5/CMakeCCompiler.cmake	/^set(CMAKE_C_IMPLICIT_LINK_DIRECTORIES "\/usr\/lib\/gcc\/x86_64-linux-gnu\/9;\/usr\/lib\/x86_64-l/;"	v
CMAKE_C_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES	build/CMakeFiles/3.26.5/CMakeCCompiler.cmake	/^set(CMAKE_C_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES "")$/;"	v
CMAKE_C_IMPLICIT_LINK_LIBRARIES	build/CMakeFiles/3.26.5/CMakeCCompiler.cmake	/^set(CMAKE_C_IMPLICIT_LINK_LIBRARIES "gcc;gcc_s;c;gcc;gcc_s")$/;"	v
CMAKE_C_INCLUDE_REGEX_COMPLAIN	build/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_C_INCLUDE_REGEX_COMPLAIN "^$")$/;"	v
CMAKE_C_INCLUDE_REGEX_COMPLAIN	build/_deps/imgui-proj-subbuild/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_C_INCLUDE_REGEX_COMPLAIN "^$")$/;"	v
CMAKE_C_INCLUDE_REGEX_SCAN	build/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_C_INCLUDE_REGEX_SCAN "^.*$")$/;"	v
CMAKE_C_INCLUDE_REGEX_SCAN	build/_deps/imgui-proj-subbuild/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_C_INCLUDE_REGEX_SCAN "^.*$")$/;"	v
CMAKE_C_LIBRARY_ARCHITECTURE	build/CMakeFiles/3.26.5/CMakeCCompiler.cmake	/^set(CMAKE_C_LIBRARY_ARCHITECTURE "x86_64-linux-gnu")$/;"	v
CMAKE_C_LINKER_PREFERENCE	build/CMakeFiles/3.26.5/CMakeCCompiler.cmake	/^set(CMAKE_C_LINKER_PREFERENCE 10)$/;"	v
CMAKE_C_PLATFORM_ID	build/CMakeFiles/3.26.5/CMakeCCompiler.cmake	/^set(CMAKE_C_PLATFORM_ID "Linux")$/;"	v
CMAKE_C_SIMULATE_ID	build/CMakeFiles/3.26.5/CMakeCCompiler.cmake	/^set(CMAKE_C_SIMULATE_ID "")$/;"	v
CMAKE_C_SIMULATE_VERSION	build/CMakeFiles/3.26.5/CMakeCCompiler.cmake	/^set(CMAKE_C_SIMULATE_VERSION "")$/;"	v
CMAKE_C_SIZEOF_DATA_PTR	build/CMakeFiles/3.26.5/CMakeCCompiler.cmake	/^set(CMAKE_C_SIZEOF_DATA_PTR "8")$/;"	v
CMAKE_C_SOURCE_FILE_EXTENSIONS	build/CMakeFiles/3.26.5/CMakeCCompiler.cmake	/^set(CMAKE_C_SOURCE_FILE_EXTENSIONS c;m)$/;"	v
CMAKE_C_STANDARD_COMPUTED_DEFAULT	build/CMakeFiles/3.26.5/CMakeCCompiler.cmake	/^set(CMAKE_C_STANDARD_COMPUTED_DEFAULT "17")$/;"	v
CMAKE_DEPENDS_DEPENDENCY_FILES	build/CMakeFiles/imgui.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_DEPENDENCY_FILES$/;"	v
CMAKE_DEPENDS_DEPENDENCY_FILES	build/CMakeFiles/neditor.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_DEPENDENCY_FILES$/;"	v
CMAKE_DEPENDS_DEPENDENCY_FILES	build/_deps/imgui-proj-subbuild/CMakeFiles/imgui-proj-populate.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_DEPENDENCY_FILES$/;"	v
CMAKE_DEPENDS_GENERATOR	build/CMakeFiles/Makefile.cmake	/^set(CMAKE_DEPENDS_GENERATOR "Unix Makefiles")$/;"	v
CMAKE_DEPENDS_GENERATOR	build/_deps/imgui-proj-subbuild/CMakeFiles/Makefile.cmake	/^set(CMAKE_DEPENDS_GENERATOR "Unix Makefiles")$/;"	v
CMAKE_DEPENDS_IN_PROJECT_ONLY	build/CMakeFiles/imgui.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_IN_PROJECT_ONLY OFF)$/;"	v
CMAKE_DEPENDS_IN_PROJECT_ONLY	build/CMakeFiles/neditor.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_IN_PROJECT_ONLY OFF)$/;"	v
CMAKE_DEPENDS_IN_PROJECT_ONLY	build/_deps/imgui-proj-subbuild/CMakeFiles/imgui-proj-populate.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_IN_PROJECT_ONLY OFF)$/;"	v
CMAKE_DEPENDS_LANGUAGES	build/CMakeFiles/imgui.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_LANGUAGES$/;"	v
CMAKE_DEPENDS_LANGUAGES	build/CMakeFiles/neditor.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_LANGUAGES$/;"	v
CMAKE_DEPENDS_LANGUAGES	build/_deps/imgui-proj-subbuild/CMakeFiles/imgui-proj-populate.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_LANGUAGES$/;"	v
CMAKE_DEPEND_INFO_FILES	build/CMakeFiles/Makefile.cmake	/^set(CMAKE_DEPEND_INFO_FILES$/;"	v
CMAKE_DEPEND_INFO_FILES	build/_deps/imgui-proj-subbuild/CMakeFiles/Makefile.cmake	/^set(CMAKE_DEPEND_INFO_FILES$/;"	v
CMAKE_FORCE_UNIX_PATHS	build/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_FORCE_UNIX_PATHS 1)$/;"	v
CMAKE_FORCE_UNIX_PATHS	build/_deps/imgui-proj-subbuild/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_FORCE_UNIX_PATHS 1)$/;"	v
CMAKE_Fortran_TARGET_LINKED_INFO_FILES	build/CMakeFiles/imgui.dir/DependInfo.cmake	/^set(CMAKE_Fortran_TARGET_LINKED_INFO_FILES$/;"	v
CMAKE_Fortran_TARGET_LINKED_INFO_FILES	build/CMakeFiles/neditor.dir/DependInfo.cmake	/^set(CMAKE_Fortran_TARGET_LINKED_INFO_FILES$/;"	v
CMAKE_Fortran_TARGET_LINKED_INFO_FILES	build/_deps/imgui-proj-subbuild/CMakeFiles/imgui-proj-populate.dir/DependInfo.cmake	/^set(CMAKE_Fortran_TARGET_LINKED_INFO_FILES$/;"	v
CMAKE_Fortran_TARGET_MODULE_DIR	build/CMakeFiles/imgui.dir/DependInfo.cmake	/^set(CMAKE_Fortran_TARGET_MODULE_DIR "")$/;"	v
CMAKE_Fortran_TARGET_MODULE_DIR	build/CMakeFiles/neditor.dir/DependInfo.cmake	/^set(CMAKE_Fortran_TARGET_MODULE_DIR "")$/;"	v
CMAKE_Fortran_TARGET_MODULE_DIR	build/_deps/imgui-proj-subbuild/CMakeFiles/imgui-proj-populate.dir/DependInfo.cmake	/^set(CMAKE_Fortran_TARGET_MODULE_DIR "")$/;"	v
CMAKE_HOST_SYSTEM	build/CMakeFiles/3.26.5/CMakeSystem.cmake	/^set(CMAKE_HOST_SYSTEM "Linux-5.15.0-94-generic")$/;"	v
CMAKE_HOST_SYSTEM	build/_deps/imgui-proj-subbuild/CMakeFiles/3.26.5/CMakeSystem.cmake	/^set(CMAKE_HOST_SYSTEM "Linux-5.15.0-94-generic")$/;"	v
CMAKE_HOST_SYSTEM_NAME	build/CMakeFiles/3.26.5/CMakeSystem.cmake	/^set(CMAKE_HOST_SYSTEM_NAME "Linux")$/;"	v
CMAKE_HOST_SYSTEM_NAME	build/_deps/imgui-proj-subbuild/CMakeFiles/3.26.5/CMakeSystem.cmake	/^set(CMAKE_HOST_SYSTEM_NAME "Linux")$/;"	v
CMAKE_HOST_SYSTEM_PROCESSOR	build/CMakeFiles/3.26.5/CMakeSystem.cmake	/^set(CMAKE_HOST_SYSTEM_PROCESSOR "x86_64")$/;"	v
CMAKE_HOST_SYSTEM_PROCESSOR	build/_deps/imgui-proj-subbuild/CMakeFiles/3.26.5/CMakeSystem.cmake	/^set(CMAKE_HOST_SYSTEM_PROCESSOR "x86_64")$/;"	v
CMAKE_HOST_SYSTEM_VERSION	build/CMakeFiles/3.26.5/CMakeSystem.cmake	/^set(CMAKE_HOST_SYSTEM_VERSION "5.15.0-94-generic")$/;"	v
CMAKE_HOST_SYSTEM_VERSION	build/_deps/imgui-proj-subbuild/CMakeFiles/3.26.5/CMakeSystem.cmake	/^set(CMAKE_HOST_SYSTEM_VERSION "5.15.0-94-generic")$/;"	v
CMAKE_INSTALL_COMPONENT	build/_deps/imgui-proj-subbuild/cmake_install.cmake	/^    set(CMAKE_INSTALL_COMPONENT "${COMPONENT}")$/;"	v
CMAKE_INSTALL_COMPONENT	build/_deps/imgui-proj-subbuild/cmake_install.cmake	/^    set(CMAKE_INSTALL_COMPONENT)$/;"	v
CMAKE_INSTALL_COMPONENT	build/cmake_install.cmake	/^    set(CMAKE_INSTALL_COMPONENT "${COMPONENT}")$/;"	v
CMAKE_INSTALL_COMPONENT	build/cmake_install.cmake	/^    set(CMAKE_INSTALL_COMPONENT)$/;"	v
CMAKE_INSTALL_CONFIG_NAME	build/_deps/imgui-proj-subbuild/cmake_install.cmake	/^    set(CMAKE_INSTALL_CONFIG_NAME "")$/;"	v
CMAKE_INSTALL_CONFIG_NAME	build/cmake_install.cmake	/^    set(CMAKE_INSTALL_CONFIG_NAME "")$/;"	v
CMAKE_INSTALL_MANIFEST	build/_deps/imgui-proj-subbuild/cmake_install.cmake	/^  set(CMAKE_INSTALL_MANIFEST "install_manifest.txt")$/;"	v
CMAKE_INSTALL_MANIFEST	build/_deps/imgui-proj-subbuild/cmake_install.cmake	/^  set(CMAKE_INSTALL_MANIFEST "install_manifest_${CMAKE_INSTALL_COMPONENT}.txt")$/;"	v
CMAKE_INSTALL_MANIFEST	build/cmake_install.cmake	/^  set(CMAKE_INSTALL_MANIFEST "install_manifest.txt")$/;"	v
CMAKE_INSTALL_MANIFEST	build/cmake_install.cmake	/^  set(CMAKE_INSTALL_MANIFEST "install_manifest_${CMAKE_INSTALL_COMPONENT}.txt")$/;"	v
CMAKE_INSTALL_PREFIX	build/_deps/imgui-proj-subbuild/cmake_install.cmake	/^  set(CMAKE_INSTALL_PREFIX "\/usr\/local")$/;"	v
CMAKE_INSTALL_PREFIX	build/cmake_install.cmake	/^  set(CMAKE_INSTALL_PREFIX "\/usr\/local")$/;"	v
CMAKE_INSTALL_SO_NO_EXE	build/_deps/imgui-proj-subbuild/cmake_install.cmake	/^  set(CMAKE_INSTALL_SO_NO_EXE "1")$/;"	v
CMAKE_INSTALL_SO_NO_EXE	build/cmake_install.cmake	/^  set(CMAKE_INSTALL_SO_NO_EXE "1")$/;"	v
CMAKE_INTERNAL_PLATFORM_ABI	build/CMakeFiles/3.26.5/CMakeCCompiler.cmake	/^  set(CMAKE_INTERNAL_PLATFORM_ABI "${CMAKE_C_COMPILER_ABI}")$/;"	v
CMAKE_INTERNAL_PLATFORM_ABI	build/CMakeFiles/3.26.5/CMakeCXXCompiler.cmake	/^  set(CMAKE_INTERNAL_PLATFORM_ABI "${CMAKE_CXX_COMPILER_ABI}")$/;"	v
CMAKE_LIBRARY_ARCHITECTURE	build/CMakeFiles/3.26.5/CMakeCCompiler.cmake	/^  set(CMAKE_LIBRARY_ARCHITECTURE "x86_64-linux-gnu")$/;"	v
CMAKE_LIBRARY_ARCHITECTURE	build/CMakeFiles/3.26.5/CMakeCXXCompiler.cmake	/^  set(CMAKE_LIBRARY_ARCHITECTURE "x86_64-linux-gnu")$/;"	v
CMAKE_LINKER	build/CMakeFiles/3.26.5/CMakeCCompiler.cmake	/^set(CMAKE_LINKER "\/usr\/bin\/ld")$/;"	v
CMAKE_LINKER	build/CMakeFiles/3.26.5/CMakeCXXCompiler.cmake	/^set(CMAKE_LINKER "\/usr\/bin\/ld")$/;"	v
CMAKE_MAKEFILE_DEPENDS	build/CMakeFiles/Makefile.cmake	/^set(CMAKE_MAKEFILE_DEPENDS$/;"	v
CMAKE_MAKEFILE_DEPENDS	build/_deps/imgui-proj-subbuild/CMakeFiles/Makefile.cmake	/^set(CMAKE_MAKEFILE_DEPENDS$/;"	v
CMAKE_MAKEFILE_OUTPUTS	build/CMakeFiles/Makefile.cmake	/^set(CMAKE_MAKEFILE_OUTPUTS$/;"	v
CMAKE_MAKEFILE_OUTPUTS	build/_deps/imgui-proj-subbuild/CMakeFiles/Makefile.cmake	/^set(CMAKE_MAKEFILE_OUTPUTS$/;"	v
CMAKE_MAKEFILE_PRODUCTS	build/CMakeFiles/Makefile.cmake	/^set(CMAKE_MAKEFILE_PRODUCTS$/;"	v
CMAKE_MAKEFILE_PRODUCTS	build/_deps/imgui-proj-subbuild/CMakeFiles/Makefile.cmake	/^set(CMAKE_MAKEFILE_PRODUCTS$/;"	v
CMAKE_MT	build/CMakeFiles/3.26.5/CMakeCCompiler.cmake	/^set(CMAKE_MT "")$/;"	v
CMAKE_MT	build/CMakeFiles/3.26.5/CMakeCXXCompiler.cmake	/^set(CMAKE_MT "")$/;"	v
CMAKE_OBJDUMP	build/cmake_install.cmake	/^  set(CMAKE_OBJDUMP "\/usr\/bin\/objdump")$/;"	v
CMAKE_RANLIB	build/CMakeFiles/3.26.5/CMakeCCompiler.cmake	/^set(CMAKE_RANLIB "\/usr\/bin\/ranlib")$/;"	v
CMAKE_RANLIB	build/CMakeFiles/3.26.5/CMakeCXXCompiler.cmake	/^set(CMAKE_RANLIB "\/usr\/bin\/ranlib")$/;"	v
CMAKE_RELATIVE_PATH_TOP_BINARY	build/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_RELATIVE_PATH_TOP_BINARY "\/home\/xundaoxd\/Workdir\/neditor\/build")$/;"	v
CMAKE_RELATIVE_PATH_TOP_BINARY	build/_deps/imgui-proj-subbuild/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_RELATIVE_PATH_TOP_BINARY "\/mnt\/data\/Workdir\/neditor\/build\/_deps\/imgui-proj-subb/;"	v
CMAKE_RELATIVE_PATH_TOP_SOURCE	build/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_RELATIVE_PATH_TOP_SOURCE "\/home\/xundaoxd\/Workdir\/neditor")$/;"	v
CMAKE_RELATIVE_PATH_TOP_SOURCE	build/_deps/imgui-proj-subbuild/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_RELATIVE_PATH_TOP_SOURCE "\/mnt\/data\/Workdir\/neditor\/build\/_deps\/imgui-proj-subb/;"	v
CMAKE_SHARED_LINKER_FLAGS	build/_deps/imgui-proj-src/examples/example_android_opengl3/CMakeLists.txt	/^set(CMAKE_SHARED_LINKER_FLAGS$/;"	v
CMAKE_SIZEOF_VOID_P	build/CMakeFiles/3.26.5/CMakeCCompiler.cmake	/^  set(CMAKE_SIZEOF_VOID_P "${CMAKE_C_SIZEOF_DATA_PTR}")$/;"	v
CMAKE_SIZEOF_VOID_P	build/CMakeFiles/3.26.5/CMakeCXXCompiler.cmake	/^  set(CMAKE_SIZEOF_VOID_P "${CMAKE_CXX_SIZEOF_DATA_PTR}")$/;"	v
CMAKE_SOURCE_DIR	build/Makefile	/^CMAKE_SOURCE_DIR = \/home\/xundaoxd\/Workdir\/neditor$/;"	m
CMAKE_SOURCE_DIR	build/_deps/imgui-proj-subbuild/Makefile	/^CMAKE_SOURCE_DIR = \/mnt\/data\/Workdir\/neditor\/build\/_deps\/imgui-proj-subbuild$/;"	m
CMAKE_SYSTEM	build/CMakeFiles/3.26.5/CMakeSystem.cmake	/^set(CMAKE_SYSTEM "Linux-5.15.0-94-generic")$/;"	v
CMAKE_SYSTEM	build/_deps/imgui-proj-subbuild/CMakeFiles/3.26.5/CMakeSystem.cmake	/^set(CMAKE_SYSTEM "Linux-5.15.0-94-generic")$/;"	v
CMAKE_SYSTEM_LOADED	build/CMakeFiles/3.26.5/CMakeSystem.cmake	/^set(CMAKE_SYSTEM_LOADED 1)$/;"	v
CMAKE_SYSTEM_LOADED	build/_deps/imgui-proj-subbuild/CMakeFiles/3.26.5/CMakeSystem.cmake	/^set(CMAKE_SYSTEM_LOADED 1)$/;"	v
CMAKE_SYSTEM_NAME	build/CMakeFiles/3.26.5/CMakeSystem.cmake	/^set(CMAKE_SYSTEM_NAME "Linux")$/;"	v
CMAKE_SYSTEM_NAME	build/_deps/imgui-proj-subbuild/CMakeFiles/3.26.5/CMakeSystem.cmake	/^set(CMAKE_SYSTEM_NAME "Linux")$/;"	v
CMAKE_SYSTEM_PROCESSOR	build/CMakeFiles/3.26.5/CMakeSystem.cmake	/^set(CMAKE_SYSTEM_PROCESSOR "x86_64")$/;"	v
CMAKE_SYSTEM_PROCESSOR	build/_deps/imgui-proj-subbuild/CMakeFiles/3.26.5/CMakeSystem.cmake	/^set(CMAKE_SYSTEM_PROCESSOR "x86_64")$/;"	v
CMAKE_SYSTEM_VERSION	build/CMakeFiles/3.26.5/CMakeSystem.cmake	/^set(CMAKE_SYSTEM_VERSION "5.15.0-94-generic")$/;"	v
CMAKE_SYSTEM_VERSION	build/_deps/imgui-proj-subbuild/CMakeFiles/3.26.5/CMakeSystem.cmake	/^set(CMAKE_SYSTEM_VERSION "5.15.0-94-generic")$/;"	v
COLUMNS_HIT_RECT_HALF_WIDTH	build/_deps/imgui-proj-src/imgui_tables.cpp	/^static const float COLUMNS_HIT_RECT_HALF_WIDTH = 4.0f;$/;"	v	typeref:typename:const float	file:
COMPILER_ID	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_ID /;"	d	file:
COMPILER_ID	build/CMakeFiles/3.26.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_ID /;"	d	file:
COMPILER_VERSION	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION /;"	d	file:
COMPILER_VERSION	build/CMakeFiles/3.26.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION /;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.26.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.26.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.26.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL_STR	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_INTERNAL_STR /;"	d	file:
COMPILER_VERSION_INTERNAL_STR	build/CMakeFiles/3.26.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_INTERNAL_STR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.26.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.26.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.26.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.26.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.26.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.26.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.26.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.26.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.26.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.26.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.26.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.26.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.26.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.26.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_TWEAK /;"	d	file:
CT_Button	build/_deps/imgui-proj-src/imgui_demo.cpp	/^        enum ContentsType { CT_ShowWidth, CT_ShortText, CT_LongText, CT_Button, CT_FillButton, C/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_Button	build/_deps/imgui-proj-src/imgui_demo.cpp	/^        enum ContentsType { CT_Text, CT_Button, CT_SmallButton, CT_FillButton, CT_Selectable, CT/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_FillButton	build/_deps/imgui-proj-src/imgui_demo.cpp	/^        enum ContentsType { CT_ShowWidth, CT_ShortText, CT_LongText, CT_Button, CT_FillButton, C/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_FillButton	build/_deps/imgui-proj-src/imgui_demo.cpp	/^        enum ContentsType { CT_Text, CT_Button, CT_SmallButton, CT_FillButton, CT_Selectable, CT/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_FillButton	build/_deps/imgui-proj-src/imgui_demo.cpp	/^        enum ContentsType { CT_Text, CT_FillButton };$/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_InputText	build/_deps/imgui-proj-src/imgui_demo.cpp	/^        enum ContentsType { CT_ShowWidth, CT_ShortText, CT_LongText, CT_Button, CT_FillButton, C/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_LongText	build/_deps/imgui-proj-src/imgui_demo.cpp	/^        enum ContentsType { CT_ShowWidth, CT_ShortText, CT_LongText, CT_Button, CT_FillButton, C/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_Selectable	build/_deps/imgui-proj-src/imgui_demo.cpp	/^        enum ContentsType { CT_Text, CT_Button, CT_SmallButton, CT_FillButton, CT_Selectable, CT/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_SelectableSpanRow	build/_deps/imgui-proj-src/imgui_demo.cpp	/^        enum ContentsType { CT_Text, CT_Button, CT_SmallButton, CT_FillButton, CT_Selectable, CT/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_ShortText	build/_deps/imgui-proj-src/imgui_demo.cpp	/^        enum ContentsType { CT_ShowWidth, CT_ShortText, CT_LongText, CT_Button, CT_FillButton, C/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_ShowWidth	build/_deps/imgui-proj-src/imgui_demo.cpp	/^        enum ContentsType { CT_ShowWidth, CT_ShortText, CT_LongText, CT_Button, CT_FillButton, C/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_SmallButton	build/_deps/imgui-proj-src/imgui_demo.cpp	/^        enum ContentsType { CT_Text, CT_Button, CT_SmallButton, CT_FillButton, CT_Selectable, CT/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_Text	build/_deps/imgui-proj-src/imgui_demo.cpp	/^        enum ContentsType { CT_Text, CT_Button, CT_SmallButton, CT_FillButton, CT_Selectable, CT/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_Text	build/_deps/imgui-proj-src/imgui_demo.cpp	/^        enum ContentsType { CT_Text, CT_FillButton };$/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CUSTOMVERTEX	build/_deps/imgui-proj-src/backends/imgui_impl_dx9.cpp	/^struct CUSTOMVERTEX$/;"	s	file:
CXXFLAGS	build/_deps/imgui-proj-src/examples/example_glfw_metal/Makefile	/^CXXFLAGS = -std=c++11 -I$(IMGUI_DIR) -I$(IMGUI_DIR)\/backends -I\/usr\/local\/include -I\/opt\/h/;"	m
CXXFLAGS	build/_deps/imgui-proj-src/examples/example_glfw_opengl2/Makefile	/^CXXFLAGS = -std=c++11 -I$(IMGUI_DIR) -I$(IMGUI_DIR)\/backends$/;"	m
CXXFLAGS	build/_deps/imgui-proj-src/examples/example_glfw_opengl3/Makefile	/^CXXFLAGS = -std=c++11 -I$(IMGUI_DIR) -I$(IMGUI_DIR)\/backends$/;"	m
CXXFLAGS	build/_deps/imgui-proj-src/examples/example_glut_opengl2/Makefile	/^CXXFLAGS = -std=c++11 -I$(IMGUI_DIR) -I$(IMGUI_DIR)\/backends$/;"	m
CXXFLAGS	build/_deps/imgui-proj-src/examples/example_sdl2_metal/Makefile	/^CXXFLAGS = -std=c++11 -I$(IMGUI_DIR) -I$(IMGUI_DIR)\/backends -I\/usr\/local\/include$/;"	m
CXXFLAGS	build/_deps/imgui-proj-src/examples/example_sdl2_opengl2/Makefile	/^CXXFLAGS = -std=c++11 -I$(IMGUI_DIR) -I$(IMGUI_DIR)\/backends$/;"	m
CXXFLAGS	build/_deps/imgui-proj-src/examples/example_sdl2_opengl3/Makefile	/^CXXFLAGS = -std=c++11 -I$(IMGUI_DIR) -I$(IMGUI_DIR)\/backends$/;"	m
CXXFLAGS	build/_deps/imgui-proj-src/examples/example_sdl2_sdlrenderer2/Makefile	/^CXXFLAGS = -std=c++11 -I$(IMGUI_DIR) -I$(IMGUI_DIR)\/backends$/;"	m
CXXFLAGS	build/_deps/imgui-proj-src/examples/example_sdl3_opengl3/Makefile	/^CXXFLAGS = -std=c++11 -I$(IMGUI_DIR) -I$(IMGUI_DIR)\/backends$/;"	m
CXXFLAGS	build/_deps/imgui-proj-src/examples/example_sdl3_sdlrenderer3/Makefile	/^CXXFLAGS = -std=c++11 -I$(IMGUI_DIR) -I$(IMGUI_DIR)\/backends$/;"	m
CXX_STD	build/CMakeFiles/3.26.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#      define CXX_STD /;"	d	file:
CXX_STD	build/CMakeFiles/3.26.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#    define CXX_STD /;"	d	file:
CXX_STD	build/CMakeFiles/3.26.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define CXX_STD /;"	d	file:
C_VERSION	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^#  define C_VERSION /;"	d	file:
C_VERSION	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^#  define C_VERSION$/;"	d	file:
C_VERSION	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^# define C_VERSION /;"	d	file:
CalcCustomRectUV	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImFontAtlas::CalcCustomRectUV(const ImFontAtlasCustomRect* rect, ImVec2* out_uv_min, ImVec2/;"	f	class:ImFontAtlas	typeref:typename:void
CalcDelayFromHoveredFlags	build/_deps/imgui-proj-src/imgui.cpp	/^static inline float CalcDelayFromHoveredFlags(ImGuiHoveredFlags flags)$/;"	f	typeref:typename:float	file:
CalcFontSize	build/_deps/imgui-proj-src/imgui_internal.h	/^    float       CalcFontSize() const    { ImGuiContext& g = *Ctx; float scale = g.FontBaseSize */;"	f	struct:ImGuiWindow	typeref:typename:float
CalcItemSize	build/_deps/imgui-proj-src/imgui.cpp	/^ImVec2 ImGui::CalcItemSize(ImVec2 size, float default_w, float default_h)$/;"	f	class:ImGui	typeref:typename:ImVec2
CalcItemWidth	build/_deps/imgui-proj-src/imgui.cpp	/^float ImGui::CalcItemWidth()$/;"	f	class:ImGui	typeref:typename:float
CalcMaxPopupHeightFromItemCount	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static float CalcMaxPopupHeightFromItemCount(int items_count)$/;"	f	typeref:typename:float	file:
CalcNextScrollFromScrollTargetAndClamp	build/_deps/imgui-proj-src/imgui.cpp	/^static ImVec2 CalcNextScrollFromScrollTargetAndClamp(ImGuiWindow* window)$/;"	f	typeref:typename:ImVec2	file:
CalcNextTotalWidth	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGuiMenuColumns::CalcNextTotalWidth(bool update_offsets)$/;"	f	class:ImGuiMenuColumns	typeref:typename:void
CalcResizePosSizeFromAnyCorner	build/_deps/imgui-proj-src/imgui.cpp	/^static void CalcResizePosSizeFromAnyCorner(ImGuiWindow* window, const ImVec2& corner_target, con/;"	f	typeref:typename:void	file:
CalcRoundingFlagsForRectInRect	build/_deps/imgui-proj-src/imgui_draw.cpp	/^ImDrawFlags ImGui::CalcRoundingFlagsForRectInRect(const ImRect& r_in, const ImRect& r_outer, flo/;"	f	class:ImGui	typeref:typename:ImDrawFlags
CalcRoutingScore	build/_deps/imgui-proj-src/imgui.cpp	/^static int CalcRoutingScore(ImGuiID focus_scope_id, ImGuiID owner_id, ImGuiInputFlags flags)$/;"	f	typeref:typename:int	file:
CalcScrollEdgeSnap	build/_deps/imgui-proj-src/imgui.cpp	/^static float CalcScrollEdgeSnap(float target, float snap_min, float snap_max, float snap_thresho/;"	f	typeref:typename:float	file:
CalcTextSize	build/_deps/imgui-proj-src/imgui.cpp	/^ImVec2 ImGui::CalcTextSize(const char* text, const char* text_end, bool hide_text_after_double_h/;"	f	class:ImGui	typeref:typename:ImVec2
CalcTextSizeA	build/_deps/imgui-proj-src/imgui_draw.cpp	/^ImVec2 ImFont::CalcTextSizeA(float size, float max_width, float wrap_width, const char* text_beg/;"	f	class:ImFont	typeref:typename:ImVec2
CalcTypematicRepeatAmount	build/_deps/imgui-proj-src/imgui.cpp	/^int ImGui::CalcTypematicRepeatAmount(float t0, float t1, float repeat_delay, float repeat_rate)$/;"	f	class:ImGui	typeref:typename:int
CalcWindowAutoFitSize	build/_deps/imgui-proj-src/imgui.cpp	/^static ImVec2 CalcWindowAutoFitSize(ImGuiWindow* window, const ImVec2& size_contents)$/;"	f	typeref:typename:ImVec2	file:
CalcWindowContentSizes	build/_deps/imgui-proj-src/imgui.cpp	/^static void CalcWindowContentSizes(ImGuiWindow* window, ImVec2* content_size_current, ImVec2* co/;"	f	typeref:typename:void	file:
CalcWindowMinSize	build/_deps/imgui-proj-src/imgui.cpp	/^static inline ImVec2 CalcWindowMinSize(ImGuiWindow* window)$/;"	f	typeref:typename:ImVec2	file:
CalcWindowNextAutoFitSize	build/_deps/imgui-proj-src/imgui.cpp	/^ImVec2 ImGui::CalcWindowNextAutoFitSize(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:ImVec2
CalcWindowSizeAfterConstraint	build/_deps/imgui-proj-src/imgui.cpp	/^static ImVec2 CalcWindowSizeAfterConstraint(ImGuiWindow* window, const ImVec2& size_desired)$/;"	f	typeref:typename:ImVec2	file:
CalcWordWrapNextLineStartA	build/_deps/imgui-proj-src/imgui_draw.cpp	/^static inline const char* CalcWordWrapNextLineStartA(const char* text, const char* text_end)$/;"	f	typeref:typename:const char *	file:
CalcWordWrapPositionA	build/_deps/imgui-proj-src/imgui_draw.cpp	/^const char* ImFont::CalcWordWrapPositionA(float scale, const char* text, const char* text_end, f/;"	f	class:ImFont	typeref:typename:const char *
CalcWorkRectPos	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2  CalcWorkRectPos(const ImVec2& off_min) const                            { return ImV/;"	f	struct:ImGuiViewportP	typeref:typename:ImVec2
CalcWorkRectSize	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2  CalcWorkRectSize(const ImVec2& off_min, const ImVec2& off_max) const    { return ImV/;"	f	struct:ImGuiViewportP	typeref:typename:ImVec2
CalcWrapWidthForPos	build/_deps/imgui-proj-src/imgui.cpp	/^float ImGui::CalcWrapWidthForPos(const ImVec2& pos, float wrap_pos_x)$/;"	f	class:ImGui	typeref:typename:float
CallContextHooks	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::CallContextHooks(ImGuiContext* ctx, ImGuiContextHookType hook_type)$/;"	f	class:ImGui	typeref:typename:void
Callback	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiContextHookCallback    Callback;$/;"	m	struct:ImGuiContextHook	typeref:typename:ImGuiContextHookCallback
CallbacksChainForAllWindows	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^    bool                    CallbacksChainForAllWindows;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:bool	file:
CannotSkipItemsQueue	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImU8                    CannotSkipItemsQueue;           \/\/ Queue of 8 values for the next /;"	m	struct:ImGuiTableColumn	typeref:typename:ImU8
CanvasSelector	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^    const char*             CanvasSelector;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:const char *	file:
Capacity	build/_deps/imgui-proj-src/imgui.h	/^    int                 Capacity;$/;"	m	struct:ImVector	typeref:typename:int
CaptureKeyboardFromApp	build/_deps/imgui-proj-src/imgui.h	/^    static inline void  CaptureKeyboardFromApp(bool want_capture_keyboard = true)           { Se/;"	f	namespace:ImGui	typeref:typename:void
CaptureMouseFromApp	build/_deps/imgui-proj-src/imgui.h	/^    static inline void  CaptureMouseFromApp(bool want_capture_mouse = true)                 { Se/;"	f	namespace:ImGui	typeref:typename:void
CellPadding	build/_deps/imgui-proj-src/imgui.h	/^    ImVec2      CellPadding;                \/\/ Padding within a table cell. CellPadding.y may /;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
CellPaddingX	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                       CellPaddingX;               \/\/ Padding from each borders. Lock/;"	m	struct:ImGuiTable	typeref:typename:float
CellSpacingX1	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                       CellSpacingX1;              \/\/ Spacing between non-bordered ce/;"	m	struct:ImGuiTable	typeref:typename:float
CellSpacingX2	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                       CellSpacingX2;$/;"	m	struct:ImGuiTable	typeref:typename:float
CentralNode	build/_deps/imgui-proj-src/imgui.cpp	/^    ImGuiDockNode*      CentralNode;$/;"	m	struct:ImGuiDockNodeTreeInfo	typeref:typename:ImGuiDockNode *	file:
CentralNode	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDockNode*          CentralNode;                \/\/ [Root node only] Pointer to central/;"	m	struct:ImGuiDockNode	typeref:typename:ImGuiDockNode *
ChainCallback	build/_deps/imgui-proj-src/misc/cpp/imgui_stdlib.cpp	/^    ImGuiInputTextCallback  ChainCallback;$/;"	m	struct:InputTextCallback_UserData	typeref:typename:ImGuiInputTextCallback	file:
ChainCallbackUserData	build/_deps/imgui-proj-src/misc/cpp/imgui_stdlib.cpp	/^    void*                   ChainCallbackUserData;$/;"	m	struct:InputTextCallback_UserData	typeref:typename:void *	file:
ChannelsCount	build/_deps/imgui-proj-src/imgui_tables.cpp	/^        int             ChannelsCount = 0;$/;"	m	struct:ImGui::TableMergeDrawChannels::MergeGroup	typeref:typename:int	file:
ChannelsMask	build/_deps/imgui-proj-src/imgui_tables.cpp	/^        ImBitArrayPtr   ChannelsMask = NULL;$/;"	m	struct:ImGui::TableMergeDrawChannels::MergeGroup	typeref:typename:ImBitArrayPtr	file:
ChannelsMerge	build/_deps/imgui-proj-src/imgui.h	/^    inline void     ChannelsMerge()             { _Splitter.Merge(this); }$/;"	f	struct:ImDrawList	typeref:typename:void
ChannelsSetCurrent	build/_deps/imgui-proj-src/imgui.h	/^    inline void     ChannelsSetCurrent(int n)   { _Splitter.SetCurrentChannel(this, n); }$/;"	f	struct:ImDrawList	typeref:typename:void
ChannelsSplit	build/_deps/imgui-proj-src/imgui.h	/^    inline void     ChannelsSplit(int count)    { _Splitter.Split(this, count); }$/;"	f	struct:ImDrawList	typeref:typename:void
Char	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiInputEventText          { unsigned int Char; };$/;"	m	struct:ImGuiInputEventText	typeref:typename:unsigned int
CheckProgram	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp	/^static bool CheckProgram(GLuint handle, const char* desc)$/;"	f	typeref:typename:bool	file:
CheckShader	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp	/^static bool CheckShader(GLuint handle, const char* desc)$/;"	f	typeref:typename:bool	file:
CheckVkResultFn	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.h	/^    void                            (*CheckVkResultFn)(VkResult err);$/;"	m	struct:ImGui_ImplVulkan_InitInfo	typeref:typename:void (*)(VkResult err)
Checkbox	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::Checkbox(const char* label, bool* v)$/;"	f	class:ImGui	typeref:typename:bool
CheckboxFlags	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::CheckboxFlags(const char* label, ImS64* flags, ImS64 flags_value)$/;"	f	class:ImGui	typeref:typename:bool
CheckboxFlags	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::CheckboxFlags(const char* label, ImU64* flags, ImU64 flags_value)$/;"	f	class:ImGui	typeref:typename:bool
CheckboxFlags	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::CheckboxFlags(const char* label, int* flags, int flags_value)$/;"	f	class:ImGui	typeref:typename:bool
CheckboxFlags	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::CheckboxFlags(const char* label, unsigned int* flags, unsigned int flags_value)$/;"	f	class:ImGui	typeref:typename:bool
CheckboxFlagsT	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::CheckboxFlagsT(const char* label, T* flags, T flags_value)$/;"	f	class:ImGui	typeref:typename:bool
ChildBorderSize	build/_deps/imgui-proj-src/imgui.h	/^    float       ChildBorderSize;            \/\/ Thickness of border around child windows. Gener/;"	m	struct:ImGuiStyle	typeref:typename:float
ChildCount	build/_deps/imgui-proj-src/imgui_demo.cpp	/^                int             ChildCount;$/;"	m	struct:ShowDemoWindowTables::MyTreeNode	typeref:typename:int	file:
ChildFlags	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiChildFlags             ChildFlags;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImGuiChildFlags
ChildFlags	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiChildFlags         ChildFlags;                         \/\/ Set when window is a child /;"	m	struct:ImGuiWindow	typeref:typename:ImGuiChildFlags
ChildId	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                 ChildId;                            \/\/ ID of corresponding item in/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiID
ChildIdx	build/_deps/imgui-proj-src/imgui_demo.cpp	/^                int             ChildIdx;$/;"	m	struct:ShowDemoWindowTables::MyTreeNode	typeref:typename:int	file:
ChildNodes	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDockNode*          ChildNodes[2];              \/\/ [Split node only] Child nodes (left/;"	m	struct:ImGuiDockNode	typeref:typename:ImGuiDockNode * [2]
ChildRounding	build/_deps/imgui-proj-src/imgui.h	/^    float       ChildRounding;              \/\/ Radius of child window corners rounding. Set to/;"	m	struct:ImGuiStyle	typeref:typename:float
ChildWindowComparer	build/_deps/imgui-proj-src/imgui.cpp	/^static int IMGUI_CDECL ChildWindowComparer(const void* lhs, const void* rhs)$/;"	f	typeref:typename:int IMGUI_CDECL	file:
ChildWindows	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVector<ImGuiWindow*>  ChildWindows;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVector<ImGuiWindow * >
CircleSegmentCounts	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImU8            CircleSegmentCounts[64];    \/\/ Precomputed segment count for given radius /;"	m	struct:ImDrawListSharedData	typeref:typename:ImU8[64]
CircleSegmentMaxError	build/_deps/imgui-proj-src/imgui_internal.h	/^    float           CircleSegmentMaxError;      \/\/ Number of circle segments to use per pixel /;"	m	struct:ImDrawListSharedData	typeref:typename:float
CircleTessellationMaxError	build/_deps/imgui-proj-src/imgui.h	/^    float       CircleTessellationMaxError; \/\/ Maximum error (in pixels) allowed when using Ad/;"	m	struct:ImGuiStyle	typeref:typename:float
ClampWindowPos	build/_deps/imgui-proj-src/imgui.cpp	/^static inline void ClampWindowPos(ImGuiWindow* window, const ImRect& visibility_rect)$/;"	f	typeref:typename:void	file:
ClassId	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiID             ClassId;                    \/\/ User data. 0 = Default class (unclassed/;"	m	struct:ImGuiWindowClass	typeref:typename:ImGuiID
ClassId	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID     ClassId;        \/\/ ID of window class if specified$/;"	m	struct:ImGuiWindowSettings	typeref:typename:ImGuiID
CleanupDeviceD3D	build/_deps/imgui-proj-src/examples/example_sdl2_directx11/main.cpp	/^void CleanupDeviceD3D()$/;"	f	typeref:typename:void
CleanupDeviceD3D	build/_deps/imgui-proj-src/examples/example_win32_directx10/main.cpp	/^void CleanupDeviceD3D()$/;"	f	typeref:typename:void
CleanupDeviceD3D	build/_deps/imgui-proj-src/examples/example_win32_directx11/main.cpp	/^void CleanupDeviceD3D()$/;"	f	typeref:typename:void
CleanupDeviceD3D	build/_deps/imgui-proj-src/examples/example_win32_directx12/main.cpp	/^void CleanupDeviceD3D()$/;"	f	typeref:typename:void
CleanupDeviceD3D	build/_deps/imgui-proj-src/examples/example_win32_directx9/main.cpp	/^void CleanupDeviceD3D()$/;"	f	typeref:typename:void
CleanupDeviceWGL	build/_deps/imgui-proj-src/examples/example_win32_opengl3/main.cpp	/^void CleanupDeviceWGL(HWND hWnd, WGL_WindowData* data)$/;"	f	typeref:typename:void
CleanupRenderTarget	build/_deps/imgui-proj-src/examples/example_sdl2_directx11/main.cpp	/^void CleanupRenderTarget()$/;"	f	typeref:typename:void
CleanupRenderTarget	build/_deps/imgui-proj-src/examples/example_win32_directx10/main.cpp	/^void CleanupRenderTarget()$/;"	f	typeref:typename:void
CleanupRenderTarget	build/_deps/imgui-proj-src/examples/example_win32_directx11/main.cpp	/^void CleanupRenderTarget()$/;"	f	typeref:typename:void
CleanupRenderTarget	build/_deps/imgui-proj-src/examples/example_win32_directx12/main.cpp	/^void CleanupRenderTarget()$/;"	f	typeref:typename:void
CleanupVulkan	build/_deps/imgui-proj-src/examples/example_glfw_vulkan/main.cpp	/^static void CleanupVulkan()$/;"	f	typeref:typename:void	file:
CleanupVulkan	build/_deps/imgui-proj-src/examples/example_sdl2_vulkan/main.cpp	/^static void CleanupVulkan()$/;"	f	typeref:typename:void	file:
CleanupVulkanWindow	build/_deps/imgui-proj-src/examples/example_glfw_vulkan/main.cpp	/^static void CleanupVulkanWindow()$/;"	f	typeref:typename:void	file:
CleanupVulkanWindow	build/_deps/imgui-proj-src/examples/example_sdl2_vulkan/main.cpp	/^static void CleanupVulkanWindow()$/;"	f	typeref:typename:void	file:
Clear	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^        PFNGLCLEARPROC                    Clear;$/;"	m	struct:ImGL3WProcs::__anon6bce6ebe0108	typeref:typename:PFNGLCLEARPROC
Clear	build/_deps/imgui-proj-src/imgui.h	/^    inline void                 Clear() { _Current = 0; _Count = 1; } \/\/ Do not clear Channels/;"	f	struct:ImDrawListSplitter	typeref:typename:void
Clear	build/_deps/imgui-proj-src/imgui.h	/^    inline void     Clear()                 { int size_in_bytes = (IM_UNICODE_CODEPOINT_MAX + 1)/;"	f	struct:ImFontGlyphRangesBuilder	typeref:typename:void
Clear	build/_deps/imgui-proj-src/imgui.h	/^    void                Clear()          { InputBuf[0] = 0; Build(); }$/;"	f	struct:ImGuiTextFilter	typeref:typename:void
Clear	build/_deps/imgui-proj-src/imgui.h	/^    void                Clear() { Data.clear(); }$/;"	f	struct:ImGuiStorage	typeref:typename:void
Clear	build/_deps/imgui-proj-src/imgui.h	/^    void Clear()    { SourceId = SourceParentId = 0; Data = NULL; DataSize = 0; memset(DataType,/;"	f	struct:ImGuiPayload	typeref:typename:void
Clear	build/_deps/imgui-proj-src/imgui_demo.cpp	/^    void    Clear()$/;"	f	struct:ExampleAppLog	typeref:typename:void	file:
Clear	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void    ImFontAtlas::Clear()$/;"	f	class:ImFontAtlas	typeref:typename:void
Clear	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImDrawData::Clear()$/;"	f	class:ImDrawData	typeref:typename:void
Clear	build/_deps/imgui-proj-src/imgui_internal.h	/^    void            Clear()                     { Storage.clear(); }$/;"	f	struct:ImBitVector	typeref:typename:void
Clear	build/_deps/imgui-proj-src/imgui_internal.h	/^    void            Clear()  { SearchBuffer[0] = 0; SingleCharModeLock = false; } \/\/ We preser/;"	f	struct:ImGuiTypingSelectState	typeref:typename:void
Clear	build/_deps/imgui-proj-src/imgui_internal.h	/^    void        Clear()                             { for (int n = 0; n < Map.Data.Size; n++) { /;"	f	struct:ImPool	typeref:typename:void
Clear	build/_deps/imgui-proj-src/imgui_internal.h	/^    void Clear()                    { for (int n = 0; n < IM_ARRAYSIZE(Index); n++) Index[n] = -/;"	f	struct:ImGuiKeyRoutingTable	typeref:typename:void
Clear	build/_deps/imgui-proj-src/imgui_internal.h	/^    void Clear()        { Window = NULL; ID = FocusScopeId = 0; InFlags = 0; SelectionUserData =/;"	f	struct:ImGuiNavItemData	typeref:typename:void
ClearActiveID	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::ClearActiveID()$/;"	f	class:ImGui	typeref:typename:void
ClearAllBits	build/_deps/imgui-proj-src/imgui_internal.h	/^    void            ClearAllBits()              { memset(Storage, 0, sizeof(Storage)); }$/;"	f	struct:ImBitArray	typeref:typename:void
ClearAllFn	build/_deps/imgui-proj-src/imgui_internal.h	/^    void        (*ClearAllFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler);                /;"	m	struct:ImGuiSettingsHandler	typeref:typename:void (*)(ImGuiContext * ctx,ImGuiSettingsHandler * handler)
ClearBit	build/_deps/imgui-proj-src/imgui_internal.h	/^    void            ClearBit(int n)             { IM_ASSERT(n < (Storage.Size << 5)); ImBitArray/;"	f	struct:ImBitVector	typeref:typename:void
ClearBit	build/_deps/imgui-proj-src/imgui_internal.h	/^    void            ClearBit(int n)             { n += OFFSET; IM_ASSERT(n >= 0 && n < BITCOUNT)/;"	f	struct:ImBitArray	typeref:typename:void
ClearColor	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^        PFNGLCLEARCOLORPROC               ClearColor;$/;"	m	struct:ImGL3WProcs::__anon6bce6ebe0108	typeref:typename:PFNGLCLEARCOLORPROC
ClearDragDrop	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::ClearDragDrop()$/;"	f	class:ImGui	typeref:typename:void
ClearEnable	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.h	/^    bool                ClearEnable;$/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:bool
ClearEventsQueue	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGuiIO::ClearEventsQueue()$/;"	f	class:ImGuiIO	typeref:typename:void
ClearFlags	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline void ClearFlags()    { Flags = ImGuiNextItemDataFlags_None; ItemFlags = ImGuiItemFlag/;"	f	struct:ImGuiNextItemData	typeref:typename:void
ClearFlags	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline void ClearFlags()    { Flags = ImGuiNextWindowDataFlags_None; }$/;"	f	struct:ImGuiNextWindowData	typeref:typename:void
ClearFonts	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void    ImFontAtlas::ClearFonts()$/;"	f	class:ImFontAtlas	typeref:typename:void
ClearFreeMemory	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImDrawListSplitter::ClearFreeMemory()$/;"	f	class:ImDrawListSplitter	typeref:typename:void
ClearFreeMemory	build/_deps/imgui-proj-src/imgui_internal.h	/^    void        ClearFreeMemory()           { TextW.clear(); TextA.clear(); InitialTextA.clear()/;"	f	struct:ImGuiInputTextState	typeref:typename:void
ClearFreeMemory	build/_deps/imgui-proj-src/imgui_internal.h	/^    void    ClearFreeMemory()           { ID = 0; TextA.clear(); }$/;"	f	struct:ImGuiInputTextDeactivatedState	typeref:typename:void
ClearIniSettings	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::ClearIniSettings()$/;"	f	class:ImGui	typeref:typename:void
ClearInputCharacters	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGuiIO::ClearInputCharacters()$/;"	f	class:ImGuiIO	typeref:typename:void
ClearInputData	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void    ImFontAtlas::ClearInputData()$/;"	f	class:ImFontAtlas	typeref:typename:void
ClearInputKeys	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGuiIO::ClearInputKeys()$/;"	f	class:ImGuiIO	typeref:typename:void
ClearLog	build/_deps/imgui-proj-src/imgui_demo.cpp	/^    void    ClearLog()$/;"	f	struct:ExampleAppConsole	typeref:typename:void	file:
ClearOutputData	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void    ImFont::ClearOutputData()$/;"	f	class:ImFont	typeref:typename:void
ClearRequestFlags	build/_deps/imgui-proj-src/imgui_internal.h	/^    void    ClearRequestFlags()         { PlatformRequestClose = PlatformRequestMove = PlatformR/;"	f	struct:ImGuiViewportP	typeref:typename:void
ClearSelection	build/_deps/imgui-proj-src/imgui.h	/^    void                ClearSelection()        { SelectionStart = SelectionEnd = BufTextLen; }$/;"	f	struct:ImGuiInputTextCallbackData	typeref:typename:void
ClearSelection	build/_deps/imgui-proj-src/imgui_internal.h	/^    void        ClearSelection()            { Stb.select_start = Stb.select_end = Stb.cursor; }$/;"	f	struct:ImGuiInputTextState	typeref:typename:void
ClearTexData	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void    ImFontAtlas::ClearTexData()$/;"	f	class:ImFontAtlas	typeref:typename:void
ClearText	build/_deps/imgui-proj-src/imgui_internal.h	/^    void        ClearText()                 { CurLenW = CurLenA = 0; TextW[0] = 0; TextA[0] = 0;/;"	f	struct:ImGuiInputTextState	typeref:typename:void
ClearValue	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.h	/^    VkClearValue        ClearValue;$/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:VkClearValue
ClearWindowSettings	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::ClearWindowSettings(const char* name)$/;"	f	class:ImGui	typeref:typename:void
ClientApi	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^    GlfwClientApi           ClientApi;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:GlfwClientApi	file:
ClipEnabled	build/_deps/imgui-proj-src/backends/imgui_impl_sdlrenderer2.cpp	/^        bool        ClipEnabled;$/;"	m	struct:ImGui_ImplSDLRenderer2_RenderDrawData::BackupSDLRendererState	typeref:typename:bool	file:
ClipEnabled	build/_deps/imgui-proj-src/backends/imgui_impl_sdlrenderer3.cpp	/^        bool        ClipEnabled;$/;"	m	struct:ImGui_ImplSDLRenderer3_RenderDrawData::BackupSDLRendererState	typeref:typename:bool	file:
ClipRect	build/_deps/imgui-proj-src/backends/imgui_impl_sdlrenderer2.cpp	/^        SDL_Rect    ClipRect;$/;"	m	struct:ImGui_ImplSDLRenderer2_RenderDrawData::BackupSDLRendererState	typeref:typename:SDL_Rect	file:
ClipRect	build/_deps/imgui-proj-src/backends/imgui_impl_sdlrenderer3.cpp	/^        SDL_Rect    ClipRect;$/;"	m	struct:ImGui_ImplSDLRenderer3_RenderDrawData::BackupSDLRendererState	typeref:typename:SDL_Rect	file:
ClipRect	build/_deps/imgui-proj-src/imgui.h	/^    ImVec4          ClipRect;           \/\/ 4*4  \/\/ Clipping rectangle (x1, y1, x2, y2). Subt/;"	m	struct:ImDrawCmd	typeref:typename:ImVec4
ClipRect	build/_deps/imgui-proj-src/imgui.h	/^    ImVec4          ClipRect;$/;"	m	struct:ImDrawCmdHeader	typeref:typename:ImVec4
ClipRect	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImRect                  ClipRect;                           \/\/ Current clipping\/scissorin/;"	m	struct:ImGuiWindow	typeref:typename:ImRect
ClipRect	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImRect                  ClipRect;                       \/\/ Clipping rectangle for the colu/;"	m	struct:ImGuiTableColumn	typeref:typename:ImRect
ClipRect	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImRect                  ClipRect;           \/\/ Clip rectangle at the time of submitting it/;"	m	struct:ImGuiLastItemData	typeref:typename:ImRect
ClipRect	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImRect              ClipRect;$/;"	m	struct:ImGuiOldColumnData	typeref:typename:ImRect
ClipRect	build/_deps/imgui-proj-src/imgui_tables.cpp	/^        ImRect          ClipRect;$/;"	m	struct:ImGui::TableMergeDrawChannels::MergeGroup	typeref:typename:ImRect	file:
ClipRectFullscreen	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec4          ClipRectFullscreen;         \/\/ Value for PushClipRectFullscreen()$/;"	m	struct:ImDrawListSharedData	typeref:typename:ImVec4
ClipWith	build/_deps/imgui-proj-src/imgui_internal.h	/^    void        ClipWith(const ImRect& r)           { Min = ImMax(Min, r.Min); Max = ImMin(Max, /;"	f	struct:ImRect	typeref:typename:void
ClipWithFull	build/_deps/imgui-proj-src/imgui_internal.h	/^    void        ClipWithFull(const ImRect& r)       { Min = ImClamp(Min, r.Min, r.Max); Max = Im/;"	f	struct:ImRect	typeref:typename:void
ClipboardHandlerData	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVector<char>          ClipboardHandlerData;               \/\/ If no custom clipboard hand/;"	m	struct:ImGuiContext	typeref:typename:ImVector<char>
ClipboardTextData	build/_deps/imgui-proj-src/backends/imgui_impl_allegro5.cpp	/^    char*                       ClipboardTextData;$/;"	m	struct:ImGui_ImplAllegro5_Data	typeref:typename:char *	file:
ClipboardTextData	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^    char*                   ClipboardTextData;$/;"	m	struct:ImGui_ImplSDL2_Data	typeref:typename:char *	file:
ClipboardTextData	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^    char*                   ClipboardTextData;$/;"	m	struct:ImGui_ImplSDL3_Data	typeref:typename:char *	file:
ClipboardUserData	build/_deps/imgui-proj-src/imgui.h	/^    void*       ClipboardUserData;$/;"	m	struct:ImGuiIO	typeref:typename:void *
ClipperTempData	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVector<ImGuiListClipperData>  ClipperTempData;$/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiListClipperData>
ClipperTempDataStacked	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                             ClipperTempDataStacked;$/;"	m	struct:ImGuiContext	typeref:typename:int
CloneOutput	build/_deps/imgui-proj-src/imgui_draw.cpp	/^ImDrawList* ImDrawList::CloneOutput() const$/;"	f	class:ImDrawList	typeref:typename:ImDrawList *
CloseButton	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::CloseButton(ImGuiID id, const ImVec2& pos)$/;"	f	class:ImGui	typeref:typename:bool
CloseCurrentPopup	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::CloseCurrentPopup()$/;"	f	class:ImGui	typeref:typename:void
CloseFont	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^    void FreeTypeFont::CloseFont()$/;"	f	class:__anon9c8900c20110::FreeTypeFont	typeref:typename:void
ClosePopupToLevel	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::ClosePopupToLevel(int remaining, bool restore_focus_to_window_under_popup)$/;"	f	class:ImGui	typeref:typename:void
ClosePopupsExceptModals	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::ClosePopupsExceptModals()$/;"	f	class:ImGui	typeref:typename:void
ClosePopupsOverWindow	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::ClosePopupsOverWindow(ImGuiWindow* ref_window, bool restore_focus_to_window_under_po/;"	f	class:ImGui	typeref:typename:void
CmdBuffer	build/_deps/imgui-proj-src/imgui.h	/^    ImVector<ImDrawCmd>     CmdBuffer;          \/\/ Draw commands. Typically 1 command = 1 GPU /;"	m	struct:ImDrawList	typeref:typename:ImVector<ImDrawCmd>
CmdLists	build/_deps/imgui-proj-src/imgui.h	/^    ImVector<ImDrawList*> CmdLists;         \/\/ Array of ImDrawList* to render. The ImDrawLists/;"	m	struct:ImDrawData	typeref:typename:ImVector<ImDrawList * >
CmdListsCount	build/_deps/imgui-proj-src/imgui.h	/^    int                 CmdListsCount;      \/\/ Number of ImDrawList* to render$/;"	m	struct:ImDrawData	typeref:typename:int
Codepoint	build/_deps/imgui-proj-src/imgui.h	/^    unsigned int    Codepoint : 30;     \/\/ 0x0000..0x10FFFF$/;"	m	struct:ImFontGlyph	typeref:typename:unsigned int:30
Codepoint	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^    uint32_t            Codepoint;$/;"	m	struct:ImFontBuildSrcGlyphFT	typeref:typename:uint32_t	file:
Col	build/_deps/imgui-proj-src/imgui.cpp	/^    struct KeyLayoutData { int Row, Col; const char* Label; ImGuiKey Key; };$/;"	m	struct:ImGui::DebugRenderKeyboardPreview::KeyLayoutData	typeref:typename:int	file:
Col	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiCol        Col;$/;"	m	struct:ImGuiColorMod	typeref:typename:ImGuiCol
Collaborate with your team	README.md	/^## Collaborate with your team$/;"	s
CollapseButton	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::CollapseButton(ImGuiID id, const ImVec2& pos, ImGuiDockNode* dock_node)$/;"	f	class:ImGui	typeref:typename:bool
Collapsed	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    Collapsed;                          \/\/ Set when collapsing window /;"	m	struct:ImGuiWindow	typeref:typename:bool
Collapsed	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool        Collapsed;$/;"	m	struct:ImGuiWindowSettings	typeref:typename:bool
Collapsed	imgui.ini	/^Collapsed=0$/;"	k	section:Window
CollapsedCond	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiCond                   CollapsedCond;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImGuiCond
CollapsedVal	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                        CollapsedVal;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:bool
CollapsingHeader	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::CollapsingHeader(const char* label, ImGuiTreeNodeFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
CollapsingHeader	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::CollapsingHeader(const char* label, bool* p_visible, ImGuiTreeNodeFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
Color	build/_deps/imgui-proj-src/imgui_demo.cpp	/^    ImVec4      Color;      \/\/ An arbitrary variable associated to the document$/;"	m	struct:MyDocument	typeref:typename:ImVec4	file:
ColorButton	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::ColorButton(const char* desc_id, const ImVec4& col, ImGuiColorEditFlags flags, const/;"	f	class:ImGui	typeref:typename:bool
ColorButtonPosition	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiDir    ColorButtonPosition;        \/\/ Side of the color button in the ColorEdit4 widg/;"	m	struct:ImGuiStyle	typeref:typename:ImGuiDir
ColorConvertFloat4ToU32	build/_deps/imgui-proj-src/imgui.cpp	/^ImU32 ImGui::ColorConvertFloat4ToU32(const ImVec4& in)$/;"	f	class:ImGui	typeref:typename:ImU32
ColorConvertHSVtoRGB	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::ColorConvertHSVtoRGB(float h, float s, float v, float& out_r, float& out_g, float& o/;"	f	class:ImGui	typeref:typename:void
ColorConvertRGBtoHSV	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::ColorConvertRGBtoHSV(float r, float g, float b, float& out_h, float& out_s, float& o/;"	f	class:ImGui	typeref:typename:void
ColorConvertU32ToFloat4	build/_deps/imgui-proj-src/imgui.cpp	/^ImVec4 ImGui::ColorConvertU32ToFloat4(ImU32 in)$/;"	f	class:ImGui	typeref:typename:ImVec4
ColorEdit3	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::ColorEdit3(const char* label, float col[3], ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
ColorEdit4	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::ColorEdit4(const char* label, float col[4], ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
ColorEditCurrentID	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                 ColorEditCurrentID;                 \/\/ Set temporarily while insid/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
ColorEditOptions	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiColorEditFlags     ColorEditOptions;                   \/\/ Store user options for colo/;"	m	struct:ImGuiContext	typeref:typename:ImGuiColorEditFlags
ColorEditOptionsPopup	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::ColorEditOptionsPopup(const float* col, ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:void
ColorEditRestoreH	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static void ColorEditRestoreH(const float* col, float* H)$/;"	f	typeref:typename:void	file:
ColorEditRestoreHS	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static void ColorEditRestoreHS(const float* col, float* H, float* S, float* V)$/;"	f	typeref:typename:void	file:
ColorEditSavedColor	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImU32                   ColorEditSavedColor;                \/\/ RGB value with alpha set to/;"	m	struct:ImGuiContext	typeref:typename:ImU32
ColorEditSavedHue	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   ColorEditSavedHue;                  \/\/ Backup of last Hue associat/;"	m	struct:ImGuiContext	typeref:typename:float
ColorEditSavedID	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                 ColorEditSavedID;                   \/\/ ID we are saving\/restoring/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
ColorEditSavedSat	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   ColorEditSavedSat;                  \/\/ Backup of last Saturation a/;"	m	struct:ImGuiContext	typeref:typename:float
ColorPicker3	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::ColorPicker3(const char* label, float col[3], ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
ColorPicker4	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::ColorPicker4(const char* label, float col[4], ImGuiColorEditFlags flags, const float/;"	f	class:ImGui	typeref:typename:bool
ColorPickerOptionsPopup	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::ColorPickerOptionsPopup(const float* ref_col, ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:void
ColorPickerRef	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec4                  ColorPickerRef;                     \/\/ Initial\/reference color at/;"	m	struct:ImGuiContext	typeref:typename:ImVec4
ColorStack	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVector<ImGuiColorMod>         ColorStack;                 \/\/ Stack for PushStyleColor()\//;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiColorMod>
ColorTooltip	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::ColorTooltip(const char* text, const float* col, ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:void
Colored	build/_deps/imgui-proj-src/imgui.h	/^    unsigned int    Colored : 1;        \/\/ Flag to indicate glyph is colored and should genera/;"	m	struct:ImFontGlyph	typeref:typename:unsigned int:1
Colorful glyphs/emojis	build/_deps/imgui-proj-src/misc/freetype/README.md	/^### Colorful glyphs\/emojis$/;"	S
Colors	build/_deps/imgui-proj-src/imgui.h	/^    ImVec4      Colors[ImGuiCol_COUNT];$/;"	m	struct:ImGuiStyle	typeref:typename:ImVec4[]
Colors	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImU32 Colors[ImGuiWindowDockStyleCol_COUNT];$/;"	m	struct:ImGuiWindowDockStyle	typeref:typename:ImU32[]
Column	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTableColumnIdx         Column;     \/\/ Column number$/;"	m	struct:ImGuiTableCellData	typeref:typename:ImGuiTableColumnIdx
ColumnIndex	build/_deps/imgui-proj-src/imgui.h	/^    ImS16                       ColumnIndex;        \/\/ Index of the column$/;"	m	struct:ImGuiTableColumnSortSpecs	typeref:typename:ImS16
ColumnUserID	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiID                     ColumnUserID;       \/\/ User id of the column (if specified by /;"	m	struct:ImGuiTableColumnSortSpecs	typeref:typename:ImGuiID
Columns	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImSpan<ImGuiTableColumn>    Columns;                    \/\/ Point within RawData[]$/;"	m	struct:ImGuiTable	typeref:typename:ImSpan<ImGuiTableColumn>
Columns	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVector<ImGuiOldColumnData> Columns;$/;"	m	struct:ImGuiOldColumns	typeref:typename:ImVector<ImGuiOldColumnData>
Columns	build/_deps/imgui-proj-src/imgui_tables.cpp	/^void ImGui::Columns(int columns_count, const char* id, bool border)$/;"	f	class:ImGui	typeref:typename:void
ColumnsAutoFitWidth	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                       ColumnsAutoFitWidth;        \/\/ Sum of ideal column width in or/;"	m	struct:ImGuiTable	typeref:typename:float
ColumnsCount	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTableColumnIdx         ColumnsCount;$/;"	m	struct:ImGuiTableSettings	typeref:typename:ImGuiTableColumnIdx
ColumnsCount	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                         ColumnsCount;               \/\/ Number of columns declared in B/;"	m	struct:ImGuiTable	typeref:typename:int
ColumnsCountMax	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTableColumnIdx         ColumnsCountMax;        \/\/ Maximum number of columns this sett/;"	m	struct:ImGuiTableSettings	typeref:typename:ImGuiTableColumnIdx
ColumnsEnabledCount	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTableColumnIdx         ColumnsEnabledCount;        \/\/ Number of enabled columns (<= C/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
ColumnsEnabledFixedCount	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTableColumnIdx         ColumnsEnabledFixedCount;   \/\/ Number of enabled columns (<= C/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
ColumnsGivenWidth	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                       ColumnsGivenWidth;          \/\/ Sum of current column width$/;"	m	struct:ImGuiTable	typeref:typename:float
ColumnsMinSpacing	build/_deps/imgui-proj-src/imgui.h	/^    float       ColumnsMinSpacing;          \/\/ Minimum horizontal spacing between two columns./;"	m	struct:ImGuiStyle	typeref:typename:float
ColumnsNames	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTextBuffer             ColumnsNames;               \/\/ Contiguous buffer holding colum/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTextBuffer
ColumnsOffset	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec1                  ColumnsOffset;          \/\/ Offset to the current column (if Column/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec1
ColumnsStorage	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVector<ImGuiOldColumns> ColumnsStorage;$/;"	m	struct:ImGuiWindow	typeref:typename:ImVector<ImGuiOldColumns>
ColumnsStretchSumWeights	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                       ColumnsStretchSumWeights;   \/\/ Sum of weight of all enabled st/;"	m	struct:ImGuiTable	typeref:typename:float
Combo	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::Combo(const char* label, int* current_item, bool (*old_getter)(void*, int, const cha/;"	f	class:ImGui	typeref:typename:bool
Combo	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::Combo(const char* label, int* current_item, const char* (*getter)(void* user_data, i/;"	f	class:ImGui	typeref:typename:bool
Combo	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::Combo(const char* label, int* current_item, const char* const items[], int items_cou/;"	f	class:ImGui	typeref:typename:bool
Combo	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::Combo(const char* label, int* current_item, const char* items_separated_by_zeros, in/;"	f	class:ImGui	typeref:typename:bool
ComboPreviewData	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiComboPreviewData   ComboPreviewData;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiComboPreviewData
CommandAllocator	build/_deps/imgui-proj-src/backends/imgui_impl_dx12.cpp	/^    ID3D12CommandAllocator*         CommandAllocator;$/;"	m	struct:ImGui_ImplDX12_FrameContext	typeref:typename:ID3D12CommandAllocator *	file:
CommandAllocator	build/_deps/imgui-proj-src/examples/example_win32_directx12/main.cpp	/^    ID3D12CommandAllocator* CommandAllocator;$/;"	m	struct:FrameContext	typeref:typename:ID3D12CommandAllocator *	file:
CommandBuffer	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.h	/^    VkCommandBuffer     CommandBuffer;$/;"	m	struct:ImGui_ImplVulkanH_Frame	typeref:typename:VkCommandBuffer
CommandList	build/_deps/imgui-proj-src/backends/imgui_impl_dx12.cpp	/^    ID3D12GraphicsCommandList*      CommandList;$/;"	m	struct:ImGui_ImplDX12_ViewportData	typeref:typename:ID3D12GraphicsCommandList *	file:
CommandPool	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.h	/^    VkCommandPool       CommandPool;$/;"	m	struct:ImGui_ImplVulkanH_Frame	typeref:typename:VkCommandPool
CommandQueue	build/_deps/imgui-proj-src/backends/imgui_impl_dx12.cpp	/^    ID3D12CommandQueue*             CommandQueue;$/;"	m	struct:ImGui_ImplDX12_ViewportData	typeref:typename:ID3D12CommandQueue *	file:
Commands	build/_deps/imgui-proj-src/imgui_demo.cpp	/^    ImVector<const char*> Commands;$/;"	m	struct:ExampleAppConsole	typeref:typename:ImVector<const char * >	file:
CommonBindGroup	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.cpp	/^    WGPUBindGroup       CommonBindGroup = nullptr;      \/\/ Resources bind-group to bind the co/;"	m	struct:RenderResources	typeref:typename:WGPUBindGroup	file:
CompareWithContextState	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGuiStackSizes::CompareWithContextState(ImGuiContext* ctx)$/;"	f	class:ImGuiStackSizes	typeref:typename:void
CompareWithSortSpecs	build/_deps/imgui-proj-src/imgui_demo.cpp	/^    static int IMGUI_CDECL CompareWithSortSpecs(const void* lhs, const void* rhs)$/;"	f	struct:__anon1b6430950210::MyItem	typeref:typename:int IMGUI_CDECL	file:
Comparison	build/_deps/imgui-proj-src/misc/freetype/README.md	/^### Comparison$/;"	S
CompileShader	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^        PFNGLCOMPILESHADERPROC            CompileShader;$/;"	m	struct:ImGL3WProcs::__anon6bce6ebe0108	typeref:typename:PFNGLCOMPILESHADERPROC
ConfigData	build/_deps/imgui-proj-src/imgui.h	/^    ImVector<ImFontConfig>      ConfigData;         \/\/ Configuration data$/;"	m	struct:ImFontAtlas	typeref:typename:ImVector<ImFontConfig>
ConfigData	build/_deps/imgui-proj-src/imgui.h	/^    const ImFontConfig*         ConfigData;         \/\/ 4-8   \/\/ in  \/\/            \/\/ Poi/;"	m	struct:ImFont	typeref:typename:const ImFontConfig *
ConfigDataCount	build/_deps/imgui-proj-src/imgui.h	/^    short                       ConfigDataCount;    \/\/ 2     \/\/ in  \/\/ ~ 1        \/\/ Num/;"	m	struct:ImFont	typeref:typename:short
ConfigDebugBeginReturnValueLoop	build/_deps/imgui-proj-src/imgui.h	/^    bool        ConfigDebugBeginReturnValueLoop;\/\/ = false          \/\/ Some calls to Begin()/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigDebugBeginReturnValueOnce	build/_deps/imgui-proj-src/imgui.h	/^    bool        ConfigDebugBeginReturnValueOnce;\/\/ = false          \/\/ First-time calls to B/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigDebugIgnoreFocusLoss	build/_deps/imgui-proj-src/imgui.h	/^    bool        ConfigDebugIgnoreFocusLoss;     \/\/ = false          \/\/ Ignore io.AddFocusEve/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigDebugIniSettings	build/_deps/imgui-proj-src/imgui.h	/^    bool        ConfigDebugIniSettings;         \/\/ = false          \/\/ Save .ini data with e/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigDebugIsDebuggerPresent	build/_deps/imgui-proj-src/imgui.h	/^    bool        ConfigDebugIsDebuggerPresent;   \/\/ = false          \/\/ Enable various tools /;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigDockingAlwaysTabBar	build/_deps/imgui-proj-src/imgui.h	/^    bool        ConfigDockingAlwaysTabBar;      \/\/ = false          \/\/ [BETA] [FIXME: This c/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigDockingNoSplit	build/_deps/imgui-proj-src/imgui.h	/^    bool        ConfigDockingNoSplit;           \/\/ = false          \/\/ Simplified docking mo/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigDockingTransparentPayload	build/_deps/imgui-proj-src/imgui.h	/^    bool        ConfigDockingTransparentPayload;\/\/ = false          \/\/ [BETA] Make window or/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigDockingWithShift	build/_deps/imgui-proj-src/imgui.h	/^    bool        ConfigDockingWithShift;         \/\/ = false          \/\/ Enable docking with h/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigDragClickToInputText	build/_deps/imgui-proj-src/imgui.h	/^    bool        ConfigDragClickToInputText;     \/\/ = false          \/\/ [BETA] Enable turning/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigFlags	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiConfigFlags   ConfigFlags;             \/\/ = 0              \/\/ See ImGuiConfigFlags_/;"	m	struct:ImGuiIO	typeref:typename:ImGuiConfigFlags
ConfigFlagsCurrFrame	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiConfigFlags        ConfigFlagsCurrFrame;               \/\/ = g.IO.ConfigFlags at the t/;"	m	struct:ImGuiContext	typeref:typename:ImGuiConfigFlags
ConfigFlagsLastFrame	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiConfigFlags        ConfigFlagsLastFrame;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiConfigFlags
ConfigInputTextCursorBlink	build/_deps/imgui-proj-src/imgui.h	/^    bool        ConfigInputTextCursorBlink;     \/\/ = true           \/\/ Enable blinking curso/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigInputTextEnterKeepActive	build/_deps/imgui-proj-src/imgui.h	/^    bool        ConfigInputTextEnterKeepActive; \/\/ = false          \/\/ [BETA] Pressing Enter/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigInputTrickleEventQueue	build/_deps/imgui-proj-src/imgui.h	/^    bool        ConfigInputTrickleEventQueue;   \/\/ = true           \/\/ Enable input queue tr/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigMacOSXBehaviors	build/_deps/imgui-proj-src/imgui.h	/^    bool        ConfigMacOSXBehaviors;          \/\/ = defined(__APPLE__) \/\/ OS X style: Text /;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigMemoryCompactTimer	build/_deps/imgui-proj-src/imgui.h	/^    float       ConfigMemoryCompactTimer;       \/\/ = 60.0f          \/\/ Timer (in seconds) to/;"	m	struct:ImGuiIO	typeref:typename:float
ConfigNavWindowingKeyNext	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiKeyChord           ConfigNavWindowingKeyNext;          \/\/ = ImGuiMod_Ctrl | ImGuiKey_/;"	m	struct:ImGuiContext	typeref:typename:ImGuiKeyChord
ConfigNavWindowingKeyPrev	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiKeyChord           ConfigNavWindowingKeyPrev;          \/\/ = ImGuiMod_Ctrl | ImGuiMod_/;"	m	struct:ImGuiContext	typeref:typename:ImGuiKeyChord
ConfigViewportsNoAutoMerge	build/_deps/imgui-proj-src/imgui.h	/^    bool        ConfigViewportsNoAutoMerge;     \/\/ = false;         \/\/ Set to make all float/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigViewportsNoDecoration	build/_deps/imgui-proj-src/imgui.h	/^    bool        ConfigViewportsNoDecoration;    \/\/ = true           \/\/ Disable default OS wi/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigViewportsNoDefaultParent	build/_deps/imgui-proj-src/imgui.h	/^    bool        ConfigViewportsNoDefaultParent; \/\/ = false          \/\/ Disable default OS pa/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigViewportsNoTaskBarIcon	build/_deps/imgui-proj-src/imgui.h	/^    bool        ConfigViewportsNoTaskBarIcon;   \/\/ = false          \/\/ Disable default OS ta/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigWindowsMoveFromTitleBarOnly	build/_deps/imgui-proj-src/imgui.h	/^    bool        ConfigWindowsMoveFromTitleBarOnly; \/\/ = false       \/\/ Enable allowing to mo/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigWindowsResizeFromEdges	build/_deps/imgui-proj-src/imgui.h	/^    bool        ConfigWindowsResizeFromEdges;   \/\/ = true           \/\/ Enable resizing of wi/;"	m	struct:ImGuiIO	typeref:typename:bool
Configuration	build/_deps/imgui-proj-src/examples/example_allegro5/README.md	/^# Configuration$/;"	c
ContainerAtlas	build/_deps/imgui-proj-src/imgui.h	/^    ImFontAtlas*                ContainerAtlas;     \/\/ 4-8   \/\/ out \/\/            \/\/ Wha/;"	m	struct:ImFont	typeref:typename:ImFontAtlas *
Contains	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool        Contains(const ImRect& r) const     { return r.Min.x >= Min.x && r.Min.y >= Min./;"	f	struct:ImRect	typeref:typename:bool
Contains	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool        Contains(const ImVec2& p) const     { return p.x     >= Min.x && p.y     >= Min./;"	f	struct:ImRect	typeref:typename:bool
Contains	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool        Contains(const T* p) const          { return (p >= Buf.Data && p < Buf.Data + Bu/;"	f	struct:ImPool	typeref:typename:bool
ContainsWithPad	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool        ContainsWithPad(const ImVec2& p, const ImVec2& pad) const { return p.x >= Min.x /;"	f	struct:ImRect	typeref:typename:bool
ContentMaxXFrozen	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   ContentMaxXFrozen;              \/\/ Contents maximum position for f/;"	m	struct:ImGuiTableColumn	typeref:typename:float
ContentMaxXHeadersIdeal	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   ContentMaxXHeadersIdeal;$/;"	m	struct:ImGuiTableColumn	typeref:typename:float
ContentMaxXHeadersUsed	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   ContentMaxXHeadersUsed;         \/\/ Contents maximum position for h/;"	m	struct:ImGuiTableColumn	typeref:typename:float
ContentMaxXUnfrozen	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   ContentMaxXUnfrozen;$/;"	m	struct:ImGuiTableColumn	typeref:typename:float
ContentRegionRect	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImRect                  ContentRegionRect;                  \/\/ FIXME: This is currently co/;"	m	struct:ImGuiWindow	typeref:typename:ImRect
ContentSize	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2                  ContentSize;                        \/\/ Size of contents\/scrollabl/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ContentSizeExplicit	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2                  ContentSizeExplicit;                \/\/ Size of contents\/scrollabl/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ContentSizeIdeal	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2                  ContentSizeIdeal;$/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ContentSizeVal	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2                      ContentSizeVal;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImVec2
ContentWidth	build/_deps/imgui-proj-src/imgui_internal.h	/^    float               ContentWidth;           \/\/ Width of label, stored during BeginTabItem(/;"	m	struct:ImGuiTabItem	typeref:typename:float
ContentsType	build/_deps/imgui-proj-src/imgui_demo.cpp	/^        enum ContentsType { CT_ShowWidth, CT_ShortText, CT_LongText, CT_Button, CT_FillButton, C/;"	g	function:ShowDemoWindowTables	file:
ContentsType	build/_deps/imgui-proj-src/imgui_demo.cpp	/^        enum ContentsType { CT_Text, CT_Button, CT_SmallButton, CT_FillButton, CT_Selectable, CT/;"	g	function:ShowDemoWindowTables	file:
ContentsType	build/_deps/imgui-proj-src/imgui_demo.cpp	/^        enum ContentsType { CT_Text, CT_FillButton };$/;"	g	function:ShowDemoWindowTables	file:
ContextPopupColumn	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTableColumnIdx         ContextPopupColumn;         \/\/ Column right-clicked on, of -1 /;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
Contributing	README.md	/^## Contributing$/;"	s
Contributing Guidelines	build/_deps/imgui-proj-src/docs/CONTRIBUTING.md	/^# Contributing Guidelines$/;"	c
ConvertNSRect	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^static void ConvertNSRect(NSRect* r)$/;"	f
ConvertSingleModFlagToKey	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline ImGuiKey         ConvertSingleModFlagToKey(ImGuiContext* ctx, ImGuiKey key)$/;"	f	namespace:ImGui	typeref:typename:ImGuiKey
CopyToClipboardLastTime	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   CopyToClipboardLastTime;$/;"	m	struct:ImGuiIDStackTool	typeref:typename:float
CopyToClipboardOnCtrlC	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    CopyToClipboardOnCtrlC;$/;"	m	struct:ImGuiIDStackTool	typeref:typename:bool
Copyright / Contributor License Agreement	build/_deps/imgui-proj-src/docs/CONTRIBUTING.md	/^## Copyright \/ Contributor License Agreement$/;"	s
CornerPosN	build/_deps/imgui-proj-src/imgui.cpp	/^    ImVec2  CornerPosN;$/;"	m	struct:ImGuiResizeGripDef	typeref:typename:ImVec2	file:
Count	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^    uint32_t            Count;$/;"	m	struct:ImGui_ImplVulkan_WindowRenderBuffers	typeref:typename:uint32_t	file:
Count	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImU32           Count;      \/\/ 1+$/;"	m	struct:ImGuiDataVarInfo	typeref:typename:ImU32
Count	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                 Count;$/;"	m	struct:ImGuiOldColumns	typeref:typename:int
CountChildNodes	build/_deps/imgui-proj-src/imgui.cpp	/^    int         CountWindows, CountChildWindows, CountChildNodes;$/;"	m	struct:ImGuiDockContextPruneNodeData	typeref:typename:int	file:
CountChildWindows	build/_deps/imgui-proj-src/imgui.cpp	/^    int         CountWindows, CountChildWindows, CountChildNodes;$/;"	m	struct:ImGuiDockContextPruneNodeData	typeref:typename:int	file:
CountGrep	build/_deps/imgui-proj-src/imgui.h	/^    int                     CountGrep;$/;"	m	struct:ImGuiTextFilter	typeref:typename:int
CountNodeWithWindows	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                     CountNodeWithWindows;       \/\/ [Root node only]$/;"	m	struct:ImGuiDockNode	typeref:typename:int
CountNodesWithWindows	build/_deps/imgui-proj-src/imgui.cpp	/^    int                 CountNodesWithWindows;$/;"	m	struct:ImGuiDockNodeTreeInfo	typeref:typename:int	file:
CountWindows	build/_deps/imgui-proj-src/imgui.cpp	/^    int         CountWindows, CountChildWindows, CountChildNodes;$/;"	m	struct:ImGuiDockContextPruneNodeData	typeref:typename:int	file:
Create	build/_deps/imgui-proj-src/imgui_internal.h	/^    void            Create(int sz)              { Storage.resize((sz + 31) >> 5); memset(Storage/;"	f	struct:ImBitVector	typeref:typename:void
CreateContext	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiContext* ImGui::CreateContext(ImFontAtlas* shared_font_atlas)$/;"	f	class:ImGui	typeref:typename:ImGuiContext *
CreateDeviceD3D	build/_deps/imgui-proj-src/examples/example_sdl2_directx11/main.cpp	/^bool CreateDeviceD3D(HWND hWnd)$/;"	f	typeref:typename:bool
CreateDeviceD3D	build/_deps/imgui-proj-src/examples/example_win32_directx10/main.cpp	/^bool CreateDeviceD3D(HWND hWnd)$/;"	f	typeref:typename:bool
CreateDeviceD3D	build/_deps/imgui-proj-src/examples/example_win32_directx11/main.cpp	/^bool CreateDeviceD3D(HWND hWnd)$/;"	f	typeref:typename:bool
CreateDeviceD3D	build/_deps/imgui-proj-src/examples/example_win32_directx12/main.cpp	/^bool CreateDeviceD3D(HWND hWnd)$/;"	f	typeref:typename:bool
CreateDeviceD3D	build/_deps/imgui-proj-src/examples/example_win32_directx9/main.cpp	/^bool CreateDeviceD3D(HWND hWnd)$/;"	f	typeref:typename:bool
CreateDeviceWGL	build/_deps/imgui-proj-src/examples/example_win32_opengl3/main.cpp	/^bool CreateDeviceWGL(HWND hWnd, WGL_WindowData* data)$/;"	f	typeref:typename:bool
CreateNewWindow	build/_deps/imgui-proj-src/imgui.cpp	/^static ImGuiWindow* CreateNewWindow(const char* name, ImGuiWindowFlags flags)$/;"	f	typeref:typename:ImGuiWindow *	file:
CreateNewWindowSettings	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiWindowSettings* ImGui::CreateNewWindowSettings(const char* name)$/;"	f	class:ImGui	typeref:typename:ImGuiWindowSettings *
CreateOrResizeBuffer	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^static void CreateOrResizeBuffer(VkBuffer& buffer, VkDeviceMemory& buffer_memory, VkDeviceSize& /;"	f	typeref:typename:void	file:
CreateProgram	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^        PFNGLCREATEPROGRAMPROC            CreateProgram;$/;"	m	struct:ImGL3WProcs::__anon6bce6ebe0108	typeref:typename:PFNGLCREATEPROGRAMPROC
CreateRenderTarget	build/_deps/imgui-proj-src/examples/example_sdl2_directx11/main.cpp	/^void CreateRenderTarget()$/;"	f	typeref:typename:void
CreateRenderTarget	build/_deps/imgui-proj-src/examples/example_win32_directx10/main.cpp	/^void CreateRenderTarget()$/;"	f	typeref:typename:void
CreateRenderTarget	build/_deps/imgui-proj-src/examples/example_win32_directx11/main.cpp	/^void CreateRenderTarget()$/;"	f	typeref:typename:void
CreateRenderTarget	build/_deps/imgui-proj-src/examples/example_win32_directx12/main.cpp	/^void CreateRenderTarget()$/;"	f	typeref:typename:void
CreateShader	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^        PFNGLCREATESHADERPROC             CreateShader;$/;"	m	struct:ImGL3WProcs::__anon6bce6ebe0108	typeref:typename:PFNGLCREATESHADERPROC
CreateSwapChain	build/_deps/imgui-proj-src/examples/example_emscripten_wgpu/main.cpp	/^static void CreateSwapChain(int width, int height)$/;"	f	typeref:typename:void	file:
Credits	build/_deps/imgui-proj-src/docs/README.md	/^Credits$/;"	s
Credits/Licenses For Fonts Included In Repository	build/_deps/imgui-proj-src/docs/FONTS.md	/^## Credits\/Licenses For Fonts Included In Repository$/;"	s
Ctx	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiContext*       Ctx;            \/\/ Parent UI context$/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:ImGuiContext *
Ctx	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiContext*   Ctx;                \/\/ Parent UI context$/;"	m	struct:ImGuiListClipper	typeref:typename:ImGuiContext *
Ctx	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiContext* Ctx;                              \/\/ Parent UI context (needs to be set expl/;"	m	struct:ImGuiIO	typeref:typename:ImGuiContext *
Ctx	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiContext*           Ctx;                                \/\/ Parent UI context (needs to/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiContext *
Ctx	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiContext*           Ctx;                    \/\/ parent UI context (needs to be set expl/;"	m	struct:ImGuiInputTextState	typeref:typename:ImGuiContext *
CurLenA	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                     CurLenW, CurLenA;       \/\/ we need to maintain our buffer length i/;"	m	struct:ImGuiInputTextState	typeref:typename:int
CurLenW	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                     CurLenW, CurLenA;       \/\/ we need to maintain our buffer length i/;"	m	struct:ImGuiInputTextState	typeref:typename:int
CurrFrameVisible	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                 CurrFrameVisible;$/;"	m	struct:ImGuiTabBar	typeref:typename:int
CurrIdx	build/_deps/imgui-proj-src/imgui_internal.h	/^    int     CurrIdx;$/;"	m	struct:ImSpanAllocator	typeref:typename:int
CurrLineSize	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2                  CurrLineSize;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
CurrLineTextBaseOffset	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   CurrLineTextBaseOffset; \/\/ Baseline offset (0.0f by default on a n/;"	m	struct:ImGuiWindowTempData	typeref:typename:float
CurrOff	build/_deps/imgui-proj-src/imgui_internal.h	/^    int     CurrOff;$/;"	m	struct:ImSpanAllocator	typeref:typename:int
CurrTabsContentsHeight	build/_deps/imgui-proj-src/imgui_internal.h	/^    float               CurrTabsContentsHeight;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
Current	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                 Current;$/;"	m	struct:ImGuiOldColumns	typeref:typename:int
CurrentColumn	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                         CurrentColumn;$/;"	m	struct:ImGuiTable	typeref:typename:int
CurrentColumns	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiOldColumns*        CurrentColumns;         \/\/ Current columns set$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiOldColumns *
CurrentDpiScale	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   CurrentDpiScale;                    \/\/ == CurrentViewport->DpiScal/;"	m	struct:ImGuiContext	typeref:typename:float
CurrentFocusScopeId	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                 CurrentFocusScopeId;                \/\/ Value for currently appendi/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
CurrentItemFlags	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiItemFlags          CurrentItemFlags;                   \/\/ Value for currently appendi/;"	m	struct:ImGuiContext	typeref:typename:ImGuiItemFlags
CurrentRow	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                         CurrentRow;$/;"	m	struct:ImGuiTable	typeref:typename:int
CurrentSize	build/_deps/imgui-proj-src/imgui.h	/^    ImVec2  CurrentSize;    \/\/ Read-only.   Current window size.$/;"	m	struct:ImGuiSizeCallbackData	typeref:typename:ImVec2
CurrentTabBar	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTabBar*                    CurrentTabBar;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiTabBar *
CurrentTabBarStack	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVector<ImGuiPtrOrIndex>       CurrentTabBarStack;$/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiPtrOrIndex>
CurrentTable	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTable*                     CurrentTable;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiTable *
CurrentTableIdx	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                     CurrentTableIdx;        \/\/ Current table index (into g.Tables)$/;"	m	struct:ImGuiWindowTempData	typeref:typename:int
CurrentViewport	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiViewportP*         CurrentViewport;                    \/\/ We track changes of viewpor/;"	m	struct:ImGuiContext	typeref:typename:ImGuiViewportP *
CurrentWindow	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiWindow*            CurrentWindow;                      \/\/ Window being drawn into$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
CurrentWindowStack	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVector<ImGuiWindowStackData> CurrentWindowStack;$/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiWindowStackData>
CursorAnim	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   CursorAnim;             \/\/ timer for cursor blink, reset on every /;"	m	struct:ImGuiInputTextState	typeref:typename:float
CursorAnimReset	build/_deps/imgui-proj-src/imgui_internal.h	/^    void        CursorAnimReset()           { CursorAnim = -0.30f; }                            /;"	f	struct:ImGuiInputTextState	typeref:typename:void
CursorClamp	build/_deps/imgui-proj-src/imgui_internal.h	/^    void        CursorClamp()               { Stb.cursor = ImMin(Stb.cursor, CurLenW); Stb.selec/;"	f	struct:ImGuiInputTextState	typeref:typename:void
CursorFollow	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    CursorFollow;           \/\/ set when we want scrolling to follow th/;"	m	struct:ImGuiInputTextState	typeref:typename:bool
CursorMaxPos	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2                  CursorMaxPos;           \/\/ Used to implicitly calculate ContentSiz/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
CursorPos	build/_deps/imgui-proj-src/imgui.h	/^    int                 CursorPos;      \/\/                                      \/\/ Read-writ/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:int
CursorPos	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2                  CursorPos;              \/\/ Current emitting position, in absolute /;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
CursorPosPrevLine	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2                  CursorPosPrevLine;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
CursorStartPos	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2                  CursorStartPos;         \/\/ Initial position after Begin(), general/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
CursorStartPosLossyness	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2                  CursorStartPosLossyness;\/\/ Record the loss of precision of CursorS/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
CurveTessellationTol	build/_deps/imgui-proj-src/imgui.h	/^    float       CurveTessellationTol;       \/\/ Tessellation tolerance when using PathBezierCur/;"	m	struct:ImGuiStyle	typeref:typename:float
CurveTessellationTol	build/_deps/imgui-proj-src/imgui_internal.h	/^    float           CurveTessellationTol;       \/\/ Tessellation tolerance when using PathBezie/;"	m	struct:ImDrawListSharedData	typeref:typename:float
CustomConstraints	build/_deps/imgui-proj-src/imgui_demo.cpp	/^    struct CustomConstraints$/;"	s	function:ShowExampleAppConstrainedResize	file:
CustomRects	build/_deps/imgui-proj-src/imgui.h	/^    ImVector<ImFontAtlasCustomRect> CustomRects;    \/\/ Rectangles for packing custom texture d/;"	m	struct:ImFontAtlas	typeref:typename:ImVector<ImFontAtlasCustomRect>
D3DFVF_CUSTOMVERTEX	build/_deps/imgui-proj-src/backends/imgui_impl_dx9.cpp	/^#define D3DFVF_CUSTOMVERTEX /;"	d	file:
DBT_DEVNODES_CHANGED	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^#define DBT_DEVNODES_CHANGED /;"	d	file:
DC	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiWindowTempData     DC;                                 \/\/ Temporary per-window data, /;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindowTempData
DEBUG_LOCATE_ITEM_COLOR	build/_deps/imgui-proj-src/imgui.cpp	/^static const ImU32 DEBUG_LOCATE_ITEM_COLOR = IM_COL32(0, 255, 0, 255);  \/\/ Green$/;"	v	typeref:typename:const ImU32	file:
DEC	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^#define DEC(/;"	d	file:
DEC	build/CMakeFiles/3.26.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define DEC(/;"	d	file:
DE_MULTIPLY	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^                #define DE_MULTIPLY(/;"	d	file:
DOCKING_HOST_DRAW_CHANNEL_BG	build/_deps/imgui-proj-src/imgui_internal.h	/^#define DOCKING_HOST_DRAW_CHANNEL_BG /;"	d
DOCKING_HOST_DRAW_CHANNEL_FG	build/_deps/imgui-proj-src/imgui_internal.h	/^#define DOCKING_HOST_DRAW_CHANNEL_FG /;"	d
DOCKING_TRANSPARENT_PAYLOAD_ALPHA	build/_deps/imgui-proj-src/imgui.cpp	/^static const float DOCKING_TRANSPARENT_PAYLOAD_ALPHA        = 0.50f;    \/\/ For use with io.Con/;"	v	typeref:typename:const float	file:
DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^#define DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE /;"	d	file:
DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE_V2	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^#define DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE_V2 /;"	d	file:
DRAGDROP_HOLD_TO_OPEN_TIMER	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static const float          DRAGDROP_HOLD_TO_OPEN_TIMER = 0.70f;    \/\/ Time for drag-hold to a/;"	v	typeref:typename:const float	file:
DRAG_MOUSE_THRESHOLD_FACTOR	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static const float          DRAG_MOUSE_THRESHOLD_FACTOR = 0.50f;    \/\/ Multiplier for the defa/;"	v	typeref:typename:const float	file:
DRAW_VERT_IMGUI_TO_ALLEGRO	build/_deps/imgui-proj-src/backends/imgui_impl_allegro5.cpp	/^#define DRAW_VERT_IMGUI_TO_ALLEGRO(/;"	d	file:
DX12_ENABLE_DEBUG_LAYER	build/_deps/imgui-proj-src/examples/example_win32_directx12/main.cpp	/^#define DX12_ENABLE_DEBUG_LAYER$/;"	d	file:
Data	build/_deps/imgui-proj-src/imgui.h	/^    ImVector<ImGuiStoragePair>      Data;$/;"	m	struct:ImGuiStorage	typeref:typename:ImVector<ImGuiStoragePair>
Data	build/_deps/imgui-proj-src/imgui.h	/^    T*                  Data;$/;"	m	struct:ImVector	typeref:typename:T *
Data	build/_deps/imgui-proj-src/imgui.h	/^    void*           Data;               \/\/ Data (copied and owned by dear imgui)$/;"	m	struct:ImGuiPayload	typeref:typename:void *
Data	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImU8        Data[8];        \/\/ Can fit any data up to ImGuiDataType_COUNT$/;"	m	struct:ImGuiDataTypeTempStorage	typeref:typename:ImU8[8]
Data	build/_deps/imgui-proj-src/imgui_internal.h	/^    T*                  Data;$/;"	m	struct:ImSpan	typeref:typename:T *
DataEnd	build/_deps/imgui-proj-src/imgui_internal.h	/^    T*                  DataEnd;$/;"	m	struct:ImSpan	typeref:typename:T *
DataFrameCount	build/_deps/imgui-proj-src/imgui.h	/^    int             DataFrameCount;     \/\/ Data timestamp$/;"	m	struct:ImGuiPayload	typeref:typename:int
DataSize	build/_deps/imgui-proj-src/imgui.h	/^    int             DataSize;           \/\/ Data size$/;"	m	struct:ImGuiPayload	typeref:typename:int
DataType	build/_deps/imgui-proj-src/imgui.h	/^    char            DataType[32 + 1];   \/\/ Data type tag (short user-supplied string, 32 chara/;"	m	struct:ImGuiPayload	typeref:typename:char[]
DataType	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDataType           DataType : 8;$/;"	m	struct:ImGuiStackLevelInfo	typeref:typename:ImGuiDataType:8
DataTypeApplyFromText	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::DataTypeApplyFromText(const char* buf, ImGuiDataType data_type, void* p_data, const /;"	f	class:ImGui	typeref:typename:bool
DataTypeApplyOp	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::DataTypeApplyOp(ImGuiDataType data_type, int op, void* output, const void* arg1, con/;"	f	class:ImGui	typeref:typename:void
DataTypeClamp	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::DataTypeClamp(ImGuiDataType data_type, void* p_data, const void* p_min, const void* /;"	f	class:ImGui	typeref:typename:bool
DataTypeClampT	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static bool DataTypeClampT(T* v, const T* v_min, const T* v_max)$/;"	f	typeref:typename:bool	file:
DataTypeCompare	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^int ImGui::DataTypeCompare(ImGuiDataType data_type, const void* arg_1, const void* arg_2)$/;"	f	class:ImGui	typeref:typename:int
DataTypeCompareT	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static int DataTypeCompareT(const T* lhs, const T* rhs)$/;"	f	typeref:typename:int	file:
DataTypeFormatString	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^int ImGui::DataTypeFormatString(char* buf, int buf_size, ImGuiDataType data_type, const void* p_/;"	f	class:ImGui	typeref:typename:int
DataTypeGetInfo	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^const ImGuiDataTypeInfo* ImGui::DataTypeGetInfo(ImGuiDataType data_type)$/;"	f	class:ImGui	typeref:typename:const ImGuiDataTypeInfo *
DeIndexAllBuffers	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImDrawData::DeIndexAllBuffers()$/;"	f	class:ImDrawData	typeref:typename:void
Dear ImGui	build/_deps/imgui-proj-src/docs/README.md	/^Dear ImGui$/;"	c
Dear ImGui: Backends	build/_deps/imgui-proj-src/docs/BACKENDS.md	/^## Dear ImGui: Backends$/;"	s
Dear ImGui: Examples	build/_deps/imgui-proj-src/docs/EXAMPLES.md	/^## Dear ImGui: Examples$/;"	s
Dear ImGui: Using Fonts	build/_deps/imgui-proj-src/docs/FONTS.md	/^## Dear ImGui: Using Fonts$/;"	s
Debug Tools	build/_deps/imgui-proj-src/docs/FONTS.md	/^## Debug Tools$/;"	s
DebugAllocHook	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DebugAllocHook(ImGuiDebugAllocInfo* info, int frame_count, void* ptr, size_t size)$/;"	f	class:ImGui	typeref:typename:void
DebugAllocInfo	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDebugAllocInfo     DebugAllocInfo;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDebugAllocInfo
DebugBeginReturnValueCullDepth	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImS8                    DebugBeginReturnValueCullDepth;     \/\/ Cycle between 0..9 then wra/;"	m	struct:ImGuiContext	typeref:typename:ImS8
DebugBreakButton	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::DebugBreakButton(const char* label, const char* description_of_location)$/;"	f	class:ImGui	typeref:typename:bool
DebugBreakButtonTooltip	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DebugBreakButtonTooltip(bool keyboard_only, const char* description_of_location)$/;"	f	class:ImGui	typeref:typename:void
DebugBreakClearData	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DebugBreakClearData()$/;"	f	class:ImGui	typeref:typename:void
DebugBreakInLocateId	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    DebugBreakInLocateId;               \/\/ Debug break in ItemAdd() ca/;"	m	struct:ImGuiContext	typeref:typename:bool
DebugBreakInShortcutRouting	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiKeyChord           DebugBreakInShortcutRouting;        \/\/ Set to break in SetShortcut/;"	m	struct:ImGuiContext	typeref:typename:ImGuiKeyChord
DebugBreakInTable	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                         DebugBreakInTable;          \/\/ Set to break in BeginTable(/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DebugBreakInWindow	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                 DebugBreakInWindow;                 \/\/ Set to break in Begin() cal/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DebugBreakKeyChord	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiKeyChord           DebugBreakKeyChord;                 \/\/ = ImGuiKey_Pause$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiKeyChord
DebugCheckVersionAndDataLayout	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::DebugCheckVersionAndDataLayout(const char* version, size_t sz_io, size_t sz_style, s/;"	f	class:ImGui	typeref:typename:bool
DebugDrawCursorPos	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DebugDrawCursorPos(ImU32 col)$/;"	f	class:ImGui	typeref:typename:void
DebugDrawItemRect	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DebugDrawItemRect(ImU32 col)$/;"	f	class:ImGui	typeref:typename:void
DebugDrawLineExtents	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DebugDrawLineExtents(ImU32 col)$/;"	f	class:ImGui	typeref:typename:void
DebugFlashStyleColor	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DebugFlashStyleColor(ImGuiCol idx)$/;"	f	class:ImGui	typeref:typename:void
DebugFlashStyleColorBackup	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec4                  DebugFlashStyleColorBackup;$/;"	m	struct:ImGuiContext	typeref:typename:ImVec4
DebugFlashStyleColorIdx	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiCol                        DebugFlashStyleColorIdx;    \/\/ (Keep close to ColorStack t/;"	m	struct:ImGuiContext	typeref:typename:ImGuiCol
DebugFlashStyleColorStop	build/_deps/imgui-proj-src/imgui.cpp	/^static void DebugFlashStyleColorStop()$/;"	f	typeref:typename:void	file:
DebugFlashStyleColorTime	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   DebugFlashStyleColorTime;$/;"	m	struct:ImGuiContext	typeref:typename:float
DebugHookIdInfo	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DebugHookIdInfo(ImGuiID id, ImGuiDataType data_type, const void* data_id, const void/;"	f	class:ImGui	typeref:typename:void
DebugHookIdInfo	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DebugHookIdInfo(ImGuiID, ImGuiDataType, const void*, const void*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugHookIdInfo	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                 DebugHookIdInfo;                    \/\/ Will call core hooks: Debug/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DebugHoveredDockNode	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDockNode*          DebugHoveredDockNode;               \/\/ Hovered dock node.$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDockNode *
DebugIDStackTool	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiIDStackTool        DebugIDStackTool;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiIDStackTool
DebugItemPickerActive	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    DebugItemPickerActive;              \/\/ Item picker is active (star/;"	m	struct:ImGuiContext	typeref:typename:bool
DebugItemPickerBreakId	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                 DebugItemPickerBreakId;             \/\/ Will call IM_DEBUG_BREAK() /;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DebugItemPickerMouseButton	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImU8                    DebugItemPickerMouseButton;$/;"	m	struct:ImGuiContext	typeref:typename:ImU8
DebugLocateFrames	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImU8                    DebugLocateFrames;                  \/\/ For DebugLocateItemOnHover(/;"	m	struct:ImGuiContext	typeref:typename:ImU8
DebugLocateId	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                 DebugLocateId;                      \/\/ Storage for DebugLocateItem/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DebugLocateItem	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DebugLocateItem(ImGuiID target_id)$/;"	f	class:ImGui	typeref:typename:void
DebugLocateItemOnHover	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DebugLocateItemOnHover(ImGuiID target_id)$/;"	f	class:ImGui	typeref:typename:void
DebugLocateItemResolveWithLastItem	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DebugLocateItemResolveWithLastItem()$/;"	f	class:ImGui	typeref:typename:void
DebugLog	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DebugLog(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
DebugLog	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DebugLog(const char*, ...) {}$/;"	f	class:ImGui	typeref:typename:void
DebugLogAutoDisableFlags	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDebugLogFlags      DebugLogAutoDisableFlags;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDebugLogFlags
DebugLogAutoDisableFrames	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImU8                    DebugLogAutoDisableFrames;$/;"	m	struct:ImGuiContext	typeref:typename:ImU8
DebugLogBuf	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTextBuffer         DebugLogBuf;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiTextBuffer
DebugLogFlags	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDebugLogFlags      DebugLogFlags;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDebugLogFlags
DebugLogIndex	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTextIndex          DebugLogIndex;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiTextIndex
DebugLogV	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DebugLogV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
DebugLogV	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DebugLogV(const char*, va_list) {}$/;"	f	class:ImGui	typeref:typename:void
DebugMetricsConfig	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiMetricsConfig      DebugMetricsConfig;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiMetricsConfig
DebugNodeColumns	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DebugNodeColumns(ImGuiOldColumns* columns)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeColumns	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DebugNodeColumns(ImGuiOldColumns*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeDockNode	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DebugNodeDockNode(ImGuiDockNode* node, const char* label)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeDockNodeFlags	build/_deps/imgui-proj-src/imgui.cpp	/^static void DebugNodeDockNodeFlags(ImGuiDockNodeFlags* p_flags, const char* label, bool enabled)$/;"	f	typeref:typename:void	file:
DebugNodeDrawCmdShowMeshAndBoundingBox	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DebugNodeDrawCmdShowMeshAndBoundingBox(ImDrawList* out_draw_list, const ImDrawList* /;"	f	class:ImGui	typeref:typename:void
DebugNodeDrawCmdShowMeshAndBoundingBox	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DebugNodeDrawCmdShowMeshAndBoundingBox(ImDrawList*, const ImDrawList*, const ImDrawC/;"	f	class:ImGui	typeref:typename:void
DebugNodeDrawList	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DebugNodeDrawList(ImGuiWindow* window, ImGuiViewportP* viewport, const ImDrawList* d/;"	f	class:ImGui	typeref:typename:void
DebugNodeDrawList	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DebugNodeDrawList(ImGuiWindow*, ImGuiViewportP*, const ImDrawList*, const char*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeFont	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DebugNodeFont(ImFont* font)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeFont	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DebugNodeFont(ImFont*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeFontGlyph	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DebugNodeFontGlyph(ImFont*, const ImFontGlyph* glyph)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeInputTextState	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::DebugNodeInputTextState(ImGuiInputTextState* state)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeStorage	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DebugNodeStorage(ImGuiStorage* storage, const char* label)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeStorage	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DebugNodeStorage(ImGuiStorage*, const char*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeTabBar	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DebugNodeTabBar(ImGuiTabBar* tab_bar, const char* label)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeTabBar	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DebugNodeTabBar(ImGuiTabBar*, const char*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeTable	build/_deps/imgui-proj-src/imgui_tables.cpp	/^void ImGui::DebugNodeTable(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeTable	build/_deps/imgui-proj-src/imgui_tables.cpp	/^void ImGui::DebugNodeTable(ImGuiTable*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeTableGetSizingPolicyDesc	build/_deps/imgui-proj-src/imgui_tables.cpp	/^static const char* DebugNodeTableGetSizingPolicyDesc(ImGuiTableFlags sizing_policy)$/;"	f	typeref:typename:const char *	file:
DebugNodeTableSettings	build/_deps/imgui-proj-src/imgui_tables.cpp	/^void ImGui::DebugNodeTableSettings(ImGuiTableSettings* settings)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeTableSettings	build/_deps/imgui-proj-src/imgui_tables.cpp	/^void ImGui::DebugNodeTableSettings(ImGuiTableSettings*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeTypingSelectState	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::DebugNodeTypingSelectState(ImGuiTypingSelectState* data)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeViewport	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DebugNodeViewport(ImGuiViewportP* viewport)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeViewport	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DebugNodeViewport(ImGuiViewportP*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeWindow	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DebugNodeWindow(ImGuiWindow* window, const char* label)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeWindow	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DebugNodeWindow(ImGuiWindow*, const char*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeWindowSettings	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DebugNodeWindowSettings(ImGuiWindowSettings* settings)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeWindowSettings	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DebugNodeWindowSettings(ImGuiWindowSettings*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeWindowsList	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DebugNodeWindowsList(ImVector<ImGuiWindow*>* windows, const char* label)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeWindowsList	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DebugNodeWindowsList(ImVector<ImGuiWindow*>*, const char*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeWindowsListByBeginStackParent	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DebugNodeWindowsListByBeginStackParent(ImGuiWindow** windows, int windows_size, ImGu/;"	f	class:ImGui	typeref:typename:void
DebugPrintInputEvent	build/_deps/imgui-proj-src/imgui.cpp	/^static void DebugPrintInputEvent(const char* prefix, const ImGuiInputEvent* e)$/;"	f	typeref:typename:void	file:
DebugRenderKeyboardPreview	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DebugRenderKeyboardPreview(ImDrawList* draw_list)$/;"	f	class:ImGui	typeref:typename:void
DebugRenderViewportThumbnail	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DebugRenderViewportThumbnail(ImDrawList* draw_list, ImGuiViewportP* viewport, const /;"	f	class:ImGui	typeref:typename:void
DebugShowGroupRects	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    DebugShowGroupRects;$/;"	m	struct:ImGuiContext	typeref:typename:bool
DebugStartItemPicker	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DebugStartItemPicker() {}$/;"	f	class:ImGui	typeref:typename:void
DebugStartItemPicker	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DebugStartItemPicker()$/;"	f	class:ImGui	typeref:typename:void
DebugTextEncoding	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DebugTextEncoding(const char* str)$/;"	f	class:ImGui	typeref:typename:void
DeclColumns	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^float ImGuiMenuColumns::DeclColumns(float w_icon, float w_label, float w_shortcut, float w_mark)$/;"	f	class:ImGuiMenuColumns	typeref:typename:float
DeclColumnsCount	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTableColumnIdx         DeclColumnsCount;           \/\/ Count calls to TableSetupColumn/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
DecoInnerSizeX1	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   DecoInnerSizeX1, DecoInnerSizeY1;   \/\/ Applied AFTER\/OVER InnerRe/;"	m	struct:ImGuiWindow	typeref:typename:float
DecoInnerSizeY1	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   DecoInnerSizeX1, DecoInnerSizeY1;   \/\/ Applied AFTER\/OVER InnerRe/;"	m	struct:ImGuiWindow	typeref:typename:float
DecoOuterSizeX1	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   DecoOuterSizeX1, DecoOuterSizeY1;   \/\/ Left\/Up offsets. Sum of no/;"	m	struct:ImGuiWindow	typeref:typename:float
DecoOuterSizeX2	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   DecoOuterSizeX2, DecoOuterSizeY2;   \/\/ Right\/Down offsets (X2 gen/;"	m	struct:ImGuiWindow	typeref:typename:float
DecoOuterSizeY1	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   DecoOuterSizeX1, DecoOuterSizeY1;   \/\/ Left\/Up offsets. Sum of no/;"	m	struct:ImGuiWindow	typeref:typename:float
DecoOuterSizeY2	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   DecoOuterSizeX2, DecoOuterSizeY2;   \/\/ Right\/Down offsets (X2 gen/;"	m	struct:ImGuiWindow	typeref:typename:float
Decode85	build/_deps/imgui-proj-src/imgui_draw.cpp	/^static void         Decode85(const unsigned char* src, unsigned char* dst)$/;"	f	typeref:typename:void	file:
Decode85Byte	build/_deps/imgui-proj-src/imgui_draw.cpp	/^static unsigned int Decode85Byte(char c)                                    { return c >= '\\\\'/;"	f	typeref:typename:unsigned int	file:
DeleteBuffers	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^        PFNGLDELETEBUFFERSPROC            DeleteBuffers;$/;"	m	struct:ImGL3WProcs::__anon6bce6ebe0108	typeref:typename:PFNGLDELETEBUFFERSPROC
DeleteChars	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGuiInputTextCallbackData::DeleteChars(int pos, int bytes_count)$/;"	f	class:ImGuiInputTextCallbackData	typeref:typename:void
DeleteProgram	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^        PFNGLDELETEPROGRAMPROC            DeleteProgram;$/;"	m	struct:ImGL3WProcs::__anon6bce6ebe0108	typeref:typename:PFNGLDELETEPROGRAMPROC
DeleteShader	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^        PFNGLDELETESHADERPROC             DeleteShader;$/;"	m	struct:ImGL3WProcs::__anon6bce6ebe0108	typeref:typename:PFNGLDELETESHADERPROC
DeleteTextures	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^        PFNGLDELETETEXTURESPROC           DeleteTextures;$/;"	m	struct:ImGL3WProcs::__anon6bce6ebe0108	typeref:typename:PFNGLDELETETEXTURESPROC
DeleteVertexArrays	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^        PFNGLDELETEVERTEXARRAYSPROC       DeleteVertexArrays;$/;"	m	struct:ImGL3WProcs::__anon6bce6ebe0108	typeref:typename:PFNGLDELETEVERTEXARRAYSPROC
Delivery	build/_deps/imgui-proj-src/imgui.h	/^    bool            Delivery;           \/\/ Set when AcceptDragDropPayload() was called and mou/;"	m	struct:ImGuiPayload	typeref:typename:bool
DeltaTime	build/_deps/imgui-proj-src/imgui.h	/^    float       DeltaTime;                      \/\/ = 1.0f\/60.0f     \/\/ Time elapsed since l/;"	m	struct:ImGuiIO	typeref:typename:float
Demo	build/_deps/imgui-proj-src/docs/README.md	/^### Demo$/;"	S
Depth	build/_deps/imgui-proj-src/imgui.cpp	/^    char                Depth;$/;"	m	struct:ImGuiDockNodeSettings	typeref:typename:char	file:
DepthStencilFormat	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.h	/^    WGPUTextureFormat       DepthStencilFormat = WGPUTextureFormat_Undefined;$/;"	m	struct:ImGui_ImplWGPU_InitInfo	typeref:typename:WGPUTextureFormat
DepthStencilState	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^        ID3D10DepthStencilState*    DepthStencilState;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:ID3D10DepthStencilState *	file:
DepthStencilState	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^        ID3D11DepthStencilState*    DepthStencilState;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:ID3D11DepthStencilState *	file:
Desc	build/_deps/imgui-proj-src/imgui_internal.h	/^    char                    Desc[57];                   \/\/ Arbitrarily sized buffer to hold a /;"	m	struct:ImGuiStackLevelInfo	typeref:typename:char[57]
Descender	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^        float       Descender;          \/\/ The extents below the baseline in pixels (typically/;"	m	struct:__anon9c8900c20110::FontInfo	typeref:typename:float	file:
Descent	build/_deps/imgui-proj-src/imgui.h	/^    float                       Ascent, Descent;    \/\/ 4+4   \/\/ out \/\/            \/\/ Asc/;"	m	struct:ImFont	typeref:typename:float
Description	README.md	/^## Description$/;"	s
DescriptorPool	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.h	/^    VkDescriptorPool                DescriptorPool;               \/\/ See requirements in note /;"	m	struct:ImGui_ImplVulkan_InitInfo	typeref:typename:VkDescriptorPool
DescriptorSetLayout	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^    VkDescriptorSetLayout       DescriptorSetLayout;$/;"	m	struct:ImGui_ImplVulkan_Data	typeref:typename:VkDescriptorSetLayout	file:
DesiredSize	build/_deps/imgui-proj-src/imgui.h	/^    ImVec2  DesiredSize;    \/\/ Read-write.  Desired size, based on user's mouse position. Writ/;"	m	struct:ImGuiSizeCallbackData	typeref:typename:ImVec2
DestroyContext	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DestroyContext(ImGuiContext* ctx)$/;"	f	class:ImGui	typeref:typename:void
DestroyPlatformWindow	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DestroyPlatformWindow(ImGuiViewportP* viewport)$/;"	f	class:ImGui	typeref:typename:void
DestroyPlatformWindows	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DestroyPlatformWindows()$/;"	f	class:ImGui	typeref:typename:void
DestroyViewport	build/_deps/imgui-proj-src/imgui.cpp	/^static void ImGui::DestroyViewport(ImGuiViewportP* viewport)$/;"	f	class:ImGui	typeref:typename:void	file:
DetachShader	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^        PFNGLDETACHSHADERPROC             DetachShader;$/;"	m	struct:ImGL3WProcs::__anon6bce6ebe0108	typeref:typename:PFNGLDETACHSHADERPROC
Device	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.h	/^    VkDevice                        Device;$/;"	m	struct:ImGui_ImplVulkan_InitInfo	typeref:typename:VkDevice
Device	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.h	/^    WGPUDevice              Device;$/;"	m	struct:ImGui_ImplWGPU_InitInfo	typeref:typename:WGPUDevice
DimBgRatio	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   DimBgRatio;                         \/\/ 0.0..1.0 animation when fad/;"	m	struct:ImGuiContext	typeref:typename:float
Dirty	build/_deps/imgui-proj-src/imgui_demo.cpp	/^    bool        Dirty;      \/\/ Set when the document has been modified$/;"	m	struct:MyDocument	typeref:typename:bool	file:
DirtyLookupTables	build/_deps/imgui-proj-src/imgui.h	/^    bool                        DirtyLookupTables;  \/\/ 1     \/\/ out \/\/$/;"	m	struct:ImFont	typeref:typename:bool
Disable	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^        PFNGLDISABLEPROC                  Disable;$/;"	m	struct:ImGL3WProcs::__anon6bce6ebe0108	typeref:typename:PFNGLDISABLEPROC
DisableDefaultContextMenu	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                        DisableDefaultContextMenu;  \/\/ Disable default context menu co/;"	m	struct:ImGuiTable	typeref:typename:bool
DisableInputsFrames	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImS8                    DisableInputsFrames;                \/\/ Disable window interactions/;"	m	struct:ImGuiWindow	typeref:typename:ImS8
DisableVertexAttribArray	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^        PFNGLDISABLEVERTEXATTRIBARRAYPROC DisableVertexAttribArray;$/;"	m	struct:ImGL3WProcs::__anon6bce6ebe0108	typeref:typename:PFNGLDISABLEVERTEXATTRIBARRAYPROC
DisabledAlpha	build/_deps/imgui-proj-src/imgui.h	/^    float       DisabledAlpha;              \/\/ Additional alpha multiplier applied by BeginDis/;"	m	struct:ImGuiStyle	typeref:typename:float
DisabledAlphaBackup	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   DisabledAlphaBackup;                \/\/ Backup for style.Alpha for /;"	m	struct:ImGuiContext	typeref:typename:float
DisabledStackSize	build/_deps/imgui-proj-src/imgui_internal.h	/^    short                   DisabledStackSize;$/;"	m	struct:ImGuiContext	typeref:typename:short
Display	build/_deps/imgui-proj-src/backends/imgui_impl_allegro5.cpp	/^    ALLEGRO_DISPLAY*            Display;$/;"	m	struct:ImGui_ImplAllegro5_Data	typeref:typename:ALLEGRO_DISPLAY *	file:
DisplayContents	build/_deps/imgui-proj-src/imgui_demo.cpp	/^    static void DisplayContents(MyDocument* doc)$/;"	f	struct:MyDocument	typeref:typename:void	file:
DisplayContextMenu	build/_deps/imgui-proj-src/imgui_demo.cpp	/^    static void DisplayContextMenu(MyDocument* doc)$/;"	f	struct:MyDocument	typeref:typename:void	file:
DisplayEnd	build/_deps/imgui-proj-src/imgui.h	/^    int             DisplayEnd;         \/\/ End of items to display (exclusive)$/;"	m	struct:ImGuiListClipper	typeref:typename:int
DisplayFramebufferScale	build/_deps/imgui-proj-src/imgui.h	/^    ImVec2      DisplayFramebufferScale;        \/\/ = (1, 1)         \/\/ For retina display or/;"	m	struct:ImGuiIO	typeref:typename:ImVec2
DisplayNode	build/_deps/imgui-proj-src/imgui_demo.cpp	/^                static void DisplayNode(const MyTreeNode* node, const MyTreeNode* all_nodes)$/;"	f	struct:ShowDemoWindowTables::MyTreeNode	typeref:typename:void	file:
DisplayOrder	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTableColumnIdx     DisplayOrder;                   \/\/ Index within Table's IndexToDis/;"	m	struct:ImGuiTableColumn	typeref:typename:ImGuiTableColumnIdx
DisplayOrder	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTableColumnIdx     DisplayOrder;$/;"	m	struct:ImGuiTableColumnSettings	typeref:typename:ImGuiTableColumnIdx
DisplayOrderToIndex	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImSpan<ImGuiTableColumnIdx> DisplayOrderToIndex;        \/\/ Point within RawData[]. Store d/;"	m	struct:ImGuiTable	typeref:typename:ImSpan<ImGuiTableColumnIdx>
DisplayPos	build/_deps/imgui-proj-src/imgui.h	/^    ImVec2              DisplayPos;         \/\/ Top-left position of the viewport to render (==/;"	m	struct:ImDrawData	typeref:typename:ImVec2
DisplayRect	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImRect                  DisplayRect;        \/\/ Display rectangle (ONLY VALID IF ImGuiItemS/;"	m	struct:ImGuiLastItemData	typeref:typename:ImRect
DisplaySafeAreaPadding	build/_deps/imgui-proj-src/imgui.h	/^    ImVec2      DisplaySafeAreaPadding;     \/\/ If you cannot see the edges of your screen (e.g/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
DisplaySize	build/_deps/imgui-proj-src/imgui.h	/^    ImVec2              DisplaySize;        \/\/ Size of the viewport to render (== GetMainViewp/;"	m	struct:ImDrawData	typeref:typename:ImVec2
DisplaySize	build/_deps/imgui-proj-src/imgui.h	/^    ImVec2      DisplaySize;                    \/\/ <unset>          \/\/ Main display size, in/;"	m	struct:ImGuiIO	typeref:typename:ImVec2
DisplayStart	build/_deps/imgui-proj-src/imgui.h	/^    int             DisplayStart;       \/\/ First item to display, updated by each call to Step/;"	m	struct:ImGuiListClipper	typeref:typename:int
DisplayWindowPadding	build/_deps/imgui-proj-src/imgui.h	/^    ImVec2      DisplayWindowPadding;       \/\/ Window position are clamped to be visible withi/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
DistAxial	build/_deps/imgui-proj-src/imgui_internal.h	/^    float               DistAxial;      \/\/      Move    \/\/ Best candidate axial distance to /;"	m	struct:ImGuiNavItemData	typeref:typename:float
DistBox	build/_deps/imgui-proj-src/imgui_internal.h	/^    float               DistBox;        \/\/      Move    \/\/ Best candidate box distance to cu/;"	m	struct:ImGuiNavItemData	typeref:typename:float
DistCenter	build/_deps/imgui-proj-src/imgui_internal.h	/^    float               DistCenter;     \/\/      Move    \/\/ Best candidate center distance to/;"	m	struct:ImGuiNavItemData	typeref:typename:float
DoForceClose	build/_deps/imgui-proj-src/imgui_demo.cpp	/^    void DoForceClose() { Open = false; Dirty = false; }$/;"	f	struct:MyDocument	typeref:typename:void	file:
DoOpen	build/_deps/imgui-proj-src/imgui_demo.cpp	/^    void DoOpen()       { Open = true; }$/;"	f	struct:MyDocument	typeref:typename:void	file:
DoQueueClose	build/_deps/imgui-proj-src/imgui_demo.cpp	/^    void DoQueueClose() { WantClose = true; }$/;"	f	struct:MyDocument	typeref:typename:void	file:
DoSave	build/_deps/imgui-proj-src/imgui_demo.cpp	/^    void DoSave()       { Dirty = false; }$/;"	f	struct:MyDocument	typeref:typename:void	file:
DockBuilderAddNode	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiID ImGui::DockBuilderAddNode(ImGuiID node_id, ImGuiDockNodeFlags flags)$/;"	f	class:ImGui	typeref:typename:ImGuiID
DockBuilderCopyDockSpace	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DockBuilderCopyDockSpace(ImGuiID src_dockspace_id, ImGuiID dst_dockspace_id, ImVecto/;"	f	class:ImGui	typeref:typename:void
DockBuilderCopyNode	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DockBuilderCopyNode(ImGuiID src_node_id, ImGuiID dst_node_id, ImVector<ImGuiID>* out/;"	f	class:ImGui	typeref:typename:void
DockBuilderCopyNodeRec	build/_deps/imgui-proj-src/imgui.cpp	/^static ImGuiDockNode* DockBuilderCopyNodeRec(ImGuiDockNode* src_node, ImGuiID dst_node_id_if_kno/;"	f	typeref:typename:ImGuiDockNode *	file:
DockBuilderCopyWindowSettings	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DockBuilderCopyWindowSettings(const char* src_name, const char* dst_name)$/;"	f	class:ImGui	typeref:typename:void
DockBuilderDockWindow	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DockBuilderDockWindow(const char* window_name, ImGuiID node_id)$/;"	f	class:ImGui	typeref:typename:void
DockBuilderFinish	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DockBuilderFinish(ImGuiID root_id)$/;"	f	class:ImGui	typeref:typename:void
DockBuilderGetCentralNode	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline ImGuiDockNode*   DockBuilderGetCentralNode(ImGuiID node_id)              { ImGuiDockN/;"	f	namespace:ImGui	typeref:typename:ImGuiDockNode *
DockBuilderGetNode	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiDockNode* ImGui::DockBuilderGetNode(ImGuiID node_id)$/;"	f	class:ImGui	typeref:typename:ImGuiDockNode *
DockBuilderRemoveNode	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DockBuilderRemoveNode(ImGuiID node_id)$/;"	f	class:ImGui	typeref:typename:void
DockBuilderRemoveNodeChildNodes	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DockBuilderRemoveNodeChildNodes(ImGuiID root_id)$/;"	f	class:ImGui	typeref:typename:void
DockBuilderRemoveNodeDockedWindows	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DockBuilderRemoveNodeDockedWindows(ImGuiID root_id, bool clear_settings_refs)$/;"	f	class:ImGui	typeref:typename:void
DockBuilderSetNodePos	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DockBuilderSetNodePos(ImGuiID node_id, ImVec2 pos)$/;"	f	class:ImGui	typeref:typename:void
DockBuilderSetNodeSize	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DockBuilderSetNodeSize(ImGuiID node_id, ImVec2 size)$/;"	f	class:ImGui	typeref:typename:void
DockBuilderSplitNode	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiID ImGui::DockBuilderSplitNode(ImGuiID id, ImGuiDir split_dir, float size_ratio_for_node_at/;"	f	class:ImGui	typeref:typename:ImGuiID
DockCond	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiCond                   DockCond;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImGuiCond
DockContext	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDockContext        DockContext;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDockContext
DockContextAddNode	build/_deps/imgui-proj-src/imgui.cpp	/^static ImGuiDockNode* ImGui::DockContextAddNode(ImGuiContext* ctx, ImGuiID id)$/;"	f	class:ImGui	typeref:typename:ImGuiDockNode *	file:
DockContextBindNodeToWindow	build/_deps/imgui-proj-src/imgui.cpp	/^static ImGuiDockNode* ImGui::DockContextBindNodeToWindow(ImGuiContext* ctx, ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:ImGuiDockNode *	file:
DockContextBuildAddWindowsToNodes	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DockContextBuildAddWindowsToNodes(ImGuiContext* ctx, ImGuiID root_id)$/;"	f	class:ImGui	typeref:typename:void
DockContextBuildNodesFromSettings	build/_deps/imgui-proj-src/imgui.cpp	/^static void ImGui::DockContextBuildNodesFromSettings(ImGuiContext* ctx, ImGuiDockNodeSettings* n/;"	f	class:ImGui	typeref:typename:void	file:
DockContextCalcDropPosForDocking	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::DockContextCalcDropPosForDocking(ImGuiWindow* target, ImGuiDockNode* target_node, Im/;"	f	class:ImGui	typeref:typename:bool
DockContextClearNodes	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DockContextClearNodes(ImGuiContext* ctx, ImGuiID root_id, bool clear_settings_refs)$/;"	f	class:ImGui	typeref:typename:void
DockContextEndFrame	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DockContextEndFrame(ImGuiContext* ctx)$/;"	f	class:ImGui	typeref:typename:void
DockContextFindNodeByID	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiDockNode* ImGui::DockContextFindNodeByID(ImGuiContext* ctx, ImGuiID id)$/;"	f	class:ImGui	typeref:typename:ImGuiDockNode *
DockContextGenNodeID	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiID ImGui::DockContextGenNodeID(ImGuiContext* ctx)$/;"	f	class:ImGui	typeref:typename:ImGuiID
DockContextInitialize	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DockContextInitialize(ImGuiContext* ctx)$/;"	f	class:ImGui	typeref:typename:void
DockContextNewFrameUpdateDocking	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DockContextNewFrameUpdateDocking(ImGuiContext* ctx)$/;"	f	class:ImGui	typeref:typename:void
DockContextNewFrameUpdateUndocking	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DockContextNewFrameUpdateUndocking(ImGuiContext* ctx)$/;"	f	class:ImGui	typeref:typename:void
DockContextProcessDock	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DockContextProcessDock(ImGuiContext* ctx, ImGuiDockRequest* req)$/;"	f	class:ImGui	typeref:typename:void
DockContextProcessUndockNode	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DockContextProcessUndockNode(ImGuiContext* ctx, ImGuiDockNode* node)$/;"	f	class:ImGui	typeref:typename:void
DockContextProcessUndockWindow	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DockContextProcessUndockWindow(ImGuiContext* ctx, ImGuiWindow* window, bool clear_pe/;"	f	class:ImGui	typeref:typename:void
DockContextPruneUnusedSettingsNodes	build/_deps/imgui-proj-src/imgui.cpp	/^static void ImGui::DockContextPruneUnusedSettingsNodes(ImGuiContext* ctx)$/;"	f	class:ImGui	typeref:typename:void	file:
DockContextQueueDock	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DockContextQueueDock(ImGuiContext* ctx, ImGuiWindow* target, ImGuiDockNode* target_n/;"	f	class:ImGui	typeref:typename:void
DockContextQueueNotifyRemovedNode	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DockContextQueueNotifyRemovedNode(ImGuiContext* ctx, ImGuiDockNode* node)$/;"	f	class:ImGui	typeref:typename:void
DockContextQueueUndockNode	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DockContextQueueUndockNode(ImGuiContext* ctx, ImGuiDockNode* node)$/;"	f	class:ImGui	typeref:typename:void
DockContextQueueUndockWindow	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DockContextQueueUndockWindow(ImGuiContext* ctx, ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
DockContextRebuildNodes	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DockContextRebuildNodes(ImGuiContext* ctx)$/;"	f	class:ImGui	typeref:typename:void
DockContextRemoveNode	build/_deps/imgui-proj-src/imgui.cpp	/^static void ImGui::DockContextRemoveNode(ImGuiContext* ctx, ImGuiDockNode* node, bool merge_sibl/;"	f	class:ImGui	typeref:typename:void	file:
DockContextShutdown	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DockContextShutdown(ImGuiContext* ctx)$/;"	f	class:ImGui	typeref:typename:void
DockId	build/_deps/imgui-proj-src/imgui.cpp	/^    struct DockRemainingWindowTask { ImGuiWindow* Window; ImGuiID DockId; DockRemainingWindowTas/;"	m	struct:ImGui::DockBuilderCopyDockSpace::DockRemainingWindowTask	typeref:typename:ImGuiID	file:
DockId	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                     DockId;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImGuiID
DockId	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                 DockId;                             \/\/ Backup of last valid DockNo/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiID
DockId	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID     DockId;         \/\/ ID of last known DockNode (even if the DockNode is invisibl/;"	m	struct:ImGuiWindowSettings	typeref:typename:ImGuiID
DockIsActive	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    DockIsActive        :1;             \/\/ When docking artifacts are /;"	m	struct:ImGuiWindow	typeref:typename:bool:1
DockNode	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDockNode*          DockNode;                           \/\/ Which node are we docked in/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiDockNode *
DockNodeAddTabBar	build/_deps/imgui-proj-src/imgui.cpp	/^static void ImGui::DockNodeAddTabBar(ImGuiDockNode* node)$/;"	f	class:ImGui	typeref:typename:void	file:
DockNodeAddWindow	build/_deps/imgui-proj-src/imgui.cpp	/^static void ImGui::DockNodeAddWindow(ImGuiDockNode* node, ImGuiWindow* window, bool add_to_tab_b/;"	f	class:ImGui	typeref:typename:void	file:
DockNodeApplyPosSizeToWindows	build/_deps/imgui-proj-src/imgui.cpp	/^static void ImGui::DockNodeApplyPosSizeToWindows(ImGuiDockNode* node)$/;"	f	class:ImGui	typeref:typename:void	file:
DockNodeAsHost	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDockNode*          DockNodeAsHost;                     \/\/ Which node are we owning (f/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiDockNode *
DockNodeBeginAmendTabBar	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::DockNodeBeginAmendTabBar(ImGuiDockNode* node)$/;"	f	class:ImGui	typeref:typename:bool
DockNodeCalcDropRectsAndTestMousePos	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::DockNodeCalcDropRectsAndTestMousePos(const ImRect& parent, ImGuiDir dir, ImRect& out/;"	f	class:ImGui	typeref:typename:bool
DockNodeCalcSplitRects	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DockNodeCalcSplitRects(ImVec2& pos_old, ImVec2& size_old, ImVec2& pos_new, ImVec2& s/;"	f	class:ImGui	typeref:typename:void
DockNodeCalcTabBarLayout	build/_deps/imgui-proj-src/imgui.cpp	/^static void ImGui::DockNodeCalcTabBarLayout(const ImGuiDockNode* node, ImRect* out_title_rect, I/;"	f	class:ImGui	typeref:typename:void	file:
DockNodeComparerDepthMostFirst	build/_deps/imgui-proj-src/imgui.cpp	/^static int IMGUI_CDECL DockNodeComparerDepthMostFirst(const void* lhs, const void* rhs)$/;"	f	typeref:typename:int IMGUI_CDECL	file:
DockNodeEndAmendTabBar	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DockNodeEndAmendTabBar()$/;"	f	class:ImGui	typeref:typename:void
DockNodeFindInfo	build/_deps/imgui-proj-src/imgui.cpp	/^static void DockNodeFindInfo(ImGuiDockNode* node, ImGuiDockNodeTreeInfo* info)$/;"	f	typeref:typename:void	file:
DockNodeFindWindowByID	build/_deps/imgui-proj-src/imgui.cpp	/^static ImGuiWindow* ImGui::DockNodeFindWindowByID(ImGuiDockNode* node, ImGuiID id)$/;"	f	class:ImGui	typeref:typename:ImGuiWindow *	file:
DockNodeFlagsOverrideSet	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiDockNodeFlags  DockNodeFlagsOverrideSet;   \/\/ [EXPERIMENTAL] Dock node flags to set w/;"	m	struct:ImGuiWindowClass	typeref:typename:ImGuiDockNodeFlags
DockNodeGetDepth	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline int              DockNodeGetDepth(const ImGuiDockNode* node)              { int depth/;"	f	namespace:ImGui	typeref:typename:int
DockNodeGetHostWindowTitle	build/_deps/imgui-proj-src/imgui.cpp	/^    static const char*      DockNodeGetHostWindowTitle(ImGuiDockNode* node, char* buf, int buf_s/;"	f	namespace:ImGui	typeref:typename:const char *	file:
DockNodeGetRootNode	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline ImGuiDockNode*   DockNodeGetRootNode(ImGuiDockNode* node)                 { while (no/;"	f	namespace:ImGui	typeref:typename:ImGuiDockNode *
DockNodeGetTabOrder	build/_deps/imgui-proj-src/imgui.cpp	/^int ImGui::DockNodeGetTabOrder(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:int
DockNodeGetWindowMenuButtonId	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline ImGuiID          DockNodeGetWindowMenuButtonId(const ImGuiDockNode* node) { return Im/;"	f	namespace:ImGui	typeref:typename:ImGuiID
DockNodeHideHostWindow	build/_deps/imgui-proj-src/imgui.cpp	/^static void ImGui::DockNodeHideHostWindow(ImGuiDockNode* node)$/;"	f	class:ImGui	typeref:typename:void	file:
DockNodeHideWindowDuringHostWindowCreation	build/_deps/imgui-proj-src/imgui.cpp	/^static void DockNodeHideWindowDuringHostWindowCreation(ImGuiWindow* window)$/;"	f	typeref:typename:void	file:
DockNodeIsDropAllowed	build/_deps/imgui-proj-src/imgui.cpp	/^static bool ImGui::DockNodeIsDropAllowed(ImGuiWindow* host_window, ImGuiWindow* root_payload)$/;"	f	class:ImGui	typeref:typename:bool	file:
DockNodeIsDropAllowedOne	build/_deps/imgui-proj-src/imgui.cpp	/^static bool DockNodeIsDropAllowedOne(ImGuiWindow* payload, ImGuiWindow* host_window)$/;"	f	typeref:typename:bool	file:
DockNodeIsInHierarchyOf	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline bool             DockNodeIsInHierarchyOf(ImGuiDockNode* node, ImGuiDockNode* parent) /;"	f	namespace:ImGui	typeref:typename:bool
DockNodeIsVisible	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    DockNodeIsVisible   :1;$/;"	m	struct:ImGuiWindow	typeref:typename:bool:1
DockNodeMoveChildNodes	build/_deps/imgui-proj-src/imgui.cpp	/^static void ImGui::DockNodeMoveChildNodes(ImGuiDockNode* dst_node, ImGuiDockNode* src_node)$/;"	f	class:ImGui	typeref:typename:void	file:
DockNodeMoveWindows	build/_deps/imgui-proj-src/imgui.cpp	/^static void ImGui::DockNodeMoveWindows(ImGuiDockNode* dst_node, ImGuiDockNode* src_node)$/;"	f	class:ImGui	typeref:typename:void	file:
DockNodePreviewDockRender	build/_deps/imgui-proj-src/imgui.cpp	/^static void ImGui::DockNodePreviewDockRender(ImGuiWindow* host_window, ImGuiDockNode* host_node,/;"	f	class:ImGui	typeref:typename:void	file:
DockNodePreviewDockSetup	build/_deps/imgui-proj-src/imgui.cpp	/^static void ImGui::DockNodePreviewDockSetup(ImGuiWindow* host_window, ImGuiDockNode* host_node, /;"	f	class:ImGui	typeref:typename:void	file:
DockNodeRemoveTabBar	build/_deps/imgui-proj-src/imgui.cpp	/^static void ImGui::DockNodeRemoveTabBar(ImGuiDockNode* node)$/;"	f	class:ImGui	typeref:typename:void	file:
DockNodeRemoveWindow	build/_deps/imgui-proj-src/imgui.cpp	/^static void ImGui::DockNodeRemoveWindow(ImGuiDockNode* node, ImGuiWindow* window, ImGuiID save_d/;"	f	class:ImGui	typeref:typename:void	file:
DockNodeSetupHostWindow	build/_deps/imgui-proj-src/imgui.cpp	/^static void DockNodeSetupHostWindow(ImGuiDockNode* node, ImGuiWindow* host_window)$/;"	f	typeref:typename:void	file:
DockNodeStartMouseMovingWindow	build/_deps/imgui-proj-src/imgui.cpp	/^static void ImGui::DockNodeStartMouseMovingWindow(ImGuiDockNode* node, ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void	file:
DockNodeTreeFindFallbackLeafNode	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiDockNode* ImGui::DockNodeTreeFindFallbackLeafNode(ImGuiDockNode* node)$/;"	f	class:ImGui	typeref:typename:ImGuiDockNode *
DockNodeTreeFindVisibleNodeByPos	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiDockNode* ImGui::DockNodeTreeFindVisibleNodeByPos(ImGuiDockNode* node, ImVec2 pos)$/;"	f	class:ImGui	typeref:typename:ImGuiDockNode *
DockNodeTreeMerge	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DockNodeTreeMerge(ImGuiContext* ctx, ImGuiDockNode* parent_node, ImGuiDockNode* merg/;"	f	class:ImGui	typeref:typename:void
DockNodeTreeSplit	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DockNodeTreeSplit(ImGuiContext* ctx, ImGuiDockNode* parent_node, ImGuiAxis split_axi/;"	f	class:ImGui	typeref:typename:void
DockNodeTreeUpdatePosSize	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DockNodeTreeUpdatePosSize(ImGuiDockNode* node, ImVec2 pos, ImVec2 size, ImGuiDockNod/;"	f	class:ImGui	typeref:typename:void
DockNodeTreeUpdateSplitter	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DockNodeTreeUpdateSplitter(ImGuiDockNode* node)$/;"	f	class:ImGui	typeref:typename:void
DockNodeTreeUpdateSplitterFindTouchingNode	build/_deps/imgui-proj-src/imgui.cpp	/^static void DockNodeTreeUpdateSplitterFindTouchingNode(ImGuiDockNode* node, ImGuiAxis axis, int /;"	f	typeref:typename:void	file:
DockNodeUpdate	build/_deps/imgui-proj-src/imgui.cpp	/^static void ImGui::DockNodeUpdate(ImGuiDockNode* node)$/;"	f	class:ImGui	typeref:typename:void	file:
DockNodeUpdateFlagsAndCollapse	build/_deps/imgui-proj-src/imgui.cpp	/^static void ImGui::DockNodeUpdateFlagsAndCollapse(ImGuiDockNode* node)$/;"	f	class:ImGui	typeref:typename:void	file:
DockNodeUpdateForRootNode	build/_deps/imgui-proj-src/imgui.cpp	/^static void ImGui::DockNodeUpdateForRootNode(ImGuiDockNode* node)$/;"	f	class:ImGui	typeref:typename:void	file:
DockNodeUpdateHasCentralNodeChild	build/_deps/imgui-proj-src/imgui.cpp	/^static void ImGui::DockNodeUpdateHasCentralNodeChild(ImGuiDockNode* node)$/;"	f	class:ImGui	typeref:typename:void	file:
DockNodeUpdateTabBar	build/_deps/imgui-proj-src/imgui.cpp	/^static void ImGui::DockNodeUpdateTabBar(ImGuiDockNode* node, ImGuiWindow* host_window)$/;"	f	class:ImGui	typeref:typename:void	file:
DockNodeUpdateVisibleFlag	build/_deps/imgui-proj-src/imgui.cpp	/^static void ImGui::DockNodeUpdateVisibleFlag(ImGuiDockNode* node)$/;"	f	class:ImGui	typeref:typename:void	file:
DockNodeWindowMenuHandler	build/_deps/imgui-proj-src/imgui_internal.h	/^    void                    (*DockNodeWindowMenuHandler)(ImGuiContext* ctx, ImGuiDockNode* node,/;"	m	struct:ImGuiContext	typeref:typename:void (*)(ImGuiContext * ctx,ImGuiDockNode * node,ImGuiTabBar * tab_bar)
DockNodeWindowMenuHandler_Default	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::DockNodeWindowMenuHandler_Default(ImGuiContext* ctx, ImGuiDockNode* node, ImGuiTabBa/;"	f	class:ImGui	typeref:typename:void
DockNodeWindowMenuUpdate	build/_deps/imgui-proj-src/imgui.cpp	/^static void ImGui::DockNodeWindowMenuUpdate(ImGuiDockNode* node, ImGuiTabBar* tab_bar)$/;"	f	class:ImGui	typeref:typename:void	file:
DockOrder	build/_deps/imgui-proj-src/imgui_internal.h	/^    short                   DockOrder;                          \/\/ Order of the last time the /;"	m	struct:ImGuiWindow	typeref:typename:short
DockOrder	build/_deps/imgui-proj-src/imgui_internal.h	/^    short       DockOrder;      \/\/ Order of the last time the window was visible within its Do/;"	m	struct:ImGuiWindowSettings	typeref:typename:short
DockPayload	build/_deps/imgui-proj-src/imgui.cpp	/^    ImGuiWindow*            DockPayload;        \/\/ Source\/Payload window to dock (may be a lo/;"	m	struct:ImGuiDockRequest	typeref:typename:ImGuiWindow *	file:
DockRemainingWindowTask	build/_deps/imgui-proj-src/imgui.cpp	/^    struct DockRemainingWindowTask { ImGuiWindow* Window; ImGuiID DockId; DockRemainingWindowTas/;"	f	struct:ImGui::DockBuilderCopyDockSpace::DockRemainingWindowTask	file:
DockRemainingWindowTask	build/_deps/imgui-proj-src/imgui.cpp	/^    struct DockRemainingWindowTask { ImGuiWindow* Window; ImGuiID DockId; DockRemainingWindowTas/;"	s	function:ImGui::DockBuilderCopyDockSpace	file:
DockSettingsFindNodeSettings	build/_deps/imgui-proj-src/imgui.cpp	/^static ImGuiDockNodeSettings* ImGui::DockSettingsFindNodeSettings(ImGuiContext* ctx, ImGuiID id)$/;"	f	class:ImGui	typeref:typename:ImGuiDockNodeSettings *	file:
DockSettingsHandler_ApplyAll	build/_deps/imgui-proj-src/imgui.cpp	/^static void ImGui::DockSettingsHandler_ApplyAll(ImGuiContext* ctx, ImGuiSettingsHandler*)$/;"	f	class:ImGui	typeref:typename:void	file:
DockSettingsHandler_ClearAll	build/_deps/imgui-proj-src/imgui.cpp	/^static void ImGui::DockSettingsHandler_ClearAll(ImGuiContext* ctx, ImGuiSettingsHandler*)$/;"	f	class:ImGui	typeref:typename:void	file:
DockSettingsHandler_DockNodeToSettings	build/_deps/imgui-proj-src/imgui.cpp	/^static void DockSettingsHandler_DockNodeToSettings(ImGuiDockContext* dc, ImGuiDockNode* node, in/;"	f	typeref:typename:void	file:
DockSettingsHandler_ReadLine	build/_deps/imgui-proj-src/imgui.cpp	/^static void ImGui::DockSettingsHandler_ReadLine(ImGuiContext* ctx, ImGuiSettingsHandler*, void*,/;"	f	class:ImGui	typeref:typename:void	file:
DockSettingsHandler_ReadOpen	build/_deps/imgui-proj-src/imgui.cpp	/^static void* ImGui::DockSettingsHandler_ReadOpen(ImGuiContext*, ImGuiSettingsHandler*, const cha/;"	f	class:ImGui	typeref:typename:void *	file:
DockSettingsHandler_WriteAll	build/_deps/imgui-proj-src/imgui.cpp	/^static void ImGui::DockSettingsHandler_WriteAll(ImGuiContext* ctx, ImGuiSettingsHandler* handler/;"	f	class:ImGui	typeref:typename:void	file:
DockSettingsRemoveNodeReferences	build/_deps/imgui-proj-src/imgui.cpp	/^static void ImGui::DockSettingsRemoveNodeReferences(ImGuiID* node_ids, int node_ids_count)$/;"	f	class:ImGui	typeref:typename:void	file:
DockSettingsRenameNodeReferences	build/_deps/imgui-proj-src/imgui.cpp	/^static void ImGui::DockSettingsRenameNodeReferences(ImGuiID old_node_id, ImGuiID new_node_id)$/;"	f	class:ImGui	typeref:typename:void	file:
DockSpace	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiID ImGui::DockSpace(ImGuiID id, const ImVec2& size_arg, ImGuiDockNodeFlags flags, const ImG/;"	f	class:ImGui	typeref:typename:ImGuiID
DockSpaceOverViewport	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiID ImGui::DockSpaceOverViewport(const ImGuiViewport* viewport, ImGuiDockNodeFlags dockspace/;"	f	class:ImGui	typeref:typename:ImGuiID
DockSplitDir	build/_deps/imgui-proj-src/imgui.cpp	/^    ImGuiDir                DockSplitDir;$/;"	m	struct:ImGuiDockRequest	typeref:typename:ImGuiDir	file:
DockSplitOuter	build/_deps/imgui-proj-src/imgui.cpp	/^    bool                    DockSplitOuter;$/;"	m	struct:ImGuiDockRequest	typeref:typename:bool	file:
DockSplitRatio	build/_deps/imgui-proj-src/imgui.cpp	/^    float                   DockSplitRatio;$/;"	m	struct:ImGuiDockRequest	typeref:typename:float	file:
DockStyle	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiWindowDockStyle    DockStyle;$/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindowDockStyle
DockTabIsVisible	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    DockTabIsVisible    :1;             \/\/ Is our window visible this /;"	m	struct:ImGuiWindow	typeref:typename:bool:1
DockTabItemRect	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImRect                  DockTabItemRect;$/;"	m	struct:ImGuiWindow	typeref:typename:ImRect
DockTabItemStatusFlags	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiItemStatusFlags    DockTabItemStatusFlags;$/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiItemStatusFlags
DockTabWantClose	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    DockTabWantClose    :1;$/;"	m	struct:ImGuiWindow	typeref:typename:bool:1
DockTargetNode	build/_deps/imgui-proj-src/imgui.cpp	/^    ImGuiDockNode*          DockTargetNode;     \/\/ Destination\/Target Node to dock into$/;"	m	struct:ImGuiDockRequest	typeref:typename:ImGuiDockNode *	file:
DockTargetWindow	build/_deps/imgui-proj-src/imgui.cpp	/^    ImGuiWindow*            DockTargetWindow;   \/\/ Destination\/Target Window to dock into (ma/;"	m	struct:ImGuiDockRequest	typeref:typename:ImGuiWindow *	file:
Docking	imgui.ini	/^[Docking][Data]$/;"	s
DockingAllowUnclassed	build/_deps/imgui-proj-src/imgui.h	/^    bool                DockingAllowUnclassed;      \/\/ Set to true to allow windows of this cl/;"	m	struct:ImGuiWindowClass	typeref:typename:bool
DockingAlwaysTabBar	build/_deps/imgui-proj-src/imgui.h	/^    bool                DockingAlwaysTabBar;        \/\/ Set to true to enforce single floating /;"	m	struct:ImGuiWindowClass	typeref:typename:bool
DockingSeparatorSize	build/_deps/imgui-proj-src/imgui.h	/^    float       DockingSeparatorSize;       \/\/ Thickness of resizing border between docked win/;"	m	struct:ImGuiStyle	typeref:typename:float
Documents	build/_deps/imgui-proj-src/imgui_demo.cpp	/^    ImVector<MyDocument> Documents;$/;"	m	struct:ExampleAppDocuments	typeref:typename:ImVector<MyDocument>	file:
Down	build/_deps/imgui-proj-src/imgui.h	/^    bool        Down;               \/\/ True for if key is down$/;"	m	struct:ImGuiKeyData	typeref:typename:bool
Down	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiInputEventKey           { ImGuiKey Key; bool Down; float AnalogValue; };$/;"	m	struct:ImGuiInputEventKey	typeref:typename:bool
Down	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiInputEventMouseButton   { int Button; bool Down; ImGuiMouseSource MouseSource; };$/;"	m	struct:ImGuiInputEventMouseButton	typeref:typename:bool
DownDuration	build/_deps/imgui-proj-src/imgui.h	/^    float       DownDuration;       \/\/ Duration the key has been down (<0.0f: not pressed, 0.0/;"	m	struct:ImGuiKeyData	typeref:typename:float
DownDurationPrev	build/_deps/imgui-proj-src/imgui.h	/^    float       DownDurationPrev;   \/\/ Last frame duration the key has been down$/;"	m	struct:ImGuiKeyData	typeref:typename:float
DpiScale	build/_deps/imgui-proj-src/imgui.h	/^    float               DpiScale;               \/\/ 1.0f = 96 DPI = No extra scale.$/;"	m	struct:ImGuiViewport	typeref:typename:float
DpiScale	build/_deps/imgui-proj-src/imgui.h	/^    float   DpiScale;               \/\/ 1.0f = 96 DPI$/;"	m	struct:ImGuiPlatformMonitor	typeref:typename:float
DragBehavior	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::DragBehavior(ImGuiID id, ImGuiDataType data_type, void* p_v, float v_speed, const vo/;"	f	class:ImGui	typeref:typename:bool
DragBehaviorT	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::DragBehaviorT(ImGuiDataType data_type, TYPE* v, float v_speed, const TYPE v_min, con/;"	f	class:ImGui	typeref:typename:bool
DragCurrentAccum	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   DragCurrentAccum;                   \/\/ Accumulator for dragging mo/;"	m	struct:ImGuiContext	typeref:typename:float
DragCurrentAccumDirty	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    DragCurrentAccumDirty;$/;"	m	struct:ImGuiContext	typeref:typename:bool
DragDropAcceptFlags	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDragDropFlags      DragDropAcceptFlags;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDragDropFlags
DragDropAcceptFrameCount	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                     DragDropAcceptFrameCount;           \/\/ Last time a target expresse/;"	m	struct:ImGuiContext	typeref:typename:int
DragDropAcceptIdCurr	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                 DragDropAcceptIdCurr;               \/\/ Target item id (set at the /;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DragDropAcceptIdCurrRectSurface	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   DragDropAcceptIdCurrRectSurface;    \/\/ Target item surface (we res/;"	m	struct:ImGuiContext	typeref:typename:float
DragDropAcceptIdPrev	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                 DragDropAcceptIdPrev;               \/\/ Target item id from previou/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DragDropActive	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    DragDropActive;$/;"	m	struct:ImGuiContext	typeref:typename:bool
DragDropHoldJustPressedId	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                 DragDropHoldJustPressedId;          \/\/ Set when holding a payload /;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DragDropMouseButton	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                     DragDropMouseButton;$/;"	m	struct:ImGuiContext	typeref:typename:int
DragDropPayload	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiPayload            DragDropPayload;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiPayload
DragDropPayloadBufHeap	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVector<unsigned char> DragDropPayloadBufHeap;             \/\/ We don't expose the ImVecto/;"	m	struct:ImGuiContext	typeref:typename:ImVector<unsigned char>
DragDropPayloadBufLocal	build/_deps/imgui-proj-src/imgui_internal.h	/^    unsigned char           DragDropPayloadBufLocal[16];        \/\/ Local buffer for small payl/;"	m	struct:ImGuiContext	typeref:typename:unsigned char[16]
DragDropSourceFlags	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDragDropFlags      DragDropSourceFlags;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDragDropFlags
DragDropSourceFrameCount	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                     DragDropSourceFrameCount;$/;"	m	struct:ImGuiContext	typeref:typename:int
DragDropTargetClipRect	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImRect                  DragDropTargetClipRect;             \/\/ Store ClipRect at the time /;"	m	struct:ImGuiContext	typeref:typename:ImRect
DragDropTargetId	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                 DragDropTargetId;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DragDropTargetRect	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImRect                  DragDropTargetRect;                 \/\/ Store rectangle of current /;"	m	struct:ImGuiContext	typeref:typename:ImRect
DragDropWithinSource	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    DragDropWithinSource;               \/\/ Set when within a BeginDrag/;"	m	struct:ImGuiContext	typeref:typename:bool
DragDropWithinTarget	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    DragDropWithinTarget;               \/\/ Set when within a BeginDrag/;"	m	struct:ImGuiContext	typeref:typename:bool
DragFloat	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::DragFloat(const char* label, float* v, float v_speed, float v_min, float v_max, cons/;"	f	class:ImGui	typeref:typename:bool
DragFloat2	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::DragFloat2(const char* label, float v[2], float v_speed, float v_min, float v_max, c/;"	f	class:ImGui	typeref:typename:bool
DragFloat3	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::DragFloat3(const char* label, float v[3], float v_speed, float v_min, float v_max, c/;"	f	class:ImGui	typeref:typename:bool
DragFloat4	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::DragFloat4(const char* label, float v[4], float v_speed, float v_min, float v_max, c/;"	f	class:ImGui	typeref:typename:bool
DragFloatRange2	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::DragFloatRange2(const char* label, float* v_current_min, float* v_current_max, float/;"	f	class:ImGui	typeref:typename:bool
DragInt	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::DragInt(const char* label, int* v, float v_speed, int v_min, int v_max, const char* /;"	f	class:ImGui	typeref:typename:bool
DragInt2	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::DragInt2(const char* label, int v[2], float v_speed, int v_min, int v_max, const cha/;"	f	class:ImGui	typeref:typename:bool
DragInt3	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::DragInt3(const char* label, int v[3], float v_speed, int v_min, int v_max, const cha/;"	f	class:ImGui	typeref:typename:bool
DragInt4	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::DragInt4(const char* label, int v[4], float v_speed, int v_min, int v_max, const cha/;"	f	class:ImGui	typeref:typename:bool
DragIntRange2	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::DragIntRange2(const char* label, int* v_current_min, int* v_current_max, float v_spe/;"	f	class:ImGui	typeref:typename:bool
DragScalar	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::DragScalar(const char* label, ImGuiDataType data_type, void* p_data, float v_speed, /;"	f	class:ImGui	typeref:typename:bool
DragScalarN	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::DragScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components/;"	f	class:ImGui	typeref:typename:bool
DragSpeedDefaultRatio	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   DragSpeedDefaultRatio;              \/\/ If speed == 0.0f, uses (max/;"	m	struct:ImGuiContext	typeref:typename:float
Draw	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGuiTextFilter::Draw(const char* label, float width)$/;"	f	class:ImGuiTextFilter	typeref:typename:bool
Draw	build/_deps/imgui-proj-src/imgui_demo.cpp	/^    void    Draw(const char* title, bool* p_open = NULL)$/;"	f	struct:ExampleAppLog	typeref:typename:void	file:
Draw	build/_deps/imgui-proj-src/imgui_demo.cpp	/^    void    Draw(const char* title, bool* p_open)$/;"	f	struct:ExampleAppConsole	typeref:typename:void	file:
Draw	neditor/Editor.h	/^  void Draw() {$/;"	f	class:NodeEditor	typeref:typename:void
DrawChannelCurrent	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTableDrawChannelIdx DrawChannelCurrent;            \/\/ Index within DrawSplitter.Chann/;"	m	struct:ImGuiTableColumn	typeref:typename:ImGuiTableDrawChannelIdx
DrawChannelFrozen	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTableDrawChannelIdx DrawChannelFrozen;             \/\/ Draw channels for frozen rows (/;"	m	struct:ImGuiTableColumn	typeref:typename:ImGuiTableDrawChannelIdx
DrawChannelUnfrozen	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTableDrawChannelIdx DrawChannelUnfrozen;           \/\/ Draw channels for unfrozen rows$/;"	m	struct:ImGuiTableColumn	typeref:typename:ImGuiTableDrawChannelIdx
DrawChannelsTempMergeBuffer	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVector<ImDrawChannel>         DrawChannelsTempMergeBuffer;$/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImDrawChannel>
DrawData	build/_deps/imgui-proj-src/imgui.h	/^    ImDrawData*         DrawData;               \/\/ The ImDrawData corresponding to this viewpo/;"	m	struct:ImGuiViewport	typeref:typename:ImDrawData *
DrawDataBuilder	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImDrawDataBuilder   DrawDataBuilder;        \/\/ Temporary data while building final ImDrawD/;"	m	struct:ImGuiViewportP	typeref:typename:ImDrawDataBuilder
DrawDataP	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImDrawData          DrawDataP;$/;"	m	struct:ImGuiViewportP	typeref:typename:ImDrawData
DrawElements	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^        PFNGLDRAWELEMENTSPROC             DrawElements;$/;"	m	struct:ImGL3WProcs::__anon6bce6ebe0108	typeref:typename:PFNGLDRAWELEMENTSPROC
DrawElementsBaseVertex	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^        PFNGLDRAWELEMENTSBASEVERTEXPROC   DrawElementsBaseVertex;$/;"	m	struct:ImGL3WProcs::__anon6bce6ebe0108	typeref:typename:PFNGLDRAWELEMENTSBASEVERTEXPROC
DrawList	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImDrawList*             DrawList;                           \/\/ == &DrawListInst (for backw/;"	m	struct:ImGuiWindow	typeref:typename:ImDrawList *
DrawListInst	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImDrawList              DrawListInst;$/;"	m	struct:ImGuiWindow	typeref:typename:ImDrawList
DrawListSharedData	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImDrawListSharedData    DrawListSharedData;$/;"	m	struct:ImGuiContext	typeref:typename:ImDrawListSharedData
DrawMenuBar	neditor/Editor.h	/^  void DrawMenuBar() {$/;"	f	class:NodeEditor	typeref:typename:void
DrawPopup	neditor/Editor.h	/^  void DrawPopup() {$/;"	f	class:NodeEditor	typeref:typename:void
DrawSplitter	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImDrawListSplitter          DrawSplitter;$/;"	m	struct:ImGuiTableTempData	typeref:typename:ImDrawListSplitter
DrawSplitter	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImDrawListSplitter*         DrawSplitter;               \/\/ Shortcut to TempData->DrawSplit/;"	m	struct:ImGuiTable	typeref:typename:ImDrawListSplitter *
DropRectsDraw	build/_deps/imgui-proj-src/imgui.cpp	/^    ImRect          DropRectsDraw[ImGuiDir_COUNT + 1];  \/\/ May be slightly different from hit-/;"	m	struct:ImGuiDockPreviewData	typeref:typename:ImRect[]	file:
DstFont	build/_deps/imgui-proj-src/imgui.h	/^    ImFont*         DstFont;$/;"	m	struct:ImFontConfig	typeref:typename:ImFont *
DstIndex	build/_deps/imgui-proj-src/imgui_draw.cpp	/^    int                 DstIndex;           \/\/ Index into atlas->Fonts[] and dst_tmp_array[]$/;"	m	struct:ImFontBuildSrcData	typeref:typename:int	file:
DstIndex	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^    int                 DstIndex;           \/\/ Index into atlas->Fonts[] and dst_tmp_array[]$/;"	m	struct:ImFontBuildSrcDataFT	typeref:typename:int	file:
Dummy	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::Dummy(const ImVec2& size)$/;"	f	class:ImGui	typeref:typename:void
DummyDrawChannel	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTableDrawChannelIdx    DummyDrawChannel;           \/\/ Redirect non-visible columns he/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableDrawChannelIdx
DwExStyle	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^    DWORD   DwExStyle;$/;"	m	struct:ImGui_ImplWin32_ViewportData	typeref:typename:DWORD	file:
DwStyle	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^    DWORD   DwStyle;$/;"	m	struct:ImGui_ImplWin32_ViewportData	typeref:typename:DWORD	file:
ECHO_MESSAGE	build/_deps/imgui-proj-src/examples/example_glfw_opengl2/Makefile	/^	ECHO_MESSAGE = "Linux"$/;"	m
ECHO_MESSAGE	build/_deps/imgui-proj-src/examples/example_glfw_opengl2/Makefile	/^	ECHO_MESSAGE = "Mac OS X"$/;"	m
ECHO_MESSAGE	build/_deps/imgui-proj-src/examples/example_glfw_opengl2/Makefile	/^	ECHO_MESSAGE = "MinGW"$/;"	m
ECHO_MESSAGE	build/_deps/imgui-proj-src/examples/example_glfw_opengl3/Makefile	/^	ECHO_MESSAGE = "Linux"$/;"	m
ECHO_MESSAGE	build/_deps/imgui-proj-src/examples/example_glfw_opengl3/Makefile	/^	ECHO_MESSAGE = "Mac OS X"$/;"	m
ECHO_MESSAGE	build/_deps/imgui-proj-src/examples/example_glfw_opengl3/Makefile	/^	ECHO_MESSAGE = "MinGW"$/;"	m
ECHO_MESSAGE	build/_deps/imgui-proj-src/examples/example_glut_opengl2/Makefile	/^	ECHO_MESSAGE = "Linux"$/;"	m
ECHO_MESSAGE	build/_deps/imgui-proj-src/examples/example_glut_opengl2/Makefile	/^	ECHO_MESSAGE = "Mac OS X"$/;"	m
ECHO_MESSAGE	build/_deps/imgui-proj-src/examples/example_glut_opengl2/Makefile	/^	ECHO_MESSAGE = "MinGW"$/;"	m
ECHO_MESSAGE	build/_deps/imgui-proj-src/examples/example_null/Makefile	/^	ECHO_MESSAGE = "Linux"$/;"	m
ECHO_MESSAGE	build/_deps/imgui-proj-src/examples/example_null/Makefile	/^	ECHO_MESSAGE = "Mac OS X"$/;"	m
ECHO_MESSAGE	build/_deps/imgui-proj-src/examples/example_null/Makefile	/^	ECHO_MESSAGE = "MinGW"$/;"	m
ECHO_MESSAGE	build/_deps/imgui-proj-src/examples/example_sdl2_opengl2/Makefile	/^	ECHO_MESSAGE = "Linux"$/;"	m
ECHO_MESSAGE	build/_deps/imgui-proj-src/examples/example_sdl2_opengl2/Makefile	/^	ECHO_MESSAGE = "Mac OS X"$/;"	m
ECHO_MESSAGE	build/_deps/imgui-proj-src/examples/example_sdl2_opengl2/Makefile	/^	ECHO_MESSAGE = "MinGW"$/;"	m
ECHO_MESSAGE	build/_deps/imgui-proj-src/examples/example_sdl2_opengl3/Makefile	/^	ECHO_MESSAGE = "Linux"$/;"	m
ECHO_MESSAGE	build/_deps/imgui-proj-src/examples/example_sdl2_opengl3/Makefile	/^	ECHO_MESSAGE = "Mac OS X"$/;"	m
ECHO_MESSAGE	build/_deps/imgui-proj-src/examples/example_sdl2_opengl3/Makefile	/^    ECHO_MESSAGE = "MinGW"$/;"	m
ECHO_MESSAGE	build/_deps/imgui-proj-src/examples/example_sdl2_sdlrenderer2/Makefile	/^	ECHO_MESSAGE = "Linux"$/;"	m
ECHO_MESSAGE	build/_deps/imgui-proj-src/examples/example_sdl2_sdlrenderer2/Makefile	/^	ECHO_MESSAGE = "Mac OS X"$/;"	m
ECHO_MESSAGE	build/_deps/imgui-proj-src/examples/example_sdl2_sdlrenderer2/Makefile	/^	ECHO_MESSAGE = "MinGW"$/;"	m
ECHO_MESSAGE	build/_deps/imgui-proj-src/examples/example_sdl3_opengl3/Makefile	/^	ECHO_MESSAGE = "Linux"$/;"	m
ECHO_MESSAGE	build/_deps/imgui-proj-src/examples/example_sdl3_opengl3/Makefile	/^	ECHO_MESSAGE = "Mac OS X"$/;"	m
ECHO_MESSAGE	build/_deps/imgui-proj-src/examples/example_sdl3_opengl3/Makefile	/^    ECHO_MESSAGE = "MinGW"$/;"	m
ECHO_MESSAGE	build/_deps/imgui-proj-src/examples/example_sdl3_sdlrenderer3/Makefile	/^	ECHO_MESSAGE = "Linux"$/;"	m
ECHO_MESSAGE	build/_deps/imgui-proj-src/examples/example_sdl3_sdlrenderer3/Makefile	/^	ECHO_MESSAGE = "Mac OS X"$/;"	m
ECHO_MESSAGE	build/_deps/imgui-proj-src/examples/example_sdl3_sdlrenderer3/Makefile	/^    ECHO_MESSAGE = "MinGW"$/;"	m
EMSCRIPTEN_MAINLOOP_BEGIN	build/_deps/imgui-proj-src/examples/libs/emscripten/emscripten_mainloop_stub.h	/^#define EMSCRIPTEN_MAINLOOP_BEGIN /;"	d
EMSCRIPTEN_MAINLOOP_BEGIN	build/_deps/imgui-proj-src/examples/libs/emscripten/emscripten_mainloop_stub.h	/^#define EMSCRIPTEN_MAINLOOP_BEGIN$/;"	d
EMSCRIPTEN_MAINLOOP_END	build/_deps/imgui-proj-src/examples/libs/emscripten/emscripten_mainloop_stub.h	/^#define EMSCRIPTEN_MAINLOOP_END /;"	d
EMSCRIPTEN_MAINLOOP_END	build/_deps/imgui-proj-src/examples/libs/emscripten/emscripten_mainloop_stub.h	/^#define EMSCRIPTEN_MAINLOOP_END$/;"	d
EQUALS	build/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/_deps/imgui-proj-subbuild/Makefile	/^EQUALS = =$/;"	m
EXE	build/_deps/imgui-proj-src/examples/example_glfw_metal/Makefile	/^EXE = example_glfw_metal$/;"	m
EXE	build/_deps/imgui-proj-src/examples/example_glfw_opengl2/Makefile	/^EXE = example_glfw_opengl2$/;"	m
EXE	build/_deps/imgui-proj-src/examples/example_glfw_opengl3/Makefile	/^EXE = example_glfw_opengl3$/;"	m
EXE	build/_deps/imgui-proj-src/examples/example_glut_opengl2/Makefile	/^EXE = example_glut_opengl2$/;"	m
EXE	build/_deps/imgui-proj-src/examples/example_null/Makefile	/^EXE = example_null$/;"	m
EXE	build/_deps/imgui-proj-src/examples/example_sdl2_metal/Makefile	/^EXE = example_sdl2_metal$/;"	m
EXE	build/_deps/imgui-proj-src/examples/example_sdl2_opengl2/Makefile	/^EXE = example_sdl2_opengl2$/;"	m
EXE	build/_deps/imgui-proj-src/examples/example_sdl2_opengl3/Makefile	/^EXE = example_sdl2_opengl3$/;"	m
EXE	build/_deps/imgui-proj-src/examples/example_sdl2_sdlrenderer2/Makefile	/^EXE = example_sdl2_sdlrenderer2$/;"	m
EXE	build/_deps/imgui-proj-src/examples/example_sdl3_opengl3/Makefile	/^EXE = example_sdl3_opengl3$/;"	m
EXE	build/_deps/imgui-proj-src/examples/example_sdl3_sdlrenderer3/Makefile	/^EXE = example_sdl3_sdlrenderer3$/;"	m
EditTableColumnsFlags	build/_deps/imgui-proj-src/imgui_demo.cpp	/^static void EditTableColumnsFlags(ImGuiTableColumnFlags* p_flags)$/;"	f	typeref:typename:void	file:
EditTableSizingFlags	build/_deps/imgui-proj-src/imgui_demo.cpp	/^static void EditTableSizingFlags(ImGuiTableFlags* p_flags)$/;"	f	typeref:typename:void	file:
Edited	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    Edited;                 \/\/ edited this frame$/;"	m	struct:ImGuiInputTextState	typeref:typename:bool
Editing this README	README.md	/^# Editing this README$/;"	c
ElemCount	build/_deps/imgui-proj-src/imgui.h	/^    unsigned int    ElemCount;          \/\/ 4    \/\/ Number of indices (multiple of 3) to be r/;"	m	struct:ImDrawCmd	typeref:typename:unsigned int
Element	build/_deps/imgui-proj-src/imgui_demo.cpp	/^            enum Element { Element_Fire, Element_Earth, Element_Air, Element_Water, Element_COUN/;"	g	function:ShowDemoWindowWidgets	file:
Element_Air	build/_deps/imgui-proj-src/imgui_demo.cpp	/^            enum Element { Element_Fire, Element_Earth, Element_Air, Element_Water, Element_COUN/;"	e	enum:ShowDemoWindowWidgets::Element	file:
Element_COUNT	build/_deps/imgui-proj-src/imgui_demo.cpp	/^            enum Element { Element_Fire, Element_Earth, Element_Air, Element_Water, Element_COUN/;"	e	enum:ShowDemoWindowWidgets::Element	file:
Element_Earth	build/_deps/imgui-proj-src/imgui_demo.cpp	/^            enum Element { Element_Fire, Element_Earth, Element_Air, Element_Water, Element_COUN/;"	e	enum:ShowDemoWindowWidgets::Element	file:
Element_Fire	build/_deps/imgui-proj-src/imgui_demo.cpp	/^            enum Element { Element_Fire, Element_Earth, Element_Air, Element_Water, Element_COUN/;"	e	enum:ShowDemoWindowWidgets::Element	file:
Element_Water	build/_deps/imgui-proj-src/imgui_demo.cpp	/^            enum Element { Element_Fire, Element_Earth, Element_Air, Element_Water, Element_COUN/;"	e	enum:ShowDemoWindowWidgets::Element	file:
ElementsHandle	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp	/^    unsigned int    VboHandle, ElementsHandle;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:unsigned int	file:
EllipsisChar	build/_deps/imgui-proj-src/imgui.h	/^    ImWchar                     EllipsisChar;       \/\/ 2     \/\/ out \/\/ = '...'\/'.'\/\/ Ch/;"	m	struct:ImFont	typeref:typename:ImWchar
EllipsisChar	build/_deps/imgui-proj-src/imgui.h	/^    ImWchar         EllipsisChar;           \/\/ -1       \/\/ Explicitly specify unicode codepo/;"	m	struct:ImFontConfig	typeref:typename:ImWchar
EllipsisCharCount	build/_deps/imgui-proj-src/imgui.h	/^    short                       EllipsisCharCount;  \/\/ 1     \/\/ out \/\/ 1 or 3$/;"	m	struct:ImFont	typeref:typename:short
EllipsisCharStep	build/_deps/imgui-proj-src/imgui.h	/^    float                       EllipsisCharStep;   \/\/ 4     \/\/ out               \/\/ Step /;"	m	struct:ImFont	typeref:typename:float
EllipsisWidth	build/_deps/imgui-proj-src/imgui.h	/^    float                       EllipsisWidth;      \/\/ 4     \/\/ out               \/\/ Width$/;"	m	struct:ImFont	typeref:typename:float
EmitItem	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool        EmitItem;$/;"	m	struct:ImGuiGroupData	typeref:typename:bool
EmptyString	build/_deps/imgui-proj-src/imgui.cpp	/^char ImGuiTextBuffer::EmptyString[1] = { 0 };$/;"	m	class:ImGuiTextBuffer	typeref:typename:char[1]
EmptyString	build/_deps/imgui-proj-src/imgui.h	/^    IMGUI_API static char EmptyString[1];$/;"	m	struct:ImGuiTextBuffer	typeref:typename:IMGUI_API char[1]
Emscripten	build/_deps/imgui-proj-src/examples/example_sdl2_opengl3/README.md	/^## Emscripten$/;"	s
Emscripten	build/_deps/imgui-proj-src/examples/example_sdl3_opengl3/README.md	/^## Emscripten$/;"	s
Enable	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^        PFNGLENABLEPROC                   Enable;$/;"	m	struct:ImGL3WProcs::__anon6bce6ebe0108	typeref:typename:PFNGLENABLEPROC
EnableVertexAttribArray	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^        PFNGLENABLEVERTEXATTRIBARRAYPROC  EnableVertexAttribArray;$/;"	m	struct:ImGL3WProcs::__anon6bce6ebe0108	typeref:typename:PFNGLENABLEVERTEXATTRIBARRAYPROC
Enabled	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp	/^    GLint   Enabled, Size, Type, Normalized, Stride;$/;"	m	struct:ImGui_ImplOpenGL3_VtxAttribState	typeref:typename:GLint	file:
EnabledMaskByDisplayOrder	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImBitArrayPtr               EnabledMaskByDisplayOrder;  \/\/ Column DisplayOrder -> IsEnable/;"	m	struct:ImGuiTable	typeref:typename:ImBitArrayPtr
EnabledMaskByIndex	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImBitArrayPtr               EnabledMaskByIndex;         \/\/ Column Index -> IsEnabled map (/;"	m	struct:ImGuiTable	typeref:typename:ImBitArrayPtr
Encode85Byte	build/_deps/imgui-proj-src/misc/fonts/binary_to_compressed_c.cpp	/^char Encode85Byte(unsigned int x)$/;"	f	typeref:typename:char
End	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::End()$/;"	f	class:ImGui	typeref:typename:void
End	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGuiListClipper::End()$/;"	f	class:ImGuiListClipper	typeref:typename:void
EndChild	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::EndChild()$/;"	f	class:ImGui	typeref:typename:void
EndChildFrame	build/_deps/imgui-proj-src/imgui.h	/^    static inline void  EndChildFrame()                                                         /;"	f	namespace:ImGui	typeref:typename:void
EndColumns	build/_deps/imgui-proj-src/imgui_tables.cpp	/^void ImGui::EndColumns()$/;"	f	class:ImGui	typeref:typename:void
EndCombo	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::EndCombo()$/;"	f	class:ImGui	typeref:typename:void
EndComboPreview	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::EndComboPreview()$/;"	f	class:ImGui	typeref:typename:void
EndDisabled	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::EndDisabled()$/;"	f	class:ImGui	typeref:typename:void
EndDragDropSource	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::EndDragDropSource()$/;"	f	class:ImGui	typeref:typename:void
EndDragDropTarget	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::EndDragDropTarget()$/;"	f	class:ImGui	typeref:typename:void
EndFrame	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::EndFrame()$/;"	f	class:ImGui	typeref:typename:void
EndGroup	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::EndGroup()$/;"	f	class:ImGui	typeref:typename:void
EndListBox	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::EndListBox()$/;"	f	class:ImGui	typeref:typename:void
EndMainMenuBar	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::EndMainMenuBar()$/;"	f	class:ImGui	typeref:typename:void
EndMenu	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::EndMenu()$/;"	f	class:ImGui	typeref:typename:void
EndMenuBar	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::EndMenuBar()$/;"	f	class:ImGui	typeref:typename:void
EndOffset	build/_deps/imgui-proj-src/imgui_internal.h	/^    int             EndOffset = 0;                          \/\/ Because we don't own text buffe/;"	m	struct:ImGuiTextIndex	typeref:typename:int
EndPopup	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::EndPopup()$/;"	f	class:ImGui	typeref:typename:void
EndTabBar	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void    ImGui::EndTabBar()$/;"	f	class:ImGui	typeref:typename:void
EndTabItem	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void    ImGui::EndTabItem()$/;"	f	class:ImGui	typeref:typename:void
EndTable	build/_deps/imgui-proj-src/imgui_tables.cpp	/^void    ImGui::EndTable()$/;"	f	class:ImGui	typeref:typename:void
EndTooltip	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::EndTooltip()$/;"	f	class:ImGui	typeref:typename:void
Entries	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVector<ImGuiKeyRoutingData>   Entries;$/;"	m	struct:ImGuiKeyRoutingTable	typeref:typename:ImVector<ImGuiKeyRoutingData>
EntriesNext	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVector<ImGuiKeyRoutingData>   EntriesNext;                    \/\/ Double-buffer to avoid /;"	m	struct:ImGuiKeyRoutingTable	typeref:typename:ImVector<ImGuiKeyRoutingData>
EnumDesc	build/_deps/imgui-proj-src/imgui_demo.cpp	/^    struct EnumDesc { ImGuiTableFlags Value; const char* Name; const char* Tooltip; };$/;"	s	function:EditTableSizingFlags	file:
ErrorCheckEndFrameRecover	build/_deps/imgui-proj-src/imgui.cpp	/^void    ImGui::ErrorCheckEndFrameRecover(ImGuiErrorLogCallback log_callback, void* user_data)$/;"	f	class:ImGui	typeref:typename:void
ErrorCheckEndFrameSanityChecks	build/_deps/imgui-proj-src/imgui.cpp	/^static void ImGui::ErrorCheckEndFrameSanityChecks()$/;"	f	class:ImGui	typeref:typename:void	file:
ErrorCheckEndWindowRecover	build/_deps/imgui-proj-src/imgui.cpp	/^void    ImGui::ErrorCheckEndWindowRecover(ImGuiErrorLogCallback log_callback, void* user_data)$/;"	f	class:ImGui	typeref:typename:void
ErrorCheckNewFrameSanityChecks	build/_deps/imgui-proj-src/imgui.cpp	/^static void ImGui::ErrorCheckNewFrameSanityChecks()$/;"	f	class:ImGui	typeref:typename:void	file:
ErrorCheckUsingSetCursorPosToExtendParentBoundaries	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::ErrorCheckUsingSetCursorPosToExtendParentBoundaries()$/;"	f	class:ImGui	typeref:typename:void
EventChar	build/_deps/imgui-proj-src/imgui.h	/^    ImWchar             EventChar;      \/\/ Character input                      \/\/ Read-writ/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:ImWchar
EventFlag	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiInputTextFlags EventFlag;      \/\/ One ImGuiInputTextFlags_Callback*    \/\/ Read-only$/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:ImGuiInputTextFlags
EventId	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImU32                           EventId;        \/\/ Unique, sequential increasing integer t/;"	m	struct:ImGuiInputEvent	typeref:typename:ImU32
EventKey	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey            EventKey;       \/\/ Key pressed (Up\/Down\/TAB)            \/\/ Read-on/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:ImGuiKey
ExampleAppConsole	build/_deps/imgui-proj-src/imgui_demo.cpp	/^    ExampleAppConsole()$/;"	f	struct:ExampleAppConsole	file:
ExampleAppConsole	build/_deps/imgui-proj-src/imgui_demo.cpp	/^struct ExampleAppConsole$/;"	s	file:
ExampleAppDocuments	build/_deps/imgui-proj-src/imgui_demo.cpp	/^    ExampleAppDocuments()$/;"	f	struct:ExampleAppDocuments	file:
ExampleAppDocuments	build/_deps/imgui-proj-src/imgui_demo.cpp	/^struct ExampleAppDocuments$/;"	s	file:
ExampleAppLog	build/_deps/imgui-proj-src/imgui_demo.cpp	/^    ExampleAppLog()$/;"	f	struct:ExampleAppLog	file:
ExampleAppLog	build/_deps/imgui-proj-src/imgui_demo.cpp	/^struct ExampleAppLog$/;"	s	file:
Examples Applications	build/_deps/imgui-proj-src/docs/EXAMPLES.md	/^### Examples Applications$/;"	S
ExecCommand	build/_deps/imgui-proj-src/imgui_demo.cpp	/^    void    ExecCommand(const char* command_line)$/;"	f	struct:ExampleAppConsole	typeref:typename:void	file:
Expand	build/_deps/imgui-proj-src/imgui_internal.h	/^    void        Expand(const ImVec2& amount)        { Min.x -= amount.x; Min.y -= amount.y; Max./;"	f	struct:ImRect	typeref:typename:void
Expand	build/_deps/imgui-proj-src/imgui_internal.h	/^    void        Expand(const float amount)          { Min.x -= amount;   Min.y -= amount;   Max./;"	f	struct:ImRect	typeref:typename:void
FAQ (Frequently Asked Questions)	build/_deps/imgui-proj-src/docs/FAQ.md	/^# FAQ (Frequently Asked Questions)$/;"	c
FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA	build/_deps/imgui-proj-src/imgui_draw.cpp	/^static const ImVec2 FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA[ImGuiMouseCursor_COUNT][3] =$/;"	v	typeref:typename:const ImVec2[][3]	file:
FONT_ATLAS_DEFAULT_TEX_DATA_H	build/_deps/imgui-proj-src/imgui_draw.cpp	/^const int FONT_ATLAS_DEFAULT_TEX_DATA_H = 27;$/;"	v	typeref:typename:const int
FONT_ATLAS_DEFAULT_TEX_DATA_PIXELS	build/_deps/imgui-proj-src/imgui_draw.cpp	/^static const char FONT_ATLAS_DEFAULT_TEX_DATA_PIXELS[FONT_ATLAS_DEFAULT_TEX_DATA_W * FONT_ATLAS_/;"	v	typeref:typename:const char[]	file:
FONT_ATLAS_DEFAULT_TEX_DATA_W	build/_deps/imgui-proj-src/imgui_draw.cpp	/^const int FONT_ATLAS_DEFAULT_TEX_DATA_W = 122; \/\/ Actual texture will be 2 times that + 1 spac/;"	v	typeref:typename:const int
FT_CEIL	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^    #define FT_CEIL(/;"	d	file:
Face	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^        FT_Face         Face;$/;"	m	struct:__anon9c8900c20110::FreeTypeFont	typeref:typename:FT_Face	file:
FallbackAdvanceX	build/_deps/imgui-proj-src/imgui.h	/^    float                       FallbackAdvanceX;   \/\/ 4     \/\/ out \/\/ = FallbackGlyph->Ad/;"	m	struct:ImFont	typeref:typename:float
FallbackChar	build/_deps/imgui-proj-src/imgui.h	/^    ImWchar                     FallbackChar;       \/\/ 2     \/\/ out \/\/ = FFFD\/'?' \/\/ Ch/;"	m	struct:ImFont	typeref:typename:ImWchar
FallbackGlyph	build/_deps/imgui-proj-src/imgui.h	/^    const ImFontGlyph*          FallbackGlyph;      \/\/ 4-8   \/\/ out \/\/ = FindGlyph(FontFal/;"	m	struct:ImFont	typeref:typename:const ImFontGlyph *
FallbackMonitor	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiPlatformMonitor    FallbackMonitor;                    \/\/ Virtual monitor used as fal/;"	m	struct:ImGuiContext	typeref:typename:ImGuiPlatformMonitor
Fence	build/_deps/imgui-proj-src/backends/imgui_impl_dx12.cpp	/^    ID3D12Fence*                    Fence;$/;"	m	struct:ImGui_ImplDX12_ViewportData	typeref:typename:ID3D12Fence *	file:
Fence	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.h	/^    VkFence             Fence;$/;"	m	struct:ImGui_ImplVulkanH_Frame	typeref:typename:VkFence
FenceEvent	build/_deps/imgui-proj-src/backends/imgui_impl_dx12.cpp	/^    HANDLE                          FenceEvent;$/;"	m	struct:ImGui_ImplDX12_ViewportData	typeref:typename:HANDLE	file:
FenceSignaledValue	build/_deps/imgui-proj-src/backends/imgui_impl_dx12.cpp	/^    UINT64                          FenceSignaledValue;$/;"	m	struct:ImGui_ImplDX12_ViewportData	typeref:typename:UINT64	file:
FenceValue	build/_deps/imgui-proj-src/examples/example_win32_directx12/main.cpp	/^    UINT64                  FenceValue;$/;"	m	struct:FrameContext	typeref:typename:UINT64	file:
Filter	build/_deps/imgui-proj-src/imgui_demo.cpp	/^    ImGuiTextFilter       Filter;$/;"	m	struct:ExampleAppConsole	typeref:typename:ImGuiTextFilter	file:
Filter	build/_deps/imgui-proj-src/imgui_demo.cpp	/^    ImGuiTextFilter     Filter;$/;"	m	struct:ExampleAppLog	typeref:typename:ImGuiTextFilter	file:
FilterCasingSwap	build/_deps/imgui-proj-src/imgui_demo.cpp	/^                static int FilterCasingSwap(ImGuiInputTextCallbackData* data)$/;"	f	struct:ShowDemoWindowWidgets::TextFilters	typeref:typename:int	file:
FilterImGuiLetters	build/_deps/imgui-proj-src/imgui_demo.cpp	/^                static int FilterImGuiLetters(ImGuiInputTextCallbackData* data)$/;"	f	struct:ShowDemoWindowWidgets::TextFilters	typeref:typename:int	file:
Filters	build/_deps/imgui-proj-src/imgui.h	/^    ImVector<ImGuiTextRange>Filters;$/;"	m	struct:ImGuiTextFilter	typeref:typename:ImVector<ImGuiTextRange>
FindBestWheelingWindow	build/_deps/imgui-proj-src/imgui.cpp	/^static ImGuiWindow* FindBestWheelingWindow(const ImVec2& wheel)$/;"	f	typeref:typename:ImGuiWindow *	file:
FindBestWindowPosForPopup	build/_deps/imgui-proj-src/imgui.cpp	/^ImVec2 ImGui::FindBestWindowPosForPopup(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:ImVec2
FindBestWindowPosForPopupEx	build/_deps/imgui-proj-src/imgui.cpp	/^ImVec2 ImGui::FindBestWindowPosForPopupEx(const ImVec2& ref_pos, const ImVec2& size, ImGuiDir* l/;"	f	class:ImGui	typeref:typename:ImVec2
FindBlockingModal	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiWindow* ImGui::FindBlockingModal(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:ImGuiWindow *
FindBottomMostVisibleWindowWithinBeginStack	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiWindow* ImGui::FindBottomMostVisibleWindowWithinBeginStack(ImGuiWindow* parent_window)$/;"	f	class:ImGui	typeref:typename:ImGuiWindow *
FindFirstExistingGlyph	build/_deps/imgui-proj-src/imgui_draw.cpp	/^static ImWchar FindFirstExistingGlyph(ImFont* font, const ImWchar* candidate_chars, int candidat/;"	f	typeref:typename:ImWchar	file:
FindFrontMostVisibleChildWindow	build/_deps/imgui-proj-src/imgui.cpp	/^static ImGuiWindow* FindFrontMostVisibleChildWindow(ImGuiWindow* window)$/;"	f	typeref:typename:ImGuiWindow *	file:
FindGlyph	build/_deps/imgui-proj-src/imgui_draw.cpp	/^const ImFontGlyph* ImFont::FindGlyph(ImWchar c) const$/;"	f	class:ImFont	typeref:typename:const ImFontGlyph *
FindGlyphNoFallback	build/_deps/imgui-proj-src/imgui_draw.cpp	/^const ImFontGlyph* ImFont::FindGlyphNoFallback(ImWchar c) const$/;"	f	class:ImFont	typeref:typename:const ImFontGlyph *
FindHoveredViewportFromPlatformWindowStack	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiViewportP* ImGui::FindHoveredViewportFromPlatformWindowStack(const ImVec2& mouse_platform_p/;"	f	class:ImGui	typeref:typename:ImGuiViewportP *
FindHoveredWindow	build/_deps/imgui-proj-src/imgui.cpp	/^static void FindHoveredWindow()$/;"	f	typeref:typename:void	file:
FindLatestInputEvent	build/_deps/imgui-proj-src/imgui.cpp	/^static ImGuiInputEvent* FindLatestInputEvent(ImGuiContext* ctx, ImGuiInputEventType type, int ar/;"	f	typeref:typename:ImGuiInputEvent *	file:
FindOrCreateColumns	build/_deps/imgui-proj-src/imgui_tables.cpp	/^ImGuiOldColumns* ImGui::FindOrCreateColumns(ImGuiWindow* window, ImGuiID id)$/;"	f	class:ImGui	typeref:typename:ImGuiOldColumns *
FindPlatformMonitorForPos	build/_deps/imgui-proj-src/imgui.cpp	/^static int ImGui::FindPlatformMonitorForPos(const ImVec2& pos)$/;"	f	class:ImGui	typeref:typename:int	file:
FindPlatformMonitorForRect	build/_deps/imgui-proj-src/imgui.cpp	/^static int ImGui::FindPlatformMonitorForRect(const ImRect& rect)$/;"	f	class:ImGui	typeref:typename:int	file:
FindRenderedTextEnd	build/_deps/imgui-proj-src/imgui.cpp	/^const char* ImGui::FindRenderedTextEnd(const char* text, const char* text_end)$/;"	f	class:ImGui	typeref:typename:const char *
FindSettingsHandler	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiSettingsHandler* ImGui::FindSettingsHandler(const char* type_name)$/;"	f	class:ImGui	typeref:typename:ImGuiSettingsHandler *
FindViewportByID	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiViewport* ImGui::FindViewportByID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:ImGuiViewport *
FindViewportByPlatformHandle	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiViewport* ImGui::FindViewportByPlatformHandle(void* platform_handle)$/;"	f	class:ImGui	typeref:typename:ImGuiViewport *
FindWindowByID	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiWindow* ImGui::FindWindowByID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:ImGuiWindow *
FindWindowByName	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiWindow* ImGui::FindWindowByName(const char* name)$/;"	f	class:ImGui	typeref:typename:ImGuiWindow *
FindWindowDisplayIndex	build/_deps/imgui-proj-src/imgui.cpp	/^int ImGui::FindWindowDisplayIndex(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:int
FindWindowFocusIndex	build/_deps/imgui-proj-src/imgui.cpp	/^static int ImGui::FindWindowFocusIndex(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:int	file:
FindWindowNavFocusable	build/_deps/imgui-proj-src/imgui.cpp	/^static ImGuiWindow* FindWindowNavFocusable(int i_start, int i_stop, int dir) \/\/ FIXME-OPT O(N)$/;"	f	typeref:typename:ImGuiWindow *	file:
FindWindowSettingsByID	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiWindowSettings* ImGui::FindWindowSettingsByID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:ImGuiWindowSettings *
FindWindowSettingsByWindow	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiWindowSettings* ImGui::FindWindowSettingsByWindow(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:ImGuiWindowSettings *
FirstNodeWithWindows	build/_deps/imgui-proj-src/imgui.cpp	/^    ImGuiDockNode*      FirstNodeWithWindows;$/;"	m	struct:ImGuiDockNodeTreeInfo	typeref:typename:ImGuiDockNode *	file:
FixLargeWindowsWhenUndocking	build/_deps/imgui-proj-src/imgui.cpp	/^static ImVec2 FixLargeWindowsWhenUndocking(const ImVec2& size, ImGuiViewport* ref_viewport)$/;"	f	typeref:typename:ImVec2	file:
FixRectCornerFlags	build/_deps/imgui-proj-src/imgui_draw.cpp	/^static inline ImDrawFlags FixRectCornerFlags(ImDrawFlags flags)$/;"	f	typeref:typename:ImDrawFlags	file:
FixupKeyChord	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiKeyChord ImGui::FixupKeyChord(ImGuiContext* ctx, ImGuiKeyChord key_chord)$/;"	f	class:ImGui	typeref:typename:ImGuiKeyChord
Flags	build/_deps/imgui-proj-src/imgui.cpp	/^    ImGuiDockNodeFlags  Flags;                  \/\/ NB: We save individual flags one by one in /;"	m	struct:ImGuiDockNodeSettings	typeref:typename:ImGuiDockNodeFlags	file:
Flags	build/_deps/imgui-proj-src/imgui.h	/^    ImDrawListFlags         Flags;              \/\/ Flags, you may poke into these to adjust an/;"	m	struct:ImDrawList	typeref:typename:ImDrawListFlags
Flags	build/_deps/imgui-proj-src/imgui.h	/^    ImFontAtlasFlags            Flags;              \/\/ Build flags (see ImFontAtlasFlags_)$/;"	m	struct:ImFontAtlas	typeref:typename:ImFontAtlasFlags
Flags	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiInputTextFlags Flags;          \/\/ What user passed to InputText()      \/\/ Read-only$/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:ImGuiInputTextFlags
Flags	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiViewportFlags  Flags;                  \/\/ See ImGuiViewportFlags_$/;"	m	struct:ImGuiViewport	typeref:typename:ImGuiViewportFlags
Flags	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiInputTextFlags     Flags;                  \/\/ copy of InputText() flags. may be used /;"	m	struct:ImGuiInputTextState	typeref:typename:ImGuiInputTextFlags
Flags	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiNextItemDataFlags      Flags;$/;"	m	struct:ImGuiNextItemData	typeref:typename:ImGuiNextItemDataFlags
Flags	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiNextWindowDataFlags    Flags;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImGuiNextWindowDataFlags
Flags	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiOldColumnFlags Flags;                  \/\/ Not exposed$/;"	m	struct:ImGuiOldColumnData	typeref:typename:ImGuiOldColumnFlags
Flags	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiOldColumnFlags Flags;$/;"	m	struct:ImGuiOldColumns	typeref:typename:ImGuiOldColumnFlags
Flags	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTabBarFlags    Flags;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiTabBarFlags
Flags	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTabItemFlags   Flags;$/;"	m	struct:ImGuiTabItem	typeref:typename:ImGuiTabItemFlags
Flags	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTableColumnFlags   Flags;                          \/\/ Flags after some patching (not /;"	m	struct:ImGuiTableColumn	typeref:typename:ImGuiTableColumnFlags
Flags	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTableFlags             Flags;$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableFlags
Flags	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTypingSelectFlags  Flags;              \/\/ Flags passed to GetTypingSelectRequest()$/;"	m	struct:ImGuiTypingSelectRequest	typeref:typename:ImGuiTypingSelectFlags
Flags	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiWindowFlags        Flags, FlagsPreviousFrame;          \/\/ See enum ImGuiWindowFlags_$/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindowFlags
FlagsPreviousFrame	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiWindowFlags        Flags, FlagsPreviousFrame;          \/\/ See enum ImGuiWindowFlags_$/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindowFlags
FlattenDrawDataIntoSingleLayer	build/_deps/imgui-proj-src/imgui.cpp	/^static void FlattenDrawDataIntoSingleLayer(ImDrawDataBuilder* builder)$/;"	f	typeref:typename:void	file:
Floor	build/_deps/imgui-proj-src/imgui_internal.h	/^    void        Floor()                             { Min.x = IM_TRUNC(Min.x); Min.y = IM_TRUNC(/;"	f	struct:ImRect	typeref:typename:void
Flush	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^        PFNGLFLUSHPROC                    Flush;$/;"	m	struct:ImGL3WProcs::__anon6bce6ebe0108	typeref:typename:PFNGLFLUSHPROC
FocusItem	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::FocusItem()$/;"	f	class:ImGui	typeref:typename:void
FocusOrder	build/_deps/imgui-proj-src/imgui_internal.h	/^    short                   FocusOrder;                         \/\/ Order within WindowsFocusOr/;"	m	struct:ImGuiWindow	typeref:typename:short
FocusRouteParentWindowId	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiID             FocusRouteParentWindowId;   \/\/ ID of parent window for shortcut focus /;"	m	struct:ImGuiWindowClass	typeref:typename:ImGuiID
FocusScope	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID         FocusScope;$/;"	m	struct:ImGuiTypingSelectState	typeref:typename:ImGuiID
FocusScopeId	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID             FocusScopeId;   \/\/ Init,Move    \/\/ Best candidate focus scope ID$/;"	m	struct:ImGuiNavItemData	typeref:typename:ImGuiID
FocusScopeStack	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVector<ImGuiFocusScopeData>   FocusScopeStack;            \/\/ Stack for PushFocusScope()\//;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiFocusScopeData>
FocusTopMostWindowUnderOne	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::FocusTopMostWindowUnderOne(ImGuiWindow* under_this_window, ImGuiWindow* ignore_windo/;"	f	class:ImGui	typeref:typename:void
FocusWindow	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::FocusWindow(ImGuiWindow* window, ImGuiFocusRequestFlags flags)$/;"	f	class:ImGui	typeref:typename:void
Focused	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiInputEventAppFocused    { bool Focused; };$/;"	m	struct:ImGuiInputEventAppFocused	typeref:typename:bool
Font	build/_deps/imgui-proj-src/imgui.h	/^    ImFont*         Font;           \/\/ Input    \/\/ For custom font glyphs only: target font$/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:ImFont *
Font	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImFont*                 Font;                               \/\/ (Shortcut) == FontStack.emp/;"	m	struct:ImGuiContext	typeref:typename:ImFont *
Font	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImFont*         Font;                       \/\/ Current\/default font (optional, for simpli/;"	m	struct:ImDrawListSharedData	typeref:typename:ImFont *
Font	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^    FreeTypeFont        Font;$/;"	m	struct:ImFontBuildSrcDataFT	typeref:typename:FreeTypeFont	file:
Font Links	build/_deps/imgui-proj-src/docs/FONTS.md	/^## Font Links$/;"	s
FontAllowUserScaling	build/_deps/imgui-proj-src/imgui.h	/^    bool        FontAllowUserScaling;           \/\/ = false          \/\/ Allow user scaling te/;"	m	struct:ImGuiIO	typeref:typename:bool
FontAtlasOwnedByContext	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    FontAtlasOwnedByContext;            \/\/ IO.Fonts-> is owned by the /;"	m	struct:ImGuiContext	typeref:typename:bool
FontBaseSize	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   FontBaseSize;                       \/\/ (Shortcut) == IO.FontGlobal/;"	m	struct:ImGuiContext	typeref:typename:float
FontBuilderFlags	build/_deps/imgui-proj-src/imgui.h	/^    unsigned int                FontBuilderFlags;   \/\/ Shared flags (for all fonts) for custom/;"	m	struct:ImFontAtlas	typeref:typename:unsigned int
FontBuilderFlags	build/_deps/imgui-proj-src/imgui.h	/^    unsigned int    FontBuilderFlags;       \/\/ 0        \/\/ Settings for custom font builder./;"	m	struct:ImFontConfig	typeref:typename:unsigned int
FontBuilderIO	build/_deps/imgui-proj-src/imgui.h	/^    const ImFontBuilderIO*      FontBuilderIO;      \/\/ Opaque interface to a font builder (def/;"	m	struct:ImFontAtlas	typeref:typename:const ImFontBuilderIO *
FontBuilder_Build	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool    (*FontBuilder_Build)(ImFontAtlas* atlas);$/;"	m	struct:ImFontBuilderIO	typeref:typename:bool (*)(ImFontAtlas * atlas)
FontCommandBuffer	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^    VkCommandBuffer             FontCommandBuffer;$/;"	m	struct:ImGui_ImplVulkan_Data	typeref:typename:VkCommandBuffer	file:
FontCommandPool	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^    VkCommandPool               FontCommandPool;$/;"	m	struct:ImGui_ImplVulkan_Data	typeref:typename:VkCommandPool	file:
FontData	build/_deps/imgui-proj-src/imgui.h	/^    void*           FontData;               \/\/          \/\/ TTF\/OTF data$/;"	m	struct:ImFontConfig	typeref:typename:void *
FontDataOwnedByAtlas	build/_deps/imgui-proj-src/imgui.h	/^    bool            FontDataOwnedByAtlas;   \/\/ true     \/\/ TTF\/OTF data ownership taken by /;"	m	struct:ImFontConfig	typeref:typename:bool
FontDataSize	build/_deps/imgui-proj-src/imgui.h	/^    int             FontDataSize;           \/\/          \/\/ TTF\/OTF data size$/;"	m	struct:ImFontConfig	typeref:typename:int
FontDefault	build/_deps/imgui-proj-src/imgui.h	/^    ImFont*     FontDefault;                    \/\/ = NULL           \/\/ Font to use on NewFra/;"	m	struct:ImGuiIO	typeref:typename:ImFont *
FontDescriptorSet	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^    VkDescriptorSet             FontDescriptorSet;$/;"	m	struct:ImGui_ImplVulkan_Data	typeref:typename:VkDescriptorSet	file:
FontDpiScale	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   FontDpiScale;$/;"	m	struct:ImGuiWindow	typeref:typename:float
FontGlobalScale	build/_deps/imgui-proj-src/imgui.h	/^    float       FontGlobalScale;                \/\/ = 1.0f           \/\/ Global scale all font/;"	m	struct:ImGuiIO	typeref:typename:float
FontImage	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^    VkImage                     FontImage;$/;"	m	struct:ImGui_ImplVulkan_Data	typeref:typename:VkImage	file:
FontInfo	build/_deps/imgui-proj-src/imgui_draw.cpp	/^    stbtt_fontinfo      FontInfo;$/;"	m	struct:ImFontBuildSrcData	typeref:typename:stbtt_fontinfo	file:
FontInfo	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^    struct FontInfo$/;"	s	namespace:__anon9c8900c20110	file:
FontMemory	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^    VkDeviceMemory              FontMemory;$/;"	m	struct:ImGui_ImplVulkan_Data	typeref:typename:VkDeviceMemory	file:
FontNo	build/_deps/imgui-proj-src/imgui.h	/^    int             FontNo;                 \/\/ 0        \/\/ Index of font within TTF\/OTF fil/;"	m	struct:ImFontConfig	typeref:typename:int
FontSampler	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^    VkSampler                   FontSampler;$/;"	m	struct:ImGui_ImplVulkan_Data	typeref:typename:VkSampler	file:
FontSize	build/_deps/imgui-proj-src/imgui.h	/^    float                       FontSize;           \/\/ 4     \/\/ in  \/\/            \/\/ Hei/;"	m	struct:ImFont	typeref:typename:float
FontSize	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   FontSize;                           \/\/ (Shortcut) == FontBaseSize /;"	m	struct:ImGuiContext	typeref:typename:float
FontSize	build/_deps/imgui-proj-src/imgui_internal.h	/^    float           FontSize;                   \/\/ Current\/default font size (optional, for s/;"	m	struct:ImDrawListSharedData	typeref:typename:float
FontStack	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVector<ImFont*>               FontStack;                  \/\/ Stack for PushFont()\/PopFo/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImFont * >
FontTexture	build/_deps/imgui-proj-src/backends/imgui_impl_dx9.cpp	/^    LPDIRECT3DTEXTURE9          FontTexture;$/;"	m	struct:ImGui_ImplDX9_Data	typeref:typename:LPDIRECT3DTEXTURE9	file:
FontTexture	build/_deps/imgui-proj-src/backends/imgui_impl_opengl2.cpp	/^    GLuint       FontTexture;$/;"	m	struct:ImGui_ImplOpenGL2_Data	typeref:typename:GLuint	file:
FontTexture	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp	/^    GLuint          FontTexture;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:GLuint	file:
FontTexture	build/_deps/imgui-proj-src/backends/imgui_impl_sdlrenderer2.cpp	/^    SDL_Texture*    FontTexture;$/;"	m	struct:ImGui_ImplSDLRenderer2_Data	typeref:typename:SDL_Texture *	file:
FontTexture	build/_deps/imgui-proj-src/backends/imgui_impl_sdlrenderer3.cpp	/^    SDL_Texture*    FontTexture;$/;"	m	struct:ImGui_ImplSDLRenderer3_Data	typeref:typename:SDL_Texture *	file:
FontTexture	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.cpp	/^    WGPUTexture         FontTexture = nullptr;          \/\/ Font texture$/;"	m	struct:RenderResources	typeref:typename:WGPUTexture	file:
FontTextureView	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.cpp	/^    WGPUTextureView     FontTextureView = nullptr;      \/\/ Texture view for font texture$/;"	m	struct:RenderResources	typeref:typename:WGPUTextureView	file:
FontView	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^    VkImageView                 FontView;$/;"	m	struct:ImGui_ImplVulkan_Data	typeref:typename:VkImageView	file:
FontWindowScale	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   FontWindowScale;                    \/\/ User scale multiplier per-w/;"	m	struct:ImGuiWindow	typeref:typename:float
Fonts	build/_deps/imgui-proj-src/imgui.h	/^    ImFontAtlas*Fonts;                          \/\/ <auto>           \/\/ Font atlas: load, ras/;"	m	struct:ImGuiIO	typeref:typename:ImFontAtlas *
Fonts	build/_deps/imgui-proj-src/imgui.h	/^    ImVector<ImFont*>           Fonts;              \/\/ Hold all the fonts returned by AddFont*/;"	m	struct:ImFontAtlas	typeref:typename:ImVector<ImFont * >
Fonts Loading Instructions	build/_deps/imgui-proj-src/docs/FONTS.md	/^## Fonts Loading Instructions$/;"	s
ForceDisplayRangeByIndices	build/_deps/imgui-proj-src/imgui.h	/^    inline void ForceDisplayRangeByIndices(int item_begin, int item_end) { IncludeItemsByIndex(i/;"	f	struct:ImGuiListClipper	typeref:typename:void
FormatTextureIDForDebugDisplay	build/_deps/imgui-proj-src/imgui.cpp	/^static void FormatTextureIDForDebugDisplay(char* buf, int buf_size, ImTextureID tex_id)$/;"	f	typeref:typename:void	file:
FrameBorderSize	build/_deps/imgui-proj-src/imgui.h	/^    float       FrameBorderSize;            \/\/ Thickness of border around frames. Generally se/;"	m	struct:ImGuiStyle	typeref:typename:float
FrameContext	build/_deps/imgui-proj-src/examples/example_win32_directx12/main.cpp	/^struct FrameContext$/;"	s	file:
FrameCount	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                     FrameCount;$/;"	m	struct:ImGuiContext	typeref:typename:int
FrameCount	build/_deps/imgui-proj-src/imgui_internal.h	/^    int         FrameCount;$/;"	m	struct:ImGuiDebugAllocEntry	typeref:typename:int
FrameCountEnded	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                     FrameCountEnded;$/;"	m	struct:ImGuiContext	typeref:typename:int
FrameCountPlatformEnded	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                     FrameCountPlatformEnded;$/;"	m	struct:ImGuiContext	typeref:typename:int
FrameCountRendered	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                     FrameCountRendered;$/;"	m	struct:ImGuiContext	typeref:typename:int
FrameCtx	build/_deps/imgui-proj-src/backends/imgui_impl_dx12.cpp	/^    ImGui_ImplDX12_FrameContext*    FrameCtx;$/;"	m	struct:ImGui_ImplDX12_ViewportData	typeref:typename:ImGui_ImplDX12_FrameContext *	file:
FrameIndex	build/_deps/imgui-proj-src/backends/imgui_impl_dx12.cpp	/^    UINT                            FrameIndex;$/;"	m	struct:ImGui_ImplDX12_ViewportData	typeref:typename:UINT	file:
FrameIndex	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.h	/^    uint32_t            FrameIndex;             \/\/ Current frame being rendered to (0 <= Frame/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:uint32_t
FramePadding	build/_deps/imgui-proj-src/imgui.h	/^    ImVec2      FramePadding;               \/\/ Padding within a framed rectangle (used by most/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
FramePadding	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2              FramePadding;           \/\/ style.FramePadding locked at the time of Be/;"	m	struct:ImGuiTabBar	typeref:typename:ImVec2
FramePresent	build/_deps/imgui-proj-src/examples/example_glfw_vulkan/main.cpp	/^static void FramePresent(ImGui_ImplVulkanH_Window* wd)$/;"	f	typeref:typename:void	file:
FramePresent	build/_deps/imgui-proj-src/examples/example_sdl2_vulkan/main.cpp	/^static void FramePresent(ImGui_ImplVulkanH_Window* wd)$/;"	f	typeref:typename:void	file:
FrameRender	build/_deps/imgui-proj-src/examples/example_glfw_vulkan/main.cpp	/^static void FrameRender(ImGui_ImplVulkanH_Window* wd, ImDrawData* draw_data)$/;"	f	typeref:typename:void	file:
FrameRender	build/_deps/imgui-proj-src/examples/example_sdl2_vulkan/main.cpp	/^static void FrameRender(ImGui_ImplVulkanH_Window* wd, ImDrawData* draw_data)$/;"	f	typeref:typename:void	file:
FrameRenderBuffers	build/_deps/imgui-proj-src/backends/imgui_impl_dx12.cpp	/^    ImGui_ImplDX12_RenderBuffers*   FrameRenderBuffers;$/;"	m	struct:ImGui_ImplDX12_ViewportData	typeref:typename:ImGui_ImplDX12_RenderBuffers *	file:
FrameRenderBuffers	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^    ImGui_ImplVulkan_FrameRenderBuffers* FrameRenderBuffers;$/;"	m	struct:ImGui_ImplVulkan_WindowRenderBuffers	typeref:typename:ImGui_ImplVulkan_FrameRenderBuffers *	file:
FrameResources	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.cpp	/^struct FrameResources$/;"	s	file:
FrameRounding	build/_deps/imgui-proj-src/imgui.h	/^    float       FrameRounding;              \/\/ Radius of frame corners rounding. Set to 0.0f t/;"	m	struct:ImGuiStyle	typeref:typename:float
FrameSemaphores	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.h	/^    ImGui_ImplVulkanH_FrameSemaphores*  FrameSemaphores;$/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:ImGui_ImplVulkanH_FrameSemaphores *
Framebuffer	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.h	/^    VkFramebuffer       Framebuffer;$/;"	m	struct:ImGui_ImplVulkanH_Frame	typeref:typename:VkFramebuffer
FramebufferDescriptor	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^@implementation FramebufferDescriptor$/;"	I
FramebufferDescriptor	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^@interface FramebufferDescriptor : NSObject<NSCopying>$/;"	i
FramebufferScale	build/_deps/imgui-proj-src/imgui.h	/^    ImVec2              FramebufferScale;   \/\/ Amount of pixels for each unit of DisplaySize. /;"	m	struct:ImDrawData	typeref:typename:ImVec2
Framerate	build/_deps/imgui-proj-src/imgui.h	/^    float       Framerate;                          \/\/ Estimate of application framerate (roll/;"	m	struct:ImGuiIO	typeref:typename:float
FramerateSecPerFrame	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   FramerateSecPerFrame[60];           \/\/ Calculate estimate of frame/;"	m	struct:ImGuiContext	typeref:typename:float[60]
FramerateSecPerFrameAccum	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   FramerateSecPerFrameAccum;$/;"	m	struct:ImGuiContext	typeref:typename:float
FramerateSecPerFrameCount	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                     FramerateSecPerFrameCount;$/;"	m	struct:ImGuiContext	typeref:typename:int
FramerateSecPerFrameIdx	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                     FramerateSecPerFrameIdx;$/;"	m	struct:ImGuiContext	typeref:typename:int
Frames	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.h	/^    ImGui_ImplVulkanH_Frame*            Frames;$/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:ImGui_ImplVulkanH_Frame *
FreeCount	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImS16       FreeCount;$/;"	m	struct:ImGuiDebugAllocEntry	typeref:typename:ImS16
FreeIdx	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImPoolIdx       FreeIdx;    \/\/ Next free idx to use$/;"	m	struct:ImPool	typeref:typename:ImPoolIdx
FreeTypeFont	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^    struct FreeTypeFont$/;"	s	namespace:__anon9c8900c20110	file:
FreeType_Alloc	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^static void* FreeType_Alloc(FT_Memory \/*memory*\/, long size)$/;"	f	typeref:typename:void *	file:
FreeType_Free	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^static void FreeType_Free(FT_Memory \/*memory*\/, void* block)$/;"	f	typeref:typename:void	file:
FreeType_Realloc	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^static void* FreeType_Realloc(FT_Memory \/*memory*\/, long cur_size, long new_size, void* block)$/;"	f	typeref:typename:void *	file:
FreeWrapper	build/_deps/imgui-proj-src/imgui.cpp	/^static void    FreeWrapper(void* ptr, void* user_data)        { IM_UNUSED(user_data); IM_UNUSED(/;"	f	typeref:typename:void	file:
FreeWrapper	build/_deps/imgui-proj-src/imgui.cpp	/^static void    FreeWrapper(void* ptr, void* user_data)        { IM_UNUSED(user_data); free(ptr);/;"	f	typeref:typename:void	file:
FreezeColumnsCount	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTableColumnIdx         FreezeColumnsCount;         \/\/ Actual frozen columns count (==/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
FreezeColumnsRequest	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTableColumnIdx         FreezeColumnsRequest;       \/\/ Requested frozen columns count$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
FreezeRowsCount	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTableColumnIdx         FreezeRowsCount;            \/\/ Actual frozen row count (== Fre/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
FreezeRowsRequest	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTableColumnIdx         FreezeRowsRequest;          \/\/ Requested frozen rows count$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
FromIndices	build/_deps/imgui-proj-src/imgui_internal.h	/^    static ImGuiListClipperRange    FromIndices(int min, int max)                               /;"	f	struct:ImGuiListClipperRange	typeref:typename:ImGuiListClipperRange
FromPositions	build/_deps/imgui-proj-src/imgui_internal.h	/^    static ImGuiListClipperRange    FromPositions(float y1, float y2, int off_min, int off_max) /;"	f	struct:ImGuiListClipperRange	typeref:typename:ImGuiListClipperRange
Func	build/_deps/imgui-proj-src/imgui.cpp	/^            struct Func { static int IMGUI_CDECL WindowComparerByBeginOrder(const void* lhs, con/;"	s	function:ImGui::ShowMetricsWindow	file:
Funcs	build/_deps/imgui-proj-src/imgui.cpp	/^    struct Funcs$/;"	s	function:ImGui::ShowMetricsWindow	file:
Funcs	build/_deps/imgui-proj-src/imgui_demo.cpp	/^            struct Funcs$/;"	s	function:ShowDemoWindowWidgets	file:
Funcs	build/_deps/imgui-proj-src/imgui_demo.cpp	/^        struct Funcs$/;"	s	function:ShowDemoWindowWidgets	file:
FutureNode	build/_deps/imgui-proj-src/imgui.cpp	/^    ImGuiDockNode   FutureNode;$/;"	m	struct:ImGuiDockPreviewData	typeref:typename:ImGuiDockNode	file:
GCrc32LookupTable	build/_deps/imgui-proj-src/imgui.cpp	/^static const ImU32 GCrc32LookupTable[256] =$/;"	v	typeref:typename:const ImU32[256]	file:
GDataTypeInfo	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static const ImGuiDataTypeInfo GDataTypeInfo[] =$/;"	v	typeref:typename:const ImGuiDataTypeInfo[]	file:
GIT_EXECUTABLE	build/_deps/imgui-proj-subbuild/CMakeLists.txt	/^set(GIT_EXECUTABLE [==[\/usr\/bin\/git]==])$/;"	v
GIT_VERSION_STRING	build/_deps/imgui-proj-subbuild/CMakeLists.txt	/^set(GIT_VERSION_STRING [==[2.43.0]==])$/;"	v
GImAllocatorAllocFunc	build/_deps/imgui-proj-src/imgui.cpp	/^static ImGuiMemAllocFunc    GImAllocatorAllocFunc = MallocWrapper;$/;"	v	typeref:typename:ImGuiMemAllocFunc	file:
GImAllocatorFreeFunc	build/_deps/imgui-proj-src/imgui.cpp	/^static ImGuiMemFreeFunc     GImAllocatorFreeFunc = FreeWrapper;$/;"	v	typeref:typename:ImGuiMemFreeFunc	file:
GImAllocatorUserData	build/_deps/imgui-proj-src/imgui.cpp	/^static void*                GImAllocatorUserData = NULL;$/;"	v	typeref:typename:void *	file:
GImGui	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiContext*   GImGui = NULL;$/;"	v	typeref:typename:ImGuiContext *
GImGuiDemoMarkerCallback	build/_deps/imgui-proj-src/imgui_demo.cpp	/^ImGuiDemoMarkerCallback             GImGuiDemoMarkerCallback = NULL;$/;"	v	typeref:typename:ImGuiDemoMarkerCallback
GImGuiDemoMarkerCallbackUserData	build/_deps/imgui-proj-src/imgui_demo.cpp	/^void*                               GImGuiDemoMarkerCallbackUserData = NULL;$/;"	v	typeref:typename:void *
GImGuiFreeTypeAllocFunc	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^static void* (*GImGuiFreeTypeAllocFunc)(size_t size, void* user_data) = ImGuiFreeTypeDefaultAllo/;"	v	typeref:typename:void * (*)(size_t size,void * user_data)	file:
GImGuiFreeTypeAllocatorUserData	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^static void* GImGuiFreeTypeAllocatorUserData = nullptr;$/;"	v	typeref:typename:void *	file:
GImGuiFreeTypeFreeFunc	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^static void  (*GImGuiFreeTypeFreeFunc)(void* ptr, void* user_data) = ImGuiFreeTypeDefaultFreeFun/;"	v	typeref:typename:void (*)(void * ptr,void * user_data)	file:
GKeyNames	build/_deps/imgui-proj-src/imgui.cpp	/^static const char* const GKeyNames[] =$/;"	v	typeref:typename:const char * const[]	file:
GL3WGetProcAddressProc	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef GL3WglProc (*GL3WGetProcAddressProc)(const char *proc);$/;"	t	typeref:typename:GL3WglProc (*)(const char * proc)
GL3W_API	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL3W_API$/;"	d
GL3W_ARRAY_SIZE	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL3W_ARRAY_SIZE(/;"	d
GL3W_ERROR_INIT	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL3W_ERROR_INIT /;"	d
GL3W_ERROR_LIBRARY_OPEN	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL3W_ERROR_LIBRARY_OPEN /;"	d
GL3W_ERROR_OPENGL_VERSION	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL3W_ERROR_OPENGL_VERSION /;"	d
GL3W_OK	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL3W_OK /;"	d
GL3WglGetProcAddr	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef PROC(__stdcall* GL3WglGetProcAddr)(LPCSTR);$/;"	t	typeref:typename:PROC (__stdcall *)(LPCSTR)
GL3WglProc	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (*GL3WglProc)(void);$/;"	t	typeref:typename:void (*)(void)
GLAPI	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GLAPI /;"	d
GLContext	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^    SDL_GLContext   GLContext;$/;"	m	struct:ImGui_ImplSDL2_ViewportData	typeref:typename:SDL_GLContext	file:
GLContext	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^    SDL_GLContext   GLContext;$/;"	m	struct:ImGui_ImplSDL3_ViewportData	typeref:typename:SDL_GLContext	file:
GLDEBUGPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRY  *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsize/;"	t	typeref:typename:void (APIENTRY *)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar * message,const void * userParam)
GLDEBUGPROCARB	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRY  *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLs/;"	t	typeref:typename:void (APIENTRY *)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar * message,const void * userParam)
GLFWAPI	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^ #define GLFWAPI /;"	d
GLFW_ACCUM_ALPHA_BITS	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_ACCUM_ALPHA_BITS /;"	d
GLFW_ACCUM_BLUE_BITS	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_ACCUM_BLUE_BITS /;"	d
GLFW_ACCUM_GREEN_BITS	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_ACCUM_GREEN_BITS /;"	d
GLFW_ACCUM_RED_BITS	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_ACCUM_RED_BITS /;"	d
GLFW_ALPHA_BITS	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_ALPHA_BITS /;"	d
GLFW_ANY_RELEASE_BEHAVIOR	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_ANY_RELEASE_BEHAVIOR /;"	d
GLFW_API_UNAVAILABLE	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_API_UNAVAILABLE /;"	d
GLFW_ARROW_CURSOR	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_ARROW_CURSOR /;"	d
GLFW_AUTO_ICONIFY	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_AUTO_ICONIFY /;"	d
GLFW_AUX_BUFFERS	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_AUX_BUFFERS /;"	d
GLFW_BLUE_BITS	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_BLUE_BITS /;"	d
GLFW_BUILD_DOCS	build/_deps/imgui-proj-src/examples/example_glfw_vulkan/CMakeLists.txt	/^option(GLFW_BUILD_DOCS "Build the GLFW documentation" OFF)$/;"	D
GLFW_BUILD_EXAMPLES	build/_deps/imgui-proj-src/examples/example_glfw_vulkan/CMakeLists.txt	/^option(GLFW_BUILD_EXAMPLES "Build the GLFW example programs" OFF)$/;"	D
GLFW_BUILD_TESTS	build/_deps/imgui-proj-src/examples/example_glfw_vulkan/CMakeLists.txt	/^option(GLFW_BUILD_TESTS "Build the GLFW test programs" OFF)$/;"	D
GLFW_CALLBACK_DEFINED	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^ #define GLFW_CALLBACK_DEFINED$/;"	d
GLFW_CLIENT_API	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_CLIENT_API /;"	d
GLFW_CONNECTED	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_CONNECTED /;"	d
GLFW_CONTEXT_NO_ERROR	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_CONTEXT_NO_ERROR /;"	d
GLFW_CONTEXT_RELEASE_BEHAVIOR	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_CONTEXT_RELEASE_BEHAVIOR /;"	d
GLFW_CONTEXT_REVISION	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_CONTEXT_REVISION /;"	d
GLFW_CONTEXT_ROBUSTNESS	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_CONTEXT_ROBUSTNESS /;"	d
GLFW_CONTEXT_VERSION_MAJOR	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_CONTEXT_VERSION_MAJOR /;"	d
GLFW_CONTEXT_VERSION_MINOR	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_CONTEXT_VERSION_MINOR /;"	d
GLFW_CROSSHAIR_CURSOR	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_CROSSHAIR_CURSOR /;"	d
GLFW_CURSOR	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_CURSOR /;"	d
GLFW_CURSOR_DISABLED	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_CURSOR_DISABLED /;"	d
GLFW_CURSOR_HIDDEN	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_CURSOR_HIDDEN /;"	d
GLFW_CURSOR_NORMAL	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_CURSOR_NORMAL /;"	d
GLFW_DECORATED	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_DECORATED /;"	d
GLFW_DEPTH_BITS	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_DEPTH_BITS /;"	d
GLFW_DIR	build/_deps/imgui-proj-src/examples/example_glfw_vulkan/CMakeLists.txt	/^set(GLFW_DIR ..\/..\/..\/glfw) # Set this to point to an up-to-date GLFW repo$/;"	v
GLFW_DISCONNECTED	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_DISCONNECTED /;"	d
GLFW_DOCUMENT_INTERNALS	build/_deps/imgui-proj-src/examples/example_glfw_vulkan/CMakeLists.txt	/^option(GLFW_DOCUMENT_INTERNALS "Include internals in documentation" OFF)$/;"	D
GLFW_DONT_CARE	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_DONT_CARE /;"	d
GLFW_DOUBLEBUFFER	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_DOUBLEBUFFER /;"	d
GLFW_EXPOSE_NATIVE_COCOA	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^#define GLFW_EXPOSE_NATIVE_COCOA$/;"	d	file:
GLFW_EXPOSE_NATIVE_COCOA	build/_deps/imgui-proj-src/examples/example_glfw_metal/main.mm	/^#define GLFW_EXPOSE_NATIVE_COCOA$/;"	M
GLFW_EXPOSE_NATIVE_WIN32	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^#define GLFW_EXPOSE_NATIVE_WIN32$/;"	d	file:
GLFW_FALSE	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_FALSE /;"	d
GLFW_FLOATING	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_FLOATING /;"	d
GLFW_FOCUSED	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_FOCUSED /;"	d
GLFW_FORMAT_UNAVAILABLE	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_FORMAT_UNAVAILABLE /;"	d
GLFW_GREEN_BITS	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_GREEN_BITS /;"	d
GLFW_HAND_CURSOR	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_HAND_CURSOR /;"	d
GLFW_HAS_FOCUS_ON_SHOW	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^#define GLFW_HAS_FOCUS_ON_SHOW /;"	d	file:
GLFW_HAS_FOCUS_WINDOW	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^#define GLFW_HAS_FOCUS_WINDOW /;"	d	file:
GLFW_HAS_GAMEPAD_API	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^#define GLFW_HAS_GAMEPAD_API /;"	d	file:
GLFW_HAS_GETERROR	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^#define GLFW_HAS_GETERROR /;"	d	file:
GLFW_HAS_GETKEYNAME	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^#define GLFW_HAS_GETKEYNAME /;"	d	file:
GLFW_HAS_MONITOR_WORK_AREA	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^#define GLFW_HAS_MONITOR_WORK_AREA /;"	d	file:
GLFW_HAS_MOUSE_PASSTHROUGH	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^#define GLFW_HAS_MOUSE_PASSTHROUGH /;"	d	file:
GLFW_HAS_NEW_CURSORS	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^#define GLFW_HAS_NEW_CURSORS /;"	d	file:
GLFW_HAS_OSX_WINDOW_POS_FIX	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^#define GLFW_HAS_OSX_WINDOW_POS_FIX /;"	d	file:
GLFW_HAS_PER_MONITOR_DPI	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^#define GLFW_HAS_PER_MONITOR_DPI /;"	d	file:
GLFW_HAS_VULKAN	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^#define GLFW_HAS_VULKAN /;"	d	file:
GLFW_HAS_WINDOW_ALPHA	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^#define GLFW_HAS_WINDOW_ALPHA /;"	d	file:
GLFW_HAS_WINDOW_HOVERED	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^#define GLFW_HAS_WINDOW_HOVERED /;"	d	file:
GLFW_HAS_WINDOW_TOPMOST	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^#define GLFW_HAS_WINDOW_TOPMOST /;"	d	file:
GLFW_HRESIZE_CURSOR	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_HRESIZE_CURSOR /;"	d
GLFW_IBEAM_CURSOR	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_IBEAM_CURSOR /;"	d
GLFW_ICONIFIED	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_ICONIFIED /;"	d
GLFW_INCLUDE_NONE	build/_deps/imgui-proj-src/examples/example_glfw_metal/main.mm	/^#define GLFW_INCLUDE_NONE$/;"	M
GLFW_INCLUDE_NONE	build/_deps/imgui-proj-src/examples/example_glfw_vulkan/main.cpp	/^#define GLFW_INCLUDE_NONE$/;"	d	file:
GLFW_INCLUDE_VULKAN	build/_deps/imgui-proj-src/examples/example_glfw_vulkan/main.cpp	/^#define GLFW_INCLUDE_VULKAN$/;"	d	file:
GLFW_INSTALL	build/_deps/imgui-proj-src/examples/example_glfw_vulkan/CMakeLists.txt	/^option(GLFW_INSTALL "Generate installation target" OFF)$/;"	D
GLFW_INVALID_ENUM	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_INVALID_ENUM /;"	d
GLFW_INVALID_VALUE	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_INVALID_VALUE /;"	d
GLFW_JOYSTICK_1	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_1 /;"	d
GLFW_JOYSTICK_10	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_10 /;"	d
GLFW_JOYSTICK_11	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_11 /;"	d
GLFW_JOYSTICK_12	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_12 /;"	d
GLFW_JOYSTICK_13	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_13 /;"	d
GLFW_JOYSTICK_14	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_14 /;"	d
GLFW_JOYSTICK_15	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_15 /;"	d
GLFW_JOYSTICK_16	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_16 /;"	d
GLFW_JOYSTICK_2	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_2 /;"	d
GLFW_JOYSTICK_3	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_3 /;"	d
GLFW_JOYSTICK_4	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_4 /;"	d
GLFW_JOYSTICK_5	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_5 /;"	d
GLFW_JOYSTICK_6	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_6 /;"	d
GLFW_JOYSTICK_7	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_7 /;"	d
GLFW_JOYSTICK_8	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_8 /;"	d
GLFW_JOYSTICK_9	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_9 /;"	d
GLFW_JOYSTICK_LAST	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_LAST /;"	d
GLFW_KEY_0	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_0 /;"	d
GLFW_KEY_1	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_1 /;"	d
GLFW_KEY_2	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_2 /;"	d
GLFW_KEY_3	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_3 /;"	d
GLFW_KEY_4	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_4 /;"	d
GLFW_KEY_5	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_5 /;"	d
GLFW_KEY_6	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_6 /;"	d
GLFW_KEY_7	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_7 /;"	d
GLFW_KEY_8	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_8 /;"	d
GLFW_KEY_9	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_9 /;"	d
GLFW_KEY_A	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_A /;"	d
GLFW_KEY_APOSTROPHE	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_APOSTROPHE /;"	d
GLFW_KEY_B	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_B /;"	d
GLFW_KEY_BACKSLASH	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_BACKSLASH /;"	d
GLFW_KEY_BACKSPACE	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_BACKSPACE /;"	d
GLFW_KEY_C	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_C /;"	d
GLFW_KEY_CAPS_LOCK	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_CAPS_LOCK /;"	d
GLFW_KEY_COMMA	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_COMMA /;"	d
GLFW_KEY_D	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_D /;"	d
GLFW_KEY_DELETE	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_DELETE /;"	d
GLFW_KEY_DOWN	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_DOWN /;"	d
GLFW_KEY_E	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_E /;"	d
GLFW_KEY_END	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_END /;"	d
GLFW_KEY_ENTER	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_ENTER /;"	d
GLFW_KEY_EQUAL	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_EQUAL /;"	d
GLFW_KEY_ESCAPE	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_ESCAPE /;"	d
GLFW_KEY_F	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F /;"	d
GLFW_KEY_F1	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F1 /;"	d
GLFW_KEY_F10	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F10 /;"	d
GLFW_KEY_F11	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F11 /;"	d
GLFW_KEY_F12	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F12 /;"	d
GLFW_KEY_F13	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F13 /;"	d
GLFW_KEY_F14	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F14 /;"	d
GLFW_KEY_F15	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F15 /;"	d
GLFW_KEY_F16	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F16 /;"	d
GLFW_KEY_F17	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F17 /;"	d
GLFW_KEY_F18	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F18 /;"	d
GLFW_KEY_F19	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F19 /;"	d
GLFW_KEY_F2	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F2 /;"	d
GLFW_KEY_F20	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F20 /;"	d
GLFW_KEY_F21	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F21 /;"	d
GLFW_KEY_F22	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F22 /;"	d
GLFW_KEY_F23	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F23 /;"	d
GLFW_KEY_F24	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F24 /;"	d
GLFW_KEY_F25	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F25 /;"	d
GLFW_KEY_F3	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F3 /;"	d
GLFW_KEY_F4	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F4 /;"	d
GLFW_KEY_F5	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F5 /;"	d
GLFW_KEY_F6	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F6 /;"	d
GLFW_KEY_F7	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F7 /;"	d
GLFW_KEY_F8	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F8 /;"	d
GLFW_KEY_F9	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F9 /;"	d
GLFW_KEY_G	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_G /;"	d
GLFW_KEY_GRAVE_ACCENT	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_GRAVE_ACCENT /;"	d
GLFW_KEY_H	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_H /;"	d
GLFW_KEY_HOME	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_HOME /;"	d
GLFW_KEY_I	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_I /;"	d
GLFW_KEY_INSERT	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_INSERT /;"	d
GLFW_KEY_J	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_J /;"	d
GLFW_KEY_K	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_K /;"	d
GLFW_KEY_KP_0	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_0 /;"	d
GLFW_KEY_KP_1	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_1 /;"	d
GLFW_KEY_KP_2	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_2 /;"	d
GLFW_KEY_KP_3	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_3 /;"	d
GLFW_KEY_KP_4	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_4 /;"	d
GLFW_KEY_KP_5	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_5 /;"	d
GLFW_KEY_KP_6	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_6 /;"	d
GLFW_KEY_KP_7	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_7 /;"	d
GLFW_KEY_KP_8	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_8 /;"	d
GLFW_KEY_KP_9	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_9 /;"	d
GLFW_KEY_KP_ADD	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_ADD /;"	d
GLFW_KEY_KP_DECIMAL	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_DECIMAL /;"	d
GLFW_KEY_KP_DIVIDE	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_DIVIDE /;"	d
GLFW_KEY_KP_ENTER	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_ENTER /;"	d
GLFW_KEY_KP_EQUAL	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_EQUAL /;"	d
GLFW_KEY_KP_MULTIPLY	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_MULTIPLY /;"	d
GLFW_KEY_KP_SUBTRACT	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_SUBTRACT /;"	d
GLFW_KEY_L	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_L /;"	d
GLFW_KEY_LAST	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_LAST /;"	d
GLFW_KEY_LEFT	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_LEFT /;"	d
GLFW_KEY_LEFT_ALT	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_LEFT_ALT /;"	d
GLFW_KEY_LEFT_BRACKET	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_LEFT_BRACKET /;"	d
GLFW_KEY_LEFT_CONTROL	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_LEFT_CONTROL /;"	d
GLFW_KEY_LEFT_SHIFT	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_LEFT_SHIFT /;"	d
GLFW_KEY_LEFT_SUPER	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_LEFT_SUPER /;"	d
GLFW_KEY_M	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_M /;"	d
GLFW_KEY_MENU	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_MENU /;"	d
GLFW_KEY_MINUS	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_MINUS /;"	d
GLFW_KEY_N	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_N /;"	d
GLFW_KEY_NUM_LOCK	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_NUM_LOCK /;"	d
GLFW_KEY_O	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_O /;"	d
GLFW_KEY_P	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_P /;"	d
GLFW_KEY_PAGE_DOWN	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_PAGE_DOWN /;"	d
GLFW_KEY_PAGE_UP	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_PAGE_UP /;"	d
GLFW_KEY_PAUSE	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_PAUSE /;"	d
GLFW_KEY_PERIOD	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_PERIOD /;"	d
GLFW_KEY_PRINT_SCREEN	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_PRINT_SCREEN /;"	d
GLFW_KEY_Q	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_Q /;"	d
GLFW_KEY_R	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_R /;"	d
GLFW_KEY_RIGHT	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_RIGHT /;"	d
GLFW_KEY_RIGHT_ALT	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_RIGHT_ALT /;"	d
GLFW_KEY_RIGHT_BRACKET	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_RIGHT_BRACKET /;"	d
GLFW_KEY_RIGHT_CONTROL	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_RIGHT_CONTROL /;"	d
GLFW_KEY_RIGHT_SHIFT	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_RIGHT_SHIFT /;"	d
GLFW_KEY_RIGHT_SUPER	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_RIGHT_SUPER /;"	d
GLFW_KEY_S	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_S /;"	d
GLFW_KEY_SCROLL_LOCK	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_SCROLL_LOCK /;"	d
GLFW_KEY_SEMICOLON	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_SEMICOLON /;"	d
GLFW_KEY_SLASH	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_SLASH /;"	d
GLFW_KEY_SPACE	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_SPACE /;"	d
GLFW_KEY_T	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_T /;"	d
GLFW_KEY_TAB	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_TAB /;"	d
GLFW_KEY_U	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_U /;"	d
GLFW_KEY_UNKNOWN	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_UNKNOWN /;"	d
GLFW_KEY_UP	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_UP /;"	d
GLFW_KEY_V	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_V /;"	d
GLFW_KEY_W	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_W /;"	d
GLFW_KEY_WORLD_1	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_WORLD_1 /;"	d
GLFW_KEY_WORLD_2	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_WORLD_2 /;"	d
GLFW_KEY_X	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_X /;"	d
GLFW_KEY_Y	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_Y /;"	d
GLFW_KEY_Z	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_Z /;"	d
GLFW_LOSE_CONTEXT_ON_RESET	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_LOSE_CONTEXT_ON_RESET /;"	d
GLFW_MAXIMIZED	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MAXIMIZED /;"	d
GLFW_MOD_ALT	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOD_ALT /;"	d
GLFW_MOD_CONTROL	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOD_CONTROL /;"	d
GLFW_MOD_SHIFT	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOD_SHIFT /;"	d
GLFW_MOD_SUPER	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOD_SUPER /;"	d
GLFW_MOUSE_BUTTON_1	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOUSE_BUTTON_1 /;"	d
GLFW_MOUSE_BUTTON_2	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOUSE_BUTTON_2 /;"	d
GLFW_MOUSE_BUTTON_3	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOUSE_BUTTON_3 /;"	d
GLFW_MOUSE_BUTTON_4	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOUSE_BUTTON_4 /;"	d
GLFW_MOUSE_BUTTON_5	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOUSE_BUTTON_5 /;"	d
GLFW_MOUSE_BUTTON_6	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOUSE_BUTTON_6 /;"	d
GLFW_MOUSE_BUTTON_7	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOUSE_BUTTON_7 /;"	d
GLFW_MOUSE_BUTTON_8	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOUSE_BUTTON_8 /;"	d
GLFW_MOUSE_BUTTON_LAST	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOUSE_BUTTON_LAST /;"	d
GLFW_MOUSE_BUTTON_LEFT	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOUSE_BUTTON_LEFT /;"	d
GLFW_MOUSE_BUTTON_MIDDLE	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOUSE_BUTTON_MIDDLE /;"	d
GLFW_MOUSE_BUTTON_RIGHT	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOUSE_BUTTON_RIGHT /;"	d
GLFW_NOT_INITIALIZED	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_NOT_INITIALIZED /;"	d
GLFW_NO_API	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_NO_API /;"	d
GLFW_NO_CURRENT_CONTEXT	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_NO_CURRENT_CONTEXT /;"	d
GLFW_NO_RESET_NOTIFICATION	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_NO_RESET_NOTIFICATION /;"	d
GLFW_NO_ROBUSTNESS	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_NO_ROBUSTNESS /;"	d
GLFW_NO_WINDOW_CONTEXT	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_NO_WINDOW_CONTEXT /;"	d
GLFW_OPENGL_ANY_PROFILE	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_OPENGL_ANY_PROFILE /;"	d
GLFW_OPENGL_API	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_OPENGL_API /;"	d
GLFW_OPENGL_COMPAT_PROFILE	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_OPENGL_COMPAT_PROFILE /;"	d
GLFW_OPENGL_CORE_PROFILE	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_OPENGL_CORE_PROFILE /;"	d
GLFW_OPENGL_DEBUG_CONTEXT	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_OPENGL_DEBUG_CONTEXT /;"	d
GLFW_OPENGL_ES_API	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_OPENGL_ES_API /;"	d
GLFW_OPENGL_FORWARD_COMPAT	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_OPENGL_FORWARD_COMPAT /;"	d
GLFW_OPENGL_PROFILE	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_OPENGL_PROFILE /;"	d
GLFW_OUT_OF_MEMORY	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_OUT_OF_MEMORY /;"	d
GLFW_PLATFORM_ERROR	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_PLATFORM_ERROR /;"	d
GLFW_PRESS	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_PRESS /;"	d
GLFW_RED_BITS	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_RED_BITS /;"	d
GLFW_REFRESH_RATE	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_REFRESH_RATE /;"	d
GLFW_RELEASE	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_RELEASE /;"	d
GLFW_RELEASE_BEHAVIOR_FLUSH	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_RELEASE_BEHAVIOR_FLUSH /;"	d
GLFW_RELEASE_BEHAVIOR_NONE	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_RELEASE_BEHAVIOR_NONE /;"	d
GLFW_REPEAT	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_REPEAT /;"	d
GLFW_RESIZABLE	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_RESIZABLE /;"	d
GLFW_SAMPLES	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_SAMPLES /;"	d
GLFW_SRGB_CAPABLE	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_SRGB_CAPABLE /;"	d
GLFW_STENCIL_BITS	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_STENCIL_BITS /;"	d
GLFW_STEREO	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_STEREO /;"	d
GLFW_STICKY_KEYS	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_STICKY_KEYS /;"	d
GLFW_STICKY_MOUSE_BUTTONS	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_STICKY_MOUSE_BUTTONS /;"	d
GLFW_TRUE	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_TRUE /;"	d
GLFW_VERSION_COMBINED	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^#define GLFW_VERSION_COMBINED /;"	d	file:
GLFW_VERSION_MAJOR	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_VERSION_MAJOR /;"	d
GLFW_VERSION_MINOR	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_VERSION_MINOR /;"	d
GLFW_VERSION_REVISION	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_VERSION_REVISION /;"	d
GLFW_VERSION_UNAVAILABLE	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_VERSION_UNAVAILABLE /;"	d
GLFW_VISIBLE	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_VISIBLE /;"	d
GLFW_VRESIZE_CURSOR	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_VRESIZE_CURSOR /;"	d
GLFW_WINGDIAPI_DEFINED	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^ #define GLFW_WINGDIAPI_DEFINED$/;"	d
GLFWcharfun	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWcharfun)(GLFWwindow*,unsigned int);$/;"	t	typeref:typename:void (*)(GLFWwindow *,unsigned int)
GLFWcharmodsfun	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWcharmodsfun)(GLFWwindow*,unsigned int,int);$/;"	t	typeref:typename:void (*)(GLFWwindow *,unsigned int,int)
GLFWcursor	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef struct GLFWcursor GLFWcursor;$/;"	t	typeref:struct:GLFWcursor
GLFWcursorenterfun	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWcursorenterfun)(GLFWwindow*,int);$/;"	t	typeref:typename:void (*)(GLFWwindow *,int)
GLFWcursorposfun	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWcursorposfun)(GLFWwindow*,double,double);$/;"	t	typeref:typename:void (*)(GLFWwindow *,double,double)
GLFWdropfun	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWdropfun)(GLFWwindow*,int,const char**);$/;"	t	typeref:typename:void (*)(GLFWwindow *,int,const char **)
GLFWerrorfun	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWerrorfun)(int,const char*);$/;"	t	typeref:typename:void (*)(int,const char *)
GLFWframebuffersizefun	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWframebuffersizefun)(GLFWwindow*,int,int);$/;"	t	typeref:typename:void (*)(GLFWwindow *,int,int)
GLFWgammaramp	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef struct GLFWgammaramp$/;"	s
GLFWgammaramp	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^} GLFWgammaramp;$/;"	t	typeref:struct:GLFWgammaramp
GLFWglproc	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (*GLFWglproc)(void);$/;"	t	typeref:typename:void (*)(void)
GLFWimage	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef struct GLFWimage$/;"	s
GLFWimage	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^} GLFWimage;$/;"	t	typeref:struct:GLFWimage
GLFWjoystickfun	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWjoystickfun)(int,int);$/;"	t	typeref:typename:void (*)(int,int)
GLFWkeyfun	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWkeyfun)(GLFWwindow*,int,int,int,int);$/;"	t	typeref:typename:void (*)(GLFWwindow *,int,int,int,int)
GLFWmonitor	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef struct GLFWmonitor GLFWmonitor;$/;"	t	typeref:struct:GLFWmonitor
GLFWmonitorfun	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWmonitorfun)(GLFWmonitor*,int);$/;"	t	typeref:typename:void (*)(GLFWmonitor *,int)
GLFWmousebuttonfun	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWmousebuttonfun)(GLFWwindow*,int,int,int);$/;"	t	typeref:typename:void (*)(GLFWwindow *,int,int,int)
GLFWscrollfun	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWscrollfun)(GLFWwindow*,double,double);$/;"	t	typeref:typename:void (*)(GLFWwindow *,double,double)
GLFWvidmode	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef struct GLFWvidmode$/;"	s
GLFWvidmode	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^} GLFWvidmode;$/;"	t	typeref:struct:GLFWvidmode
GLFWvkproc	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (*GLFWvkproc)(void);$/;"	t	typeref:typename:void (*)(void)
GLFWwindow	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef struct GLFWwindow GLFWwindow;$/;"	t	typeref:struct:GLFWwindow
GLFWwindowclosefun	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWwindowclosefun)(GLFWwindow*);$/;"	t	typeref:typename:void (*)(GLFWwindow *)
GLFWwindowfocusfun	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWwindowfocusfun)(GLFWwindow*,int);$/;"	t	typeref:typename:void (*)(GLFWwindow *,int)
GLFWwindowiconifyfun	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWwindowiconifyfun)(GLFWwindow*,int);$/;"	t	typeref:typename:void (*)(GLFWwindow *,int)
GLFWwindowposfun	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWwindowposfun)(GLFWwindow*,int,int);$/;"	t	typeref:typename:void (*)(GLFWwindow *,int,int)
GLFWwindowrefreshfun	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWwindowrefreshfun)(GLFWwindow*);$/;"	t	typeref:typename:void (*)(GLFWwindow *)
GLFWwindowsizefun	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWwindowsizefun)(GLFWwindow*,int,int);$/;"	t	typeref:typename:void (*)(GLFWwindow *,int,int)
GLVULKANPROCNV	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRY  *GLVULKANPROCNV)(void);$/;"	t	typeref:typename:void (APIENTRY *)(void)
GL_ACTIVE_TEXTURE	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_ACTIVE_TEXTURE /;"	d
GL_ARB_clip_control	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_ARB_clip_control /;"	d
GL_ARRAY_BUFFER	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_ARRAY_BUFFER /;"	d
GL_ARRAY_BUFFER_BINDING	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_ARRAY_BUFFER_BINDING /;"	d
GL_BACK	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_BACK /;"	d
GL_BLEND	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_BLEND /;"	d
GL_BLEND_DST_ALPHA	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_BLEND_DST_ALPHA /;"	d
GL_BLEND_DST_RGB	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_BLEND_DST_RGB /;"	d
GL_BLEND_EQUATION_ALPHA	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_BLEND_EQUATION_ALPHA /;"	d
GL_BLEND_EQUATION_RGB	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_BLEND_EQUATION_RGB /;"	d
GL_BLEND_SRC_ALPHA	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_BLEND_SRC_ALPHA /;"	d
GL_BLEND_SRC_RGB	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_BLEND_SRC_RGB /;"	d
GL_CALL	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp	/^#define GL_CALL(/;"	d	file:
GL_CLIP_ORIGIN	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_CLIP_ORIGIN /;"	d
GL_COLOR_BUFFER_BIT	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_COLOR_BUFFER_BIT /;"	d
GL_COMPILE_STATUS	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_COMPILE_STATUS /;"	d
GL_CONTEXT_COMPATIBILITY_PROFILE_BIT	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_CONTEXT_COMPATIBILITY_PROFILE_BIT /;"	d
GL_CONTEXT_PROFILE_MASK	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_CONTEXT_PROFILE_MASK /;"	d
GL_CULL_FACE	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_CULL_FACE /;"	d
GL_CURRENT_PROGRAM	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_CURRENT_PROGRAM /;"	d
GL_DEPTH_TEST	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_DEPTH_TEST /;"	d
GL_ELEMENT_ARRAY_BUFFER	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_ELEMENT_ARRAY_BUFFER /;"	d
GL_ELEMENT_ARRAY_BUFFER_BINDING	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_ELEMENT_ARRAY_BUFFER_BINDING /;"	d
GL_EXTENSIONS	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_EXTENSIONS /;"	d
GL_FALSE	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_FALSE /;"	d
GL_FILL	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_FILL /;"	d
GL_FLOAT	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_FLOAT /;"	d
GL_FRAGMENT_SHADER	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_FRAGMENT_SHADER /;"	d
GL_FRAMEBUFFER_SRGB	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_FRAMEBUFFER_SRGB /;"	d
GL_FRONT	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_FRONT /;"	d
GL_FRONT_AND_BACK	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_FRONT_AND_BACK /;"	d
GL_FUNC_ADD	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_FUNC_ADD /;"	d
GL_GLEXT_PROTOTYPES	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp	/^#define GL_GLEXT_PROTOTYPES$/;"	d	file:
GL_INFO_LOG_LENGTH	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_INFO_LOG_LENGTH /;"	d
GL_LINEAR	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_LINEAR /;"	d
GL_LINK_STATUS	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_LINK_STATUS /;"	d
GL_MAJOR_VERSION	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_MAJOR_VERSION /;"	d
GL_MINOR_VERSION	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_MINOR_VERSION /;"	d
GL_NUM_EXTENSIONS	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_NUM_EXTENSIONS /;"	d
GL_ONE	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_ONE /;"	d
GL_ONE_MINUS_SRC_ALPHA	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_ONE_MINUS_SRC_ALPHA /;"	d
GL_PACK_ALIGNMENT	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_PACK_ALIGNMENT /;"	d
GL_PIXEL_UNPACK_BUFFER	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_PIXEL_UNPACK_BUFFER /;"	d
GL_PIXEL_UNPACK_BUFFER_BINDING	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_PIXEL_UNPACK_BUFFER_BINDING /;"	d
GL_POLYGON_MODE	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_POLYGON_MODE /;"	d
GL_PRIMITIVE_RESTART	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_PRIMITIVE_RESTART /;"	d
GL_RENDERER	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_RENDERER /;"	d
GL_RGBA	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_RGBA /;"	d
GL_SAMPLER_BINDING	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_SAMPLER_BINDING /;"	d
GL_SCISSOR_BOX	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_SCISSOR_BOX /;"	d
GL_SCISSOR_TEST	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_SCISSOR_TEST /;"	d
GL_SILENCE_DEPRECATION	build/_deps/imgui-proj-src/backends/imgui_impl_glut.cpp	/^#define GL_SILENCE_DEPRECATION$/;"	d	file:
GL_SILENCE_DEPRECATION	build/_deps/imgui-proj-src/backends/imgui_impl_opengl2.cpp	/^#define GL_SILENCE_DEPRECATION$/;"	d	file:
GL_SILENCE_DEPRECATION	build/_deps/imgui-proj-src/examples/example_glfw_opengl2/main.cpp	/^#define GL_SILENCE_DEPRECATION$/;"	d	file:
GL_SILENCE_DEPRECATION	build/_deps/imgui-proj-src/examples/example_glfw_opengl3/main.cpp	/^#define GL_SILENCE_DEPRECATION$/;"	d	file:
GL_SILENCE_DEPRECATION	build/_deps/imgui-proj-src/examples/example_glut_opengl2/main.cpp	/^#define GL_SILENCE_DEPRECATION$/;"	d	file:
GL_SRC_ALPHA	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_SRC_ALPHA /;"	d
GL_STENCIL_TEST	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_STENCIL_TEST /;"	d
GL_STREAM_DRAW	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_STREAM_DRAW /;"	d
GL_TEXTURE0	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_TEXTURE0 /;"	d
GL_TEXTURE_2D	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_TEXTURE_2D /;"	d
GL_TEXTURE_BINDING_2D	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_TEXTURE_BINDING_2D /;"	d
GL_TEXTURE_MAG_FILTER	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_TEXTURE_MAG_FILTER /;"	d
GL_TEXTURE_MIN_FILTER	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_TEXTURE_MIN_FILTER /;"	d
GL_TRIANGLES	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_TRIANGLES /;"	d
GL_TRUE	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_TRUE /;"	d
GL_UNPACK_ROW_LENGTH	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_UNPACK_ROW_LENGTH /;"	d
GL_UNSIGNED_BYTE	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_UNSIGNED_BYTE /;"	d
GL_UNSIGNED_INT	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_UNSIGNED_INT /;"	d
GL_UNSIGNED_SHORT	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_UNSIGNED_SHORT /;"	d
GL_UPPER_LEFT	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_UPPER_LEFT /;"	d
GL_VENDOR	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_VENDOR /;"	d
GL_VERSION	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_VERSION /;"	d
GL_VERSION_3_1	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_VERSION_3_1 /;"	d
GL_VERSION_3_2	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_VERSION_3_2 /;"	d
GL_VERSION_3_3	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_VERSION_3_3 /;"	d
GL_VERTEX_ARRAY_BINDING	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp	/^#define GL_VERTEX_ARRAY_BINDING /;"	d	file:
GL_VERTEX_ARRAY_BINDING	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_VERTEX_ARRAY_BINDING /;"	d
GL_VERTEX_ATTRIB_ARRAY_ENABLED	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_VERTEX_ATTRIB_ARRAY_ENABLED /;"	d
GL_VERTEX_ATTRIB_ARRAY_NORMALIZED	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED /;"	d
GL_VERTEX_ATTRIB_ARRAY_POINTER	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_VERTEX_ATTRIB_ARRAY_POINTER /;"	d
GL_VERTEX_ATTRIB_ARRAY_SIZE	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_VERTEX_ATTRIB_ARRAY_SIZE /;"	d
GL_VERTEX_ATTRIB_ARRAY_STRIDE	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_VERTEX_ATTRIB_ARRAY_STRIDE /;"	d
GL_VERTEX_ATTRIB_ARRAY_TYPE	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_VERTEX_ATTRIB_ARRAY_TYPE /;"	d
GL_VERTEX_SHADER	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_VERTEX_SHADER /;"	d
GL_VIEWPORT	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define GL_VIEWPORT /;"	d
GLbitfield	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef unsigned int GLbitfield;$/;"	t	typeref:typename:unsigned int
GLboolean	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef unsigned char GLboolean;$/;"	t	typeref:typename:unsigned char
GLbyte	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef khronos_int8_t GLbyte;$/;"	t	typeref:typename:khronos_int8_t
GLchar	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef char GLchar;$/;"	t	typeref:typename:char
GLclampd	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef double GLclampd;$/;"	t	typeref:typename:double
GLclampf	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef khronos_float_t GLclampf;$/;"	t	typeref:typename:khronos_float_t
GLdouble	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef double GLdouble;$/;"	t	typeref:typename:double
GLeglImageOES	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void *GLeglImageOES;$/;"	t	typeref:typename:void *
GLenum	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef unsigned int GLenum;$/;"	t	typeref:typename:unsigned int
GLfloat	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef khronos_float_t GLfloat;$/;"	t	typeref:typename:khronos_float_t
GLhalf	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef khronos_uint16_t GLhalf;$/;"	t	typeref:typename:khronos_uint16_t
GLint	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef int GLint;$/;"	t	typeref:typename:int
GLint64	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef khronos_int64_t GLint64;$/;"	t	typeref:typename:khronos_int64_t
GLint64EXT	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef khronos_int64_t GLint64EXT;$/;"	t	typeref:typename:khronos_int64_t
GLintptr	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef khronos_intptr_t GLintptr;$/;"	t	typeref:typename:khronos_intptr_t
GLocalizationEntriesEnUS	build/_deps/imgui-proj-src/imgui.cpp	/^static const ImGuiLocEntry GLocalizationEntriesEnUS[] =$/;"	v	typeref:typename:const ImGuiLocEntry[]	file:
GLshort	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef khronos_int16_t GLshort;$/;"	t	typeref:typename:khronos_int16_t
GLsizei	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef int GLsizei;$/;"	t	typeref:typename:int
GLsizeiptr	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef khronos_ssize_t GLsizeiptr;$/;"	t	typeref:typename:khronos_ssize_t
GLsync	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef struct __GLsync *GLsync;$/;"	t	typeref:struct:__GLsync *
GLubyte	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef khronos_uint8_t GLubyte;$/;"	t	typeref:typename:khronos_uint8_t
GLuint	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef unsigned int GLuint;$/;"	t	typeref:typename:unsigned int
GLuint64	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef khronos_uint64_t GLuint64;$/;"	t	typeref:typename:khronos_uint64_t
GLuint64EXT	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef khronos_uint64_t GLuint64EXT;$/;"	t	typeref:typename:khronos_uint64_t
GLushort	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef khronos_uint16_t GLushort;$/;"	t	typeref:typename:khronos_uint16_t
GLvoid	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void GLvoid;$/;"	t	typeref:typename:void
GS	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^        ID3D10GeometryShader*       GS;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:ID3D10GeometryShader *	file:
GS	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^        ID3D11GeometryShader*       GS;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:ID3D11GeometryShader *	file:
GSInstances	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^        ID3D11ClassInstance         *PSInstances[256], *VSInstances[256], *GSInstances[256];   \//;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:ID3D11ClassInstance * [256]* [256]* [256]	file:
GSInstancesCount	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^        UINT                        PSInstancesCount, VSInstancesCount, GSInstancesCount;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:UINT	file:
GStyleVarInfo	build/_deps/imgui-proj-src/imgui.cpp	/^static const ImGuiDataVarInfo GStyleVarInfo[] =$/;"	v	typeref:typename:const ImGuiDataVarInfo[]	file:
GWindowDockStyleColors	build/_deps/imgui-proj-src/imgui.cpp	/^static const ImGuiCol GWindowDockStyleColors[ImGuiWindowDockStyleCol_COUNT] =$/;"	v	typeref:typename:const ImGuiCol[]	file:
Gallery	build/_deps/imgui-proj-src/docs/README.md	/^### Gallery$/;"	S
GamepadMode	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^    ImGui_ImplSDL2_GamepadMode    GamepadMode;$/;"	m	struct:ImGui_ImplSDL2_Data	typeref:typename:ImGui_ImplSDL2_GamepadMode	file:
GamepadMode	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^    ImGui_ImplSDL3_GamepadMode  GamepadMode;$/;"	m	struct:ImGui_ImplSDL3_Data	typeref:typename:ImGui_ImplSDL3_GamepadMode	file:
Gamepads	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^    ImVector<SDL_GameController*> Gamepads;$/;"	m	struct:ImGui_ImplSDL2_Data	typeref:typename:ImVector<SDL_GameController * >	file:
Gamepads	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^    ImVector<SDL_Gamepad*>  Gamepads;$/;"	m	struct:ImGui_ImplSDL3_Data	typeref:typename:ImVector<SDL_Gamepad * >	file:
Gamma	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.cpp	/^    float Gamma;$/;"	m	struct:Uniforms	typeref:typename:float	file:
GcAwakeTransientWindowBuffers	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::GcAwakeTransientWindowBuffers(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
GcCompactAll	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    GcCompactAll;                       \/\/ Request full GC$/;"	m	struct:ImGuiContext	typeref:typename:bool
GcCompactTransientMiscBuffers	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::GcCompactTransientMiscBuffers()$/;"	f	class:ImGui	typeref:typename:void
GcCompactTransientWindowBuffers	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::GcCompactTransientWindowBuffers(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
GenBuffers	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^        PFNGLGENBUFFERSPROC               GenBuffers;$/;"	m	struct:ImGL3WProcs::__anon6bce6ebe0108	typeref:typename:PFNGLGENBUFFERSPROC
GenTextures	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^        PFNGLGENTEXTURESPROC              GenTextures;$/;"	m	struct:ImGL3WProcs::__anon6bce6ebe0108	typeref:typename:PFNGLGENTEXTURESPROC
GenVertexArrays	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^        PFNGLGENVERTEXARRAYSPROC          GenVertexArrays;$/;"	m	struct:ImGL3WProcs::__anon6bce6ebe0108	typeref:typename:PFNGLGENVERTEXARRAYSPROC
GetActiveID	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline ImGuiID          GetActiveID()   { ImGuiContext& g = *GImGui; return g.ActiveId; }$/;"	f	namespace:ImGui	typeref:typename:ImGuiID
GetAliveCount	build/_deps/imgui-proj-src/imgui_internal.h	/^    int         GetAliveCount() const               { return AliveCount; }      \/\/ Number of a/;"	f	struct:ImPool	typeref:typename:int
GetAllocatorFunctions	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::GetAllocatorFunctions(ImGuiMemAllocFunc* p_alloc_func, ImGuiMemFreeFunc* p_free_func/;"	f	class:ImGui	typeref:typename:void
GetArea	build/_deps/imgui-proj-src/imgui_internal.h	/^    float       GetArea() const                     { return (Max.x - Min.x) * (Max.y - Min.y); /;"	f	struct:ImRect	typeref:typename:float
GetArenaSizeInBytes	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline int   GetArenaSizeInBytes()              { return CurrOff; }$/;"	f	struct:ImSpanAllocator	typeref:typename:int
GetAssetData	build/_deps/imgui-proj-src/examples/example_android_opengl3/main.cpp	/^static int GetAssetData(const char* filename, void** outData)$/;"	f	typeref:typename:int	file:
GetAttribLocation	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^        PFNGLGETATTRIBLOCATIONPROC        GetAttribLocation;$/;"	m	struct:ImGL3WProcs::__anon6bce6ebe0108	typeref:typename:PFNGLGETATTRIBLOCATIONPROC
GetBL	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2      GetBL() const                       { return ImVec2(Min.x, Max.y); }  \/\/ Botto/;"	f	struct:ImRect	typeref:typename:ImVec2
GetBR	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2      GetBR() const                       { return Max; }                   \/\/ Botto/;"	f	struct:ImRect	typeref:typename:ImVec2
GetBackgroundDrawList	build/_deps/imgui-proj-src/imgui.cpp	/^ImDrawList* ImGui::GetBackgroundDrawList()$/;"	f	class:ImGui	typeref:typename:ImDrawList *
GetBackgroundDrawList	build/_deps/imgui-proj-src/imgui.cpp	/^ImDrawList* ImGui::GetBackgroundDrawList(ImGuiViewport* viewport)$/;"	f	class:ImGui	typeref:typename:ImDrawList *
GetBit	build/_deps/imgui-proj-src/imgui.h	/^    inline bool     GetBit(size_t n) const  { int off = (int)(n >> 5); ImU32 mask = 1u << (n & 3/;"	f	struct:ImFontGlyphRangesBuilder	typeref:typename:bool
GetBool	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGuiStorage::GetBool(ImGuiID key, bool default_val) const$/;"	f	class:ImGuiStorage	typeref:typename:bool
GetBoolRef	build/_deps/imgui-proj-src/imgui.cpp	/^bool* ImGuiStorage::GetBoolRef(ImGuiID key, bool default_val)$/;"	f	class:ImGuiStorage	typeref:typename:bool *
GetBufSize	build/_deps/imgui-proj-src/imgui_internal.h	/^    int         GetBufSize() const                  { return Buf.Size; }$/;"	f	struct:ImPool	typeref:typename:int
GetBuildWorkRect	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImRect  GetBuildWorkRect() const    { ImVec2 pos = CalcWorkRectPos(BuildWorkOffsetMin); ImVe/;"	f	struct:ImGuiViewportP	typeref:typename:ImRect
GetBuilderForFreeType	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^const ImFontBuilderIO* ImGuiFreeType::GetBuilderForFreeType()$/;"	f	class:ImGuiFreeType	typeref:typename:const ImFontBuilderIO *
GetByIndex	build/_deps/imgui-proj-src/imgui_internal.h	/^    T*          GetByIndex(ImPoolIdx n)             { return &Buf[n]; }$/;"	f	struct:ImPool	typeref:typename:T *
GetByKey	build/_deps/imgui-proj-src/imgui_internal.h	/^    T*          GetByKey(ImGuiID key)               { int idx = Map.GetInt(key, -1); return (idx/;"	f	struct:ImPool	typeref:typename:T *
GetCenter	build/_deps/imgui-proj-src/imgui.h	/^    ImVec2              GetCenter() const       { return ImVec2(Pos.x + Size.x * 0.5f, Pos.y + S/;"	f	struct:ImGuiViewport	typeref:typename:ImVec2
GetCenter	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2      GetCenter() const                   { return ImVec2((Min.x + Max.x) * 0.5f, (Min/;"	f	struct:ImRect	typeref:typename:ImVec2
GetCharAdvance	build/_deps/imgui-proj-src/imgui.h	/^    float                       GetCharAdvance(ImWchar c) const     { return ((int)c < IndexAdva/;"	f	struct:ImFont	typeref:typename:float
GetClipRectMax	build/_deps/imgui-proj-src/imgui.h	/^    inline ImVec2   GetClipRectMax() const { const ImVec4& cr = _ClipRectStack.back(); return Im/;"	f	struct:ImDrawList	typeref:typename:ImVec2
GetClipRectMin	build/_deps/imgui-proj-src/imgui.h	/^    inline ImVec2   GetClipRectMin() const { const ImVec4& cr = _ClipRectStack.back(); return Im/;"	f	struct:ImDrawList	typeref:typename:ImVec2
GetClipboardText	build/_deps/imgui-proj-src/imgui.cpp	/^const char* ImGui::GetClipboardText()$/;"	f	class:ImGui	typeref:typename:const char *
GetClipboardTextFn	build/_deps/imgui-proj-src/imgui.h	/^    const char* (*GetClipboardTextFn)(void* user_data);$/;"	m	struct:ImGuiIO	typeref:typename:const char * (*)(void * user_data)
GetClipboardTextFn_DefaultImpl	build/_deps/imgui-proj-src/imgui.cpp	/^static const char* GetClipboardTextFn_DefaultImpl(void* user_data_ctx)$/;"	f	typeref:typename:const char *	file:
GetColorU32	build/_deps/imgui-proj-src/imgui.cpp	/^ImU32 ImGui::GetColorU32(ImGuiCol idx, float alpha_mul)$/;"	f	class:ImGui	typeref:typename:ImU32
GetColorU32	build/_deps/imgui-proj-src/imgui.cpp	/^ImU32 ImGui::GetColorU32(ImU32 col, float alpha_mul)$/;"	f	class:ImGui	typeref:typename:ImU32
GetColorU32	build/_deps/imgui-proj-src/imgui.cpp	/^ImU32 ImGui::GetColorU32(const ImVec4& col)$/;"	f	class:ImGui	typeref:typename:ImU32
GetColumnIndex	build/_deps/imgui-proj-src/imgui_tables.cpp	/^int ImGui::GetColumnIndex()$/;"	f	class:ImGui	typeref:typename:int
GetColumnNormFromOffset	build/_deps/imgui-proj-src/imgui_tables.cpp	/^float ImGui::GetColumnNormFromOffset(const ImGuiOldColumns* columns, float offset)$/;"	f	class:ImGui	typeref:typename:float
GetColumnOffset	build/_deps/imgui-proj-src/imgui_tables.cpp	/^float ImGui::GetColumnOffset(int column_index)$/;"	f	class:ImGui	typeref:typename:float
GetColumnOffsetFromNorm	build/_deps/imgui-proj-src/imgui_tables.cpp	/^float ImGui::GetColumnOffsetFromNorm(const ImGuiOldColumns* columns, float offset_norm)$/;"	f	class:ImGui	typeref:typename:float
GetColumnSettings	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTableColumnSettings*   GetColumnSettings()     { return (ImGuiTableColumnSettings*)(thi/;"	f	struct:ImGuiTableSettings	typeref:typename:ImGuiTableColumnSettings *
GetColumnWidth	build/_deps/imgui-proj-src/imgui_tables.cpp	/^float ImGui::GetColumnWidth(int column_index)$/;"	f	class:ImGui	typeref:typename:float
GetColumnWidthEx	build/_deps/imgui-proj-src/imgui_tables.cpp	/^static float GetColumnWidthEx(ImGuiOldColumns* columns, int column_index, bool before_resize = f/;"	f	typeref:typename:float	file:
GetColumnsCount	build/_deps/imgui-proj-src/imgui_tables.cpp	/^int ImGui::GetColumnsCount()$/;"	f	class:ImGui	typeref:typename:int
GetColumnsID	build/_deps/imgui-proj-src/imgui_tables.cpp	/^ImGuiID ImGui::GetColumnsID(const char* str_id, int columns_count)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetCombinedRootWindow	build/_deps/imgui-proj-src/imgui.cpp	/^static ImGuiWindow* GetCombinedRootWindow(ImGuiWindow* window, bool popup_hierarchy, bool dock_h/;"	f	typeref:typename:ImGuiWindow *	file:
GetContentRegionAvail	build/_deps/imgui-proj-src/imgui.cpp	/^ImVec2 ImGui::GetContentRegionAvail()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetContentRegionMax	build/_deps/imgui-proj-src/imgui.cpp	/^ImVec2 ImGui::GetContentRegionMax()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetContentRegionMaxAbs	build/_deps/imgui-proj-src/imgui.cpp	/^ImVec2 ImGui::GetContentRegionMaxAbs()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetCurrentContext	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiContext* ImGui::GetCurrentContext()$/;"	f	class:ImGui	typeref:typename:ImGuiContext *
GetCurrentFocusScope	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline ImGuiID          GetCurrentFocusScope() { ImGuiContext& g = *GImGui; return g.Current/;"	f	namespace:ImGui	typeref:typename:ImGuiID
GetCurrentTabBar	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline    ImGuiTabBar*  GetCurrentTabBar() { ImGuiContext& g = *GImGui; return g.CurrentTabB/;"	f	namespace:ImGui	typeref:typename:ImGuiTabBar *
GetCurrentTable	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline    ImGuiTable*   GetCurrentTable() { ImGuiContext& g = *GImGui; return g.CurrentTable/;"	f	namespace:ImGui	typeref:typename:ImGuiTable *
GetCurrentWindow	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline    ImGuiWindow*  GetCurrentWindow()          { ImGuiContext& g = *GImGui; g.CurrentWi/;"	f	namespace:ImGui	typeref:typename:ImGuiWindow *
GetCurrentWindowRead	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline    ImGuiWindow*  GetCurrentWindowRead()      { ImGuiContext& g = *GImGui; return g.Cu/;"	f	namespace:ImGui	typeref:typename:ImGuiWindow *
GetCursorPos	build/_deps/imgui-proj-src/imgui.cpp	/^ImVec2 ImGui::GetCursorPos()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetCursorPos	build/_deps/imgui-proj-src/imgui_internal.h	/^    int         GetCursorPos() const        { return Stb.cursor; }$/;"	f	struct:ImGuiInputTextState	typeref:typename:int
GetCursorPosX	build/_deps/imgui-proj-src/imgui.cpp	/^float ImGui::GetCursorPosX()$/;"	f	class:ImGui	typeref:typename:float
GetCursorPosY	build/_deps/imgui-proj-src/imgui.cpp	/^float ImGui::GetCursorPosY()$/;"	f	class:ImGui	typeref:typename:float
GetCursorScreenPos	build/_deps/imgui-proj-src/imgui.cpp	/^ImVec2 ImGui::GetCursorScreenPos()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetCursorStartPos	build/_deps/imgui-proj-src/imgui.cpp	/^ImVec2 ImGui::GetCursorStartPos()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetCustomRectByIndex	build/_deps/imgui-proj-src/imgui.h	/^    ImFontAtlasCustomRect*      GetCustomRectByIndex(int index) { IM_ASSERT(index >= 0); return /;"	f	struct:ImFontAtlas	typeref:typename:ImFontAtlasCustomRect *
GetDebugName	build/_deps/imgui-proj-src/imgui.h	/^    const char*                 GetDebugName() const                { return ConfigData ? Config/;"	f	struct:ImFont	typeref:typename:const char *
GetDefaultCompressedFontDataTTFBase85	build/_deps/imgui-proj-src/imgui_draw.cpp	/^static const char* GetDefaultCompressedFontDataTTFBase85()$/;"	f	typeref:typename:const char *	file:
GetDefaultFont	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline ImFont*          GetDefaultFont() { ImGuiContext& g = *GImGui; return g.IO.FontDefaul/;"	f	namespace:ImGui	typeref:typename:ImFont *
GetDragDropPayload	build/_deps/imgui-proj-src/imgui.cpp	/^const ImGuiPayload* ImGui::GetDragDropPayload()$/;"	f	class:ImGui	typeref:typename:const ImGuiPayload *
GetDraggedColumnOffset	build/_deps/imgui-proj-src/imgui_tables.cpp	/^static float GetDraggedColumnOffset(ImGuiOldColumns* columns, int column_index)$/;"	f	typeref:typename:float	file:
GetDrawData	build/_deps/imgui-proj-src/imgui.cpp	/^ImDrawData* ImGui::GetDrawData()$/;"	f	class:ImGui	typeref:typename:ImDrawData *
GetDrawListSharedData	build/_deps/imgui-proj-src/imgui.cpp	/^ImDrawListSharedData* ImGui::GetDrawListSharedData()$/;"	f	class:ImGui	typeref:typename:ImDrawListSharedData *
GetError	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^        PFNGLGETERRORPROC                 GetError;$/;"	m	struct:ImGL3WProcs::__anon6bce6ebe0108	typeref:typename:PFNGLGETERRORPROC
GetFallbackWindowNameForWindowingList	build/_deps/imgui-proj-src/imgui.cpp	/^static const char* GetFallbackWindowNameForWindowingList(ImGuiWindow* window)$/;"	f	typeref:typename:const char *	file:
GetFloat	build/_deps/imgui-proj-src/imgui.cpp	/^float ImGuiStorage::GetFloat(ImGuiID key, float default_val) const$/;"	f	class:ImGuiStorage	typeref:typename:float
GetFloatRef	build/_deps/imgui-proj-src/imgui.cpp	/^float* ImGuiStorage::GetFloatRef(ImGuiID key, float default_val)$/;"	f	class:ImGuiStorage	typeref:typename:float *
GetFocusID	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline ImGuiID          GetFocusID()    { ImGuiContext& g = *GImGui; return g.NavId; }$/;"	f	namespace:ImGui	typeref:typename:ImGuiID
GetFont	build/_deps/imgui-proj-src/imgui.cpp	/^ImFont* ImGui::GetFont()$/;"	f	class:ImGui	typeref:typename:ImFont *
GetFontSize	build/_deps/imgui-proj-src/imgui.cpp	/^float ImGui::GetFontSize()$/;"	f	class:ImGui	typeref:typename:float
GetFontTexUvWhitePixel	build/_deps/imgui-proj-src/imgui.cpp	/^ImVec2 ImGui::GetFontTexUvWhitePixel()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetForegroundDrawList	build/_deps/imgui-proj-src/imgui.cpp	/^ImDrawList* ImGui::GetForegroundDrawList()$/;"	f	class:ImGui	typeref:typename:ImDrawList *
GetForegroundDrawList	build/_deps/imgui-proj-src/imgui.cpp	/^ImDrawList* ImGui::GetForegroundDrawList(ImGuiViewport* viewport)$/;"	f	class:ImGui	typeref:typename:ImDrawList *
GetForegroundDrawList	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline ImDrawList*      GetForegroundDrawList(ImGuiWindow* window) { return GetForegroundDra/;"	f	namespace:ImGui	typeref:typename:ImDrawList *
GetFrameCount	build/_deps/imgui-proj-src/imgui.cpp	/^int ImGui::GetFrameCount()$/;"	f	class:ImGui	typeref:typename:int
GetFrameHeight	build/_deps/imgui-proj-src/imgui.cpp	/^float ImGui::GetFrameHeight()$/;"	f	class:ImGui	typeref:typename:float
GetFrameHeightWithSpacing	build/_deps/imgui-proj-src/imgui.cpp	/^float ImGui::GetFrameHeightWithSpacing()$/;"	f	class:ImGui	typeref:typename:float
GetGlyphRangesChineseFull	build/_deps/imgui-proj-src/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesChineseFull()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesChineseSimplifiedCommon	build/_deps/imgui-proj-src/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesChineseSimplifiedCommon()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesCyrillic	build/_deps/imgui-proj-src/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesCyrillic()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesDefault	build/_deps/imgui-proj-src/imgui_draw.cpp	/^const ImWchar*   ImFontAtlas::GetGlyphRangesDefault()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesGreek	build/_deps/imgui-proj-src/imgui_draw.cpp	/^const ImWchar*   ImFontAtlas::GetGlyphRangesGreek()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesJapanese	build/_deps/imgui-proj-src/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesJapanese()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesKorean	build/_deps/imgui-proj-src/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesKorean()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesThai	build/_deps/imgui-proj-src/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesThai()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesVietnamese	build/_deps/imgui-proj-src/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesVietnamese()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetHeight	build/_deps/imgui-proj-src/imgui_internal.h	/^    float       GetHeight() const                   { return Max.y - Min.y; }$/;"	f	struct:ImRect	typeref:typename:float
GetHoveredID	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiID ImGui::GetHoveredID()$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetID	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiID ImGui::GetID(const char* str_id)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetID	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiID ImGui::GetID(const char* str_id_begin, const char* str_id_end)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetID	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiID ImGui::GetID(const void* ptr_id)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetID	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiID ImGuiWindow::GetID(const char* str, const char* str_end)$/;"	f	class:ImGuiWindow	typeref:typename:ImGuiID
GetID	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiID ImGuiWindow::GetID(const void* ptr)$/;"	f	class:ImGuiWindow	typeref:typename:ImGuiID
GetID	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiID ImGuiWindow::GetID(int n)$/;"	f	class:ImGuiWindow	typeref:typename:ImGuiID
GetIDFromRectangle	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiID ImGuiWindow::GetIDFromRectangle(const ImRect& r_abs)$/;"	f	class:ImGuiWindow	typeref:typename:ImGuiID
GetIDWithSeed	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiID ImGui::GetIDWithSeed(const char* str, const char* str_end, ImGuiID seed)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetIDWithSeed	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiID ImGui::GetIDWithSeed(int n, ImGuiID seed)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetIO	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiIO& ImGui::GetIO()$/;"	f	class:ImGui	typeref:typename:ImGuiIO &
GetIndex	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImPoolIdx   GetIndex(const T* p) const          { IM_ASSERT(p >= Buf.Data && p < Buf.Data + /;"	f	struct:ImPool	typeref:typename:ImPoolIdx
GetInputSourceName	build/_deps/imgui-proj-src/imgui.cpp	/^static const char* GetInputSourceName(ImGuiInputSource source)$/;"	f	typeref:typename:const char *	file:
GetInputTextState	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline ImGuiInputTextState* GetInputTextState(ImGuiID id)   { ImGuiContext& g = *GImGui; ret/;"	f	namespace:ImGui	typeref:typename:ImGuiInputTextState *
GetInt	build/_deps/imgui-proj-src/imgui.cpp	/^int ImGuiStorage::GetInt(ImGuiID key, int default_val) const$/;"	f	class:ImGuiStorage	typeref:typename:int
GetIntRef	build/_deps/imgui-proj-src/imgui.cpp	/^int* ImGuiStorage::GetIntRef(ImGuiID key, int default_val)$/;"	f	class:ImGuiStorage	typeref:typename:int *
GetIntegerv	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^        PFNGLGETINTEGERVPROC              GetIntegerv;$/;"	m	struct:ImGL3WProcs::__anon6bce6ebe0108	typeref:typename:PFNGLGETINTEGERVPROC
GetItemFlags	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline ImGuiItemFlags   GetItemFlags()  { ImGuiContext& g = *GImGui; return g.LastItemData.I/;"	f	namespace:ImGui	typeref:typename:ImGuiItemFlags
GetItemID	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiID ImGui::GetItemID()$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetItemRectMax	build/_deps/imgui-proj-src/imgui.cpp	/^ImVec2 ImGui::GetItemRectMax()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetItemRectMin	build/_deps/imgui-proj-src/imgui.cpp	/^ImVec2 ImGui::GetItemRectMin()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetItemRectSize	build/_deps/imgui-proj-src/imgui.cpp	/^ImVec2 ImGui::GetItemRectSize()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetItemStatusFlags	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline ImGuiItemStatusFlags GetItemStatusFlags(){ ImGuiContext& g = *GImGui; return g.LastIt/;"	f	namespace:ImGui	typeref:typename:ImGuiItemStatusFlags
GetKeyChordName	build/_deps/imgui-proj-src/imgui.cpp	/^const char* ImGui::GetKeyChordName(ImGuiKeyChord key_chord)$/;"	f	class:ImGui	typeref:typename:const char *
GetKeyData	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiKeyData* ImGui::GetKeyData(ImGuiContext* ctx, ImGuiKey key)$/;"	f	class:ImGui	typeref:typename:ImGuiKeyData *
GetKeyData	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline ImGuiKeyData*    GetKeyData(ImGuiKey key)                                    { ImGuiC/;"	f	namespace:ImGui	typeref:typename:ImGuiKeyData *
GetKeyIndex	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiKey ImGui::GetKeyIndex(ImGuiKey key)$/;"	f	class:ImGui	typeref:typename:ImGuiKey
GetKeyMagnitude2d	build/_deps/imgui-proj-src/imgui.cpp	/^ImVec2 ImGui::GetKeyMagnitude2d(ImGuiKey key_left, ImGuiKey key_right, ImGuiKey key_up, ImGuiKey/;"	f	class:ImGui	typeref:typename:ImVec2
GetKeyName	build/_deps/imgui-proj-src/imgui.cpp	/^const char* ImGui::GetKeyName(ImGuiKey key)$/;"	f	class:ImGui	typeref:typename:const char *
GetKeyOwner	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiID ImGui::GetKeyOwner(ImGuiKey key)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetKeyOwnerData	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline ImGuiKeyOwnerData*   GetKeyOwnerData(ImGuiContext* ctx, ImGuiKey key)                /;"	f	namespace:ImGui	typeref:typename:ImGuiKeyOwnerData *
GetKeyPressedAmount	build/_deps/imgui-proj-src/imgui.cpp	/^int ImGui::GetKeyPressedAmount(ImGuiKey key, float repeat_delay, float repeat_rate)$/;"	f	class:ImGui	typeref:typename:int
GetMachAbsoluteTimeInSeconds	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^static inline CFTimeInterval    GetMachAbsoluteTimeInSeconds()      { return (CFTimeInterval)(do/;"	f	struct:ImGui_ImplMetal_Data
GetMachAbsoluteTimeInSeconds	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^static inline CFTimeInterval    GetMachAbsoluteTimeInSeconds()      { return (CFTimeInterval)(do/;"	f	struct:ImGui_ImplOSX_Data
GetMainRect	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImRect  GetMainRect() const         { return ImRect(Pos.x, Pos.y, Pos.x + Size.x, Pos.y + Si/;"	f	struct:ImGuiViewportP	typeref:typename:ImRect
GetMainViewport	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiViewport* ImGui::GetMainViewport()$/;"	f	class:ImGui	typeref:typename:ImGuiViewport *
GetMapSize	build/_deps/imgui-proj-src/imgui_internal.h	/^    int         GetMapSize() const                  { return Map.Data.Size; }   \/\/ It is the m/;"	f	struct:ImPool	typeref:typename:int
GetMergedModsFromKeys	build/_deps/imgui-proj-src/imgui.cpp	/^static ImGuiKeyChord GetMergedModsFromKeys()$/;"	f	typeref:typename:ImGuiKeyChord	file:
GetMinimumStepAtDecimalPrecision	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static float GetMinimumStepAtDecimalPrecision(int decimal_precision)$/;"	f	typeref:typename:float	file:
GetMouseClickedCount	build/_deps/imgui-proj-src/imgui.cpp	/^int ImGui::GetMouseClickedCount(ImGuiMouseButton button)$/;"	f	class:ImGui	typeref:typename:int
GetMouseCursor	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiMouseCursor ImGui::GetMouseCursor()$/;"	f	class:ImGui	typeref:typename:ImGuiMouseCursor
GetMouseCursorTexData	build/_deps/imgui-proj-src/imgui_draw.cpp	/^bool ImFontAtlas::GetMouseCursorTexData(ImGuiMouseCursor cursor_type, ImVec2* out_offset, ImVec2/;"	f	class:ImFontAtlas	typeref:typename:bool
GetMouseDragDelta	build/_deps/imgui-proj-src/imgui.cpp	/^ImVec2 ImGui::GetMouseDragDelta(ImGuiMouseButton button, float lock_threshold)$/;"	f	class:ImGui	typeref:typename:ImVec2
GetMousePos	build/_deps/imgui-proj-src/imgui.cpp	/^ImVec2 ImGui::GetMousePos()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetMousePosOnOpeningCurrentPopup	build/_deps/imgui-proj-src/imgui.cpp	/^ImVec2 ImGui::GetMousePosOnOpeningCurrentPopup()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetMouseSource	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^static ImGuiMouseSource GetMouseSource(NSEvent* event)$/;"	f
GetMouseSourceFromMessageExtraInfo	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^static ImGuiMouseSource GetMouseSourceFromMessageExtraInfo()$/;"	f	typeref:typename:ImGuiMouseSource	file:
GetMouseSourceFromMessageExtraInfo	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^static ImGuiMouseSource GetMouseSourceFromMessageExtraInfo()$/;"	f	typeref:typename:ImGuiMouseSource	file:
GetMouseSourceName	build/_deps/imgui-proj-src/imgui.cpp	/^static const char* GetMouseSourceName(ImGuiMouseSource source)$/;"	f	typeref:typename:const char *	file:
GetName	build/_deps/imgui-proj-src/imgui_internal.h	/^    char* GetName()             { return (char*)(this + 1); }$/;"	f	struct:ImGuiWindowSettings	typeref:typename:char *
GetNavTweakPressedAmount	build/_deps/imgui-proj-src/imgui.cpp	/^float ImGui::GetNavTweakPressedAmount(ImGuiAxis axis)$/;"	f	class:ImGui	typeref:typename:float
GetOrAddByKey	build/_deps/imgui-proj-src/imgui_internal.h	/^    T*          GetOrAddByKey(ImGuiID key)          { int* p_idx = Map.GetIntRef(key, -1); if (*/;"	f	struct:ImPool	typeref:typename:T *
GetPlatformIO	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiPlatformIO& ImGui::GetPlatformIO()$/;"	f	class:ImGui	typeref:typename:ImGuiPlatformIO &
GetPopupAllowedExtentRect	build/_deps/imgui-proj-src/imgui.cpp	/^ImRect ImGui::GetPopupAllowedExtentRect(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:ImRect
GetProgramInfoLog	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^        PFNGLGETPROGRAMINFOLOGPROC        GetProgramInfoLog;$/;"	m	struct:ImGL3WProcs::__anon6bce6ebe0108	typeref:typename:PFNGLGETPROGRAMINFOLOGPROC
GetProgramiv	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^        PFNGLGETPROGRAMIVPROC             GetProgramiv;$/;"	m	struct:ImGL3WProcs::__anon6bce6ebe0108	typeref:typename:PFNGLGETPROGRAMIVPROC
GetRedoAvailCount	build/_deps/imgui-proj-src/imgui_internal.h	/^    int         GetRedoAvailCount() const   { return IMSTB_TEXTEDIT_UNDOSTATECOUNT - Stb.undosta/;"	f	struct:ImGuiInputTextState	typeref:typename:int
GetResizeBorderRect	build/_deps/imgui-proj-src/imgui.cpp	/^static ImRect GetResizeBorderRect(ImGuiWindow* window, int border_n, float perp_padding, float t/;"	f	typeref:typename:ImRect	file:
GetRoutingIdFromOwnerId	build/_deps/imgui-proj-src/imgui.cpp	/^static inline ImGuiID GetRoutingIdFromOwnerId(ImGuiID owner_id)$/;"	f	typeref:typename:ImGuiID	file:
GetScrollMaxX	build/_deps/imgui-proj-src/imgui.cpp	/^float ImGui::GetScrollMaxX()$/;"	f	class:ImGui	typeref:typename:float
GetScrollMaxY	build/_deps/imgui-proj-src/imgui.cpp	/^float ImGui::GetScrollMaxY()$/;"	f	class:ImGui	typeref:typename:float
GetScrollX	build/_deps/imgui-proj-src/imgui.cpp	/^float ImGui::GetScrollX()$/;"	f	class:ImGui	typeref:typename:float
GetScrollY	build/_deps/imgui-proj-src/imgui.cpp	/^float ImGui::GetScrollY()$/;"	f	class:ImGui	typeref:typename:float
GetSelectionEnd	build/_deps/imgui-proj-src/imgui_internal.h	/^    int         GetSelectionEnd() const     { return Stb.select_end; }$/;"	f	struct:ImGuiInputTextState	typeref:typename:int
GetSelectionStart	build/_deps/imgui-proj-src/imgui_internal.h	/^    int         GetSelectionStart() const   { return Stb.select_start; }$/;"	f	struct:ImGuiInputTextState	typeref:typename:int
GetShaderInfoLog	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^        PFNGLGETSHADERINFOLOGPROC         GetShaderInfoLog;$/;"	m	struct:ImGL3WProcs::__anon6bce6ebe0108	typeref:typename:PFNGLGETSHADERINFOLOGPROC
GetShaderiv	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^        PFNGLGETSHADERIVPROC              GetShaderiv;$/;"	m	struct:ImGL3WProcs::__anon6bce6ebe0108	typeref:typename:PFNGLGETSHADERIVPROC
GetShortcutRoutingData	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiKeyRoutingData* ImGui::GetShortcutRoutingData(ImGuiKeyChord key_chord)$/;"	f	class:ImGui	typeref:typename:ImGuiKeyRoutingData *
GetSize	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2      GetSize() const                     { return ImVec2(Max.x - Min.x, Max.y - Min.y/;"	f	struct:ImRect	typeref:typename:ImVec2
GetSkipItemForListClipping	build/_deps/imgui-proj-src/imgui.cpp	/^static bool GetSkipItemForListClipping()$/;"	f	typeref:typename:bool	file:
GetSpan	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline void  GetSpan(int n, ImSpan<T>* span)    { span->set((T*)GetSpanPtrBegin(n), (T*)GetS/;"	f	struct:ImSpanAllocator	typeref:typename:void
GetSpanPtrBegin	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline void* GetSpanPtrBegin(int n)             { IM_ASSERT(n >= 0 && n < CHUNKS && CurrIdx /;"	f	struct:ImSpanAllocator	typeref:typename:void *
GetSpanPtrEnd	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline void* GetSpanPtrEnd(int n)               { IM_ASSERT(n >= 0 && n < CHUNKS && CurrIdx /;"	f	struct:ImSpanAllocator	typeref:typename:void *
GetState	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp	/^    void GetState(GLint index)$/;"	f	struct:ImGui_ImplOpenGL3_VtxAttribState	typeref:typename:void	file:
GetStateStorage	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiStorage* ImGui::GetStateStorage()$/;"	f	class:ImGui	typeref:typename:ImGuiStorage *
GetString	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^        PFNGLGETSTRINGPROC                GetString;$/;"	m	struct:ImGL3WProcs::__anon6bce6ebe0108	typeref:typename:PFNGLGETSTRINGPROC
GetStringi	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^        PFNGLGETSTRINGIPROC               GetStringi;$/;"	m	struct:ImGL3WProcs::__anon6bce6ebe0108	typeref:typename:PFNGLGETSTRINGIPROC
GetStyle	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiStyle& ImGui::GetStyle()$/;"	f	class:ImGui	typeref:typename:ImGuiStyle &
GetStyleColorName	build/_deps/imgui-proj-src/imgui.cpp	/^const char* ImGui::GetStyleColorName(ImGuiCol idx)$/;"	f	class:ImGui	typeref:typename:const char *
GetStyleColorVec4	build/_deps/imgui-proj-src/imgui.cpp	/^const ImVec4& ImGui::GetStyleColorVec4(ImGuiCol idx)$/;"	f	class:ImGui	typeref:typename:const ImVec4 &
GetStyleVarInfo	build/_deps/imgui-proj-src/imgui.cpp	/^const ImGuiDataVarInfo* ImGui::GetStyleVarInfo(ImGuiStyleVar idx)$/;"	f	class:ImGui	typeref:typename:const ImGuiDataVarInfo *
GetTL	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2      GetTL() const                       { return Min; }                   \/\/ Top-l/;"	f	struct:ImRect	typeref:typename:ImVec2
GetTR	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2      GetTR() const                       { return ImVec2(Max.x, Min.y); }  \/\/ Top-r/;"	f	struct:ImRect	typeref:typename:ImVec2
GetTabBarFromTabBarRef	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static ImGuiTabBar* GetTabBarFromTabBarRef(const ImGuiPtrOrIndex& ref)$/;"	f	typeref:typename:ImGuiTabBar *	file:
GetTabBarRefFromTabBar	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static ImGuiPtrOrIndex GetTabBarRefFromTabBar(ImGuiTabBar* tab_bar)$/;"	f	typeref:typename:ImGuiPtrOrIndex	file:
GetTableRect	build/_deps/imgui-proj-src/imgui.cpp	/^        static ImRect GetTableRect(ImGuiTable* table, int rect_type, int n)$/;"	f	struct:ImGui::ShowMetricsWindow::Funcs	typeref:typename:ImRect	file:
GetTexDataAsAlpha8	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void    ImFontAtlas::GetTexDataAsAlpha8(unsigned char** out_pixels, int* out_width, int* out_hei/;"	f	class:ImFontAtlas	typeref:typename:void
GetTexDataAsRGBA32	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void    ImFontAtlas::GetTexDataAsRGBA32(unsigned char** out_pixels, int* out_width, int* out_hei/;"	f	class:ImFontAtlas	typeref:typename:void
GetTexID	build/_deps/imgui-proj-src/imgui.h	/^    inline ImTextureID GetTexID() const { return TextureId; }$/;"	f	struct:ImDrawCmd	typeref:typename:ImTextureID
GetTextLineHeight	build/_deps/imgui-proj-src/imgui.cpp	/^float ImGui::GetTextLineHeight()$/;"	f	class:ImGui	typeref:typename:float
GetTextLineHeightWithSpacing	build/_deps/imgui-proj-src/imgui.cpp	/^float ImGui::GetTextLineHeightWithSpacing()$/;"	f	class:ImGui	typeref:typename:float
GetTime	build/_deps/imgui-proj-src/imgui.cpp	/^double ImGui::GetTime()$/;"	f	class:ImGui	typeref:typename:double
GetTopMostAndVisiblePopupModal	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiWindow* ImGui::GetTopMostAndVisiblePopupModal()$/;"	f	class:ImGui	typeref:typename:ImGuiWindow *
GetTopMostPopupModal	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiWindow* ImGui::GetTopMostPopupModal()$/;"	f	class:ImGui	typeref:typename:ImGuiWindow *
GetTreeNodeToLabelSpacing	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^float ImGui::GetTreeNodeToLabelSpacing()$/;"	f	class:ImGui	typeref:typename:float
GetTypematicRepeatRate	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::GetTypematicRepeatRate(ImGuiInputFlags flags, float* repeat_delay, float* repeat_rat/;"	f	class:ImGui	typeref:typename:void
GetTypingSelectRequest	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^ImGuiTypingSelectRequest* ImGui::GetTypingSelectRequest(ImGuiTypingSelectFlags flags)$/;"	f	class:ImGui	typeref:typename:ImGuiTypingSelectRequest *
GetUndoAvailCount	build/_deps/imgui-proj-src/imgui_internal.h	/^    int         GetUndoAvailCount() const   { return Stb.undostate.undo_point; }$/;"	f	struct:ImGuiInputTextState	typeref:typename:int
GetUniformLocation	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^        PFNGLGETUNIFORMLOCATIONPROC       GetUniformLocation;$/;"	m	struct:ImGL3WProcs::__anon6bce6ebe0108	typeref:typename:PFNGLGETUNIFORMLOCATIONPROC
GetVarPtr	build/_deps/imgui-proj-src/imgui_internal.h	/^    void* GetVarPtr(void* parent) const { return (void*)((unsigned char*)parent + Offset); }$/;"	f	struct:ImGuiDataVarInfo	typeref:typename:void *
GetVersion	build/_deps/imgui-proj-src/imgui.cpp	/^const char* ImGui::GetVersion()$/;"	f	class:ImGui	typeref:typename:const char *
GetVertexAttribPointerv	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^        PFNGLGETVERTEXATTRIBPOINTERVPROC  GetVertexAttribPointerv;$/;"	m	struct:ImGL3WProcs::__anon6bce6ebe0108	typeref:typename:PFNGLGETVERTEXATTRIBPOINTERVPROC
GetVertexAttribiv	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^        PFNGLGETVERTEXATTRIBIVPROC        GetVertexAttribiv;$/;"	m	struct:ImGL3WProcs::__anon6bce6ebe0108	typeref:typename:PFNGLGETVERTEXATTRIBIVPROC
GetViewportBgFgDrawList	build/_deps/imgui-proj-src/imgui.cpp	/^static ImDrawList* GetViewportBgFgDrawList(ImGuiViewportP* viewport, size_t drawlist_no, const c/;"	f	typeref:typename:ImDrawList *	file:
GetViewportPlatformMonitor	build/_deps/imgui-proj-src/imgui.cpp	/^const ImGuiPlatformMonitor* ImGui::GetViewportPlatformMonitor(ImGuiViewport* viewport_p)$/;"	f	class:ImGui	typeref:typename:const ImGuiPlatformMonitor *
GetVoidPtr	build/_deps/imgui-proj-src/imgui.cpp	/^void* ImGuiStorage::GetVoidPtr(ImGuiID key) const$/;"	f	class:ImGuiStorage	typeref:typename:void *
GetVoidPtrRef	build/_deps/imgui-proj-src/imgui.cpp	/^void** ImGuiStorage::GetVoidPtrRef(ImGuiID key, void* default_val)$/;"	f	class:ImGuiStorage	typeref:typename:void **
GetWidth	build/_deps/imgui-proj-src/imgui_internal.h	/^    float       GetWidth() const                    { return Max.x - Min.x; }$/;"	f	struct:ImRect	typeref:typename:float
GetWindowAlwaysWantOwnTabBar	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::GetWindowAlwaysWantOwnTabBar(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:bool
GetWindowAlwaysWantOwnViewport	build/_deps/imgui-proj-src/imgui.cpp	/^static bool ImGui::GetWindowAlwaysWantOwnViewport(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:bool	file:
GetWindowBgColorIdx	build/_deps/imgui-proj-src/imgui.cpp	/^static ImGuiCol GetWindowBgColorIdx(ImGuiWindow* window)$/;"	f	typeref:typename:ImGuiCol	file:
GetWindowContentRegionMax	build/_deps/imgui-proj-src/imgui.cpp	/^ImVec2 ImGui::GetWindowContentRegionMax()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetWindowContentRegionMin	build/_deps/imgui-proj-src/imgui.cpp	/^ImVec2 ImGui::GetWindowContentRegionMin()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetWindowDisplayLayer	build/_deps/imgui-proj-src/imgui.cpp	/^static inline int GetWindowDisplayLayer(ImGuiWindow* window)$/;"	f	typeref:typename:int	file:
GetWindowDockID	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiID ImGui::GetWindowDockID()$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetWindowDockNode	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline ImGuiDockNode*   GetWindowDockNode()                                      { ImGuiCont/;"	f	namespace:ImGui	typeref:typename:ImGuiDockNode *
GetWindowDpiScale	build/_deps/imgui-proj-src/imgui.cpp	/^float ImGui::GetWindowDpiScale()$/;"	f	class:ImGui	typeref:typename:float
GetWindowDrawList	build/_deps/imgui-proj-src/imgui.cpp	/^ImDrawList* ImGui::GetWindowDrawList()$/;"	f	class:ImGui	typeref:typename:ImDrawList *
GetWindowForTitleAndMenuHeight	build/_deps/imgui-proj-src/imgui.cpp	/^static ImGuiWindow* GetWindowForTitleAndMenuHeight(ImGuiWindow* window)$/;"	f	typeref:typename:ImGuiWindow *	file:
GetWindowForTitleDisplay	build/_deps/imgui-proj-src/imgui.cpp	/^static ImGuiWindow* GetWindowForTitleDisplay(ImGuiWindow* window)$/;"	f	typeref:typename:ImGuiWindow *	file:
GetWindowHeight	build/_deps/imgui-proj-src/imgui.cpp	/^float ImGui::GetWindowHeight()$/;"	f	class:ImGui	typeref:typename:float
GetWindowPos	build/_deps/imgui-proj-src/imgui.cpp	/^ImVec2 ImGui::GetWindowPos()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetWindowRect	build/_deps/imgui-proj-src/imgui.cpp	/^        static ImRect GetWindowRect(ImGuiWindow* window, int rect_type)$/;"	f	struct:ImGui::ShowMetricsWindow::Funcs	typeref:typename:ImRect	file:
GetWindowResizeBorderID	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiID ImGui::GetWindowResizeBorderID(ImGuiWindow* window, ImGuiDir dir)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetWindowResizeCornerID	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiID ImGui::GetWindowResizeCornerID(ImGuiWindow* window, int n)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetWindowScrollbarID	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^ImGuiID ImGui::GetWindowScrollbarID(ImGuiWindow* window, ImGuiAxis axis)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetWindowScrollbarRect	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^ImRect ImGui::GetWindowScrollbarRect(ImGuiWindow* window, ImGuiAxis axis)$/;"	f	class:ImGui	typeref:typename:ImRect
GetWindowSize	build/_deps/imgui-proj-src/imgui.cpp	/^ImVec2 ImGui::GetWindowSize()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetWindowViewport	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiViewport* ImGui::GetWindowViewport()$/;"	f	class:ImGui	typeref:typename:ImGuiViewport *
GetWindowWidth	build/_deps/imgui-proj-src/imgui.cpp	/^float ImGui::GetWindowWidth()$/;"	f	class:ImGui	typeref:typename:float
GetWorkCenter	build/_deps/imgui-proj-src/imgui.h	/^    ImVec2              GetWorkCenter() const   { return ImVec2(WorkPos.x + WorkSize.x * 0.5f, W/;"	f	struct:ImGuiViewport	typeref:typename:ImVec2
GetWorkRect	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImRect  GetWorkRect() const         { return ImRect(WorkPos.x, WorkPos.y, WorkPos.x + WorkSi/;"	f	struct:ImGuiViewportP	typeref:typename:ImRect
Getting Started	build/_deps/imgui-proj-src/docs/EXAMPLES.md	/^### Getting Started$/;"	S
Getting Started & General Advice	build/_deps/imgui-proj-src/docs/CONTRIBUTING.md	/^## Getting Started & General Advice$/;"	s
Getting started	README.md	/^## Getting started$/;"	s
GlProfileIsCompat	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp	/^    bool            GlProfileIsCompat;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:bool	file:
GlProfileIsES2	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp	/^    bool            GlProfileIsES2;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:bool	file:
GlProfileIsES3	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp	/^    bool            GlProfileIsES3;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:bool	file:
GlProfileMask	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp	/^    GLint           GlProfileMask;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:GLint	file:
GlVersion	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp	/^    GLuint          GlVersion;               \/\/ Extracted at runtime using GL_MAJOR_VERSION, G/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:GLuint	file:
GlfwClientApi	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^enum GlfwClientApi$/;"	g	file:
GlfwClientApi_OpenGL	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^    GlfwClientApi_OpenGL,$/;"	e	enum:GlfwClientApi	file:
GlfwClientApi_Unknown	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^    GlfwClientApi_Unknown,$/;"	e	enum:GlfwClientApi	file:
GlfwClientApi_Vulkan	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^    GlfwClientApi_Vulkan,$/;"	e	enum:GlfwClientApi	file:
GlslVersionString	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp	/^    char            GlslVersionString[32];   \/\/ Specified by user or detected based on compile/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:char[32]	file:
GlyphAdvanceX	build/_deps/imgui-proj-src/imgui.h	/^    float           GlyphAdvanceX;  \/\/ Input    \/\/ For custom font glyphs only: glyph xadvan/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:float
GlyphExtraSpacing	build/_deps/imgui-proj-src/imgui.h	/^    ImVec2          GlyphExtraSpacing;      \/\/ 0, 0     \/\/ Extra spacing (in pixels) between/;"	m	struct:ImFontConfig	typeref:typename:ImVec2
GlyphID	build/_deps/imgui-proj-src/imgui.h	/^    unsigned int    GlyphID;        \/\/ Input    \/\/ For custom font glyphs only (ID < 0x11000/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:unsigned int
GlyphInfo	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^    struct GlyphInfo$/;"	s	namespace:__anon9c8900c20110	file:
GlyphMaxAdvanceX	build/_deps/imgui-proj-src/imgui.h	/^    float           GlyphMaxAdvanceX;       \/\/ FLT_MAX  \/\/ Maximum AdvanceX for glyphs$/;"	m	struct:ImFontConfig	typeref:typename:float
GlyphMinAdvanceX	build/_deps/imgui-proj-src/imgui.h	/^    float           GlyphMinAdvanceX;       \/\/ 0        \/\/ Minimum AdvanceX for glyphs, set /;"	m	struct:ImFontConfig	typeref:typename:float
GlyphOffset	build/_deps/imgui-proj-src/imgui.h	/^    ImVec2          GlyphOffset;            \/\/ 0, 0     \/\/ Offset all glyphs from this font /;"	m	struct:ImFontConfig	typeref:typename:ImVec2
GlyphOffset	build/_deps/imgui-proj-src/imgui.h	/^    ImVec2          GlyphOffset;    \/\/ Input    \/\/ For custom font glyphs only: glyph displa/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:ImVec2
GlyphRanges	build/_deps/imgui-proj-src/imgui.h	/^    const ImWchar*  GlyphRanges;            \/\/ NULL     \/\/ THE ARRAY DATA NEEDS TO PERSIST A/;"	m	struct:ImFontConfig	typeref:typename:const ImWchar *
Glyphs	build/_deps/imgui-proj-src/imgui.h	/^    ImVector<ImFontGlyph>       Glyphs;             \/\/ 12-16 \/\/ out \/\/            \/\/ All/;"	m	struct:ImFont	typeref:typename:ImVector<ImFontGlyph>
GlyphsCount	build/_deps/imgui-proj-src/imgui_draw.cpp	/^    int                 GlyphsCount;        \/\/ Glyph count (excluding missing glyphs and glyph/;"	m	struct:ImFontBuildSrcData	typeref:typename:int	file:
GlyphsCount	build/_deps/imgui-proj-src/imgui_draw.cpp	/^    int                 GlyphsCount;$/;"	m	struct:ImFontBuildDstData	typeref:typename:int	file:
GlyphsCount	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^    int                 GlyphsCount;        \/\/ Glyph count (excluding missing glyphs and glyph/;"	m	struct:ImFontBuildSrcDataFT	typeref:typename:int	file:
GlyphsCount	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^    int                 GlyphsCount;$/;"	m	struct:ImFontBuildDstDataFT	typeref:typename:int	file:
GlyphsHighest	build/_deps/imgui-proj-src/imgui_draw.cpp	/^    int                 GlyphsHighest;      \/\/ Highest requested codepoint$/;"	m	struct:ImFontBuildSrcData	typeref:typename:int	file:
GlyphsHighest	build/_deps/imgui-proj-src/imgui_draw.cpp	/^    int                 GlyphsHighest;$/;"	m	struct:ImFontBuildDstData	typeref:typename:int	file:
GlyphsHighest	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^    int                 GlyphsHighest;      \/\/ Highest requested codepoint$/;"	m	struct:ImFontBuildSrcDataFT	typeref:typename:int	file:
GlyphsHighest	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^    int                 GlyphsHighest;$/;"	m	struct:ImFontBuildDstDataFT	typeref:typename:int	file:
GlyphsList	build/_deps/imgui-proj-src/imgui_draw.cpp	/^    ImVector<int>       GlyphsList;         \/\/ Glyph codepoints list (flattened version of Gly/;"	m	struct:ImFontBuildSrcData	typeref:typename:ImVector<int>	file:
GlyphsList	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^    ImVector<ImFontBuildSrcGlyphFT>   GlyphsList;$/;"	m	struct:ImFontBuildSrcDataFT	typeref:typename:ImVector<ImFontBuildSrcGlyphFT>	file:
GlyphsSet	build/_deps/imgui-proj-src/imgui_draw.cpp	/^    ImBitVector         GlyphsSet;          \/\/ Glyph bit map (random access, 1-bit per codepoi/;"	m	struct:ImFontBuildSrcData	typeref:typename:ImBitVector	file:
GlyphsSet	build/_deps/imgui-proj-src/imgui_draw.cpp	/^    ImBitVector         GlyphsSet;          \/\/ This is used to resolve collision when multiple/;"	m	struct:ImFontBuildDstData	typeref:typename:ImBitVector	file:
GlyphsSet	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^    ImBitVector         GlyphsSet;          \/\/ Glyph bit map (random access, 1-bit per codepoi/;"	m	struct:ImFontBuildSrcDataFT	typeref:typename:ImBitVector	file:
GlyphsSet	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^    ImBitVector         GlyphsSet;          \/\/ This is used to resolve collision when multiple/;"	m	struct:ImFontBuildDstDataFT	typeref:typename:ImBitVector	file:
GrabMinSize	build/_deps/imgui-proj-src/imgui.h	/^    float       GrabMinSize;                \/\/ Minimum width\/height of a grab box for slider\//;"	m	struct:ImGuiStyle	typeref:typename:float
GrabRounding	build/_deps/imgui-proj-src/imgui.h	/^    float       GrabRounding;               \/\/ Radius of grabs corners rounding. Set to 0.0f t/;"	m	struct:ImGuiStyle	typeref:typename:float
GroupOffset	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec1                  GroupOffset;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec1
GroupStack	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVector<ImGuiGroupData>        GroupStack;                 \/\/ Stack for BeginGroup()\/End/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiGroupData>
GrowIndex	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImFont::GrowIndex(int new_size)$/;"	f	class:ImFont	typeref:typename:void
HEX	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^#define HEX(/;"	d	file:
HEX	build/CMakeFiles/3.26.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define HEX(/;"	d	file:
HSV	build/_deps/imgui-proj-src/imgui.h	/^    static ImColor HSV(float h, float s, float v, float a = 1.0f)   { float r, g, b; ImGui::Colo/;"	f	struct:ImColor	typeref:typename:ImColor
HasCentralNodeChild	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    HasCentralNodeChild     :1;$/;"	m	struct:ImGuiDockNode	typeref:typename:bool:1
HasClipOrigin	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp	/^    bool            HasClipOrigin;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:bool	file:
HasCloseButton	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    HasCloseButton          :1; \/\/ Provide space for a close button (i/;"	m	struct:ImGuiDockNode	typeref:typename:bool:1
HasCloseButton	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    HasCloseButton;                     \/\/ Set when the window has a c/;"	m	struct:ImGuiWindow	typeref:typename:bool
HasGamepad	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^    bool                        HasGamepad;$/;"	m	struct:ImGui_ImplWin32_Data	typeref:typename:bool	file:
HasScrollbarYCurr	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                        HasScrollbarYCurr;          \/\/ Whether ANY instance of this ta/;"	m	struct:ImGuiTable	typeref:typename:bool
HasScrollbarYPrev	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                        HasScrollbarYPrev;          \/\/ Whether ANY instance of this ta/;"	m	struct:ImGuiTable	typeref:typename:bool
HasSelection	build/_deps/imgui-proj-src/imgui.h	/^    bool                HasSelection() const    { return SelectionStart != SelectionEnd; }$/;"	f	struct:ImGuiInputTextCallbackData	typeref:typename:bool
HasSelection	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool        HasSelection() const        { return Stb.select_start != Stb.select_end; }$/;"	f	struct:ImGuiInputTextState	typeref:typename:bool
HasWindowMenuButton	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    HasWindowMenuButton     :1;$/;"	m	struct:ImGuiDockNode	typeref:typename:bool:1
Height	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.h	/^    int                 Height;$/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:int
Height	build/_deps/imgui-proj-src/imgui.h	/^    unsigned short  Width, Height;  \/\/ Input    \/\/ Desired rectangle dimension$/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:unsigned short
Height	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^        int         Height;             \/\/ Glyph's height in pixels.$/;"	m	struct:__anon9c8900c20110::GlyphInfo	typeref:typename:int	file:
HeldHeaderColumn	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTableColumnIdx         HeldHeaderColumn;           \/\/ Index of column header being he/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
HelpMarker	build/_deps/imgui-proj-src/imgui_demo.cpp	/^static void HelpMarker(const char* desc)$/;"	f	typeref:typename:void	file:
Hidden	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    Hidden;                             \/\/ Do not display (== HiddenFr/;"	m	struct:ImGuiWindow	typeref:typename:bool
HiddenFramesCanSkipItems	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImS8                    HiddenFramesCanSkipItems;           \/\/ Hide the window for N frame/;"	m	struct:ImGuiWindow	typeref:typename:ImS8
HiddenFramesCannotSkipItems	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImS8                    HiddenFramesCannotSkipItems;        \/\/ Hide the window for N frame/;"	m	struct:ImGuiWindow	typeref:typename:ImS8
HiddenFramesForRenderOnly	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImS8                    HiddenFramesForRenderOnly;          \/\/ Hide the window until frame/;"	m	struct:ImGuiWindow	typeref:typename:ImS8
HighlightColumnHeader	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTableColumnIdx         HighlightColumnHeader;      \/\/ Index of column which should be/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
HighlightMonitorIdx	build/_deps/imgui-proj-src/imgui_internal.h	/^    int         HighlightMonitorIdx = -1;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:int
HighlightViewportID	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID     HighlightViewportID = 0;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:ImGuiID
History	build/_deps/imgui-proj-src/imgui_demo.cpp	/^    ImVector<char*>       History;$/;"	m	struct:ExampleAppConsole	typeref:typename:ImVector<char * >	file:
HistoryPos	build/_deps/imgui-proj-src/imgui_demo.cpp	/^    int                   HistoryPos;    \/\/ -1: new line, 0..History.Size-1 browsing history.$/;"	m	struct:ExampleAppConsole	typeref:typename:int	file:
HitTestHoleOffset	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2ih                HitTestHoleOffset;$/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2ih
HitTestHoleSize	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2ih                HitTestHoleSize;                    \/\/ Define an optional rectangu/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2ih
HookId	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                     HookId;     \/\/ A unique ID assigned by AddContextHook()$/;"	m	struct:ImGuiContextHook	typeref:typename:ImGuiID
HookIdNext	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                             HookIdNext;             \/\/ Next available HookId$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
Hook_Platform_RenderWindow	build/_deps/imgui-proj-src/examples/example_win32_opengl3/main.cpp	/^static void Hook_Platform_RenderWindow(ImGuiViewport* viewport, void*)$/;"	f	typeref:typename:void	file:
Hook_Renderer_CreateWindow	build/_deps/imgui-proj-src/examples/example_win32_opengl3/main.cpp	/^static void Hook_Renderer_CreateWindow(ImGuiViewport* viewport)$/;"	f	typeref:typename:void	file:
Hook_Renderer_DestroyWindow	build/_deps/imgui-proj-src/examples/example_win32_opengl3/main.cpp	/^static void Hook_Renderer_DestroyWindow(ImGuiViewport* viewport)$/;"	f	typeref:typename:void	file:
Hook_Renderer_SwapBuffers	build/_deps/imgui-proj-src/examples/example_win32_opengl3/main.cpp	/^static void Hook_Renderer_SwapBuffers(ImGuiViewport* viewport, void*)$/;"	f	typeref:typename:void	file:
Hooks	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVector<ImGuiContextHook>          Hooks;                  \/\/ Hooks for extensions (e.g. /;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiContextHook>
HostBackupClipRect	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImRect              HostBackupClipRect;     \/\/ Backup of ClipRect during PushColumnsBackgr/;"	m	struct:ImGuiOldColumns	typeref:typename:ImRect
HostBackupColumnsOffset	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec1                      HostBackupColumnsOffset;    \/\/ Backup of OuterWindow->DC.Colum/;"	m	struct:ImGuiTableTempData	typeref:typename:ImVec1
HostBackupCurrLineSize	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2                      HostBackupCurrLineSize;     \/\/ Backup of InnerWindow->DC.CurrL/;"	m	struct:ImGuiTableTempData	typeref:typename:ImVec2
HostBackupCursorMaxPos	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2                      HostBackupCursorMaxPos;     \/\/ Backup of InnerWindow->DC.Curso/;"	m	struct:ImGuiTableTempData	typeref:typename:ImVec2
HostBackupInnerClipRect	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImRect                      HostBackupInnerClipRect;    \/\/ Backup of InnerWindow->ClipRect/;"	m	struct:ImGuiTable	typeref:typename:ImRect
HostBackupItemWidth	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                       HostBackupItemWidth;        \/\/ Backup of OuterWindow->DC.ItemW/;"	m	struct:ImGuiTableTempData	typeref:typename:float
HostBackupItemWidthStackSize	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                         HostBackupItemWidthStackSize;\/\/Backup of OuterWindow->DC.ItemW/;"	m	struct:ImGuiTableTempData	typeref:typename:int
HostBackupParentWorkRect	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImRect                      HostBackupParentWorkRect;   \/\/ Backup of InnerWindow->ParentWo/;"	m	struct:ImGuiTableTempData	typeref:typename:ImRect
HostBackupParentWorkRect	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImRect              HostBackupParentWorkRect;\/\/Backup of WorkRect at the time of BeginColu/;"	m	struct:ImGuiOldColumns	typeref:typename:ImRect
HostBackupPrevLineSize	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2                      HostBackupPrevLineSize;     \/\/ Backup of InnerWindow->DC.PrevL/;"	m	struct:ImGuiTableTempData	typeref:typename:ImVec2
HostBackupWorkRect	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImRect                      HostBackupWorkRect;         \/\/ Backup of InnerWindow->WorkRect/;"	m	struct:ImGuiTableTempData	typeref:typename:ImRect
HostClipRect	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImRect                      HostClipRect;               \/\/ This is used to check if we can/;"	m	struct:ImGuiTable	typeref:typename:ImRect
HostCursorMaxPosX	build/_deps/imgui-proj-src/imgui_internal.h	/^    float               HostCursorMaxPosX;      \/\/ Backup of CursorMaxPos at the time of Begin/;"	m	struct:ImGuiOldColumns	typeref:typename:float
HostCursorPosY	build/_deps/imgui-proj-src/imgui_internal.h	/^    float               HostCursorPosY;         \/\/ Backup of CursorPos at the time of BeginCol/;"	m	struct:ImGuiOldColumns	typeref:typename:float
HostIndentX	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                       HostIndentX;$/;"	m	struct:ImGuiTable	typeref:typename:float
HostInitialClipRect	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImRect              HostInitialClipRect;    \/\/ Backup of ClipRect at the time of BeginColu/;"	m	struct:ImGuiOldColumns	typeref:typename:ImRect
HostSkipItems	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                        HostSkipItems;              \/\/ Backup of InnerWindow->SkipItem/;"	m	struct:ImGuiTable	typeref:typename:bool
HostWindow	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiWindow*            HostWindow;$/;"	m	struct:ImGuiDockNode	typeref:typename:ImGuiWindow *
HoverDelayNormal	build/_deps/imgui-proj-src/imgui.h	/^    float             HoverDelayNormal;         \/\/ Delay for IsItemHovered(ImGuiHoveredFlags_D/;"	m	struct:ImGuiStyle	typeref:typename:float
HoverDelayShort	build/_deps/imgui-proj-src/imgui.h	/^    float             HoverDelayShort;          \/\/ Delay for IsItemHovered(ImGuiHoveredFlags_D/;"	m	struct:ImGuiStyle	typeref:typename:float
HoverFlagsForTooltipMouse	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiHoveredFlags HoverFlagsForTooltipMouse;\/\/ Default flags when using IsItemHovered(ImGu/;"	m	struct:ImGuiStyle	typeref:typename:ImGuiHoveredFlags
HoverFlagsForTooltipNav	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiHoveredFlags HoverFlagsForTooltipNav;  \/\/ Default flags when using IsItemHovered(ImGu/;"	m	struct:ImGuiStyle	typeref:typename:ImGuiHoveredFlags
HoverItemDelayClearTimer	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   HoverItemDelayClearTimer;           \/\/ Currently used by IsItemHov/;"	m	struct:ImGuiContext	typeref:typename:float
HoverItemDelayId	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                 HoverItemDelayId;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
HoverItemDelayIdPreviousFrame	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                 HoverItemDelayIdPreviousFrame;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
HoverItemDelayTimer	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   HoverItemDelayTimer;                \/\/ Currently used by IsItemHov/;"	m	struct:ImGuiContext	typeref:typename:float
HoverItemUnlockedStationaryId	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                 HoverItemUnlockedStationaryId;      \/\/ Mouse has once been station/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
HoverStationaryDelay	build/_deps/imgui-proj-src/imgui.h	/^    float             HoverStationaryDelay;     \/\/ Delay for IsItemHovered(ImGuiHoveredFlags_S/;"	m	struct:ImGuiStyle	typeref:typename:float
HoverWindowUnlockedStationaryId	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                 HoverWindowUnlockedStationaryId;    \/\/ Mouse has once been station/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
HoveredColumnBody	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTableColumnIdx         HoveredColumnBody;          \/\/ Index of column whose visible r/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
HoveredColumnBorder	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTableColumnIdx         HoveredColumnBorder;        \/\/ Index of column whose right-bor/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
HoveredId	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                 HoveredId;                          \/\/ Hovered widget, filled duri/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
HoveredIdAllowOverlap	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    HoveredIdAllowOverlap;$/;"	m	struct:ImGuiContext	typeref:typename:bool
HoveredIdDisabled	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    HoveredIdDisabled;                  \/\/ At least one widget passed /;"	m	struct:ImGuiContext	typeref:typename:bool
HoveredIdNotActiveTimer	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   HoveredIdNotActiveTimer;            \/\/ Measure contiguous hovering/;"	m	struct:ImGuiContext	typeref:typename:float
HoveredIdPreviousFrame	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                 HoveredIdPreviousFrame;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
HoveredIdTimer	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   HoveredIdTimer;                     \/\/ Measure contiguous hovering/;"	m	struct:ImGuiContext	typeref:typename:float
HoveredRowLast	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                         HoveredRowLast;             \/\/ Index of row which was hovered /;"	m	struct:ImGuiTableInstanceData	typeref:typename:int
HoveredRowNext	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                         HoveredRowNext;             \/\/ Index of row hovered this frame/;"	m	struct:ImGuiTableInstanceData	typeref:typename:int
HoveredViewportID	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiInputEventMouseViewport { ImGuiID HoveredViewportID; };$/;"	m	struct:ImGuiInputEventMouseViewport	typeref:typename:ImGuiID
HoveredWindow	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiWindow*            HoveredWindow;                      \/\/ Window the mouse is hoverin/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
HoveredWindowUnderMovingWindow	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiWindow*            HoveredWindowUnderMovingWindow;     \/\/ Hovered window ignoring Mov/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
How it works	build/_deps/imgui-proj-src/docs/README.md	/^### How it works$/;"	S
How should I handle DPI in my application?	build/_deps/imgui-proj-src/docs/FONTS.md	/^## How should I handle DPI in my application?$/;"	s
How to Build	build/_deps/imgui-proj-src/examples/example_allegro5/README.md	/^# How to Build$/;"	c
How to Build	build/_deps/imgui-proj-src/examples/example_emscripten_wgpu/README.md	/^## How to Build$/;"	s
How to Build	build/_deps/imgui-proj-src/examples/example_sdl2_opengl2/README.md	/^# How to Build$/;"	c
How to Build	build/_deps/imgui-proj-src/examples/example_sdl2_opengl3/README.md	/^# How to Build$/;"	c
How to Build	build/_deps/imgui-proj-src/examples/example_sdl2_sdlrenderer2/README.md	/^# How to Build$/;"	c
How to Build	build/_deps/imgui-proj-src/examples/example_sdl3_opengl3/README.md	/^# How to Build$/;"	c
How to Run	build/_deps/imgui-proj-src/examples/example_emscripten_wgpu/README.md	/^## How to Run$/;"	s
How to help	build/_deps/imgui-proj-src/docs/README.md	/^How to help$/;"	s
How to open a Pull Request	build/_deps/imgui-proj-src/docs/CONTRIBUTING.md	/^## How to open a Pull Request$/;"	s
How to open an issue	build/_deps/imgui-proj-src/docs/CONTRIBUTING.md	/^## How to open an issue$/;"	s
Hwnd	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^    HWND    Hwnd;$/;"	m	struct:ImGui_ImplWin32_ViewportData	typeref:typename:HWND	file:
HwndOwned	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^    bool    HwndOwned;$/;"	m	struct:ImGui_ImplWin32_ViewportData	typeref:typename:bool	file:
HwndParent	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^    HWND    HwndParent;$/;"	m	struct:ImGui_ImplWin32_ViewportData	typeref:typename:HWND	file:
ICON FONTS	build/_deps/imgui-proj-src/docs/FONTS.md	/^#### ICON FONTS$/;"	t
ID	build/_deps/imgui-proj-src/imgui.cpp	/^    ImGuiID             ID;$/;"	m	struct:ImGuiDockNodeSettings	typeref:typename:ImGuiID	file:
ID	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiID             ID;                     \/\/ Unique identifier for the viewport$/;"	m	struct:ImGuiViewport	typeref:typename:ImGuiID
ID	build/_deps/imgui-proj-src/imgui_demo.cpp	/^    int         ID;$/;"	m	struct:__anon1b6430950210::MyItem	typeref:typename:int	file:
ID	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                     ID;                     \/\/ Set to 0 to invalidate\/delete the /;"	m	struct:ImGuiTableSettings	typeref:typename:ImGuiID
ID	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                     ID;$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiID
ID	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                 ID;                                 \/\/ == ImHashStr(Name)$/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiID
ID	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                 ID;                     \/\/ widget id owning the text state$/;"	m	struct:ImGuiInputTextState	typeref:typename:ImGuiID
ID	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                 ID;$/;"	m	struct:ImGuiDockNode	typeref:typename:ImGuiID
ID	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                 ID;$/;"	m	struct:ImGuiLastItemData	typeref:typename:ImGuiID
ID	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                 ID;$/;"	m	struct:ImGuiNavTreeNodeData	typeref:typename:ImGuiID
ID	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                 ID;$/;"	m	struct:ImGuiStackLevelInfo	typeref:typename:ImGuiID
ID	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID             ID;                     \/\/ Zero for tab-bars used by docking$/;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiID
ID	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID             ID;             \/\/ Init,Move    \/\/ Best candidate item ID$/;"	m	struct:ImGuiNavItemData	typeref:typename:ImGuiID
ID	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID             ID;$/;"	m	struct:ImGuiFocusScopeData	typeref:typename:ImGuiID
ID	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID             ID;$/;"	m	struct:ImGuiOldColumns	typeref:typename:ImGuiID
ID	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID             ID;$/;"	m	struct:ImGuiTabItem	typeref:typename:ImGuiID
ID	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID            ID;              \/\/ widget id owning the text state (which just got dea/;"	m	struct:ImGuiInputTextDeactivatedState	typeref:typename:ImGuiID
ID	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID     ID;$/;"	m	struct:ImGuiWindowSettings	typeref:typename:ImGuiID
IDStack	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVector<ImGuiID>       IDStack;                            \/\/ ID stack. ID are hashes see/;"	m	struct:ImGuiWindow	typeref:typename:ImVector<ImGuiID>
ID_VOID_MAIN	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^# define ID_VOID_MAIN$/;"	d	file:
IMGL3W_IMPL	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp	/^#define IMGL3W_IMPL$/;"	d	file:
IMGUI_API	build/_deps/imgui-proj-src/imgui.h	/^#define IMGUI_API$/;"	d
IMGUI_CDECL	build/_deps/imgui-proj-src/imgui_demo.cpp	/^#define IMGUI_CDECL /;"	d	file:
IMGUI_CDECL	build/_deps/imgui-proj-src/imgui_demo.cpp	/^#define IMGUI_CDECL$/;"	d	file:
IMGUI_CDECL	build/_deps/imgui-proj-src/imgui_internal.h	/^#define IMGUI_CDECL /;"	d
IMGUI_CDECL	build/_deps/imgui-proj-src/imgui_internal.h	/^#define IMGUI_CDECL$/;"	d
IMGUI_CHECKVERSION	build/_deps/imgui-proj-src/imgui.h	/^#define IMGUI_CHECKVERSION(/;"	d
IMGUI_COL_TO_DX9_ARGB	build/_deps/imgui-proj-src/backends/imgui_impl_dx9.cpp	/^#define IMGUI_COL_TO_DX9_ARGB(/;"	d	file:
IMGUI_DEBUG_LOG	build/_deps/imgui-proj-src/imgui_internal.h	/^#define IMGUI_DEBUG_LOG(/;"	d
IMGUI_DEBUG_LOG_ACTIVEID	build/_deps/imgui-proj-src/imgui_internal.h	/^#define IMGUI_DEBUG_LOG_ACTIVEID(/;"	d
IMGUI_DEBUG_LOG_CLIPPER	build/_deps/imgui-proj-src/imgui_internal.h	/^#define IMGUI_DEBUG_LOG_CLIPPER(/;"	d
IMGUI_DEBUG_LOG_DOCKING	build/_deps/imgui-proj-src/imgui_internal.h	/^#define IMGUI_DEBUG_LOG_DOCKING(/;"	d
IMGUI_DEBUG_LOG_FOCUS	build/_deps/imgui-proj-src/imgui_internal.h	/^#define IMGUI_DEBUG_LOG_FOCUS(/;"	d
IMGUI_DEBUG_LOG_INPUTROUTING	build/_deps/imgui-proj-src/imgui_internal.h	/^#define IMGUI_DEBUG_LOG_INPUTROUTING(/;"	d
IMGUI_DEBUG_LOG_IO	build/_deps/imgui-proj-src/imgui_internal.h	/^#define IMGUI_DEBUG_LOG_IO(/;"	d
IMGUI_DEBUG_LOG_NAV	build/_deps/imgui-proj-src/imgui_internal.h	/^#define IMGUI_DEBUG_LOG_NAV(/;"	d
IMGUI_DEBUG_LOG_POPUP	build/_deps/imgui-proj-src/imgui_internal.h	/^#define IMGUI_DEBUG_LOG_POPUP(/;"	d
IMGUI_DEBUG_LOG_SELECTION	build/_deps/imgui-proj-src/imgui_internal.h	/^#define IMGUI_DEBUG_LOG_SELECTION(/;"	d
IMGUI_DEBUG_LOG_VIEWPORT	build/_deps/imgui-proj-src/imgui_internal.h	/^#define IMGUI_DEBUG_LOG_VIEWPORT(/;"	d
IMGUI_DEBUG_NAV_RECTS	build/_deps/imgui-proj-src/imgui.cpp	/^#define IMGUI_DEBUG_NAV_RECTS /;"	d	file:
IMGUI_DEBUG_NAV_SCORING	build/_deps/imgui-proj-src/imgui.cpp	/^#define IMGUI_DEBUG_NAV_SCORING /;"	d	file:
IMGUI_DEBUG_PRINTF	build/_deps/imgui-proj-src/imgui_internal.h	/^#define IMGUI_DEBUG_PRINTF(/;"	d
IMGUI_DEFINE_MATH_OPERATORS	build/_deps/imgui-proj-src/imgui.cpp	/^#define IMGUI_DEFINE_MATH_OPERATORS$/;"	d	file:
IMGUI_DEFINE_MATH_OPERATORS	build/_deps/imgui-proj-src/imgui_draw.cpp	/^#define IMGUI_DEFINE_MATH_OPERATORS$/;"	d	file:
IMGUI_DEFINE_MATH_OPERATORS	build/_deps/imgui-proj-src/imgui_tables.cpp	/^#define IMGUI_DEFINE_MATH_OPERATORS$/;"	d	file:
IMGUI_DEFINE_MATH_OPERATORS	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^#define IMGUI_DEFINE_MATH_OPERATORS$/;"	d	file:
IMGUI_DEFINE_MATH_OPERATORS	build/_deps/imgui-proj-src/misc/single_file/imgui_single_file.h	/^#define IMGUI_DEFINE_MATH_OPERATORS$/;"	d
IMGUI_DEFINE_MATH_OPERATORS_IMPLEMENTED	build/_deps/imgui-proj-src/imgui.h	/^#define IMGUI_DEFINE_MATH_OPERATORS_IMPLEMENTED$/;"	d
IMGUI_DEMO_MARKER	build/_deps/imgui-proj-src/imgui_demo.cpp	/^#define IMGUI_DEMO_MARKER(/;"	d	file:
IMGUI_DIR	build/_deps/imgui-proj-src/examples/example_glfw_metal/Makefile	/^IMGUI_DIR = ..\/..$/;"	m
IMGUI_DIR	build/_deps/imgui-proj-src/examples/example_glfw_opengl2/Makefile	/^IMGUI_DIR = ..\/..$/;"	m
IMGUI_DIR	build/_deps/imgui-proj-src/examples/example_glfw_opengl3/Makefile	/^IMGUI_DIR = ..\/..$/;"	m
IMGUI_DIR	build/_deps/imgui-proj-src/examples/example_glfw_vulkan/CMakeLists.txt	/^set(IMGUI_DIR ..\/..\/)$/;"	v
IMGUI_DIR	build/_deps/imgui-proj-src/examples/example_glut_opengl2/Makefile	/^IMGUI_DIR = ..\/..$/;"	m
IMGUI_DIR	build/_deps/imgui-proj-src/examples/example_null/Makefile	/^IMGUI_DIR = ..\/..$/;"	m
IMGUI_DIR	build/_deps/imgui-proj-src/examples/example_sdl2_metal/Makefile	/^IMGUI_DIR = ..\/..$/;"	m
IMGUI_DIR	build/_deps/imgui-proj-src/examples/example_sdl2_opengl2/Makefile	/^IMGUI_DIR = ..\/..$/;"	m
IMGUI_DIR	build/_deps/imgui-proj-src/examples/example_sdl2_opengl3/Makefile	/^IMGUI_DIR = ..\/..$/;"	m
IMGUI_DIR	build/_deps/imgui-proj-src/examples/example_sdl2_sdlrenderer2/Makefile	/^IMGUI_DIR = ..\/..$/;"	m
IMGUI_DIR	build/_deps/imgui-proj-src/examples/example_sdl3_opengl3/Makefile	/^IMGUI_DIR = ..\/..$/;"	m
IMGUI_DIR	build/_deps/imgui-proj-src/examples/example_sdl3_sdlrenderer3/Makefile	/^IMGUI_DIR = ..\/..$/;"	m
IMGUI_DISABLE_DEBUG_TOOLS	build/_deps/imgui-proj-src/imgui.h	/^#define IMGUI_DISABLE_DEBUG_TOOLS$/;"	d
IMGUI_DISABLE_DEFAULT_FILE_FUNCTIONS	build/_deps/imgui-proj-src/imgui_internal.h	/^#define IMGUI_DISABLE_DEFAULT_FILE_FUNCTIONS$/;"	d
IMGUI_DISABLE_OBSOLETE_KEYIO	build/_deps/imgui-proj-src/imgui.h	/^#define IMGUI_DISABLE_OBSOLETE_KEYIO$/;"	d
IMGUI_DISABLE_TTY_FUNCTIONS	build/_deps/imgui-proj-src/imgui_internal.h	/^#define IMGUI_DISABLE_TTY_FUNCTIONS /;"	d
IMGUI_DISABLE_WIN32_DEFAULT_CLIPBOARD_FUNCTIONS	build/_deps/imgui-proj-src/imgui.cpp	/^#define IMGUI_DISABLE_WIN32_DEFAULT_CLIPBOARD_FUNCTIONS$/;"	d	file:
IMGUI_DISABLE_WIN32_DEFAULT_IME_FUNCTIONS	build/_deps/imgui-proj-src/imgui.cpp	/^#define IMGUI_DISABLE_WIN32_DEFAULT_IME_FUNCTIONS$/;"	d	file:
IMGUI_DISABLE_WIN32_FUNCTIONS	build/_deps/imgui-proj-src/imgui.cpp	/^#define IMGUI_DISABLE_WIN32_FUNCTIONS$/;"	d	file:
IMGUI_ENABLE_SSE	build/_deps/imgui-proj-src/imgui_internal.h	/^#define IMGUI_ENABLE_SSE$/;"	d
IMGUI_ENABLE_STB_TRUETYPE	build/_deps/imgui-proj-src/imgui_internal.h	/^#define IMGUI_ENABLE_STB_TRUETYPE$/;"	d
IMGUI_HAS_DOCK	build/_deps/imgui-proj-src/imgui.h	/^#define IMGUI_HAS_DOCK /;"	d
IMGUI_HAS_TABLE	build/_deps/imgui-proj-src/imgui.h	/^#define IMGUI_HAS_TABLE$/;"	d
IMGUI_HAS_VIEWPORT	build/_deps/imgui-proj-src/imgui.h	/^#define IMGUI_HAS_VIEWPORT /;"	d
IMGUI_IMPL_API	build/_deps/imgui-proj-src/imgui.h	/^#define IMGUI_IMPL_API /;"	d
IMGUI_IMPL_OPENGL_ES2	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.h	/^#define IMGUI_IMPL_OPENGL_ES2 /;"	d
IMGUI_IMPL_OPENGL_ES3	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.h	/^#define IMGUI_IMPL_OPENGL_ES3 /;"	d
IMGUI_IMPL_OPENGL_HAS_EXTENSIONS	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp	/^#define IMGUI_IMPL_OPENGL_HAS_EXTENSIONS /;"	d	file:
IMGUI_IMPL_OPENGL_HAS_POLYGON_MODE	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp	/^#define IMGUI_IMPL_OPENGL_HAS_POLYGON_MODE /;"	d	file:
IMGUI_IMPL_OPENGL_MAY_HAVE_BIND_BUFFER_PIXEL_UNPACK	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp	/^#define IMGUI_IMPL_OPENGL_MAY_HAVE_BIND_BUFFER_PIXEL_UNPACK$/;"	d	file:
IMGUI_IMPL_OPENGL_MAY_HAVE_BIND_SAMPLER	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp	/^#define IMGUI_IMPL_OPENGL_MAY_HAVE_BIND_SAMPLER$/;"	d	file:
IMGUI_IMPL_OPENGL_MAY_HAVE_PRIMITIVE_RESTART	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp	/^#define IMGUI_IMPL_OPENGL_MAY_HAVE_PRIMITIVE_RESTART$/;"	d	file:
IMGUI_IMPL_OPENGL_MAY_HAVE_VTX_OFFSET	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp	/^#define IMGUI_IMPL_OPENGL_MAY_HAVE_VTX_OFFSET$/;"	d	file:
IMGUI_IMPL_OPENGL_USE_VERTEX_ARRAY	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp	/^#define IMGUI_IMPL_OPENGL_USE_VERTEX_ARRAY$/;"	d	file:
IMGUI_IMPL_VULKAN_HAS_DYNAMIC_RENDERING	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.h	/^#define IMGUI_IMPL_VULKAN_HAS_DYNAMIC_RENDERING$/;"	d
IMGUI_PAYLOAD_TYPE_COLOR_3F	build/_deps/imgui-proj-src/imgui.h	/^#define IMGUI_PAYLOAD_TYPE_COLOR_3F /;"	d
IMGUI_PAYLOAD_TYPE_COLOR_4F	build/_deps/imgui-proj-src/imgui.h	/^#define IMGUI_PAYLOAD_TYPE_COLOR_4F /;"	d
IMGUI_PAYLOAD_TYPE_WINDOW	build/_deps/imgui-proj-src/imgui_internal.h	/^#define IMGUI_PAYLOAD_TYPE_WINDOW /;"	d
IMGUI_STB_NAMESPACE	build/_deps/imgui-proj-src/imgui_draw.cpp	/^namespace IMGUI_STB_NAMESPACE$/;"	n	file:
IMGUI_TABLE_MAX_COLUMNS	build/_deps/imgui-proj-src/imgui_internal.h	/^#define IMGUI_TABLE_MAX_COLUMNS /;"	d
IMGUI_TEST_ENGINE_ITEM_ADD	build/_deps/imgui-proj-src/imgui_internal.h	/^#define IMGUI_TEST_ENGINE_ITEM_ADD(/;"	d
IMGUI_TEST_ENGINE_ITEM_INFO	build/_deps/imgui-proj-src/imgui_internal.h	/^#define IMGUI_TEST_ENGINE_ITEM_INFO(/;"	d
IMGUI_TEST_ENGINE_LOG	build/_deps/imgui-proj-src/imgui_internal.h	/^#define IMGUI_TEST_ENGINE_LOG(/;"	d
IMGUI_VERSION	build/_deps/imgui-proj-src/imgui.h	/^#define IMGUI_VERSION /;"	d
IMGUI_VERSION_NUM	build/_deps/imgui-proj-src/imgui.h	/^#define IMGUI_VERSION_NUM /;"	d
IMGUI_VIEWPORT_DEFAULT_ID	build/_deps/imgui-proj-src/imgui.cpp	/^const ImGuiID           IMGUI_VIEWPORT_DEFAULT_ID = 0x11111111; \/\/ Using an arbitrary constant/;"	v	namespace:ImGui	typeref:typename:const ImGuiID
IMGUI_VULKAN_FUNC_DEF	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^#define IMGUI_VULKAN_FUNC_DEF(/;"	d	file:
IMGUI_VULKAN_FUNC_LOAD	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^#define IMGUI_VULKAN_FUNC_LOAD(/;"	d	file:
IMGUI_VULKAN_FUNC_MAP	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^#define IMGUI_VULKAN_FUNC_MAP(/;"	d	file:
IMSTB_TEXTEDIT_CHARTYPE	build/_deps/imgui-proj-src/imgui_internal.h	/^#define IMSTB_TEXTEDIT_CHARTYPE /;"	d
IMSTB_TEXTEDIT_CHARTYPE	build/_deps/imgui-proj-src/imstb_textedit.h	/^#define IMSTB_TEXTEDIT_CHARTYPE /;"	d
IMSTB_TEXTEDIT_GETWIDTH_NEWLINE	build/_deps/imgui-proj-src/imgui_internal.h	/^#define IMSTB_TEXTEDIT_GETWIDTH_NEWLINE /;"	d
IMSTB_TEXTEDIT_IMPLEMENTATION	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^#define IMSTB_TEXTEDIT_IMPLEMENTATION$/;"	d	file:
IMSTB_TEXTEDIT_POSITIONTYPE	build/_deps/imgui-proj-src/imstb_textedit.h	/^#define IMSTB_TEXTEDIT_POSITIONTYPE /;"	d
IMSTB_TEXTEDIT_STRING	build/_deps/imgui-proj-src/imgui_internal.h	/^#define IMSTB_TEXTEDIT_STRING /;"	d
IMSTB_TEXTEDIT_UNDOCHARCOUNT	build/_deps/imgui-proj-src/imgui_internal.h	/^#define IMSTB_TEXTEDIT_UNDOCHARCOUNT /;"	d
IMSTB_TEXTEDIT_UNDOCHARCOUNT	build/_deps/imgui-proj-src/imstb_textedit.h	/^#define IMSTB_TEXTEDIT_UNDOCHARCOUNT /;"	d
IMSTB_TEXTEDIT_UNDOSTATECOUNT	build/_deps/imgui-proj-src/imgui_internal.h	/^#define IMSTB_TEXTEDIT_UNDOSTATECOUNT /;"	d
IMSTB_TEXTEDIT_UNDOSTATECOUNT	build/_deps/imgui-proj-src/imstb_textedit.h	/^#define IMSTB_TEXTEDIT_UNDOSTATECOUNT /;"	d
IMSTB_TEXTEDIT_memmove	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^#define IMSTB_TEXTEDIT_memmove /;"	d	file:
IMSTB_TEXTEDIT_memmove	build/_deps/imgui-proj-src/imstb_textedit.h	/^#define IMSTB_TEXTEDIT_memmove /;"	d
IM_ALLOC	build/_deps/imgui-proj-src/imgui.h	/^#define IM_ALLOC(/;"	d
IM_ARRAYSIZE	build/_deps/imgui-proj-src/imgui.h	/^#define IM_ARRAYSIZE(/;"	d
IM_ASSERT	build/_deps/imgui-proj-src/imgui.h	/^#define IM_ASSERT(/;"	d
IM_ASSERT_PARANOID	build/_deps/imgui-proj-src/imgui_internal.h	/^#define IM_ASSERT_PARANOID(/;"	d
IM_ASSERT_USER_ERROR	build/_deps/imgui-proj-src/imgui_internal.h	/^#define IM_ASSERT_USER_ERROR(/;"	d
IM_BITARRAY_CLEARBIT	build/_deps/imgui-proj-src/imgui_internal.h	/^#define         IM_BITARRAY_CLEARBIT(/;"	d
IM_BITARRAY_TESTBIT	build/_deps/imgui-proj-src/imgui_internal.h	/^#define         IM_BITARRAY_TESTBIT(/;"	d
IM_CLAMP	build/_deps/imgui-proj-src/imgui_demo.cpp	/^#define IM_CLAMP(/;"	d	file:
IM_COL32	build/_deps/imgui-proj-src/imgui.h	/^#define IM_COL32(/;"	d
IM_COL32_A_MASK	build/_deps/imgui-proj-src/imgui.h	/^#define IM_COL32_A_MASK /;"	d
IM_COL32_A_SHIFT	build/_deps/imgui-proj-src/imgui.h	/^#define IM_COL32_A_SHIFT /;"	d
IM_COL32_BLACK	build/_deps/imgui-proj-src/imgui.h	/^#define IM_COL32_BLACK /;"	d
IM_COL32_BLACK_TRANS	build/_deps/imgui-proj-src/imgui.h	/^#define IM_COL32_BLACK_TRANS /;"	d
IM_COL32_B_SHIFT	build/_deps/imgui-proj-src/imgui.h	/^#define IM_COL32_B_SHIFT /;"	d
IM_COL32_DISABLE	build/_deps/imgui-proj-src/imgui_internal.h	/^#define IM_COL32_DISABLE /;"	d
IM_COL32_G_SHIFT	build/_deps/imgui-proj-src/imgui.h	/^#define IM_COL32_G_SHIFT /;"	d
IM_COL32_R_SHIFT	build/_deps/imgui-proj-src/imgui.h	/^#define IM_COL32_R_SHIFT /;"	d
IM_COL32_WHITE	build/_deps/imgui-proj-src/imgui.h	/^#define IM_COL32_WHITE /;"	d
IM_DEBUG_BREAK	build/_deps/imgui-proj-src/imgui_internal.h	/^#define IM_DEBUG_BREAK(/;"	d
IM_DELETE	build/_deps/imgui-proj-src/imgui.h	/^template<typename T> void IM_DELETE(T* p)   { if (p) { p->~T(); ImGui::MemFree(p); } }$/;"	f	typeref:typename:void
IM_DRAWLIST_ARCFAST_SAMPLE_MAX	build/_deps/imgui-proj-src/imgui_internal.h	/^#define IM_DRAWLIST_ARCFAST_SAMPLE_MAX /;"	d
IM_DRAWLIST_ARCFAST_TABLE_SIZE	build/_deps/imgui-proj-src/imgui_internal.h	/^#define IM_DRAWLIST_ARCFAST_TABLE_SIZE /;"	d
IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_CALC	build/_deps/imgui-proj-src/imgui_internal.h	/^#define IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_CALC(/;"	d
IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_CALC_ERROR	build/_deps/imgui-proj-src/imgui_internal.h	/^#define IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_CALC_ERROR(/;"	d
IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_CALC_R	build/_deps/imgui-proj-src/imgui_internal.h	/^#define IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_CALC_R(/;"	d
IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_MAX	build/_deps/imgui-proj-src/imgui_internal.h	/^#define IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_MAX /;"	d
IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_MIN	build/_deps/imgui-proj-src/imgui_internal.h	/^#define IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_MIN /;"	d
IM_DRAWLIST_TEX_LINES_WIDTH_MAX	build/_deps/imgui-proj-src/imgui.h	/^#define IM_DRAWLIST_TEX_LINES_WIDTH_MAX /;"	d
IM_F32_TO_INT8_SAT	build/_deps/imgui-proj-src/imgui_internal.h	/^#define IM_F32_TO_INT8_SAT(/;"	d
IM_F32_TO_INT8_UNBOUND	build/_deps/imgui-proj-src/imgui_internal.h	/^#define IM_F32_TO_INT8_UNBOUND(/;"	d
IM_FIXNORMAL2F	build/_deps/imgui-proj-src/imgui_draw.cpp	/^#define IM_FIXNORMAL2F(/;"	d	file:
IM_FIXNORMAL2F_MAX_INVLEN2	build/_deps/imgui-proj-src/imgui_draw.cpp	/^#define IM_FIXNORMAL2F_MAX_INVLEN2 /;"	d	file:
IM_FLOOR	build/_deps/imgui-proj-src/imgui_internal.h	/^#define IM_FLOOR /;"	d
IM_FMTARGS	build/_deps/imgui-proj-src/imgui.h	/^#define IM_FMTARGS(/;"	d
IM_FMTLIST	build/_deps/imgui-proj-src/imgui.h	/^#define IM_FMTLIST(/;"	d
IM_FREE	build/_deps/imgui-proj-src/imgui.h	/^#define IM_FREE(/;"	d
IM_MAX	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^#define IM_MAX(/;"	d	file:
IM_MAX	build/_deps/imgui-proj-src/imgui_demo.cpp	/^#define IM_MAX(/;"	d	file:
IM_MEMALIGN	build/_deps/imgui-proj-src/imgui_internal.h	/^#define IM_MEMALIGN(/;"	d
IM_MIN	build/_deps/imgui-proj-src/imgui_demo.cpp	/^#define IM_MIN(/;"	d	file:
IM_MSVC_RUNTIME_CHECKS_OFF	build/_deps/imgui-proj-src/imgui.h	/^#define IM_MSVC_RUNTIME_CHECKS_OFF /;"	d
IM_MSVC_RUNTIME_CHECKS_OFF	build/_deps/imgui-proj-src/imgui.h	/^#define IM_MSVC_RUNTIME_CHECKS_OFF$/;"	d
IM_MSVC_RUNTIME_CHECKS_RESTORE	build/_deps/imgui-proj-src/imgui.h	/^#define IM_MSVC_RUNTIME_CHECKS_RESTORE /;"	d
IM_MSVC_RUNTIME_CHECKS_RESTORE	build/_deps/imgui-proj-src/imgui.h	/^#define IM_MSVC_RUNTIME_CHECKS_RESTORE$/;"	d
IM_MSVC_WARNING_SUPPRESS	build/_deps/imgui-proj-src/imgui_internal.h	/^#define IM_MSVC_WARNING_SUPPRESS(/;"	d
IM_NEW	build/_deps/imgui-proj-src/imgui.h	/^#define IM_NEW(/;"	d
IM_NEWLINE	build/_deps/imgui-proj-src/imgui_demo.cpp	/^#define IM_NEWLINE /;"	d	file:
IM_NEWLINE	build/_deps/imgui-proj-src/imgui_internal.h	/^#define IM_NEWLINE /;"	d
IM_NORMALIZE2F_OVER_ZERO	build/_deps/imgui-proj-src/imgui_draw.cpp	/^#define IM_NORMALIZE2F_OVER_ZERO(/;"	d	file:
IM_OFFSETOF	build/_deps/imgui-proj-src/imgui.h	/^#define IM_OFFSETOF(/;"	d
IM_PI	build/_deps/imgui-proj-src/imgui_internal.h	/^#define IM_PI /;"	d
IM_PLACEMENT_NEW	build/_deps/imgui-proj-src/imgui.h	/^#define IM_PLACEMENT_NEW(/;"	d
IM_PRIX64	build/_deps/imgui-proj-src/imgui_internal.h	/^#define IM_PRIX64 /;"	d
IM_PRId64	build/_deps/imgui-proj-src/imgui_internal.h	/^#define IM_PRId64 /;"	d
IM_PRIu64	build/_deps/imgui-proj-src/imgui_internal.h	/^#define IM_PRIu64 /;"	d
IM_ROUND	build/_deps/imgui-proj-src/imgui_internal.h	/^#define IM_ROUND(/;"	d
IM_ROUNDUP_TO_EVEN	build/_deps/imgui-proj-src/imgui_internal.h	/^#define IM_ROUNDUP_TO_EVEN(/;"	d
IM_S16_MAX	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static const signed short   IM_S16_MAX = 32767;$/;"	v	typeref:typename:const signed short	file:
IM_S16_MIN	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static const signed short   IM_S16_MIN = -32768;$/;"	v	typeref:typename:const signed short	file:
IM_S32_MAX	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static const ImS32          IM_S32_MAX = INT_MAX;    \/\/ (2147483647), (0x7FFFFFFF)$/;"	v	typeref:typename:const ImS32	file:
IM_S32_MIN	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static const ImS32          IM_S32_MIN = INT_MIN;    \/\/ (-2147483647 - 1), (0x80000000);$/;"	v	typeref:typename:const ImS32	file:
IM_S64_MAX	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static const ImS64          IM_S64_MAX = 9223372036854775807LL;$/;"	v	typeref:typename:const ImS64	file:
IM_S64_MAX	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static const ImS64          IM_S64_MAX = LLONG_MAX;  \/\/ (9223372036854775807ll);$/;"	v	typeref:typename:const ImS64	file:
IM_S64_MIN	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static const ImS64          IM_S64_MIN = -9223372036854775807LL - 1;$/;"	v	typeref:typename:const ImS64	file:
IM_S64_MIN	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static const ImS64          IM_S64_MIN = LLONG_MIN;  \/\/ (-9223372036854775807ll - 1ll);$/;"	v	typeref:typename:const ImS64	file:
IM_S8_MAX	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static const signed char    IM_S8_MAX  = 127;$/;"	v	typeref:typename:const signed char	file:
IM_S8_MIN	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static const signed char    IM_S8_MIN  = -128;$/;"	v	typeref:typename:const signed char	file:
IM_SATURATE	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^    #define IM_SATURATE(/;"	d	file:
IM_STATIC_ASSERT	build/_deps/imgui-proj-src/imgui_internal.h	/^#define IM_STATIC_ASSERT(/;"	d
IM_STRINGIFY	build/_deps/imgui-proj-src/imgui_internal.h	/^#define IM_STRINGIFY(/;"	d
IM_STRINGIFY_HELPER	build/_deps/imgui-proj-src/imgui_internal.h	/^#define IM_STRINGIFY_HELPER(/;"	d
IM_TABSIZE	build/_deps/imgui-proj-src/imgui_internal.h	/^#define IM_TABSIZE /;"	d
IM_TRUNC	build/_deps/imgui-proj-src/imgui_internal.h	/^#define IM_TRUNC(/;"	d
IM_U16_MAX	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static const unsigned short IM_U16_MAX = 0xFFFF;$/;"	v	typeref:typename:const unsigned short	file:
IM_U16_MIN	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static const unsigned short IM_U16_MIN = 0;$/;"	v	typeref:typename:const unsigned short	file:
IM_U32_MAX	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static const ImU32          IM_U32_MAX = UINT_MAX;   \/\/ (0xFFFFFFFF)$/;"	v	typeref:typename:const ImU32	file:
IM_U32_MIN	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static const ImU32          IM_U32_MIN = 0;$/;"	v	typeref:typename:const ImU32	file:
IM_U64_MAX	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static const ImU64          IM_U64_MAX = (2ULL * 9223372036854775807LL + 1);$/;"	v	typeref:typename:const ImU64	file:
IM_U64_MAX	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static const ImU64          IM_U64_MAX = ULLONG_MAX; \/\/ (0xFFFFFFFFFFFFFFFFull);$/;"	v	typeref:typename:const ImU64	file:
IM_U64_MIN	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static const ImU64          IM_U64_MIN = 0;$/;"	v	typeref:typename:const ImU64	file:
IM_U8_MAX	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static const unsigned char  IM_U8_MAX  = 0xFF;$/;"	v	typeref:typename:const unsigned char	file:
IM_U8_MIN	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static const unsigned char  IM_U8_MIN  = 0;$/;"	v	typeref:typename:const unsigned char	file:
IM_UNICODE_CODEPOINT_INVALID	build/_deps/imgui-proj-src/imgui.h	/^#define IM_UNICODE_CODEPOINT_INVALID /;"	d
IM_UNICODE_CODEPOINT_MAX	build/_deps/imgui-proj-src/imgui.h	/^#define IM_UNICODE_CODEPOINT_MAX /;"	d
IM_UNUSED	build/_deps/imgui-proj-src/imgui.h	/^#define IM_UNUSED(/;"	d
IM_VK_KEYPAD_ENTER	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^#define IM_VK_KEYPAD_ENTER /;"	d	file:
INCLUDES	build/_deps/imgui-proj-src/examples/example_glfw_opengl2/build_win32.bat	/^@set INCLUDES=\/I..\\.. \/I..\\..\\backends \/I..\\libs\\glfw\\include$/;"	v
INCLUDES	build/_deps/imgui-proj-src/examples/example_glfw_opengl3/build_win32.bat	/^@set INCLUDES=\/I..\\.. \/I..\\..\\backends \/I..\\libs\\glfw\\include$/;"	v
INCLUDES	build/_deps/imgui-proj-src/examples/example_glfw_vulkan/build_win32.bat	/^@set INCLUDES=\/I..\\.. \/I..\\..\\backends \/I..\\libs\\glfw\\include \/I %VULKAN_SDK%\\include$/;"	v
INCLUDES	build/_deps/imgui-proj-src/examples/example_glfw_vulkan/build_win64.bat	/^@set INCLUDES=\/I..\\.. \/I..\\..\\backends \/I..\\libs\\glfw\\include \/I %VULKAN_SDK%\\include$/;"	v
INCLUDES	build/_deps/imgui-proj-src/examples/example_sdl2_directx11/build_win32.bat	/^@set INCLUDES=\/I..\\.. \/I..\\..\\backends \/I%SDL2_DIR%\\include \/I "%WindowsSdkDir%Include\\/;"	v
INCLUDES	build/_deps/imgui-proj-src/examples/example_sdl2_opengl2/build_win32.bat	/^@set INCLUDES=\/I..\\.. \/I..\\..\\backends \/I%SDL2_DIR%\\include$/;"	v
INCLUDES	build/_deps/imgui-proj-src/examples/example_sdl2_opengl3/build_win32.bat	/^@set INCLUDES=\/I..\\.. \/I..\\..\\backends \/I%SDL2_DIR%\\include$/;"	v
INCLUDES	build/_deps/imgui-proj-src/examples/example_sdl2_sdlrenderer2/build_win32.bat	/^@set INCLUDES=\/I..\\.. \/I..\\..\\backends \/I%SDL2_DIR%\\include$/;"	v
INCLUDES	build/_deps/imgui-proj-src/examples/example_sdl2_vulkan/build_win32.bat	/^@set INCLUDES=\/I..\\.. \/I..\\..\\backends \/I%SDL2_DIR%\\include \/I %VULKAN_SDK%\\include$/;"	v
INCLUDES	build/_deps/imgui-proj-src/examples/example_sdl3_opengl3/build_win32.bat	/^@set INCLUDES=\/I..\\.. \/I..\\..\\backends \/I%SDL3_DIR%\\include$/;"	v
INCLUDES	build/_deps/imgui-proj-src/examples/example_sdl3_sdlrenderer3/build_win32.bat	/^@set INCLUDES=\/I..\\.. \/I..\\..\\backends \/I%SDL3_DIR%\\include$/;"	v
INCLUDES	build/_deps/imgui-proj-src/examples/example_win32_directx10/build_win32.bat	/^@set INCLUDES=\/I..\\.. \/I..\\..\\backends \/I "%WindowsSdkDir%Include\\um" \/I "%WindowsSdkDir/;"	v
INCLUDES	build/_deps/imgui-proj-src/examples/example_win32_directx11/build_win32.bat	/^@set INCLUDES=\/I..\\.. \/I..\\..\\backends \/I "%WindowsSdkDir%Include\\um" \/I "%WindowsSdkDir/;"	v
INCLUDES	build/_deps/imgui-proj-src/examples/example_win32_directx12/build_win32.bat	/^@set INCLUDES=\/I..\\.. \/I..\\..\\backends \/I "%WindowsSdkDir%Include\\um" \/I "%WindowsSdkDir/;"	v
INCLUDES	build/_deps/imgui-proj-src/examples/example_win32_directx9/build_win32.bat	/^@set INCLUDES=\/I..\\.. \/I..\\..\\backends \/I "%DXSDK_DIR%\/Include"$/;"	v
INCLUDES	build/_deps/imgui-proj-src/examples/example_win32_opengl3/build_win32.bat	/^@set INCLUDES=\/I..\\.. \/I..\\..\\backends$/;"	v
INCLUDE_IMSTB_TEXTEDIT_H	build/_deps/imgui-proj-src/imstb_textedit.h	/^#define INCLUDE_IMSTB_TEXTEDIT_H$/;"	d
IO	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiIO                 IO;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiIO
IdealMaxPos	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2                  IdealMaxPos;            \/\/ Used to implicitly calculate ContentSiz/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
Idx	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                 Idx;$/;"	m	struct:ImGuiViewportP	typeref:typename:int
IdxBuffer	build/_deps/imgui-proj-src/imgui.h	/^    ImVector<ImDrawIdx>     IdxBuffer;          \/\/ Index buffer. Each command consume ImDrawCm/;"	m	struct:ImDrawList	typeref:typename:ImVector<ImDrawIdx>
IdxOffset	build/_deps/imgui-proj-src/imgui.h	/^    unsigned int    IdxOffset;          \/\/ 4    \/\/ Start offset in index buffer.$/;"	m	struct:ImDrawCmd	typeref:typename:unsigned int
IgnoreWindowPosEventFrame	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^    int         IgnoreWindowPosEventFrame;$/;"	m	struct:ImGui_ImplGlfw_ViewportData	typeref:typename:int	file:
IgnoreWindowSizeEventFrame	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^    int         IgnoreWindowSizeEventFrame;$/;"	m	struct:ImGui_ImplGlfw_ViewportData	typeref:typename:int	file:
ImAbs	build/_deps/imgui-proj-src/imgui_internal.h	/^static inline double ImAbs(double x)            { return fabs(x); }$/;"	f	typeref:typename:double
ImAbs	build/_deps/imgui-proj-src/imgui_internal.h	/^static inline float  ImAbs(float x)             { return fabsf(x); }$/;"	f	typeref:typename:float
ImAbs	build/_deps/imgui-proj-src/imgui_internal.h	/^static inline int    ImAbs(int x)               { return x < 0 ? -x : x; }$/;"	f	typeref:typename:int
ImAcos	build/_deps/imgui-proj-src/imgui_internal.h	/^#define ImAcos(/;"	d
ImAcos01	build/_deps/imgui-proj-src/imgui_draw.cpp	/^static inline float ImAcos01(float x)$/;"	f	typeref:typename:float	file:
ImAddClampOverflow	build/_deps/imgui-proj-src/imgui_internal.h	/^template<typename T> static inline T ImAddClampOverflow(T a, T b, T mn, T mx)   { if (b < 0 && (/;"	f	typeref:typename:T
ImAlphaBlendColors	build/_deps/imgui-proj-src/imgui.cpp	/^IMGUI_API ImU32 ImAlphaBlendColors(ImU32 col_a, ImU32 col_b)$/;"	f	typeref:typename:IM_MSVC_RUNTIME_CHECKS_RESTORE IMGUI_API ImU32
ImAtan2	build/_deps/imgui-proj-src/imgui_internal.h	/^#define ImAtan2(/;"	d
ImAtof	build/_deps/imgui-proj-src/imgui_internal.h	/^#define ImAtof(/;"	d
ImAtoi	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static const char* ImAtoi(const char* src, TYPE* output)$/;"	f	typeref:typename:const char *	file:
ImBezierCubicCalc	build/_deps/imgui-proj-src/imgui_draw.cpp	/^ImVec2 ImBezierCubicCalc(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec2& p4,/;"	f	typeref:typename:ImVec2
ImBezierCubicClosestPoint	build/_deps/imgui-proj-src/imgui.cpp	/^ImVec2 ImBezierCubicClosestPoint(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImV/;"	f	typeref:typename:ImVec2
ImBezierCubicClosestPointCasteljau	build/_deps/imgui-proj-src/imgui.cpp	/^ImVec2 ImBezierCubicClosestPointCasteljau(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, /;"	f	typeref:typename:ImVec2
ImBezierCubicClosestPointCasteljauStep	build/_deps/imgui-proj-src/imgui.cpp	/^static void ImBezierCubicClosestPointCasteljauStep(const ImVec2& p, ImVec2& p_closest, ImVec2& p/;"	f	typeref:typename:void	file:
ImBezierQuadraticCalc	build/_deps/imgui-proj-src/imgui_draw.cpp	/^ImVec2 ImBezierQuadraticCalc(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, float t)$/;"	f	typeref:typename:ImVec2
ImBitArray	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImBitArray()                                { ClearAllBits(); }$/;"	f	struct:ImBitArray
ImBitArray	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImBitArray$/;"	s
ImBitArrayClearAllBits	build/_deps/imgui-proj-src/imgui_internal.h	/^inline void     ImBitArrayClearAllBits(ImU32* arr, int bitcount){ memset(arr, 0, ImBitArrayGetSt/;"	f	typeref:typename:void
ImBitArrayClearBit	build/_deps/imgui-proj-src/imgui_internal.h	/^inline void     ImBitArrayClearBit(ImU32* arr, int n)           { ImU32 mask = (ImU32)1 << (n & /;"	f	typeref:typename:void
ImBitArrayForNamedKeys	build/_deps/imgui-proj-src/imgui_internal.h	/^typedef ImBitArray<ImGuiKey_NamedKey_COUNT, -ImGuiKey_NamedKey_BEGIN>    ImBitArrayForNamedKeys;$/;"	t	typeref:typename:ImBitArray<ImGuiKey_NamedKey_COUNT,-ImGuiKey_NamedKey_BEGIN>
ImBitArrayGetStorageSizeInBytes	build/_deps/imgui-proj-src/imgui_internal.h	/^inline size_t   ImBitArrayGetStorageSizeInBytes(int bitcount)   { return (size_t)((bitcount + 31/;"	f	typeref:typename:size_t
ImBitArrayPtr	build/_deps/imgui-proj-src/imgui_internal.h	/^typedef ImU32* ImBitArrayPtr; \/\/ Name for use in structs$/;"	t	typeref:typename:ImU32 *
ImBitArraySetBit	build/_deps/imgui-proj-src/imgui_internal.h	/^inline void     ImBitArraySetBit(ImU32* arr, int n)             { ImU32 mask = (ImU32)1 << (n & /;"	f	typeref:typename:void
ImBitArraySetBitRange	build/_deps/imgui-proj-src/imgui_internal.h	/^inline void     ImBitArraySetBitRange(ImU32* arr, int n, int n2) \/\/ Works on range [n..n2)$/;"	f	typeref:typename:void
ImBitArrayTestBit	build/_deps/imgui-proj-src/imgui_internal.h	/^inline bool     ImBitArrayTestBit(const ImU32* arr, int n)      { ImU32 mask = (ImU32)1 << (n & /;"	f	typeref:typename:bool
ImBitVector	build/_deps/imgui-proj-src/imgui_internal.h	/^struct IMGUI_API ImBitVector$/;"	s
ImCeil	build/_deps/imgui-proj-src/imgui_internal.h	/^#define ImCeil(/;"	d
ImCharIsBlankA	build/_deps/imgui-proj-src/imgui_internal.h	/^static inline bool      ImCharIsBlankA(char c)          { return c == ' ' || c == '\\t'; }$/;"	f	typeref:typename:bool
ImCharIsBlankW	build/_deps/imgui-proj-src/imgui_internal.h	/^static inline bool      ImCharIsBlankW(unsigned int c)  { return c == ' ' || c == '\\t' || c == /;"	f	typeref:typename:bool
ImChunkStream	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImChunkStream$/;"	s
ImClamp	build/_deps/imgui-proj-src/imgui_internal.h	/^static inline ImVec2 ImClamp(const ImVec2& v, const ImVec2& mn, ImVec2 mx)      { return ImVec2(/;"	f	typeref:typename:ImVec2
ImClamp	build/_deps/imgui-proj-src/imgui_internal.h	/^template<typename T> static inline T ImClamp(T v, T mn, T mx)                   { return (v < mn/;"	f	typeref:typename:T
ImColor	build/_deps/imgui-proj-src/imgui.h	/^    constexpr ImColor()                                             { }$/;"	f	struct:ImColor
ImColor	build/_deps/imgui-proj-src/imgui.h	/^    constexpr ImColor(ImU32 rgba)                                   : Value((float)((rgba >> IM_/;"	f	struct:ImColor
ImColor	build/_deps/imgui-proj-src/imgui.h	/^    constexpr ImColor(const ImVec4& col)                            : Value(col) {}$/;"	f	struct:ImColor
ImColor	build/_deps/imgui-proj-src/imgui.h	/^    constexpr ImColor(float r, float g, float b, float a = 1.0f)    : Value(r, g, b, a) { }$/;"	f	struct:ImColor
ImColor	build/_deps/imgui-proj-src/imgui.h	/^    constexpr ImColor(int r, int g, int b, int a = 255)             : Value((float)r * (1.0f \/ /;"	f	struct:ImColor
ImColor	build/_deps/imgui-proj-src/imgui.h	/^struct ImColor$/;"	s
ImCos	build/_deps/imgui-proj-src/imgui_internal.h	/^#define ImCos(/;"	d
ImDot	build/_deps/imgui-proj-src/imgui_internal.h	/^static inline float  ImDot(const ImVec2& a, const ImVec2& b)                    { return a.x * b/;"	f	typeref:typename:float
ImDrawCallback	build/_deps/imgui-proj-src/imgui.h	/^typedef void (*ImDrawCallback)(const ImDrawList* parent_list, const ImDrawCmd* cmd);$/;"	t	typeref:typename:void (*)(const ImDrawList * parent_list,const ImDrawCmd * cmd)
ImDrawCallback_ResetRenderState	build/_deps/imgui-proj-src/imgui.h	/^#define ImDrawCallback_ResetRenderState /;"	d
ImDrawChannel	build/_deps/imgui-proj-src/imgui.h	/^struct ImDrawChannel$/;"	s
ImDrawCmd	build/_deps/imgui-proj-src/imgui.h	/^    ImDrawCmd() { memset(this, 0, sizeof(*this)); } \/\/ Also ensure our padding fields are zero/;"	f	struct:ImDrawCmd
ImDrawCmd	build/_deps/imgui-proj-src/imgui.h	/^struct ImDrawCmd$/;"	s
ImDrawCmdHeader	build/_deps/imgui-proj-src/imgui.h	/^struct ImDrawCmdHeader$/;"	s
ImDrawCmd_AreSequentialIdxOffset	build/_deps/imgui-proj-src/imgui_draw.cpp	/^#define ImDrawCmd_AreSequentialIdxOffset(/;"	d	file:
ImDrawCmd_HeaderCompare	build/_deps/imgui-proj-src/imgui_draw.cpp	/^#define ImDrawCmd_HeaderCompare(/;"	d	file:
ImDrawCmd_HeaderCopy	build/_deps/imgui-proj-src/imgui_draw.cpp	/^#define ImDrawCmd_HeaderCopy(/;"	d	file:
ImDrawCmd_HeaderSize	build/_deps/imgui-proj-src/imgui_draw.cpp	/^#define ImDrawCmd_HeaderSize /;"	d	file:
ImDrawData	build/_deps/imgui-proj-src/imgui.h	/^    ImDrawData()    { Clear(); }$/;"	f	struct:ImDrawData
ImDrawData	build/_deps/imgui-proj-src/imgui.h	/^struct ImDrawData$/;"	s
ImDrawDataBuilder	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImDrawDataBuilder()                     { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImDrawDataBuilder
ImDrawDataBuilder	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImDrawDataBuilder$/;"	s
ImDrawFlags	build/_deps/imgui-proj-src/imgui.h	/^typedef int ImDrawFlags;            \/\/ -> enum ImDrawFlags_          \/\/ Flags: for ImDrawLis/;"	t	typeref:typename:int
ImDrawFlags_	build/_deps/imgui-proj-src/imgui.h	/^enum ImDrawFlags_$/;"	g
ImDrawFlags_Closed	build/_deps/imgui-proj-src/imgui.h	/^    ImDrawFlags_Closed                      = 1 << 0, \/\/ PathStroke(), AddPolyline(): specify /;"	e	enum:ImDrawFlags_
ImDrawFlags_None	build/_deps/imgui-proj-src/imgui.h	/^    ImDrawFlags_None                        = 0,$/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersAll	build/_deps/imgui-proj-src/imgui.h	/^    ImDrawFlags_RoundCornersAll             = ImDrawFlags_RoundCornersTopLeft | ImDrawFlags_Roun/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersBottom	build/_deps/imgui-proj-src/imgui.h	/^    ImDrawFlags_RoundCornersBottom          = ImDrawFlags_RoundCornersBottomLeft | ImDrawFlags_R/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersBottomLeft	build/_deps/imgui-proj-src/imgui.h	/^    ImDrawFlags_RoundCornersBottomLeft      = 1 << 6, \/\/ AddRect(), AddRectFilled(), PathRect(/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersBottomRight	build/_deps/imgui-proj-src/imgui.h	/^    ImDrawFlags_RoundCornersBottomRight     = 1 << 7, \/\/ AddRect(), AddRectFilled(), PathRect(/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersDefault_	build/_deps/imgui-proj-src/imgui.h	/^    ImDrawFlags_RoundCornersDefault_        = ImDrawFlags_RoundCornersAll, \/\/ Default to ALL c/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersLeft	build/_deps/imgui-proj-src/imgui.h	/^    ImDrawFlags_RoundCornersLeft            = ImDrawFlags_RoundCornersBottomLeft | ImDrawFlags_R/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersMask_	build/_deps/imgui-proj-src/imgui.h	/^    ImDrawFlags_RoundCornersMask_           = ImDrawFlags_RoundCornersAll | ImDrawFlags_RoundCor/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersNone	build/_deps/imgui-proj-src/imgui.h	/^    ImDrawFlags_RoundCornersNone            = 1 << 8, \/\/ AddRect(), AddRectFilled(), PathRect(/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersRight	build/_deps/imgui-proj-src/imgui.h	/^    ImDrawFlags_RoundCornersRight           = ImDrawFlags_RoundCornersBottomRight | ImDrawFlags_/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersTop	build/_deps/imgui-proj-src/imgui.h	/^    ImDrawFlags_RoundCornersTop             = ImDrawFlags_RoundCornersTopLeft | ImDrawFlags_Roun/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersTopLeft	build/_deps/imgui-proj-src/imgui.h	/^    ImDrawFlags_RoundCornersTopLeft         = 1 << 4, \/\/ AddRect(), AddRectFilled(), PathRect(/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersTopRight	build/_deps/imgui-proj-src/imgui.h	/^    ImDrawFlags_RoundCornersTopRight        = 1 << 5, \/\/ AddRect(), AddRectFilled(), PathRect(/;"	e	enum:ImDrawFlags_
ImDrawIdx	build/_deps/imgui-proj-src/examples/example_allegro5/imconfig_allegro5.h	/^#define ImDrawIdx /;"	d
ImDrawIdx	build/_deps/imgui-proj-src/imgui.h	/^typedef unsigned short ImDrawIdx;   \/\/ Default: 16-bit (for maximum compatibility with rendere/;"	t	typeref:typename:unsigned short
ImDrawList	build/_deps/imgui-proj-src/imgui.h	/^    ImDrawList(ImDrawListSharedData* shared_data) { memset(this, 0, sizeof(*this)); _Data = shar/;"	f	struct:ImDrawList
ImDrawList	build/_deps/imgui-proj-src/imgui.h	/^struct ImDrawList$/;"	s
ImDrawListFlags	build/_deps/imgui-proj-src/imgui.h	/^typedef int ImDrawListFlags;        \/\/ -> enum ImDrawListFlags_      \/\/ Flags: for ImDrawLis/;"	t	typeref:typename:int
ImDrawListFlags_	build/_deps/imgui-proj-src/imgui.h	/^enum ImDrawListFlags_$/;"	g
ImDrawListFlags_AllowVtxOffset	build/_deps/imgui-proj-src/imgui.h	/^    ImDrawListFlags_AllowVtxOffset          = 1 << 3,  \/\/ Can emit 'VtxOffset > 0' to allow la/;"	e	enum:ImDrawListFlags_
ImDrawListFlags_AntiAliasedFill	build/_deps/imgui-proj-src/imgui.h	/^    ImDrawListFlags_AntiAliasedFill         = 1 << 2,  \/\/ Enable anti-aliased edge around fill/;"	e	enum:ImDrawListFlags_
ImDrawListFlags_AntiAliasedLines	build/_deps/imgui-proj-src/imgui.h	/^    ImDrawListFlags_AntiAliasedLines        = 1 << 0,  \/\/ Enable anti-aliased lines\/borders (/;"	e	enum:ImDrawListFlags_
ImDrawListFlags_AntiAliasedLinesUseTex	build/_deps/imgui-proj-src/imgui.h	/^    ImDrawListFlags_AntiAliasedLinesUseTex  = 1 << 1,  \/\/ Enable anti-aliased lines\/borders u/;"	e	enum:ImDrawListFlags_
ImDrawListFlags_None	build/_deps/imgui-proj-src/imgui.h	/^    ImDrawListFlags_None                    = 0,$/;"	e	enum:ImDrawListFlags_
ImDrawListSharedData	build/_deps/imgui-proj-src/imgui_draw.cpp	/^ImDrawListSharedData::ImDrawListSharedData()$/;"	f	class:ImDrawListSharedData
ImDrawListSharedData	build/_deps/imgui-proj-src/imgui_internal.h	/^struct IMGUI_API ImDrawListSharedData$/;"	s
ImDrawListSplitter	build/_deps/imgui-proj-src/imgui.h	/^    inline ImDrawListSplitter()  { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImDrawListSplitter
ImDrawListSplitter	build/_deps/imgui-proj-src/imgui.h	/^struct ImDrawListSplitter$/;"	s
ImDrawVert	build/_deps/imgui-proj-src/imgui.h	/^struct ImDrawVert$/;"	s
ImDrawVertAllegro	build/_deps/imgui-proj-src/backends/imgui_impl_allegro5.cpp	/^struct ImDrawVertAllegro$/;"	s	file:
ImExponentialMovingAverage	build/_deps/imgui-proj-src/imgui_internal.h	/^static inline float  ImExponentialMovingAverage(float avg, float sample, int n) { avg -= avg \/ /;"	f	typeref:typename:float
ImFabs	build/_deps/imgui-proj-src/imgui_internal.h	/^#define ImFabs(/;"	d
ImFileClose	build/_deps/imgui-proj-src/imgui.cpp	/^bool    ImFileClose(ImFileHandle f)     { return fclose(f) == 0; }$/;"	f	typeref:typename:bool
ImFileClose	build/_deps/imgui-proj-src/imgui_internal.h	/^static inline bool          ImFileClose(ImFileHandle)                               { return fal/;"	f	typeref:typename:bool
ImFileGetSize	build/_deps/imgui-proj-src/imgui.cpp	/^ImU64   ImFileGetSize(ImFileHandle f)   { long off = 0, sz = 0; return ((off = ftell(f)) != -1 &/;"	f	typeref:typename:ImU64
ImFileGetSize	build/_deps/imgui-proj-src/imgui_internal.h	/^static inline ImU64         ImFileGetSize(ImFileHandle)                             { return (Im/;"	f	typeref:typename:ImU64
ImFileHandle	build/_deps/imgui-proj-src/imgui_internal.h	/^typedef FILE* ImFileHandle;$/;"	t	typeref:typename:FILE *
ImFileHandle	build/_deps/imgui-proj-src/imgui_internal.h	/^typedef void* ImFileHandle;$/;"	t	typeref:typename:void *
ImFileLoadToMemory	build/_deps/imgui-proj-src/imgui.cpp	/^void*   ImFileLoadToMemory(const char* filename, const char* mode, size_t* out_file_size, int pa/;"	f	typeref:typename:void *
ImFileOpen	build/_deps/imgui-proj-src/imgui.cpp	/^ImFileHandle ImFileOpen(const char* filename, const char* mode)$/;"	f	typeref:typename:ImFileHandle
ImFileOpen	build/_deps/imgui-proj-src/imgui_internal.h	/^static inline ImFileHandle  ImFileOpen(const char*, const char*)                    { return NUL/;"	f	typeref:typename:ImFileHandle
ImFileRead	build/_deps/imgui-proj-src/imgui.cpp	/^ImU64   ImFileRead(void* data, ImU64 sz, ImU64 count, ImFileHandle f)           { return fread(d/;"	f	typeref:typename:ImU64
ImFileRead	build/_deps/imgui-proj-src/imgui_internal.h	/^static inline ImU64         ImFileRead(void*, ImU64, ImU64, ImFileHandle)           { return 0; /;"	f	typeref:typename:ImU64
ImFileWrite	build/_deps/imgui-proj-src/imgui.cpp	/^ImU64   ImFileWrite(const void* data, ImU64 sz, ImU64 count, ImFileHandle f)    { return fwrite(/;"	f	typeref:typename:ImU64
ImFileWrite	build/_deps/imgui-proj-src/imgui_internal.h	/^static inline ImU64         ImFileWrite(const void*, ImU64, ImU64, ImFileHandle)    { return 0; /;"	f	typeref:typename:ImU64
ImFloor	build/_deps/imgui-proj-src/imgui_internal.h	/^static inline ImVec2 ImFloor(const ImVec2& v)                                   { return ImVec2(/;"	f	typeref:typename:ImVec2
ImFloor	build/_deps/imgui-proj-src/imgui_internal.h	/^static inline float  ImFloor(float f)                                           { return (float)/;"	f	typeref:typename:float
ImFmod	build/_deps/imgui-proj-src/imgui_internal.h	/^#define ImFmod(/;"	d
ImFont	build/_deps/imgui-proj-src/imgui.h	/^struct ImFont$/;"	s
ImFont	build/_deps/imgui-proj-src/imgui_draw.cpp	/^ImFont::ImFont()$/;"	f	class:ImFont
ImFontAtlas	build/_deps/imgui-proj-src/imgui.h	/^struct ImFontAtlas$/;"	s
ImFontAtlas	build/_deps/imgui-proj-src/imgui_draw.cpp	/^ImFontAtlas::ImFontAtlas()$/;"	f	class:ImFontAtlas
ImFontAtlasBuildFinish	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImFontAtlasBuildFinish(ImFontAtlas* atlas)$/;"	f	typeref:typename:void
ImFontAtlasBuildInit	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImFontAtlasBuildInit(ImFontAtlas* atlas)$/;"	f	typeref:typename:void
ImFontAtlasBuildMultiplyCalcLookupTable	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void    ImFontAtlasBuildMultiplyCalcLookupTable(unsigned char out_table[256], float in_brighten_/;"	f	typeref:typename:void
ImFontAtlasBuildMultiplyRectAlpha8	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void    ImFontAtlasBuildMultiplyRectAlpha8(const unsigned char table[256], unsigned char* pixels/;"	f	typeref:typename:void
ImFontAtlasBuildPackCustomRects	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImFontAtlasBuildPackCustomRects(ImFontAtlas* atlas, void* stbrp_context_opaque)$/;"	f	typeref:typename:void
ImFontAtlasBuildRender32bppRectFromString	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImFontAtlasBuildRender32bppRectFromString(ImFontAtlas* atlas, int x, int y, int w, int h, c/;"	f	typeref:typename:void
ImFontAtlasBuildRender8bppRectFromString	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImFontAtlasBuildRender8bppRectFromString(ImFontAtlas* atlas, int x, int y, int w, int h, co/;"	f	typeref:typename:void
ImFontAtlasBuildRenderDefaultTexData	build/_deps/imgui-proj-src/imgui_draw.cpp	/^static void ImFontAtlasBuildRenderDefaultTexData(ImFontAtlas* atlas)$/;"	f	typeref:typename:void	file:
ImFontAtlasBuildRenderLinesTexData	build/_deps/imgui-proj-src/imgui_draw.cpp	/^static void ImFontAtlasBuildRenderLinesTexData(ImFontAtlas* atlas)$/;"	f	typeref:typename:void	file:
ImFontAtlasBuildSetupFont	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImFontAtlasBuildSetupFont(ImFontAtlas* atlas, ImFont* font, ImFontConfig* font_config, floa/;"	f	typeref:typename:void
ImFontAtlasBuildWithFreeType	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^static bool ImFontAtlasBuildWithFreeType(ImFontAtlas* atlas)$/;"	f	typeref:typename:bool	file:
ImFontAtlasBuildWithFreeTypeEx	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^bool ImFontAtlasBuildWithFreeTypeEx(FT_Library ft_library, ImFontAtlas* atlas, unsigned int extr/;"	f	typeref:typename:bool
ImFontAtlasBuildWithStbTruetype	build/_deps/imgui-proj-src/imgui_draw.cpp	/^static bool ImFontAtlasBuildWithStbTruetype(ImFontAtlas* atlas)$/;"	f	typeref:typename:bool	file:
ImFontAtlasCustomRect	build/_deps/imgui-proj-src/imgui.h	/^    ImFontAtlasCustomRect()         { Width = Height = 0; X = Y = 0xFFFF; GlyphID = 0; GlyphAdva/;"	f	struct:ImFontAtlasCustomRect
ImFontAtlasCustomRect	build/_deps/imgui-proj-src/imgui.h	/^struct ImFontAtlasCustomRect$/;"	s
ImFontAtlasFlags	build/_deps/imgui-proj-src/imgui.h	/^typedef int ImFontAtlasFlags;       \/\/ -> enum ImFontAtlasFlags_     \/\/ Flags: for ImFontAtl/;"	t	typeref:typename:int
ImFontAtlasFlags_	build/_deps/imgui-proj-src/imgui.h	/^enum ImFontAtlasFlags_$/;"	g
ImFontAtlasFlags_NoBakedLines	build/_deps/imgui-proj-src/imgui.h	/^    ImFontAtlasFlags_NoBakedLines       = 1 << 2,   \/\/ Don't build thick line textures into th/;"	e	enum:ImFontAtlasFlags_
ImFontAtlasFlags_NoMouseCursors	build/_deps/imgui-proj-src/imgui.h	/^    ImFontAtlasFlags_NoMouseCursors     = 1 << 1,   \/\/ Don't build software mouse cursors into/;"	e	enum:ImFontAtlasFlags_
ImFontAtlasFlags_NoPowerOfTwoHeight	build/_deps/imgui-proj-src/imgui.h	/^    ImFontAtlasFlags_NoPowerOfTwoHeight = 1 << 0,   \/\/ Don't round the height to next power of/;"	e	enum:ImFontAtlasFlags_
ImFontAtlasFlags_None	build/_deps/imgui-proj-src/imgui.h	/^    ImFontAtlasFlags_None               = 0,$/;"	e	enum:ImFontAtlasFlags_
ImFontAtlasGetBuilderForStbTruetype	build/_deps/imgui-proj-src/imgui_draw.cpp	/^const ImFontBuilderIO* ImFontAtlasGetBuilderForStbTruetype()$/;"	f	typeref:typename:const ImFontBuilderIO *
ImFontAtlasUpdateConfigDataPointers	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImFontAtlasUpdateConfigDataPointers(ImFontAtlas* atlas)$/;"	f	typeref:typename:void
ImFontBuildDstData	build/_deps/imgui-proj-src/imgui_draw.cpp	/^struct ImFontBuildDstData$/;"	s	file:
ImFontBuildDstDataFT	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^struct ImFontBuildDstDataFT$/;"	s	file:
ImFontBuildSrcData	build/_deps/imgui-proj-src/imgui_draw.cpp	/^struct ImFontBuildSrcData$/;"	s	file:
ImFontBuildSrcDataFT	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^struct ImFontBuildSrcDataFT$/;"	s	file:
ImFontBuildSrcGlyphFT	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^    ImFontBuildSrcGlyphFT() { memset((void*)this, 0, sizeof(*this)); }$/;"	f	struct:ImFontBuildSrcGlyphFT	file:
ImFontBuildSrcGlyphFT	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^struct ImFontBuildSrcGlyphFT$/;"	s	file:
ImFontBuilderIO	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImFontBuilderIO$/;"	s
ImFontConfig	build/_deps/imgui-proj-src/imgui.h	/^struct ImFontConfig$/;"	s
ImFontConfig	build/_deps/imgui-proj-src/imgui_draw.cpp	/^ImFontConfig::ImFontConfig()$/;"	f	class:ImFontConfig
ImFontGlyph	build/_deps/imgui-proj-src/imgui.h	/^struct ImFontGlyph$/;"	s
ImFontGlyphRangesBuilder	build/_deps/imgui-proj-src/imgui.h	/^    ImFontGlyphRangesBuilder()              { Clear(); }$/;"	f	struct:ImFontGlyphRangesBuilder
ImFontGlyphRangesBuilder	build/_deps/imgui-proj-src/imgui.h	/^struct ImFontGlyphRangesBuilder$/;"	s
ImFormatString	build/_deps/imgui-proj-src/imgui.cpp	/^int ImFormatString(char* buf, size_t buf_size, const char* fmt, ...)$/;"	f	typeref:typename:int
ImFormatStringToTempBuffer	build/_deps/imgui-proj-src/imgui.cpp	/^void ImFormatStringToTempBuffer(const char** out_buf, const char** out_buf_end, const char* fmt,/;"	f	typeref:typename:void
ImFormatStringToTempBufferV	build/_deps/imgui-proj-src/imgui.cpp	/^void ImFormatStringToTempBufferV(const char** out_buf, const char** out_buf_end, const char* fmt/;"	f	typeref:typename:void
ImFormatStringV	build/_deps/imgui-proj-src/imgui.cpp	/^int ImFormatStringV(char* buf, size_t buf_size, const char* fmt, va_list args)$/;"	f	typeref:typename:int
ImGL3WProcs	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^union ImGL3WProcs {$/;"	u
ImGetDirQuadrantFromDelta	build/_deps/imgui-proj-src/imgui.cpp	/^static ImGuiDir ImGetDirQuadrantFromDelta(float dx, float dy)$/;"	f	typeref:typename:ImGuiDir	file:
ImGui	build/_deps/imgui-proj-src/imgui.cpp	/^namespace ImGui$/;"	n	file:
ImGui	build/_deps/imgui-proj-src/imgui.h	/^namespace ImGui$/;"	n
ImGui	build/_deps/imgui-proj-src/imgui_demo.cpp	/^namespace ImGui { IMGUI_API void ShowFontAtlas(ImFontAtlas* atlas); }$/;"	n	file:
ImGui	build/_deps/imgui-proj-src/imgui_internal.h	/^namespace ImGui$/;"	n
ImGui	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^namespace ImGui$/;"	n	file:
ImGui	build/_deps/imgui-proj-src/misc/cpp/imgui_stdlib.h	/^namespace ImGui$/;"	n
ImGuiActivateFlags	build/_deps/imgui-proj-src/imgui_internal.h	/^typedef int ImGuiActivateFlags;         \/\/ -> enum ImGuiActivateFlags_      \/\/ Flags: for na/;"	t	typeref:typename:int
ImGuiActivateFlags_	build/_deps/imgui-proj-src/imgui_internal.h	/^enum ImGuiActivateFlags_$/;"	g
ImGuiActivateFlags_FromShortcut	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiActivateFlags_FromShortcut         = 1 << 4,       \/\/ Activation requested by an item/;"	e	enum:ImGuiActivateFlags_
ImGuiActivateFlags_FromTabbing	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiActivateFlags_FromTabbing          = 1 << 3,       \/\/ Activation requested by a tabbi/;"	e	enum:ImGuiActivateFlags_
ImGuiActivateFlags_None	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiActivateFlags_None                 = 0,$/;"	e	enum:ImGuiActivateFlags_
ImGuiActivateFlags_PreferInput	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiActivateFlags_PreferInput          = 1 << 0,       \/\/ Favor activation that requires /;"	e	enum:ImGuiActivateFlags_
ImGuiActivateFlags_PreferTweak	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiActivateFlags_PreferTweak          = 1 << 1,       \/\/ Favor activation for tweaking w/;"	e	enum:ImGuiActivateFlags_
ImGuiActivateFlags_TryToPreserveState	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiActivateFlags_TryToPreserveState   = 1 << 2,       \/\/ Request widget to preserve stat/;"	e	enum:ImGuiActivateFlags_
ImGuiAxis	build/_deps/imgui-proj-src/imgui_internal.h	/^enum ImGuiAxis$/;"	g
ImGuiAxis_None	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiAxis_None = -1,$/;"	e	enum:ImGuiAxis
ImGuiAxis_X	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiAxis_X = 0,$/;"	e	enum:ImGuiAxis
ImGuiAxis_Y	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiAxis_Y = 1$/;"	e	enum:ImGuiAxis
ImGuiBackendFlags	build/_deps/imgui-proj-src/imgui.h	/^typedef int ImGuiBackendFlags;      \/\/ -> enum ImGuiBackendFlags_    \/\/ Flags: for io.Backen/;"	t	typeref:typename:int
ImGuiBackendFlags_	build/_deps/imgui-proj-src/imgui.h	/^enum ImGuiBackendFlags_$/;"	g
ImGuiBackendFlags_HasGamepad	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiBackendFlags_HasGamepad            = 1 << 0,   \/\/ Backend Platform supports gamepad a/;"	e	enum:ImGuiBackendFlags_
ImGuiBackendFlags_HasMouseCursors	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiBackendFlags_HasMouseCursors       = 1 << 1,   \/\/ Backend Platform supports honoring /;"	e	enum:ImGuiBackendFlags_
ImGuiBackendFlags_HasMouseHoveredViewport	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiBackendFlags_HasMouseHoveredViewport=1 << 11,  \/\/ Backend Platform supports calling i/;"	e	enum:ImGuiBackendFlags_
ImGuiBackendFlags_HasSetMousePos	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiBackendFlags_HasSetMousePos        = 1 << 2,   \/\/ Backend Platform supports io.WantSe/;"	e	enum:ImGuiBackendFlags_
ImGuiBackendFlags_None	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiBackendFlags_None                  = 0,$/;"	e	enum:ImGuiBackendFlags_
ImGuiBackendFlags_PlatformHasViewports	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiBackendFlags_PlatformHasViewports  = 1 << 10,  \/\/ Backend Platform supports multiple /;"	e	enum:ImGuiBackendFlags_
ImGuiBackendFlags_RendererHasViewports	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiBackendFlags_RendererHasViewports  = 1 << 12,  \/\/ Backend Renderer supports multiple /;"	e	enum:ImGuiBackendFlags_
ImGuiBackendFlags_RendererHasVtxOffset	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiBackendFlags_RendererHasVtxOffset  = 1 << 3,   \/\/ Backend Renderer supports ImDrawCmd/;"	e	enum:ImGuiBackendFlags_
ImGuiButtonFlags	build/_deps/imgui-proj-src/imgui.h	/^typedef int ImGuiButtonFlags;       \/\/ -> enum ImGuiButtonFlags_     \/\/ Flags: for Invisible/;"	t	typeref:typename:int
ImGuiButtonFlagsPrivate_	build/_deps/imgui-proj-src/imgui_internal.h	/^enum ImGuiButtonFlagsPrivate_$/;"	g
ImGuiButtonFlags_	build/_deps/imgui-proj-src/imgui.h	/^enum ImGuiButtonFlags_$/;"	g
ImGuiButtonFlags_AlignTextBaseLine	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiButtonFlags_AlignTextBaseLine      = 1 << 15,  \/\/ vertically align button to match te/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_AllowOverlap	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiButtonFlags_AllowOverlap           = 1 << 12,  \/\/ require previous frame HoveredId to/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_DontClosePopups	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiButtonFlags_DontClosePopups        = 1 << 13,  \/\/ disable automatically closing paren/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_FlattenChildren	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiButtonFlags_FlattenChildren        = 1 << 11,  \/\/ allow interactions even if a child /;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_MouseButtonDefault_	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiButtonFlags_MouseButtonDefault_    = ImGuiButtonFlags_MouseButtonLeft,$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_MouseButtonLeft	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiButtonFlags_MouseButtonLeft        = 1 << 0,   \/\/ React on left mouse button (default/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_MouseButtonMask_	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiButtonFlags_MouseButtonMask_       = ImGuiButtonFlags_MouseButtonLeft | ImGuiButtonFlag/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_MouseButtonMiddle	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiButtonFlags_MouseButtonMiddle      = 1 << 2,   \/\/ React on center mouse button$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_MouseButtonRight	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiButtonFlags_MouseButtonRight       = 1 << 1,   \/\/ React on right mouse button$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_NoHoldingActiveId	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiButtonFlags_NoHoldingActiveId      = 1 << 17,  \/\/ don't set ActiveId while holding th/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_NoHoveredOnFocus	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiButtonFlags_NoHoveredOnFocus       = 1 << 19,  \/\/ don't report as hovered when nav fo/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_NoKeyModifiers	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiButtonFlags_NoKeyModifiers         = 1 << 16,  \/\/ disable mouse interaction if a key /;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_NoNavFocus	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiButtonFlags_NoNavFocus             = 1 << 18,  \/\/ don't override navigation focus whe/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_NoSetKeyOwner	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiButtonFlags_NoSetKeyOwner          = 1 << 20,  \/\/ don't set key\/input owner on the i/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_NoTestKeyOwner	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiButtonFlags_NoTestKeyOwner         = 1 << 21,  \/\/ don't test key\/input owner when po/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_None	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiButtonFlags_None                   = 0,$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_PressedOnClick	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnClick         = 1 << 4,   \/\/ return true on click (mouse down ev/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_PressedOnClickRelease	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnClickRelease  = 1 << 5,   \/\/ [Default] return true on click + re/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_PressedOnClickReleaseAnywhere	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnClickReleaseAnywhere = 1 << 6, \/\/ return true on click + release/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_PressedOnDefault_	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnDefault_      = ImGuiButtonFlags_PressedOnClickRelease,$/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_PressedOnDoubleClick	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnDoubleClick   = 1 << 8,   \/\/ return true on double-click (defaul/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_PressedOnDragDropHold	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnDragDropHold  = 1 << 9,   \/\/ return true when held into while we/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_PressedOnMask_	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnMask_         = ImGuiButtonFlags_PressedOnClick | ImGuiButtonFlags/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_PressedOnRelease	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnRelease       = 1 << 7,   \/\/ return true on release (default req/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_Repeat	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiButtonFlags_Repeat                 = 1 << 10,  \/\/ hold to repeat$/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiChildFlags	build/_deps/imgui-proj-src/imgui.h	/^typedef int ImGuiChildFlags;        \/\/ -> enum ImGuiChildFlags_      \/\/ Flags: for BeginChil/;"	t	typeref:typename:int
ImGuiChildFlags_	build/_deps/imgui-proj-src/imgui.h	/^enum ImGuiChildFlags_$/;"	g
ImGuiChildFlags_AlwaysAutoResize	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiChildFlags_AlwaysAutoResize        = 1 << 6,   \/\/ Combined with AutoResizeX\/AutoResi/;"	e	enum:ImGuiChildFlags_
ImGuiChildFlags_AlwaysUseWindowPadding	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiChildFlags_AlwaysUseWindowPadding  = 1 << 1,   \/\/ Pad with style.WindowPadding even i/;"	e	enum:ImGuiChildFlags_
ImGuiChildFlags_AutoResizeX	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiChildFlags_AutoResizeX             = 1 << 4,   \/\/ Enable auto-resizing width. Read "I/;"	e	enum:ImGuiChildFlags_
ImGuiChildFlags_AutoResizeY	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiChildFlags_AutoResizeY             = 1 << 5,   \/\/ Enable auto-resizing height. Read "/;"	e	enum:ImGuiChildFlags_
ImGuiChildFlags_Border	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiChildFlags_Border                  = 1 << 0,   \/\/ Show an outer border and enable Win/;"	e	enum:ImGuiChildFlags_
ImGuiChildFlags_FrameStyle	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiChildFlags_FrameStyle              = 1 << 7,   \/\/ Style the child window like a frame/;"	e	enum:ImGuiChildFlags_
ImGuiChildFlags_None	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiChildFlags_None                    = 0,$/;"	e	enum:ImGuiChildFlags_
ImGuiChildFlags_ResizeX	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiChildFlags_ResizeX                 = 1 << 2,   \/\/ Allow resize from right border (lay/;"	e	enum:ImGuiChildFlags_
ImGuiChildFlags_ResizeY	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiChildFlags_ResizeY                 = 1 << 3,   \/\/ Allow resize from bottom border (la/;"	e	enum:ImGuiChildFlags_
ImGuiCol	build/_deps/imgui-proj-src/imgui.h	/^typedef int ImGuiCol;               \/\/ -> enum ImGuiCol_             \/\/ Enum: A color identi/;"	t	typeref:typename:int
ImGuiCol_	build/_deps/imgui-proj-src/imgui.h	/^enum ImGuiCol_$/;"	g
ImGuiCol_Border	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCol_Border,$/;"	e	enum:ImGuiCol_
ImGuiCol_BorderShadow	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCol_BorderShadow,$/;"	e	enum:ImGuiCol_
ImGuiCol_Button	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCol_Button,$/;"	e	enum:ImGuiCol_
ImGuiCol_ButtonActive	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCol_ButtonActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_ButtonHovered	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCol_ButtonHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_COUNT	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCol_COUNT$/;"	e	enum:ImGuiCol_
ImGuiCol_CheckMark	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCol_CheckMark,             \/\/ Checkbox tick and RadioButton circle$/;"	e	enum:ImGuiCol_
ImGuiCol_ChildBg	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCol_ChildBg,               \/\/ Background of child windows$/;"	e	enum:ImGuiCol_
ImGuiCol_DockingEmptyBg	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCol_DockingEmptyBg,        \/\/ Background color for empty node (e.g. CentralNode with /;"	e	enum:ImGuiCol_
ImGuiCol_DockingPreview	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCol_DockingPreview,        \/\/ Preview overlay color when about to docking something$/;"	e	enum:ImGuiCol_
ImGuiCol_DragDropTarget	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCol_DragDropTarget,        \/\/ Rectangle highlighting a drop target$/;"	e	enum:ImGuiCol_
ImGuiCol_FrameBg	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCol_FrameBg,               \/\/ Background of checkbox, radio button, plot, slider, tex/;"	e	enum:ImGuiCol_
ImGuiCol_FrameBgActive	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCol_FrameBgActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_FrameBgHovered	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCol_FrameBgHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_Header	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCol_Header,                \/\/ Header* colors are used for CollapsingHeader, TreeNode,/;"	e	enum:ImGuiCol_
ImGuiCol_HeaderActive	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCol_HeaderActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_HeaderHovered	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCol_HeaderHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_MenuBarBg	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCol_MenuBarBg,$/;"	e	enum:ImGuiCol_
ImGuiCol_ModalWindowDimBg	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCol_ModalWindowDimBg,      \/\/ Darken\/colorize entire screen behind a modal window, w/;"	e	enum:ImGuiCol_
ImGuiCol_NavHighlight	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCol_NavHighlight,          \/\/ Gamepad\/keyboard: current highlighted item$/;"	e	enum:ImGuiCol_
ImGuiCol_NavWindowingDimBg	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCol_NavWindowingDimBg,     \/\/ Darken\/colorize entire screen behind the CTRL+TAB wind/;"	e	enum:ImGuiCol_
ImGuiCol_NavWindowingHighlight	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCol_NavWindowingHighlight, \/\/ Highlight window when using CTRL+TAB$/;"	e	enum:ImGuiCol_
ImGuiCol_PlotHistogram	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCol_PlotHistogram,$/;"	e	enum:ImGuiCol_
ImGuiCol_PlotHistogramHovered	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCol_PlotHistogramHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_PlotLines	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCol_PlotLines,$/;"	e	enum:ImGuiCol_
ImGuiCol_PlotLinesHovered	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCol_PlotLinesHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_PopupBg	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCol_PopupBg,               \/\/ Background of popups, menus, tooltips windows$/;"	e	enum:ImGuiCol_
ImGuiCol_ResizeGrip	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCol_ResizeGrip,            \/\/ Resize grip in lower-right and lower-left corners of wi/;"	e	enum:ImGuiCol_
ImGuiCol_ResizeGripActive	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCol_ResizeGripActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_ResizeGripHovered	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCol_ResizeGripHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_ScrollbarBg	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCol_ScrollbarBg,$/;"	e	enum:ImGuiCol_
ImGuiCol_ScrollbarGrab	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCol_ScrollbarGrab,$/;"	e	enum:ImGuiCol_
ImGuiCol_ScrollbarGrabActive	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCol_ScrollbarGrabActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_ScrollbarGrabHovered	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCol_ScrollbarGrabHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_Separator	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCol_Separator,$/;"	e	enum:ImGuiCol_
ImGuiCol_SeparatorActive	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCol_SeparatorActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_SeparatorHovered	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCol_SeparatorHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_SliderGrab	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCol_SliderGrab,$/;"	e	enum:ImGuiCol_
ImGuiCol_SliderGrabActive	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCol_SliderGrabActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_Tab	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCol_Tab,                   \/\/ TabItem in a TabBar$/;"	e	enum:ImGuiCol_
ImGuiCol_TabActive	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCol_TabActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_TabHovered	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCol_TabHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_TabUnfocused	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCol_TabUnfocused,$/;"	e	enum:ImGuiCol_
ImGuiCol_TabUnfocusedActive	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCol_TabUnfocusedActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_TableBorderLight	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCol_TableBorderLight,      \/\/ Table inner borders (prefer using Alpha=1.0 here)$/;"	e	enum:ImGuiCol_
ImGuiCol_TableBorderStrong	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCol_TableBorderStrong,     \/\/ Table outer and header borders (prefer using Alpha=1.0 /;"	e	enum:ImGuiCol_
ImGuiCol_TableHeaderBg	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCol_TableHeaderBg,         \/\/ Table header background$/;"	e	enum:ImGuiCol_
ImGuiCol_TableRowBg	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCol_TableRowBg,            \/\/ Table row background (even rows)$/;"	e	enum:ImGuiCol_
ImGuiCol_TableRowBgAlt	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCol_TableRowBgAlt,         \/\/ Table row background (odd rows)$/;"	e	enum:ImGuiCol_
ImGuiCol_Text	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCol_Text,$/;"	e	enum:ImGuiCol_
ImGuiCol_TextDisabled	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCol_TextDisabled,$/;"	e	enum:ImGuiCol_
ImGuiCol_TextSelectedBg	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCol_TextSelectedBg,$/;"	e	enum:ImGuiCol_
ImGuiCol_TitleBg	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCol_TitleBg,               \/\/ Title bar$/;"	e	enum:ImGuiCol_
ImGuiCol_TitleBgActive	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCol_TitleBgActive,         \/\/ Title bar when focused$/;"	e	enum:ImGuiCol_
ImGuiCol_TitleBgCollapsed	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCol_TitleBgCollapsed,      \/\/ Title bar when collapsed$/;"	e	enum:ImGuiCol_
ImGuiCol_WindowBg	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCol_WindowBg,              \/\/ Background of normal windows$/;"	e	enum:ImGuiCol_
ImGuiColorEditFlags	build/_deps/imgui-proj-src/imgui.h	/^typedef int ImGuiColorEditFlags;    \/\/ -> enum ImGuiColorEditFlags_  \/\/ Flags: for ColorEdit/;"	t	typeref:typename:int
ImGuiColorEditFlags_	build/_deps/imgui-proj-src/imgui.h	/^enum ImGuiColorEditFlags_$/;"	g
ImGuiColorEditFlags_AlphaBar	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiColorEditFlags_AlphaBar        = 1 << 16,  \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_AlphaPreview	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiColorEditFlags_AlphaPreview    = 1 << 17,  \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_AlphaPreviewHalf	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiColorEditFlags_AlphaPreviewHalf= 1 << 18,  \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_DataTypeMask_	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiColorEditFlags_DataTypeMask_   = ImGuiColorEditFlags_Uint8 | ImGuiColorEditFlags_Float,$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_DefaultOptions_	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiColorEditFlags_DefaultOptions_ = ImGuiColorEditFlags_Uint8 | ImGuiColorEditFlags_Displa/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_DisplayHSV	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiColorEditFlags_DisplayHSV      = 1 << 21,  \/\/ [Display]    \/\/ "$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_DisplayHex	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiColorEditFlags_DisplayHex      = 1 << 22,  \/\/ [Display]    \/\/ "$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_DisplayMask_	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiColorEditFlags_DisplayMask_    = ImGuiColorEditFlags_DisplayRGB | ImGuiColorEditFlags_D/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_DisplayRGB	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiColorEditFlags_DisplayRGB      = 1 << 20,  \/\/ [Display]    \/\/ ColorEdit: override _/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_Float	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiColorEditFlags_Float           = 1 << 24,  \/\/ [DataType]   \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_HDR	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiColorEditFlags_HDR             = 1 << 19,  \/\/              \/\/ (WIP) ColorEdit: Curr/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_InputHSV	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiColorEditFlags_InputHSV        = 1 << 28,  \/\/ [Input]      \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_InputMask_	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiColorEditFlags_InputMask_      = ImGuiColorEditFlags_InputRGB | ImGuiColorEditFlags_Inp/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_InputRGB	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiColorEditFlags_InputRGB        = 1 << 27,  \/\/ [Input]      \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoAlpha	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiColorEditFlags_NoAlpha         = 1 << 1,   \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoBorder	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiColorEditFlags_NoBorder        = 1 << 10,  \/\/              \/\/ ColorButton: disable /;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoDragDrop	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiColorEditFlags_NoDragDrop      = 1 << 9,   \/\/              \/\/ ColorEdit: disable dr/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoInputs	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiColorEditFlags_NoInputs        = 1 << 5,   \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoLabel	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiColorEditFlags_NoLabel         = 1 << 7,   \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoOptions	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiColorEditFlags_NoOptions       = 1 << 3,   \/\/              \/\/ ColorEdit: disable to/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoPicker	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiColorEditFlags_NoPicker        = 1 << 2,   \/\/              \/\/ ColorEdit: disable pi/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoSidePreview	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiColorEditFlags_NoSidePreview   = 1 << 8,   \/\/              \/\/ ColorPicker: disable /;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoSmallPreview	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiColorEditFlags_NoSmallPreview  = 1 << 4,   \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoTooltip	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiColorEditFlags_NoTooltip       = 1 << 6,   \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_None	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiColorEditFlags_None            = 0,$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_PickerHueBar	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiColorEditFlags_PickerHueBar    = 1 << 25,  \/\/ [Picker]     \/\/ ColorPicker: bar for /;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_PickerHueWheel	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiColorEditFlags_PickerHueWheel  = 1 << 26,  \/\/ [Picker]     \/\/ ColorPicker: wheel fo/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_PickerMask_	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiColorEditFlags_PickerMask_     = ImGuiColorEditFlags_PickerHueWheel | ImGuiColorEditFla/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_Uint8	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiColorEditFlags_Uint8           = 1 << 23,  \/\/ [DataType]   \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorMod	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiColorMod$/;"	s
ImGuiComboFlags	build/_deps/imgui-proj-src/imgui.h	/^typedef int ImGuiComboFlags;        \/\/ -> enum ImGuiComboFlags_      \/\/ Flags: for BeginComb/;"	t	typeref:typename:int
ImGuiComboFlagsPrivate_	build/_deps/imgui-proj-src/imgui_internal.h	/^enum ImGuiComboFlagsPrivate_$/;"	g
ImGuiComboFlags_	build/_deps/imgui-proj-src/imgui.h	/^enum ImGuiComboFlags_$/;"	g
ImGuiComboFlags_CustomPreview	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiComboFlags_CustomPreview           = 1 << 20,  \/\/ enable BeginComboPreview()$/;"	e	enum:ImGuiComboFlagsPrivate_
ImGuiComboFlags_HeightLarge	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiComboFlags_HeightLarge             = 1 << 3,   \/\/ Max ~20 items visible$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_HeightLargest	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiComboFlags_HeightLargest           = 1 << 4,   \/\/ As many fitting items as possible$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_HeightMask_	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiComboFlags_HeightMask_             = ImGuiComboFlags_HeightSmall | ImGuiComboFlags_Heig/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_HeightRegular	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiComboFlags_HeightRegular           = 1 << 2,   \/\/ Max ~8 items visible (default)$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_HeightSmall	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiComboFlags_HeightSmall             = 1 << 1,   \/\/ Max ~4 items visible. Tip: If you w/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_NoArrowButton	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiComboFlags_NoArrowButton           = 1 << 5,   \/\/ Display on the preview box without /;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_NoPreview	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiComboFlags_NoPreview               = 1 << 6,   \/\/ Display only a square arrow button$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_None	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiComboFlags_None                    = 0,$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_PopupAlignLeft	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiComboFlags_PopupAlignLeft          = 1 << 0,   \/\/ Align the popup toward the left by /;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_WidthFitPreview	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiComboFlags_WidthFitPreview         = 1 << 7,   \/\/ Width dynamically calculated from p/;"	e	enum:ImGuiComboFlags_
ImGuiComboPreviewData	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiComboPreviewData() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiComboPreviewData
ImGuiComboPreviewData	build/_deps/imgui-proj-src/imgui_internal.h	/^struct IMGUI_API ImGuiComboPreviewData$/;"	s
ImGuiCond	build/_deps/imgui-proj-src/imgui.h	/^typedef int ImGuiCond;              \/\/ -> enum ImGuiCond_            \/\/ Enum: A condition fo/;"	t	typeref:typename:int
ImGuiCond_	build/_deps/imgui-proj-src/imgui.h	/^enum ImGuiCond_$/;"	g
ImGuiCond_Always	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCond_Always        = 1 << 0,   \/\/ No condition (always set the variable), same as _No/;"	e	enum:ImGuiCond_
ImGuiCond_Appearing	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCond_Appearing     = 1 << 3,   \/\/ Set the variable if the object\/window is appearing/;"	e	enum:ImGuiCond_
ImGuiCond_FirstUseEver	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCond_FirstUseEver  = 1 << 2,   \/\/ Set the variable if the object\/window has no persi/;"	e	enum:ImGuiCond_
ImGuiCond_None	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCond_None          = 0,        \/\/ No condition (always set the variable), same as _Al/;"	e	enum:ImGuiCond_
ImGuiCond_Once	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiCond_Once          = 1 << 1,   \/\/ Set the variable once per runtime session (only the/;"	e	enum:ImGuiCond_
ImGuiConfigFlags	build/_deps/imgui-proj-src/imgui.h	/^typedef int ImGuiConfigFlags;       \/\/ -> enum ImGuiConfigFlags_     \/\/ Flags: for io.Config/;"	t	typeref:typename:int
ImGuiConfigFlags_	build/_deps/imgui-proj-src/imgui.h	/^enum ImGuiConfigFlags_$/;"	g
ImGuiConfigFlags_DockingEnable	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiConfigFlags_DockingEnable          = 1 << 6,   \/\/ Docking enable flags.$/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_DpiEnableScaleFonts	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiConfigFlags_DpiEnableScaleFonts    = 1 << 15,  \/\/ [BETA: Don't use] FIXME-DPI: Reques/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_DpiEnableScaleViewports	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiConfigFlags_DpiEnableScaleViewports= 1 << 14,  \/\/ [BETA: Don't use] FIXME-DPI: Reposi/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_IsSRGB	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiConfigFlags_IsSRGB                 = 1 << 20,  \/\/ Application is SRGB-aware.$/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_IsTouchScreen	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiConfigFlags_IsTouchScreen          = 1 << 21,  \/\/ Application is using a touch screen/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NavEnableGamepad	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiConfigFlags_NavEnableGamepad       = 1 << 1,   \/\/ Master gamepad navigation enable fl/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NavEnableKeyboard	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiConfigFlags_NavEnableKeyboard      = 1 << 0,   \/\/ Master keyboard navigation enable f/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NavEnableSetMousePos	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiConfigFlags_NavEnableSetMousePos   = 1 << 2,   \/\/ Instruct navigation to move the mou/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NavNoCaptureKeyboard	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiConfigFlags_NavNoCaptureKeyboard   = 1 << 3,   \/\/ Instruct navigation to not set the /;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NoMouse	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiConfigFlags_NoMouse                = 1 << 4,   \/\/ Instruct imgui to clear mouse posit/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NoMouseCursorChange	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiConfigFlags_NoMouseCursorChange    = 1 << 5,   \/\/ Instruct backend to not alter mouse/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_None	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiConfigFlags_None                   = 0,$/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_ViewportsEnable	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiConfigFlags_ViewportsEnable        = 1 << 10,  \/\/ Viewport enable flags (require both/;"	e	enum:ImGuiConfigFlags_
ImGuiContext	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiContext(ImFontAtlas* shared_font_atlas)$/;"	f	struct:ImGuiContext
ImGuiContext	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiContext$/;"	s
ImGuiContextHook	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiContextHook()          { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiContextHook
ImGuiContextHook	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiContextHook$/;"	s
ImGuiContextHookCallback	build/_deps/imgui-proj-src/imgui_internal.h	/^typedef void (*ImGuiContextHookCallback)(ImGuiContext* ctx, ImGuiContextHook* hook);$/;"	t	typeref:typename:void (*)(ImGuiContext * ctx,ImGuiContextHook * hook)
ImGuiContextHookType	build/_deps/imgui-proj-src/imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	g
ImGuiContextHookType_EndFramePost	build/_deps/imgui-proj-src/imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	e	enum:ImGuiContextHookType
ImGuiContextHookType_EndFramePre	build/_deps/imgui-proj-src/imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	e	enum:ImGuiContextHookType
ImGuiContextHookType_NewFramePost	build/_deps/imgui-proj-src/imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	e	enum:ImGuiContextHookType
ImGuiContextHookType_NewFramePre	build/_deps/imgui-proj-src/imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	e	enum:ImGuiContextHookType
ImGuiContextHookType_PendingRemoval_	build/_deps/imgui-proj-src/imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	e	enum:ImGuiContextHookType
ImGuiContextHookType_RenderPost	build/_deps/imgui-proj-src/imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	e	enum:ImGuiContextHookType
ImGuiContextHookType_RenderPre	build/_deps/imgui-proj-src/imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	e	enum:ImGuiContextHookType
ImGuiContextHookType_Shutdown	build/_deps/imgui-proj-src/imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	e	enum:ImGuiContextHookType
ImGuiDataAuthority	build/_deps/imgui-proj-src/imgui_internal.h	/^typedef int ImGuiDataAuthority;         \/\/ -> enum ImGuiDataAuthority_      \/\/ Enum: for sto/;"	t	typeref:typename:int
ImGuiDataAuthority_	build/_deps/imgui-proj-src/imgui_internal.h	/^enum ImGuiDataAuthority_$/;"	g
ImGuiDataAuthority_Auto	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDataAuthority_Auto,$/;"	e	enum:ImGuiDataAuthority_
ImGuiDataAuthority_DockNode	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDataAuthority_DockNode,$/;"	e	enum:ImGuiDataAuthority_
ImGuiDataAuthority_Window	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDataAuthority_Window,$/;"	e	enum:ImGuiDataAuthority_
ImGuiDataType	build/_deps/imgui-proj-src/imgui.h	/^typedef int ImGuiDataType;          \/\/ -> enum ImGuiDataType_        \/\/ Enum: A primary data/;"	t	typeref:typename:int
ImGuiDataTypeInfo	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiDataTypeInfo$/;"	s
ImGuiDataTypePrivate_	build/_deps/imgui-proj-src/imgui_internal.h	/^enum ImGuiDataTypePrivate_$/;"	g
ImGuiDataTypeTempStorage	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiDataTypeTempStorage$/;"	s
ImGuiDataType_	build/_deps/imgui-proj-src/imgui.h	/^enum ImGuiDataType_$/;"	g
ImGuiDataType_COUNT	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiDataType_COUNT$/;"	e	enum:ImGuiDataType_
ImGuiDataType_Double	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiDataType_Double,   \/\/ double$/;"	e	enum:ImGuiDataType_
ImGuiDataType_Float	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiDataType_Float,    \/\/ float$/;"	e	enum:ImGuiDataType_
ImGuiDataType_ID	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDataType_ID,$/;"	e	enum:ImGuiDataTypePrivate_
ImGuiDataType_Pointer	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDataType_Pointer,$/;"	e	enum:ImGuiDataTypePrivate_
ImGuiDataType_S16	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiDataType_S16,      \/\/ short$/;"	e	enum:ImGuiDataType_
ImGuiDataType_S32	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiDataType_S32,      \/\/ int$/;"	e	enum:ImGuiDataType_
ImGuiDataType_S64	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiDataType_S64,      \/\/ long long \/ __int64$/;"	e	enum:ImGuiDataType_
ImGuiDataType_S8	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiDataType_S8,       \/\/ signed char \/ char (with sensible compilers)$/;"	e	enum:ImGuiDataType_
ImGuiDataType_String	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDataType_String = ImGuiDataType_COUNT + 1,$/;"	e	enum:ImGuiDataTypePrivate_
ImGuiDataType_U16	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiDataType_U16,      \/\/ unsigned short$/;"	e	enum:ImGuiDataType_
ImGuiDataType_U32	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiDataType_U32,      \/\/ unsigned int$/;"	e	enum:ImGuiDataType_
ImGuiDataType_U64	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiDataType_U64,      \/\/ unsigned long long \/ unsigned __int64$/;"	e	enum:ImGuiDataType_
ImGuiDataType_U8	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiDataType_U8,       \/\/ unsigned char$/;"	e	enum:ImGuiDataType_
ImGuiDataVarInfo	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiDataVarInfo$/;"	s
ImGuiDebugAllocEntry	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiDebugAllocEntry$/;"	s
ImGuiDebugAllocInfo	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDebugAllocInfo() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiDebugAllocInfo
ImGuiDebugAllocInfo	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiDebugAllocInfo$/;"	s
ImGuiDebugLogFlags	build/_deps/imgui-proj-src/imgui_internal.h	/^typedef int ImGuiDebugLogFlags;         \/\/ -> enum ImGuiDebugLogFlags_      \/\/ Flags: for Sh/;"	t	typeref:typename:int
ImGuiDebugLogFlags_	build/_deps/imgui-proj-src/imgui_internal.h	/^enum ImGuiDebugLogFlags_$/;"	g
ImGuiDebugLogFlags_EventActiveId	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDebugLogFlags_EventActiveId        = 1 << 0,$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_EventClipper	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDebugLogFlags_EventClipper         = 1 << 4,$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_EventDocking	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDebugLogFlags_EventDocking         = 1 << 8,$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_EventFocus	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDebugLogFlags_EventFocus           = 1 << 1,$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_EventIO	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDebugLogFlags_EventIO              = 1 << 6,$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_EventInputRouting	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDebugLogFlags_EventInputRouting    = 1 << 7,$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_EventMask_	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDebugLogFlags_EventMask_           = ImGuiDebugLogFlags_EventActiveId  | ImGuiDebugLogF/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_EventNav	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDebugLogFlags_EventNav             = 1 << 3,$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_EventPopup	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDebugLogFlags_EventPopup           = 1 << 2,$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_EventSelection	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDebugLogFlags_EventSelection       = 1 << 5,$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_EventViewport	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDebugLogFlags_EventViewport        = 1 << 9,$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_None	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDebugLogFlags_None                 = 0,$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_OutputToTTY	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDebugLogFlags_OutputToTTY          = 1 << 20,  \/\/ Also send output to TTY$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_OutputToTestEngine	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDebugLogFlags_OutputToTestEngine   = 1 << 21,  \/\/ Also send output to Test Engine$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDemoMarkerCallback	build/_deps/imgui-proj-src/imgui_demo.cpp	/^typedef void (*ImGuiDemoMarkerCallback)(const char* file, int line, const char* section, void* u/;"	t	typeref:typename:void (*)(const char * file,int line,const char * section,void * user_data)	file:
ImGuiDir	build/_deps/imgui-proj-src/imgui.h	/^typedef int ImGuiDir;               \/\/ -> enum ImGuiDir_             \/\/ Enum: A cardinal dir/;"	t	typeref:typename:int
ImGuiDir_	build/_deps/imgui-proj-src/imgui.h	/^enum ImGuiDir_$/;"	g
ImGuiDir_COUNT	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiDir_COUNT$/;"	e	enum:ImGuiDir_
ImGuiDir_Down	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiDir_Down    = 3,$/;"	e	enum:ImGuiDir_
ImGuiDir_Left	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiDir_Left    = 0,$/;"	e	enum:ImGuiDir_
ImGuiDir_None	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiDir_None    = -1,$/;"	e	enum:ImGuiDir_
ImGuiDir_Right	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiDir_Right   = 1,$/;"	e	enum:ImGuiDir_
ImGuiDir_Up	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiDir_Up      = 2,$/;"	e	enum:ImGuiDir_
ImGuiDockContext	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDockContext()              { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiDockContext
ImGuiDockContext	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiDockContext$/;"	s
ImGuiDockContextPruneNodeData	build/_deps/imgui-proj-src/imgui.cpp	/^    ImGuiDockContextPruneNodeData() { CountWindows = CountChildWindows = CountChildNodes = 0; Ro/;"	f	struct:ImGuiDockContextPruneNodeData	file:
ImGuiDockContextPruneNodeData	build/_deps/imgui-proj-src/imgui.cpp	/^struct ImGuiDockContextPruneNodeData$/;"	s	file:
ImGuiDockNode	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiDockNode::ImGuiDockNode(ImGuiID id)$/;"	f	class:ImGuiDockNode
ImGuiDockNode	build/_deps/imgui-proj-src/imgui_internal.h	/^struct IMGUI_API ImGuiDockNode$/;"	s
ImGuiDockNodeFlags	build/_deps/imgui-proj-src/imgui.h	/^typedef int ImGuiDockNodeFlags;     \/\/ -> enum ImGuiDockNodeFlags_   \/\/ Flags: for DockSpace/;"	t	typeref:typename:int
ImGuiDockNodeFlagsPrivate_	build/_deps/imgui-proj-src/imgui_internal.h	/^enum ImGuiDockNodeFlagsPrivate_$/;"	g
ImGuiDockNodeFlags_	build/_deps/imgui-proj-src/imgui.h	/^enum ImGuiDockNodeFlags_$/;"	g
ImGuiDockNodeFlags_AutoHideTabBar	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiDockNodeFlags_AutoHideTabBar               = 1 << 6,   \/\/       \/\/ Tab bar will aut/;"	e	enum:ImGuiDockNodeFlags_
ImGuiDockNodeFlags_CentralNode	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDockNodeFlags_CentralNode              = 1 << 11,  \/\/ Saved \/\/ The central node has/;"	e	enum:ImGuiDockNodeFlagsPrivate_
ImGuiDockNodeFlags_DockSpace	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDockNodeFlags_DockSpace                = 1 << 10,  \/\/ Saved \/\/ A dockspace is a nod/;"	e	enum:ImGuiDockNodeFlagsPrivate_
ImGuiDockNodeFlags_DockedWindowsInFocusRoute	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDockNodeFlags_DockedWindowsInFocusRoute= 1 << 18,  \/\/       \/\/ Any docked window wi/;"	e	enum:ImGuiDockNodeFlagsPrivate_
ImGuiDockNodeFlags_HiddenTabBar	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDockNodeFlags_HiddenTabBar             = 1 << 13,  \/\/ Saved \/\/ Tab bar is hidden, w/;"	e	enum:ImGuiDockNodeFlagsPrivate_
ImGuiDockNodeFlags_KeepAliveOnly	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiDockNodeFlags_KeepAliveOnly                = 1 << 0,   \/\/       \/\/ Don't display th/;"	e	enum:ImGuiDockNodeFlags_
ImGuiDockNodeFlags_LocalFlagsTransferMask_	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDockNodeFlags_LocalFlagsTransferMask_  = ImGuiDockNodeFlags_NoDockingSplit | ImGuiDockN/;"	e	enum:ImGuiDockNodeFlagsPrivate_
ImGuiDockNodeFlags_NoCloseButton	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDockNodeFlags_NoCloseButton            = 1 << 15,  \/\/ Saved \/\/ Disable close button$/;"	e	enum:ImGuiDockNodeFlagsPrivate_
ImGuiDockNodeFlags_NoDocking	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDockNodeFlags_NoDocking                = ImGuiDockNodeFlags_NoDockingOverMe | ImGuiDock/;"	e	enum:ImGuiDockNodeFlagsPrivate_
ImGuiDockNodeFlags_NoDockingInCentralNode	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiDockNodeFlags_NoDockingInCentralNode       = ImGuiDockNodeFlags_NoDockingOverCentralNod/;"	e	enum:ImGuiDockNodeFlags_
ImGuiDockNodeFlags_NoDockingOverCentralNode	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiDockNodeFlags_NoDockingOverCentralNode     = 1 << 2,   \/\/       \/\/ Disable docking /;"	e	enum:ImGuiDockNodeFlags_
ImGuiDockNodeFlags_NoDockingOverEmpty	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDockNodeFlags_NoDockingOverEmpty       = 1 << 22,  \/\/       \/\/ Disable this node fr/;"	e	enum:ImGuiDockNodeFlagsPrivate_
ImGuiDockNodeFlags_NoDockingOverMe	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDockNodeFlags_NoDockingOverMe          = 1 << 20,  \/\/       \/\/ Disable other window/;"	e	enum:ImGuiDockNodeFlagsPrivate_
ImGuiDockNodeFlags_NoDockingOverOther	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDockNodeFlags_NoDockingOverOther       = 1 << 21,  \/\/       \/\/ Disable this node fr/;"	e	enum:ImGuiDockNodeFlagsPrivate_
ImGuiDockNodeFlags_NoDockingSplit	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiDockNodeFlags_NoDockingSplit               = 1 << 4,   \/\/       \/\/ Disable other wi/;"	e	enum:ImGuiDockNodeFlags_
ImGuiDockNodeFlags_NoDockingSplitOther	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDockNodeFlags_NoDockingSplitOther      = 1 << 19,  \/\/       \/\/ Disable this node fr/;"	e	enum:ImGuiDockNodeFlagsPrivate_
ImGuiDockNodeFlags_NoResize	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiDockNodeFlags_NoResize                     = 1 << 5,   \/\/ Saved \/\/ Disable resizing/;"	e	enum:ImGuiDockNodeFlags_
ImGuiDockNodeFlags_NoResizeFlagsMask_	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDockNodeFlags_NoResizeFlagsMask_       = ImGuiDockNodeFlags_NoResize | ImGuiDockNodeFla/;"	e	enum:ImGuiDockNodeFlagsPrivate_
ImGuiDockNodeFlags_NoResizeX	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDockNodeFlags_NoResizeX                = 1 << 16,  \/\/       \/\/$/;"	e	enum:ImGuiDockNodeFlagsPrivate_
ImGuiDockNodeFlags_NoResizeY	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDockNodeFlags_NoResizeY                = 1 << 17,  \/\/       \/\/$/;"	e	enum:ImGuiDockNodeFlagsPrivate_
ImGuiDockNodeFlags_NoSplit	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiDockNodeFlags_NoSplit                      = ImGuiDockNodeFlags_NoDockingSplit, \/\/ Re/;"	e	enum:ImGuiDockNodeFlags_
ImGuiDockNodeFlags_NoTabBar	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDockNodeFlags_NoTabBar                 = 1 << 12,  \/\/ Saved \/\/ Tab bar is completel/;"	e	enum:ImGuiDockNodeFlagsPrivate_
ImGuiDockNodeFlags_NoUndocking	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiDockNodeFlags_NoUndocking                  = 1 << 7,   \/\/       \/\/ Disable undockin/;"	e	enum:ImGuiDockNodeFlags_
ImGuiDockNodeFlags_NoWindowMenuButton	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDockNodeFlags_NoWindowMenuButton       = 1 << 14,  \/\/ Saved \/\/ Disable window\/dock/;"	e	enum:ImGuiDockNodeFlagsPrivate_
ImGuiDockNodeFlags_None	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiDockNodeFlags_None                         = 0,$/;"	e	enum:ImGuiDockNodeFlags_
ImGuiDockNodeFlags_PassthruCentralNode	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiDockNodeFlags_PassthruCentralNode          = 1 << 3,   \/\/       \/\/ Enable passthru /;"	e	enum:ImGuiDockNodeFlags_
ImGuiDockNodeFlags_SavedFlagsMask_	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDockNodeFlags_SavedFlagsMask_          = ImGuiDockNodeFlags_NoResizeFlagsMask_ | ImGuiD/;"	e	enum:ImGuiDockNodeFlagsPrivate_
ImGuiDockNodeFlags_SharedFlagsInheritMask_	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDockNodeFlags_SharedFlagsInheritMask_  = ~0,$/;"	e	enum:ImGuiDockNodeFlagsPrivate_
ImGuiDockNodeSettings	build/_deps/imgui-proj-src/imgui.cpp	/^    ImGuiDockNodeSettings() { memset(this, 0, sizeof(*this)); SplitAxis = ImGuiAxis_None; }$/;"	f	struct:ImGuiDockNodeSettings	file:
ImGuiDockNodeSettings	build/_deps/imgui-proj-src/imgui.cpp	/^struct ImGuiDockNodeSettings$/;"	s	file:
ImGuiDockNodeState	build/_deps/imgui-proj-src/imgui_internal.h	/^enum ImGuiDockNodeState$/;"	g
ImGuiDockNodeState_HostWindowHiddenBecauseSingleWindow	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDockNodeState_HostWindowHiddenBecauseSingleWindow,$/;"	e	enum:ImGuiDockNodeState
ImGuiDockNodeState_HostWindowHiddenBecauseWindowsAreResizing	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDockNodeState_HostWindowHiddenBecauseWindowsAreResizing,$/;"	e	enum:ImGuiDockNodeState
ImGuiDockNodeState_HostWindowVisible	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDockNodeState_HostWindowVisible,$/;"	e	enum:ImGuiDockNodeState
ImGuiDockNodeState_Unknown	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDockNodeState_Unknown,$/;"	e	enum:ImGuiDockNodeState
ImGuiDockNodeTreeInfo	build/_deps/imgui-proj-src/imgui.cpp	/^    ImGuiDockNodeTreeInfo() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiDockNodeTreeInfo	file:
ImGuiDockNodeTreeInfo	build/_deps/imgui-proj-src/imgui.cpp	/^struct ImGuiDockNodeTreeInfo$/;"	s	file:
ImGuiDockPreviewData	build/_deps/imgui-proj-src/imgui.cpp	/^    ImGuiDockPreviewData() : FutureNode(0) { IsDropAllowed = IsCenterAvailable = IsSidesAvailabl/;"	f	struct:ImGuiDockPreviewData	file:
ImGuiDockPreviewData	build/_deps/imgui-proj-src/imgui.cpp	/^struct ImGuiDockPreviewData$/;"	s	file:
ImGuiDockRequest	build/_deps/imgui-proj-src/imgui.cpp	/^    ImGuiDockRequest()$/;"	f	struct:ImGuiDockRequest	file:
ImGuiDockRequest	build/_deps/imgui-proj-src/imgui.cpp	/^struct ImGuiDockRequest$/;"	s	file:
ImGuiDockRequestType	build/_deps/imgui-proj-src/imgui.cpp	/^enum ImGuiDockRequestType$/;"	g	file:
ImGuiDockRequestType_Dock	build/_deps/imgui-proj-src/imgui.cpp	/^    ImGuiDockRequestType_Dock,$/;"	e	enum:ImGuiDockRequestType	file:
ImGuiDockRequestType_None	build/_deps/imgui-proj-src/imgui.cpp	/^    ImGuiDockRequestType_None = 0,$/;"	e	enum:ImGuiDockRequestType	file:
ImGuiDockRequestType_Split	build/_deps/imgui-proj-src/imgui.cpp	/^    ImGuiDockRequestType_Split                  \/\/ Split is the same as Dock but without a Doc/;"	e	enum:ImGuiDockRequestType	file:
ImGuiDockRequestType_Undock	build/_deps/imgui-proj-src/imgui.cpp	/^    ImGuiDockRequestType_Undock,$/;"	e	enum:ImGuiDockRequestType	file:
ImGuiDragDropFlags	build/_deps/imgui-proj-src/imgui.h	/^typedef int ImGuiDragDropFlags;     \/\/ -> enum ImGuiDragDropFlags_   \/\/ Flags: for BeginDrag/;"	t	typeref:typename:int
ImGuiDragDropFlags_	build/_deps/imgui-proj-src/imgui.h	/^enum ImGuiDragDropFlags_$/;"	g
ImGuiDragDropFlags_AcceptBeforeDelivery	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiDragDropFlags_AcceptBeforeDelivery         = 1 << 10,  \/\/ AcceptDragDropPayload() wil/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_AcceptNoDrawDefaultRect	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiDragDropFlags_AcceptNoDrawDefaultRect      = 1 << 11,  \/\/ Do not draw the default hig/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_AcceptNoPreviewTooltip	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiDragDropFlags_AcceptNoPreviewTooltip       = 1 << 12,  \/\/ Request hiding the BeginDra/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_AcceptPeekOnly	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiDragDropFlags_AcceptPeekOnly               = ImGuiDragDropFlags_AcceptBeforeDelivery | /;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_None	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiDragDropFlags_None                         = 0,$/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceAllowNullID	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiDragDropFlags_SourceAllowNullID            = 1 << 3,   \/\/ Allow items such as Text(),/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceAutoExpirePayload	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiDragDropFlags_SourceAutoExpirePayload      = 1 << 5,   \/\/ Automatically expire the pa/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceExtern	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiDragDropFlags_SourceExtern                 = 1 << 4,   \/\/ External source (from outsi/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceNoDisableHover	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiDragDropFlags_SourceNoDisableHover         = 1 << 1,   \/\/ By default, when dragging w/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceNoHoldToOpenOthers	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiDragDropFlags_SourceNoHoldToOpenOthers     = 1 << 2,   \/\/ Disable the behavior that a/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceNoPreviewTooltip	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiDragDropFlags_SourceNoPreviewTooltip       = 1 << 0,   \/\/ Disable preview tooltip. By/;"	e	enum:ImGuiDragDropFlags_
ImGuiErrorLogCallback	build/_deps/imgui-proj-src/imgui_internal.h	/^typedef void (*ImGuiErrorLogCallback)(void* user_data, const char* fmt, ...);$/;"	t	typeref:typename:void (*)(void * user_data,const char * fmt,...)
ImGuiExample	build/_deps/imgui-proj-src/examples/example_android_opengl3/CMakeLists.txt	/^project(ImGuiExample)$/;"	p
ImGuiFocusRequestFlags	build/_deps/imgui-proj-src/imgui_internal.h	/^typedef int ImGuiFocusRequestFlags;     \/\/ -> enum ImGuiFocusRequestFlags_  \/\/ Flags: for Fo/;"	t	typeref:typename:int
ImGuiFocusRequestFlags_	build/_deps/imgui-proj-src/imgui_internal.h	/^enum ImGuiFocusRequestFlags_$/;"	g
ImGuiFocusRequestFlags_None	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiFocusRequestFlags_None                 = 0,$/;"	e	enum:ImGuiFocusRequestFlags_
ImGuiFocusRequestFlags_RestoreFocusedChild	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiFocusRequestFlags_RestoreFocusedChild  = 1 << 0,   \/\/ Find last focused child (if any/;"	e	enum:ImGuiFocusRequestFlags_
ImGuiFocusRequestFlags_UnlessBelowModal	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiFocusRequestFlags_UnlessBelowModal     = 1 << 1,   \/\/ Do not set focus if the window /;"	e	enum:ImGuiFocusRequestFlags_
ImGuiFocusScopeData	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiFocusScopeData$/;"	s
ImGuiFocusedFlags	build/_deps/imgui-proj-src/imgui.h	/^typedef int ImGuiFocusedFlags;      \/\/ -> enum ImGuiFocusedFlags_    \/\/ Flags: for IsWindowF/;"	t	typeref:typename:int
ImGuiFocusedFlags_	build/_deps/imgui-proj-src/imgui.h	/^enum ImGuiFocusedFlags_$/;"	g
ImGuiFocusedFlags_AnyWindow	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiFocusedFlags_AnyWindow                     = 1 << 2,   \/\/ Return true if any window i/;"	e	enum:ImGuiFocusedFlags_
ImGuiFocusedFlags_ChildWindows	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiFocusedFlags_ChildWindows                  = 1 << 0,   \/\/ Return true if any children/;"	e	enum:ImGuiFocusedFlags_
ImGuiFocusedFlags_DockHierarchy	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiFocusedFlags_DockHierarchy                 = 1 << 4,   \/\/ Consider docking hierarchy /;"	e	enum:ImGuiFocusedFlags_
ImGuiFocusedFlags_NoPopupHierarchy	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiFocusedFlags_NoPopupHierarchy              = 1 << 3,   \/\/ Do not consider popup hiera/;"	e	enum:ImGuiFocusedFlags_
ImGuiFocusedFlags_None	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiFocusedFlags_None                          = 0,$/;"	e	enum:ImGuiFocusedFlags_
ImGuiFocusedFlags_RootAndChildWindows	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiFocusedFlags_RootAndChildWindows           = ImGuiFocusedFlags_RootWindow | ImGuiFocuse/;"	e	enum:ImGuiFocusedFlags_
ImGuiFocusedFlags_RootWindow	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiFocusedFlags_RootWindow                    = 1 << 1,   \/\/ Test from root window (top /;"	e	enum:ImGuiFocusedFlags_
ImGuiFreeType	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.h	/^namespace ImGuiFreeType$/;"	n
ImGuiFreeTypeBuilderFlags	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.h	/^enum ImGuiFreeTypeBuilderFlags$/;"	g
ImGuiFreeTypeBuilderFlags_Bitmap	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.h	/^    ImGuiFreeTypeBuilderFlags_Bitmap        = 1 << 9    \/\/ Enable FreeType bitmap glyphs$/;"	e	enum:ImGuiFreeTypeBuilderFlags
ImGuiFreeTypeBuilderFlags_Bold	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.h	/^    ImGuiFreeTypeBuilderFlags_Bold          = 1 << 5,   \/\/ Styling: Should we artificially emb/;"	e	enum:ImGuiFreeTypeBuilderFlags
ImGuiFreeTypeBuilderFlags_ForceAutoHint	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.h	/^    ImGuiFreeTypeBuilderFlags_ForceAutoHint = 1 << 2,   \/\/ Indicates that the auto-hinter is p/;"	e	enum:ImGuiFreeTypeBuilderFlags
ImGuiFreeTypeBuilderFlags_LightHinting	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.h	/^    ImGuiFreeTypeBuilderFlags_LightHinting  = 1 << 3,   \/\/ A lighter hinting algorithm for gra/;"	e	enum:ImGuiFreeTypeBuilderFlags
ImGuiFreeTypeBuilderFlags_LoadColor	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.h	/^    ImGuiFreeTypeBuilderFlags_LoadColor     = 1 << 8,   \/\/ Enable FreeType color-layered glyph/;"	e	enum:ImGuiFreeTypeBuilderFlags
ImGuiFreeTypeBuilderFlags_MonoHinting	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.h	/^    ImGuiFreeTypeBuilderFlags_MonoHinting   = 1 << 4,   \/\/ Strong hinting algorithm that shoul/;"	e	enum:ImGuiFreeTypeBuilderFlags
ImGuiFreeTypeBuilderFlags_Monochrome	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.h	/^    ImGuiFreeTypeBuilderFlags_Monochrome    = 1 << 7,   \/\/ Disable anti-aliasing. Combine this/;"	e	enum:ImGuiFreeTypeBuilderFlags
ImGuiFreeTypeBuilderFlags_NoAutoHint	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.h	/^    ImGuiFreeTypeBuilderFlags_NoAutoHint    = 1 << 1,   \/\/ Disable auto-hinter.$/;"	e	enum:ImGuiFreeTypeBuilderFlags
ImGuiFreeTypeBuilderFlags_NoHinting	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.h	/^    ImGuiFreeTypeBuilderFlags_NoHinting     = 1 << 0,   \/\/ Disable hinting. This generally gen/;"	e	enum:ImGuiFreeTypeBuilderFlags
ImGuiFreeTypeBuilderFlags_Oblique	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.h	/^    ImGuiFreeTypeBuilderFlags_Oblique       = 1 << 6,   \/\/ Styling: Should we slant the font, /;"	e	enum:ImGuiFreeTypeBuilderFlags
ImGuiFreeTypeDefaultAllocFunc	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^static void* ImGuiFreeTypeDefaultAllocFunc(size_t size, void* user_data) { IM_UNUSED(user_data);/;"	f	typeref:typename:void *	file:
ImGuiFreeTypeDefaultFreeFunc	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^static void  ImGuiFreeTypeDefaultFreeFunc(void* ptr, void* user_data) { IM_UNUSED(user_data); IM/;"	f	typeref:typename:void	file:
ImGuiGetNameFromIndexOldToNewCallback	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static const char* ImGuiGetNameFromIndexOldToNewCallback(void* user_data, int idx)$/;"	f	typeref:typename:const char *	file:
ImGuiGetNameFromIndexOldToNewCallbackData	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^struct ImGuiGetNameFromIndexOldToNewCallbackData { void* UserData; bool (*OldCallback)(void*, in/;"	s	file:
ImGuiGroupData	build/_deps/imgui-proj-src/imgui_internal.h	/^struct IMGUI_API ImGuiGroupData$/;"	s
ImGuiHoveredFlags	build/_deps/imgui-proj-src/imgui.h	/^typedef int ImGuiHoveredFlags;      \/\/ -> enum ImGuiHoveredFlags_    \/\/ Flags: for IsItemHov/;"	t	typeref:typename:int
ImGuiHoveredFlagsPrivate_	build/_deps/imgui-proj-src/imgui_internal.h	/^enum ImGuiHoveredFlagsPrivate_$/;"	g
ImGuiHoveredFlags_	build/_deps/imgui-proj-src/imgui.h	/^enum ImGuiHoveredFlags_$/;"	g
ImGuiHoveredFlags_AllowWhenBlockedByActiveItem	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiHoveredFlags_AllowWhenBlockedByActiveItem  = 1 << 7,   \/\/ Return true even if an acti/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_AllowWhenBlockedByPopup	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiHoveredFlags_AllowWhenBlockedByPopup       = 1 << 5,   \/\/ Return true even if a popup/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_AllowWhenDisabled	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiHoveredFlags_AllowWhenDisabled             = 1 << 10,  \/\/ IsItemHovered() only: Retur/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_AllowWhenOverlapped	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiHoveredFlags_AllowWhenOverlapped           = ImGuiHoveredFlags_AllowWhenOverlappedByIte/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_AllowWhenOverlappedByItem	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiHoveredFlags_AllowWhenOverlappedByItem     = 1 << 8,   \/\/ IsItemHovered() only: Retur/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_AllowWhenOverlappedByWindow	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiHoveredFlags_AllowWhenOverlappedByWindow   = 1 << 9,   \/\/ IsItemHovered() only: Retur/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_AllowedMaskForIsItemHovered	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiHoveredFlags_AllowedMaskForIsItemHovered   = ImGuiHoveredFlags_AllowWhenBlockedByPopup /;"	e	enum:ImGuiHoveredFlagsPrivate_
ImGuiHoveredFlags_AllowedMaskForIsWindowHovered	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiHoveredFlags_AllowedMaskForIsWindowHovered = ImGuiHoveredFlags_ChildWindows | ImGuiHove/;"	e	enum:ImGuiHoveredFlagsPrivate_
ImGuiHoveredFlags_AnyWindow	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiHoveredFlags_AnyWindow                     = 1 << 2,   \/\/ IsWindowHovered() only: Ret/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_ChildWindows	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiHoveredFlags_ChildWindows                  = 1 << 0,   \/\/ IsWindowHovered() only: Ret/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_DelayMask_	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiHoveredFlags_DelayMask_                    = ImGuiHoveredFlags_DelayNone | ImGuiHovered/;"	e	enum:ImGuiHoveredFlagsPrivate_
ImGuiHoveredFlags_DelayNone	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiHoveredFlags_DelayNone                     = 1 << 14,  \/\/ IsItemHovered() only: Retur/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_DelayNormal	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiHoveredFlags_DelayNormal                   = 1 << 16,  \/\/ IsItemHovered() only: Retur/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_DelayShort	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiHoveredFlags_DelayShort                    = 1 << 15,  \/\/ IsItemHovered() only: Retur/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_DockHierarchy	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiHoveredFlags_DockHierarchy                 = 1 << 4,   \/\/ IsWindowHovered() only: Con/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_ForTooltip	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiHoveredFlags_ForTooltip                    = 1 << 12,  \/\/ Shortcut for standard flags/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_NoNavOverride	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiHoveredFlags_NoNavOverride                 = 1 << 11,  \/\/ IsItemHovered() only: Disab/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_NoPopupHierarchy	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiHoveredFlags_NoPopupHierarchy              = 1 << 3,   \/\/ IsWindowHovered() only: Do /;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_NoSharedDelay	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiHoveredFlags_NoSharedDelay                 = 1 << 17,  \/\/ IsItemHovered() only: Disab/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_None	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiHoveredFlags_None                          = 0,        \/\/ Return true if directly ove/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_RectOnly	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiHoveredFlags_RectOnly                      = ImGuiHoveredFlags_AllowWhenBlockedByPopup /;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_RootAndChildWindows	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiHoveredFlags_RootAndChildWindows           = ImGuiHoveredFlags_RootWindow | ImGuiHovere/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_RootWindow	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiHoveredFlags_RootWindow                    = 1 << 1,   \/\/ IsWindowHovered() only: Tes/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_Stationary	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiHoveredFlags_Stationary                    = 1 << 13,  \/\/ Require mouse to be station/;"	e	enum:ImGuiHoveredFlags_
ImGuiID	build/_deps/imgui-proj-src/imgui.h	/^typedef unsigned int        ImGuiID;\/\/ A unique ID used by widgets (typically the result of ha/;"	t	typeref:typename:unsigned int
ImGuiIDStackTool	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiIDStackTool()      { memset(this, 0, sizeof(*this)); CopyToClipboardLastTime = -FLT_MAX/;"	f	struct:ImGuiIDStackTool
ImGuiIDStackTool	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiIDStackTool$/;"	s
ImGuiIO	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiIO::ImGuiIO()$/;"	f	class:ImGuiIO
ImGuiIO	build/_deps/imgui-proj-src/imgui.h	/^struct ImGuiIO$/;"	s
ImGuiImplVulkanFuncs_vkCmdEndRenderingKHR	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^static PFN_vkCmdEndRenderingKHR     ImGuiImplVulkanFuncs_vkCmdEndRenderingKHR;$/;"	v	typeref:typename:PFN_vkCmdEndRenderingKHR	file:
ImGuiInputEvent	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiInputEvent() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiInputEvent
ImGuiInputEvent	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiInputEvent$/;"	s
ImGuiInputEventAppFocused	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiInputEventAppFocused    { bool Focused; };$/;"	s
ImGuiInputEventKey	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiInputEventKey           { ImGuiKey Key; bool Down; float AnalogValue; };$/;"	s
ImGuiInputEventMouseButton	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiInputEventMouseButton   { int Button; bool Down; ImGuiMouseSource MouseSource; };$/;"	s
ImGuiInputEventMousePos	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiInputEventMousePos      { float PosX, PosY; ImGuiMouseSource MouseSource; };$/;"	s
ImGuiInputEventMouseViewport	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiInputEventMouseViewport { ImGuiID HoveredViewportID; };$/;"	s
ImGuiInputEventMouseWheel	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiInputEventMouseWheel    { float WheelX, WheelY; ImGuiMouseSource MouseSource; };$/;"	s
ImGuiInputEventText	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiInputEventText          { unsigned int Char; };$/;"	s
ImGuiInputEventType	build/_deps/imgui-proj-src/imgui_internal.h	/^enum ImGuiInputEventType$/;"	g
ImGuiInputEventType_COUNT	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiInputEventType_COUNT$/;"	e	enum:ImGuiInputEventType
ImGuiInputEventType_Focus	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiInputEventType_Focus,$/;"	e	enum:ImGuiInputEventType
ImGuiInputEventType_Key	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiInputEventType_Key,$/;"	e	enum:ImGuiInputEventType
ImGuiInputEventType_MouseButton	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiInputEventType_MouseButton,$/;"	e	enum:ImGuiInputEventType
ImGuiInputEventType_MousePos	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiInputEventType_MousePos,$/;"	e	enum:ImGuiInputEventType
ImGuiInputEventType_MouseViewport	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiInputEventType_MouseViewport,$/;"	e	enum:ImGuiInputEventType
ImGuiInputEventType_MouseWheel	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiInputEventType_MouseWheel,$/;"	e	enum:ImGuiInputEventType
ImGuiInputEventType_None	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiInputEventType_None = 0,$/;"	e	enum:ImGuiInputEventType
ImGuiInputEventType_Text	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiInputEventType_Text,$/;"	e	enum:ImGuiInputEventType
ImGuiInputFlags	build/_deps/imgui-proj-src/imgui_internal.h	/^typedef int ImGuiInputFlags;            \/\/ -> enum ImGuiInputFlags_         \/\/ Flags: for Is/;"	t	typeref:typename:int
ImGuiInputFlags_	build/_deps/imgui-proj-src/imgui_internal.h	/^enum ImGuiInputFlags_$/;"	g
ImGuiInputFlags_CondActive	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiInputFlags_CondActive          = 1 << 9,   \/\/ Only set if item is active (default to /;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_CondDefault_	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiInputFlags_CondDefault_        = ImGuiInputFlags_CondHovered | ImGuiInputFlags_CondActi/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_CondHovered	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiInputFlags_CondHovered         = 1 << 8,   \/\/ Only set if item is hovered (default to/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_CondMask_	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiInputFlags_CondMask_                   = ImGuiInputFlags_CondHovered | ImGuiInputFlags_/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_LockThisFrame	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiInputFlags_LockThisFrame       = 1 << 10,  \/\/ Further accesses to key data will requi/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_LockUntilRelease	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiInputFlags_LockUntilRelease    = 1 << 11,  \/\/ Further accesses to key data will requi/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_None	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiInputFlags_None                = 0,$/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_Repeat	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiInputFlags_Repeat              = 1 << 0,   \/\/ Enable repeat. Return true on successiv/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RepeatMask_	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiInputFlags_RepeatMask_                 = ImGuiInputFlags_Repeat | ImGuiInputFlags_Repea/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RepeatRateDefault	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiInputFlags_RepeatRateDefault   = 1 << 1,   \/\/ Repeat rate: Regular (default)$/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RepeatRateMask_	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiInputFlags_RepeatRateMask_             = ImGuiInputFlags_RepeatRateDefault | ImGuiInput/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RepeatRateNavMove	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiInputFlags_RepeatRateNavMove   = 1 << 2,   \/\/ Repeat rate: Fast$/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RepeatRateNavTweak	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiInputFlags_RepeatRateNavTweak  = 1 << 3,   \/\/ Repeat rate: Faster$/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RepeatUntilKeyModsChange	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiInputFlags_RepeatUntilKeyModsChange         = 1 << 5,  \/\/ Stop repeating when release/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RepeatUntilKeyModsChangeFromNone	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiInputFlags_RepeatUntilKeyModsChangeFromNone = 1 << 6,  \/\/ Stop repeating when release/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RepeatUntilMask_	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiInputFlags_RepeatUntilMask_            = ImGuiInputFlags_RepeatUntilRelease | ImGuiInpu/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RepeatUntilOtherKeyPress	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiInputFlags_RepeatUntilOtherKeyPress         = 1 << 7,  \/\/ Stop repeating when release/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RepeatUntilRelease	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiInputFlags_RepeatUntilRelease               = 1 << 4,  \/\/ Stop repeating when release/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RouteAlways	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiInputFlags_RouteAlways         = 1 << 16,  \/\/ Do not register route, poll keys direct/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RouteFocused	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiInputFlags_RouteFocused        = 1 << 12,  \/\/ (Default) Honor focus route: Accept inp/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RouteGlobal	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiInputFlags_RouteGlobal         = 1 << 14,  \/\/ Register route globally (medium priorit/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RouteGlobalHigh	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiInputFlags_RouteGlobalHigh     = 1 << 15,  \/\/ Register route globally (higher priorit/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RouteGlobalLow	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiInputFlags_RouteGlobalLow      = 1 << 13,  \/\/ Register route globally (lowest priorit/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RouteMask_	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiInputFlags_RouteMask_                  = ImGuiInputFlags_RouteFocused | ImGuiInputFlags/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RouteUnlessBgFocused	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiInputFlags_RouteUnlessBgFocused= 1 << 17,  \/\/ Global routes will not be applied if un/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_SupportedByIsKeyPressed	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiInputFlags_SupportedByIsKeyPressed     = ImGuiInputFlags_RepeatMask_,$/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_SupportedByIsMouseClicked	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiInputFlags_SupportedByIsMouseClicked   = ImGuiInputFlags_Repeat,$/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_SupportedBySetItemKeyOwner	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiInputFlags_SupportedBySetItemKeyOwner  = ImGuiInputFlags_SupportedBySetKeyOwner | ImGui/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_SupportedBySetKeyOwner	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiInputFlags_SupportedBySetKeyOwner      = ImGuiInputFlags_LockThisFrame | ImGuiInputFlag/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_SupportedByShortcut	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiInputFlags_SupportedByShortcut         = ImGuiInputFlags_RepeatMask_ | ImGuiInputFlags_/;"	e	enum:ImGuiInputFlags_
ImGuiInputSource	build/_deps/imgui-proj-src/imgui_internal.h	/^enum ImGuiInputSource$/;"	g
ImGuiInputSource_COUNT	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiInputSource_COUNT$/;"	e	enum:ImGuiInputSource
ImGuiInputSource_Clipboard	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiInputSource_Clipboard,     \/\/ Currently only used by InputText()$/;"	e	enum:ImGuiInputSource
ImGuiInputSource_Gamepad	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiInputSource_Gamepad,$/;"	e	enum:ImGuiInputSource
ImGuiInputSource_Keyboard	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiInputSource_Keyboard,$/;"	e	enum:ImGuiInputSource
ImGuiInputSource_Mouse	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiInputSource_Mouse,         \/\/ Note: may be Mouse or TouchScreen or Pen. See io.MouseS/;"	e	enum:ImGuiInputSource
ImGuiInputSource_None	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiInputSource_None = 0,$/;"	e	enum:ImGuiInputSource
ImGuiInputTextCallback	build/_deps/imgui-proj-src/imgui.h	/^typedef int     (*ImGuiInputTextCallback)(ImGuiInputTextCallbackData* data);    \/\/ Callback fu/;"	t	typeref:typename:int (*)(ImGuiInputTextCallbackData * data)
ImGuiInputTextCallbackData	build/_deps/imgui-proj-src/imgui.h	/^struct ImGuiInputTextCallbackData$/;"	s
ImGuiInputTextCallbackData	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^ImGuiInputTextCallbackData::ImGuiInputTextCallbackData()$/;"	f	class:ImGuiInputTextCallbackData
ImGuiInputTextDeactivatedState	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiInputTextDeactivatedState()    { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiInputTextDeactivatedState
ImGuiInputTextDeactivatedState	build/_deps/imgui-proj-src/imgui_internal.h	/^struct IMGUI_API ImGuiInputTextDeactivatedState$/;"	s
ImGuiInputTextFlags	build/_deps/imgui-proj-src/imgui.h	/^typedef int ImGuiInputTextFlags;    \/\/ -> enum ImGuiInputTextFlags_  \/\/ Flags: for InputText/;"	t	typeref:typename:int
ImGuiInputTextFlagsPrivate_	build/_deps/imgui-proj-src/imgui_internal.h	/^enum ImGuiInputTextFlagsPrivate_$/;"	g
ImGuiInputTextFlags_	build/_deps/imgui-proj-src/imgui.h	/^enum ImGuiInputTextFlags_$/;"	g
ImGuiInputTextFlags_AllowTabInput	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiInputTextFlags_AllowTabInput       = 1 << 10,  \/\/ Pressing TAB input a '\\t' characte/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_AlwaysOverwrite	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiInputTextFlags_AlwaysOverwrite     = 1 << 13,  \/\/ Overwrite mode$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_AutoSelectAll	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiInputTextFlags_AutoSelectAll       = 1 << 4,   \/\/ Select entire text when first takin/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackAlways	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiInputTextFlags_CallbackAlways      = 1 << 8,   \/\/ Callback on each iteration. User co/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackCharFilter	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiInputTextFlags_CallbackCharFilter  = 1 << 9,   \/\/ Callback on character inputs to rep/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackCompletion	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiInputTextFlags_CallbackCompletion  = 1 << 6,   \/\/ Callback on pressing TAB (for compl/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackEdit	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiInputTextFlags_CallbackEdit        = 1 << 19,  \/\/ Callback on any edit (note that Inp/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackHistory	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiInputTextFlags_CallbackHistory     = 1 << 7,   \/\/ Callback on pressing Up\/Down arrow/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackResize	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiInputTextFlags_CallbackResize      = 1 << 18,  \/\/ Callback on buffer capacity changes/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CharsDecimal	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiInputTextFlags_CharsDecimal        = 1 << 0,   \/\/ Allow 0123456789.+-*\/$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CharsHexadecimal	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiInputTextFlags_CharsHexadecimal    = 1 << 1,   \/\/ Allow 0123456789ABCDEFabcdef$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CharsNoBlank	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiInputTextFlags_CharsNoBlank        = 1 << 3,   \/\/ Filter out spaces, tabs$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CharsScientific	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiInputTextFlags_CharsScientific     = 1 << 17,  \/\/ Allow 0123456789.+-*\/eE (Scientifi/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CharsUppercase	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiInputTextFlags_CharsUppercase      = 1 << 2,   \/\/ Turn a..z into A..Z$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CtrlEnterForNewLine	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiInputTextFlags_CtrlEnterForNewLine = 1 << 11,  \/\/ In multi-line mode, unfocus with En/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_EnterReturnsTrue	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiInputTextFlags_EnterReturnsTrue    = 1 << 5,   \/\/ Return 'true' when Enter is pressed/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_EscapeClearsAll	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiInputTextFlags_EscapeClearsAll     = 1 << 20,  \/\/ Escape key clears content if not em/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_MergedItem	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiInputTextFlags_MergedItem          = 1 << 28,  \/\/ For internal use by TempInputText()/;"	e	enum:ImGuiInputTextFlagsPrivate_
ImGuiInputTextFlags_Multiline	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiInputTextFlags_Multiline           = 1 << 26,  \/\/ For internal use by InputTextMultil/;"	e	enum:ImGuiInputTextFlagsPrivate_
ImGuiInputTextFlags_NoHorizontalScroll	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiInputTextFlags_NoHorizontalScroll  = 1 << 12,  \/\/ Disable following the cursor horizo/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_NoMarkEdited	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiInputTextFlags_NoMarkEdited        = 1 << 27,  \/\/ For internal use by functions using/;"	e	enum:ImGuiInputTextFlagsPrivate_
ImGuiInputTextFlags_NoUndoRedo	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiInputTextFlags_NoUndoRedo          = 1 << 16,  \/\/ Disable undo\/redo. Note that input/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_None	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiInputTextFlags_None                = 0,$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_Password	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiInputTextFlags_Password            = 1 << 15,  \/\/ Password mode, display all characte/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_ReadOnly	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiInputTextFlags_ReadOnly            = 1 << 14,  \/\/ Read-only mode$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextState	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiInputTextState()                   { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiInputTextState
ImGuiInputTextState	build/_deps/imgui-proj-src/imgui_internal.h	/^struct IMGUI_API ImGuiInputTextState$/;"	s
ImGuiItemFlags	build/_deps/imgui-proj-src/imgui_internal.h	/^typedef int ImGuiItemFlags;             \/\/ -> enum ImGuiItemFlags_          \/\/ Flags: for Pu/;"	t	typeref:typename:int
ImGuiItemFlags_	build/_deps/imgui-proj-src/imgui_internal.h	/^enum ImGuiItemFlags_$/;"	g
ImGuiItemFlags_AllowOverlap	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiItemFlags_AllowOverlap             = 1 << 9,  \/\/ false     \/\/ Allow being overlappe/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_ButtonRepeat	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiItemFlags_ButtonRepeat             = 1 << 1,  \/\/ false     \/\/ Button() will return /;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_Disabled	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiItemFlags_Disabled                 = 1 << 2,  \/\/ false     \/\/ Disable interactions /;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_HasSelectionUserData	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiItemFlags_HasSelectionUserData     = 1 << 11, \/\/ false     \/\/ Set by SetNextItemSel/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_Inputable	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiItemFlags_Inputable                = 1 << 10, \/\/ false     \/\/ [WIP] Auto-activate i/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_MixedValue	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiItemFlags_MixedValue               = 1 << 6,  \/\/ false     \/\/ [BETA] Represent a mi/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_NoNav	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiItemFlags_NoNav                    = 1 << 3,  \/\/ false     \/\/ Disable any form of f/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_NoNavDefaultFocus	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiItemFlags_NoNavDefaultFocus        = 1 << 4,  \/\/ false     \/\/ Disable item being a /;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_NoTabStop	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiItemFlags_NoTabStop                = 1 << 0,  \/\/ false     \/\/ Disable keyboard tabb/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_NoWindowHoverableCheck	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiItemFlags_NoWindowHoverableCheck   = 1 << 8,  \/\/ false     \/\/ Disable hoverable che/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_None	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiItemFlags_None                     = 0,$/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_ReadOnly	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiItemFlags_ReadOnly                 = 1 << 7,  \/\/ false     \/\/ [ALPHA] Allow hoverin/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_SelectableDontClosePopup	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiItemFlags_SelectableDontClosePopup = 1 << 5,  \/\/ false     \/\/ Disable MenuItem\/Sel/;"	e	enum:ImGuiItemFlags_
ImGuiItemStatusFlags	build/_deps/imgui-proj-src/imgui_internal.h	/^typedef int ImGuiItemStatusFlags;       \/\/ -> enum ImGuiItemStatusFlags_    \/\/ Flags: for g./;"	t	typeref:typename:int
ImGuiItemStatusFlags_	build/_deps/imgui-proj-src/imgui_internal.h	/^enum ImGuiItemStatusFlags_$/;"	g
ImGuiItemStatusFlags_Checkable	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiItemStatusFlags_Checkable          = 1 << 22,  \/\/ Item is a checkable (e.g. CheckBox,/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Checked	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiItemStatusFlags_Checked            = 1 << 23,  \/\/ Checked status$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Deactivated	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiItemStatusFlags_Deactivated        = 1 << 6,   \/\/ Only valid if ImGuiItemStatusFlags_/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Edited	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiItemStatusFlags_Edited             = 1 << 2,   \/\/ Value exposed by item was edited in/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_HasClipRect	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiItemStatusFlags_HasClipRect        = 1 << 9,   \/\/ g.LastItemData.ClipRect is valid$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_HasDeactivated	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiItemStatusFlags_HasDeactivated     = 1 << 5,   \/\/ Set if the widget\/group is able to/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_HasDisplayRect	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiItemStatusFlags_HasDisplayRect     = 1 << 1,   \/\/ g.LastItemData.DisplayRect is valid$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_HoveredRect	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiItemStatusFlags_HoveredRect        = 1 << 0,   \/\/ Mouse position is within item recta/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_HoveredWindow	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiItemStatusFlags_HoveredWindow      = 1 << 7,   \/\/ Override the HoveredWindow test to /;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Inputable	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiItemStatusFlags_Inputable          = 1 << 24,  \/\/ Item is a text-inputable (e.g. Inpu/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_None	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiItemStatusFlags_None               = 0,$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Openable	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiItemStatusFlags_Openable           = 1 << 20,  \/\/ Item is an openable (e.g. TreeNode)$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Opened	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiItemStatusFlags_Opened             = 1 << 21,  \/\/ Opened status$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_ToggledOpen	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiItemStatusFlags_ToggledOpen        = 1 << 4,   \/\/ Set when TreeNode() reports togglin/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_ToggledSelection	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiItemStatusFlags_ToggledSelection   = 1 << 3,   \/\/ Set when Selectable(), TreeNode() r/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Visible	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiItemStatusFlags_Visible            = 1 << 8,   \/\/ [WIP] Set when item is overlapping /;"	e	enum:ImGuiItemStatusFlags_
ImGuiKey	build/_deps/imgui-proj-src/imgui.h	/^enum ImGuiKey : int$/;"	g	typeref:typename:int
ImGuiKeyChord	build/_deps/imgui-proj-src/imgui.h	/^typedef int ImGuiKeyChord;          \/\/ -> ImGuiKey | ImGuiMod_XXX    \/\/ Flags: for IsKeyChor/;"	t	typeref:typename:int
ImGuiKeyData	build/_deps/imgui-proj-src/imgui.h	/^struct ImGuiKeyData$/;"	s
ImGuiKeyOwnerData	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiKeyOwnerData()             { OwnerCurr = OwnerNext = ImGuiKeyOwner_None; LockThisFrame /;"	f	struct:ImGuiKeyOwnerData
ImGuiKeyOwnerData	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiKeyOwnerData$/;"	s
ImGuiKeyOwner_Any	build/_deps/imgui-proj-src/imgui_internal.h	/^#define ImGuiKeyOwner_Any /;"	d
ImGuiKeyOwner_None	build/_deps/imgui-proj-src/imgui_internal.h	/^#define ImGuiKeyOwner_None /;"	d
ImGuiKeyRoutingData	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiKeyRoutingData()           { NextEntryIndex = -1; Mods = 0; RoutingCurrScore = RoutingN/;"	f	struct:ImGuiKeyRoutingData
ImGuiKeyRoutingData	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiKeyRoutingData$/;"	s
ImGuiKeyRoutingIndex	build/_deps/imgui-proj-src/imgui_internal.h	/^typedef ImS16 ImGuiKeyRoutingIndex;$/;"	t	typeref:typename:ImS16
ImGuiKeyRoutingTable	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiKeyRoutingTable()          { Clear(); }$/;"	f	struct:ImGuiKeyRoutingTable
ImGuiKeyRoutingTable	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiKeyRoutingTable$/;"	s
ImGuiKey_0	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_1	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_2	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_3	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_4	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_5	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_6	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_7	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_8	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_9	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_A	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_Aliases_BEGIN	build/_deps/imgui-proj-src/imgui_internal.h	/^#define ImGuiKey_Aliases_BEGIN /;"	d
ImGuiKey_Aliases_END	build/_deps/imgui-proj-src/imgui_internal.h	/^#define ImGuiKey_Aliases_END /;"	d
ImGuiKey_Apostrophe	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_Apostrophe,        \/\/ '$/;"	e	enum:ImGuiKey
ImGuiKey_AppBack	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_AppBack,               \/\/ Available on some keyboard\/mouses. Often referred as "/;"	e	enum:ImGuiKey
ImGuiKey_AppForward	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_AppForward,$/;"	e	enum:ImGuiKey
ImGuiKey_B	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_Backslash	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_Backslash,         \/\/ \\ (this text inhibit multiline comment caused by backslash/;"	e	enum:ImGuiKey
ImGuiKey_Backspace	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_Backspace,$/;"	e	enum:ImGuiKey
ImGuiKey_C	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_COUNT	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_COUNT,$/;"	e	enum:ImGuiKey
ImGuiKey_CapsLock	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_CapsLock,$/;"	e	enum:ImGuiKey
ImGuiKey_Comma	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_Comma,             \/\/ ,$/;"	e	enum:ImGuiKey
ImGuiKey_D	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_Delete	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_Delete,$/;"	e	enum:ImGuiKey
ImGuiKey_DownArrow	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_DownArrow,$/;"	e	enum:ImGuiKey
ImGuiKey_E	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_End	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_End,$/;"	e	enum:ImGuiKey
ImGuiKey_Enter	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_Enter,$/;"	e	enum:ImGuiKey
ImGuiKey_Equal	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_Equal,             \/\/ =$/;"	e	enum:ImGuiKey
ImGuiKey_Escape	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_Escape,$/;"	e	enum:ImGuiKey
ImGuiKey_F	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_F1	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_F1, ImGuiKey_F2, ImGuiKey_F3, ImGuiKey_F4, ImGuiKey_F5, ImGuiKey_F6,$/;"	e	enum:ImGuiKey
ImGuiKey_F10	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_F7, ImGuiKey_F8, ImGuiKey_F9, ImGuiKey_F10, ImGuiKey_F11, ImGuiKey_F12,$/;"	e	enum:ImGuiKey
ImGuiKey_F11	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_F7, ImGuiKey_F8, ImGuiKey_F9, ImGuiKey_F10, ImGuiKey_F11, ImGuiKey_F12,$/;"	e	enum:ImGuiKey
ImGuiKey_F12	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_F7, ImGuiKey_F8, ImGuiKey_F9, ImGuiKey_F10, ImGuiKey_F11, ImGuiKey_F12,$/;"	e	enum:ImGuiKey
ImGuiKey_F13	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_F13, ImGuiKey_F14, ImGuiKey_F15, ImGuiKey_F16, ImGuiKey_F17, ImGuiKey_F18,$/;"	e	enum:ImGuiKey
ImGuiKey_F14	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_F13, ImGuiKey_F14, ImGuiKey_F15, ImGuiKey_F16, ImGuiKey_F17, ImGuiKey_F18,$/;"	e	enum:ImGuiKey
ImGuiKey_F15	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_F13, ImGuiKey_F14, ImGuiKey_F15, ImGuiKey_F16, ImGuiKey_F17, ImGuiKey_F18,$/;"	e	enum:ImGuiKey
ImGuiKey_F16	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_F13, ImGuiKey_F14, ImGuiKey_F15, ImGuiKey_F16, ImGuiKey_F17, ImGuiKey_F18,$/;"	e	enum:ImGuiKey
ImGuiKey_F17	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_F13, ImGuiKey_F14, ImGuiKey_F15, ImGuiKey_F16, ImGuiKey_F17, ImGuiKey_F18,$/;"	e	enum:ImGuiKey
ImGuiKey_F18	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_F13, ImGuiKey_F14, ImGuiKey_F15, ImGuiKey_F16, ImGuiKey_F17, ImGuiKey_F18,$/;"	e	enum:ImGuiKey
ImGuiKey_F19	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_F19, ImGuiKey_F20, ImGuiKey_F21, ImGuiKey_F22, ImGuiKey_F23, ImGuiKey_F24,$/;"	e	enum:ImGuiKey
ImGuiKey_F2	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_F1, ImGuiKey_F2, ImGuiKey_F3, ImGuiKey_F4, ImGuiKey_F5, ImGuiKey_F6,$/;"	e	enum:ImGuiKey
ImGuiKey_F20	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_F19, ImGuiKey_F20, ImGuiKey_F21, ImGuiKey_F22, ImGuiKey_F23, ImGuiKey_F24,$/;"	e	enum:ImGuiKey
ImGuiKey_F21	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_F19, ImGuiKey_F20, ImGuiKey_F21, ImGuiKey_F22, ImGuiKey_F23, ImGuiKey_F24,$/;"	e	enum:ImGuiKey
ImGuiKey_F22	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_F19, ImGuiKey_F20, ImGuiKey_F21, ImGuiKey_F22, ImGuiKey_F23, ImGuiKey_F24,$/;"	e	enum:ImGuiKey
ImGuiKey_F23	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_F19, ImGuiKey_F20, ImGuiKey_F21, ImGuiKey_F22, ImGuiKey_F23, ImGuiKey_F24,$/;"	e	enum:ImGuiKey
ImGuiKey_F24	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_F19, ImGuiKey_F20, ImGuiKey_F21, ImGuiKey_F22, ImGuiKey_F23, ImGuiKey_F24,$/;"	e	enum:ImGuiKey
ImGuiKey_F3	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_F1, ImGuiKey_F2, ImGuiKey_F3, ImGuiKey_F4, ImGuiKey_F5, ImGuiKey_F6,$/;"	e	enum:ImGuiKey
ImGuiKey_F4	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_F1, ImGuiKey_F2, ImGuiKey_F3, ImGuiKey_F4, ImGuiKey_F5, ImGuiKey_F6,$/;"	e	enum:ImGuiKey
ImGuiKey_F5	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_F1, ImGuiKey_F2, ImGuiKey_F3, ImGuiKey_F4, ImGuiKey_F5, ImGuiKey_F6,$/;"	e	enum:ImGuiKey
ImGuiKey_F6	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_F1, ImGuiKey_F2, ImGuiKey_F3, ImGuiKey_F4, ImGuiKey_F5, ImGuiKey_F6,$/;"	e	enum:ImGuiKey
ImGuiKey_F7	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_F7, ImGuiKey_F8, ImGuiKey_F9, ImGuiKey_F10, ImGuiKey_F11, ImGuiKey_F12,$/;"	e	enum:ImGuiKey
ImGuiKey_F8	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_F7, ImGuiKey_F8, ImGuiKey_F9, ImGuiKey_F10, ImGuiKey_F11, ImGuiKey_F12,$/;"	e	enum:ImGuiKey
ImGuiKey_F9	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_F7, ImGuiKey_F8, ImGuiKey_F9, ImGuiKey_F10, ImGuiKey_F11, ImGuiKey_F12,$/;"	e	enum:ImGuiKey
ImGuiKey_G	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_GamepadBack	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_GamepadBack,           \/\/ View (Xbox)      - (Switch)   Share (PS)$/;"	e	enum:ImGuiKey
ImGuiKey_GamepadDpadDown	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_GamepadDpadDown,       \/\/ D-pad Down                                       \/\/ M/;"	e	enum:ImGuiKey
ImGuiKey_GamepadDpadLeft	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_GamepadDpadLeft,       \/\/ D-pad Left                                       \/\/ M/;"	e	enum:ImGuiKey
ImGuiKey_GamepadDpadRight	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_GamepadDpadRight,      \/\/ D-pad Right                                      \/\/ M/;"	e	enum:ImGuiKey
ImGuiKey_GamepadDpadUp	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_GamepadDpadUp,         \/\/ D-pad Up                                         \/\/ M/;"	e	enum:ImGuiKey
ImGuiKey_GamepadFaceDown	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_GamepadFaceDown,       \/\/ A (Xbox)         B (Switch)   Cross (PS)         \/\/ A/;"	e	enum:ImGuiKey
ImGuiKey_GamepadFaceLeft	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_GamepadFaceLeft,       \/\/ X (Xbox)         Y (Switch)   Square (PS)        \/\/ T/;"	e	enum:ImGuiKey
ImGuiKey_GamepadFaceRight	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_GamepadFaceRight,      \/\/ B (Xbox)         A (Switch)   Circle (PS)        \/\/ C/;"	e	enum:ImGuiKey
ImGuiKey_GamepadFaceUp	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_GamepadFaceUp,         \/\/ Y (Xbox)         X (Switch)   Triangle (PS)      \/\/ T/;"	e	enum:ImGuiKey
ImGuiKey_GamepadL1	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_GamepadL1,             \/\/ L Bumper (Xbox)  L (Switch)   L1 (PS)            \/\/ T/;"	e	enum:ImGuiKey
ImGuiKey_GamepadL2	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_GamepadL2,             \/\/ L Trig. (Xbox)   ZL (Switch)  L2 (PS) [Analog]$/;"	e	enum:ImGuiKey
ImGuiKey_GamepadL3	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_GamepadL3,             \/\/ L Stick (Xbox)   L3 (Switch)  L3 (PS)$/;"	e	enum:ImGuiKey
ImGuiKey_GamepadLStickDown	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_GamepadLStickDown,     \/\/ [Analog]                                         \/\/ M/;"	e	enum:ImGuiKey
ImGuiKey_GamepadLStickLeft	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_GamepadLStickLeft,     \/\/ [Analog]                                         \/\/ M/;"	e	enum:ImGuiKey
ImGuiKey_GamepadLStickRight	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_GamepadLStickRight,    \/\/ [Analog]                                         \/\/ M/;"	e	enum:ImGuiKey
ImGuiKey_GamepadLStickUp	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_GamepadLStickUp,       \/\/ [Analog]                                         \/\/ M/;"	e	enum:ImGuiKey
ImGuiKey_GamepadR1	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_GamepadR1,             \/\/ R Bumper (Xbox)  R (Switch)   R1 (PS)            \/\/ T/;"	e	enum:ImGuiKey
ImGuiKey_GamepadR2	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_GamepadR2,             \/\/ R Trig. (Xbox)   ZR (Switch)  R2 (PS) [Analog]$/;"	e	enum:ImGuiKey
ImGuiKey_GamepadR3	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_GamepadR3,             \/\/ R Stick (Xbox)   R3 (Switch)  R3 (PS)$/;"	e	enum:ImGuiKey
ImGuiKey_GamepadRStickDown	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_GamepadRStickDown,     \/\/ [Analog]$/;"	e	enum:ImGuiKey
ImGuiKey_GamepadRStickLeft	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_GamepadRStickLeft,     \/\/ [Analog]$/;"	e	enum:ImGuiKey
ImGuiKey_GamepadRStickRight	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_GamepadRStickRight,    \/\/ [Analog]$/;"	e	enum:ImGuiKey
ImGuiKey_GamepadRStickUp	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_GamepadRStickUp,       \/\/ [Analog]$/;"	e	enum:ImGuiKey
ImGuiKey_GamepadStart	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_GamepadStart,          \/\/ Menu (Xbox)      + (Switch)   Start\/Options (PS)$/;"	e	enum:ImGuiKey
ImGuiKey_Gamepad_BEGIN	build/_deps/imgui-proj-src/imgui_internal.h	/^#define ImGuiKey_Gamepad_BEGIN /;"	d
ImGuiKey_Gamepad_END	build/_deps/imgui-proj-src/imgui_internal.h	/^#define ImGuiKey_Gamepad_END /;"	d
ImGuiKey_GraveAccent	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_GraveAccent,       \/\/ `$/;"	e	enum:ImGuiKey
ImGuiKey_H	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_Home	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_Home,$/;"	e	enum:ImGuiKey
ImGuiKey_I	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_Insert	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_Insert,$/;"	e	enum:ImGuiKey
ImGuiKey_J	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_K	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_Keyboard_BEGIN	build/_deps/imgui-proj-src/imgui_internal.h	/^#define ImGuiKey_Keyboard_BEGIN /;"	d
ImGuiKey_Keyboard_END	build/_deps/imgui-proj-src/imgui_internal.h	/^#define ImGuiKey_Keyboard_END /;"	d
ImGuiKey_Keypad0	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_Keypad0, ImGuiKey_Keypad1, ImGuiKey_Keypad2, ImGuiKey_Keypad3, ImGuiKey_Keypad4,$/;"	e	enum:ImGuiKey
ImGuiKey_Keypad1	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_Keypad0, ImGuiKey_Keypad1, ImGuiKey_Keypad2, ImGuiKey_Keypad3, ImGuiKey_Keypad4,$/;"	e	enum:ImGuiKey
ImGuiKey_Keypad2	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_Keypad0, ImGuiKey_Keypad1, ImGuiKey_Keypad2, ImGuiKey_Keypad3, ImGuiKey_Keypad4,$/;"	e	enum:ImGuiKey
ImGuiKey_Keypad3	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_Keypad0, ImGuiKey_Keypad1, ImGuiKey_Keypad2, ImGuiKey_Keypad3, ImGuiKey_Keypad4,$/;"	e	enum:ImGuiKey
ImGuiKey_Keypad4	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_Keypad0, ImGuiKey_Keypad1, ImGuiKey_Keypad2, ImGuiKey_Keypad3, ImGuiKey_Keypad4,$/;"	e	enum:ImGuiKey
ImGuiKey_Keypad5	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_Keypad5, ImGuiKey_Keypad6, ImGuiKey_Keypad7, ImGuiKey_Keypad8, ImGuiKey_Keypad9,$/;"	e	enum:ImGuiKey
ImGuiKey_Keypad6	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_Keypad5, ImGuiKey_Keypad6, ImGuiKey_Keypad7, ImGuiKey_Keypad8, ImGuiKey_Keypad9,$/;"	e	enum:ImGuiKey
ImGuiKey_Keypad7	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_Keypad5, ImGuiKey_Keypad6, ImGuiKey_Keypad7, ImGuiKey_Keypad8, ImGuiKey_Keypad9,$/;"	e	enum:ImGuiKey
ImGuiKey_Keypad8	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_Keypad5, ImGuiKey_Keypad6, ImGuiKey_Keypad7, ImGuiKey_Keypad8, ImGuiKey_Keypad9,$/;"	e	enum:ImGuiKey
ImGuiKey_Keypad9	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_Keypad5, ImGuiKey_Keypad6, ImGuiKey_Keypad7, ImGuiKey_Keypad8, ImGuiKey_Keypad9,$/;"	e	enum:ImGuiKey
ImGuiKey_KeypadAdd	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_KeypadAdd,$/;"	e	enum:ImGuiKey
ImGuiKey_KeypadDecimal	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_KeypadDecimal,$/;"	e	enum:ImGuiKey
ImGuiKey_KeypadDivide	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_KeypadDivide,$/;"	e	enum:ImGuiKey
ImGuiKey_KeypadEnter	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_KeypadEnter,$/;"	e	enum:ImGuiKey
ImGuiKey_KeypadEqual	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_KeypadEqual,$/;"	e	enum:ImGuiKey
ImGuiKey_KeypadMultiply	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_KeypadMultiply,$/;"	e	enum:ImGuiKey
ImGuiKey_KeypadSubtract	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_KeypadSubtract,$/;"	e	enum:ImGuiKey
ImGuiKey_KeysData_OFFSET	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_KeysData_OFFSET        = ImGuiKey_NamedKey_BEGIN,  \/\/ Accesses to io.KeysData[] m/;"	e	enum:ImGuiKey
ImGuiKey_KeysData_SIZE	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_KeysData_SIZE          = ImGuiKey_NamedKey_COUNT,  \/\/ Size of KeysData[]: only ho/;"	e	enum:ImGuiKey
ImGuiKey_L	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_LeftAlt	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_LeftCtrl, ImGuiKey_LeftShift, ImGuiKey_LeftAlt, ImGuiKey_LeftSuper,$/;"	e	enum:ImGuiKey
ImGuiKey_LeftArrow	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_LeftArrow,$/;"	e	enum:ImGuiKey
ImGuiKey_LeftBracket	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_LeftBracket,       \/\/ [$/;"	e	enum:ImGuiKey
ImGuiKey_LeftCtrl	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_LeftCtrl, ImGuiKey_LeftShift, ImGuiKey_LeftAlt, ImGuiKey_LeftSuper,$/;"	e	enum:ImGuiKey
ImGuiKey_LeftShift	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_LeftCtrl, ImGuiKey_LeftShift, ImGuiKey_LeftAlt, ImGuiKey_LeftSuper,$/;"	e	enum:ImGuiKey
ImGuiKey_LeftSuper	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_LeftCtrl, ImGuiKey_LeftShift, ImGuiKey_LeftAlt, ImGuiKey_LeftSuper,$/;"	e	enum:ImGuiKey
ImGuiKey_LegacyNativeKey_BEGIN	build/_deps/imgui-proj-src/imgui_internal.h	/^#define ImGuiKey_LegacyNativeKey_BEGIN /;"	d
ImGuiKey_LegacyNativeKey_END	build/_deps/imgui-proj-src/imgui_internal.h	/^#define ImGuiKey_LegacyNativeKey_END /;"	d
ImGuiKey_M	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_Menu	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_Menu,$/;"	e	enum:ImGuiKey
ImGuiKey_Minus	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_Minus,             \/\/ -$/;"	e	enum:ImGuiKey
ImGuiKey_ModAlt	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_ModCtrl = ImGuiMod_Ctrl, ImGuiKey_ModShift = ImGuiMod_Shift, ImGuiKey_ModAlt = ImGu/;"	e	enum:ImGuiKey
ImGuiKey_ModCtrl	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_ModCtrl = ImGuiMod_Ctrl, ImGuiKey_ModShift = ImGuiMod_Shift, ImGuiKey_ModAlt = ImGu/;"	e	enum:ImGuiKey
ImGuiKey_ModShift	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_ModCtrl = ImGuiMod_Ctrl, ImGuiKey_ModShift = ImGuiMod_Shift, ImGuiKey_ModAlt = ImGu/;"	e	enum:ImGuiKey
ImGuiKey_ModSuper	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_ModCtrl = ImGuiMod_Ctrl, ImGuiKey_ModShift = ImGuiMod_Shift, ImGuiKey_ModAlt = ImGu/;"	e	enum:ImGuiKey
ImGuiKey_MouseLeft	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_MouseLeft, ImGuiKey_MouseRight, ImGuiKey_MouseMiddle, ImGuiKey_MouseX1, ImGuiKey_Mo/;"	e	enum:ImGuiKey
ImGuiKey_MouseMiddle	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_MouseLeft, ImGuiKey_MouseRight, ImGuiKey_MouseMiddle, ImGuiKey_MouseX1, ImGuiKey_Mo/;"	e	enum:ImGuiKey
ImGuiKey_MouseRight	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_MouseLeft, ImGuiKey_MouseRight, ImGuiKey_MouseMiddle, ImGuiKey_MouseX1, ImGuiKey_Mo/;"	e	enum:ImGuiKey
ImGuiKey_MouseWheelX	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_MouseLeft, ImGuiKey_MouseRight, ImGuiKey_MouseMiddle, ImGuiKey_MouseX1, ImGuiKey_Mo/;"	e	enum:ImGuiKey
ImGuiKey_MouseWheelY	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_MouseLeft, ImGuiKey_MouseRight, ImGuiKey_MouseMiddle, ImGuiKey_MouseX1, ImGuiKey_Mo/;"	e	enum:ImGuiKey
ImGuiKey_MouseX1	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_MouseLeft, ImGuiKey_MouseRight, ImGuiKey_MouseMiddle, ImGuiKey_MouseX1, ImGuiKey_Mo/;"	e	enum:ImGuiKey
ImGuiKey_MouseX2	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_MouseLeft, ImGuiKey_MouseRight, ImGuiKey_MouseMiddle, ImGuiKey_MouseX1, ImGuiKey_Mo/;"	e	enum:ImGuiKey
ImGuiKey_Mouse_BEGIN	build/_deps/imgui-proj-src/imgui_internal.h	/^#define ImGuiKey_Mouse_BEGIN /;"	d
ImGuiKey_Mouse_END	build/_deps/imgui-proj-src/imgui_internal.h	/^#define ImGuiKey_Mouse_END /;"	d
ImGuiKey_N	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_NamedKey_BEGIN	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_NamedKey_BEGIN         = 512,$/;"	e	enum:ImGuiKey
ImGuiKey_NamedKey_COUNT	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_NamedKey_COUNT         = ImGuiKey_NamedKey_END - ImGuiKey_NamedKey_BEGIN,$/;"	e	enum:ImGuiKey
ImGuiKey_NamedKey_END	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_NamedKey_END           = ImGuiKey_COUNT,$/;"	e	enum:ImGuiKey
ImGuiKey_NavGamepadActivate	build/_deps/imgui-proj-src/imgui_internal.h	/^#define ImGuiKey_NavGamepadActivate /;"	d
ImGuiKey_NavGamepadCancel	build/_deps/imgui-proj-src/imgui_internal.h	/^#define ImGuiKey_NavGamepadCancel /;"	d
ImGuiKey_NavGamepadInput	build/_deps/imgui-proj-src/imgui_internal.h	/^#define ImGuiKey_NavGamepadInput /;"	d
ImGuiKey_NavGamepadMenu	build/_deps/imgui-proj-src/imgui_internal.h	/^#define ImGuiKey_NavGamepadMenu /;"	d
ImGuiKey_NavGamepadTweakFast	build/_deps/imgui-proj-src/imgui_internal.h	/^#define ImGuiKey_NavGamepadTweakFast /;"	d
ImGuiKey_NavGamepadTweakSlow	build/_deps/imgui-proj-src/imgui_internal.h	/^#define ImGuiKey_NavGamepadTweakSlow /;"	d
ImGuiKey_NavKeyboardTweakFast	build/_deps/imgui-proj-src/imgui_internal.h	/^#define ImGuiKey_NavKeyboardTweakFast /;"	d
ImGuiKey_NavKeyboardTweakSlow	build/_deps/imgui-proj-src/imgui_internal.h	/^#define ImGuiKey_NavKeyboardTweakSlow /;"	d
ImGuiKey_None	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_None = 0,$/;"	e	enum:ImGuiKey
ImGuiKey_NumLock	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_NumLock,$/;"	e	enum:ImGuiKey
ImGuiKey_O	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_P	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_PageDown	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_PageDown,$/;"	e	enum:ImGuiKey
ImGuiKey_PageUp	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_PageUp,$/;"	e	enum:ImGuiKey
ImGuiKey_Pause	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_Pause,$/;"	e	enum:ImGuiKey
ImGuiKey_Period	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_Period,            \/\/ .$/;"	e	enum:ImGuiKey
ImGuiKey_PrintScreen	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_PrintScreen,$/;"	e	enum:ImGuiKey
ImGuiKey_Q	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_R	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_ReservedForModAlt	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_ReservedForModCtrl, ImGuiKey_ReservedForModShift, ImGuiKey_ReservedForModAlt, ImGui/;"	e	enum:ImGuiKey
ImGuiKey_ReservedForModCtrl	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_ReservedForModCtrl, ImGuiKey_ReservedForModShift, ImGuiKey_ReservedForModAlt, ImGui/;"	e	enum:ImGuiKey
ImGuiKey_ReservedForModShift	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_ReservedForModCtrl, ImGuiKey_ReservedForModShift, ImGuiKey_ReservedForModAlt, ImGui/;"	e	enum:ImGuiKey
ImGuiKey_ReservedForModSuper	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_ReservedForModCtrl, ImGuiKey_ReservedForModShift, ImGuiKey_ReservedForModAlt, ImGui/;"	e	enum:ImGuiKey
ImGuiKey_RightAlt	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_RightCtrl, ImGuiKey_RightShift, ImGuiKey_RightAlt, ImGuiKey_RightSuper,$/;"	e	enum:ImGuiKey
ImGuiKey_RightArrow	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_RightArrow,$/;"	e	enum:ImGuiKey
ImGuiKey_RightBracket	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_RightBracket,      \/\/ ]$/;"	e	enum:ImGuiKey
ImGuiKey_RightCtrl	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_RightCtrl, ImGuiKey_RightShift, ImGuiKey_RightAlt, ImGuiKey_RightSuper,$/;"	e	enum:ImGuiKey
ImGuiKey_RightShift	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_RightCtrl, ImGuiKey_RightShift, ImGuiKey_RightAlt, ImGuiKey_RightSuper,$/;"	e	enum:ImGuiKey
ImGuiKey_RightSuper	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_RightCtrl, ImGuiKey_RightShift, ImGuiKey_RightAlt, ImGuiKey_RightSuper,$/;"	e	enum:ImGuiKey
ImGuiKey_S	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_ScrollLock	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_ScrollLock,$/;"	e	enum:ImGuiKey
ImGuiKey_Semicolon	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_Semicolon,         \/\/ ;$/;"	e	enum:ImGuiKey
ImGuiKey_Slash	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_Slash,             \/\/ \/$/;"	e	enum:ImGuiKey
ImGuiKey_Space	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_Space,$/;"	e	enum:ImGuiKey
ImGuiKey_T	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_Tab	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_Tab = 512,             \/\/ == ImGuiKey_NamedKey_BEGIN$/;"	e	enum:ImGuiKey
ImGuiKey_U	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_U, ImGuiKey_V, ImGuiKey_W, ImGuiKey_X, ImGuiKey_Y, ImGuiKey_Z,$/;"	e	enum:ImGuiKey
ImGuiKey_UpArrow	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_UpArrow,$/;"	e	enum:ImGuiKey
ImGuiKey_V	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_U, ImGuiKey_V, ImGuiKey_W, ImGuiKey_X, ImGuiKey_Y, ImGuiKey_Z,$/;"	e	enum:ImGuiKey
ImGuiKey_W	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_U, ImGuiKey_V, ImGuiKey_W, ImGuiKey_X, ImGuiKey_Y, ImGuiKey_Z,$/;"	e	enum:ImGuiKey
ImGuiKey_X	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_U, ImGuiKey_V, ImGuiKey_W, ImGuiKey_X, ImGuiKey_Y, ImGuiKey_Z,$/;"	e	enum:ImGuiKey
ImGuiKey_Y	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_U, ImGuiKey_V, ImGuiKey_W, ImGuiKey_X, ImGuiKey_Y, ImGuiKey_Z,$/;"	e	enum:ImGuiKey
ImGuiKey_Z	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKey_U, ImGuiKey_V, ImGuiKey_W, ImGuiKey_X, ImGuiKey_Y, ImGuiKey_Z,$/;"	e	enum:ImGuiKey
ImGuiLastItemData	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiLastItemData()     { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiLastItemData
ImGuiLastItemData	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiLastItemData$/;"	s
ImGuiLayoutType	build/_deps/imgui-proj-src/imgui_internal.h	/^typedef int ImGuiLayoutType;            \/\/ -> enum ImGuiLayoutType_         \/\/ Enum: Horizon/;"	t	typeref:typename:int
ImGuiLayoutType_	build/_deps/imgui-proj-src/imgui_internal.h	/^enum ImGuiLayoutType_$/;"	g
ImGuiLayoutType_Horizontal	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiLayoutType_Horizontal = 0,$/;"	e	enum:ImGuiLayoutType_
ImGuiLayoutType_Vertical	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiLayoutType_Vertical = 1$/;"	e	enum:ImGuiLayoutType_
ImGuiListClipper	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiListClipper::ImGuiListClipper()$/;"	f	class:ImGuiListClipper
ImGuiListClipper	build/_deps/imgui-proj-src/imgui.h	/^struct ImGuiListClipper$/;"	s
ImGuiListClipperData	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiListClipperData()          { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiListClipperData
ImGuiListClipperData	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiListClipperData$/;"	s
ImGuiListClipperRange	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiListClipperRange$/;"	s
ImGuiListClipper_SeekCursorAndSetupPrevLine	build/_deps/imgui-proj-src/imgui.cpp	/^static void ImGuiListClipper_SeekCursorAndSetupPrevLine(float pos_y, float line_height)$/;"	f	typeref:typename:void	file:
ImGuiListClipper_SeekCursorForItem	build/_deps/imgui-proj-src/imgui.cpp	/^static void ImGuiListClipper_SeekCursorForItem(ImGuiListClipper* clipper, int item_n)$/;"	f	typeref:typename:void	file:
ImGuiListClipper_SortAndFuseRanges	build/_deps/imgui-proj-src/imgui.cpp	/^static void ImGuiListClipper_SortAndFuseRanges(ImVector<ImGuiListClipperRange>& ranges, int offs/;"	f	typeref:typename:void	file:
ImGuiListClipper_StepInternal	build/_deps/imgui-proj-src/imgui.cpp	/^static bool ImGuiListClipper_StepInternal(ImGuiListClipper* clipper)$/;"	f	typeref:typename:bool	file:
ImGuiLocEntry	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiLocEntry$/;"	s
ImGuiLocKey	build/_deps/imgui-proj-src/imgui_internal.h	/^enum ImGuiLocKey : int$/;"	g	typeref:typename:int
ImGuiLocKey_COUNT	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiLocKey_COUNT$/;"	e	enum:ImGuiLocKey
ImGuiLocKey_DockingDragToUndockOrMoveNode	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiLocKey_DockingDragToUndockOrMoveNode,$/;"	e	enum:ImGuiLocKey
ImGuiLocKey_DockingHideTabBar	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiLocKey_DockingHideTabBar,$/;"	e	enum:ImGuiLocKey
ImGuiLocKey_DockingHoldShiftToDock	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiLocKey_DockingHoldShiftToDock,$/;"	e	enum:ImGuiLocKey
ImGuiLocKey_TableResetOrder	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiLocKey_TableResetOrder,$/;"	e	enum:ImGuiLocKey
ImGuiLocKey_TableSizeAllDefault	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiLocKey_TableSizeAllDefault,$/;"	e	enum:ImGuiLocKey
ImGuiLocKey_TableSizeAllFit	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiLocKey_TableSizeAllFit,$/;"	e	enum:ImGuiLocKey
ImGuiLocKey_TableSizeOne	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiLocKey_TableSizeOne,$/;"	e	enum:ImGuiLocKey
ImGuiLocKey_VersionStr	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiLocKey_VersionStr,$/;"	e	enum:ImGuiLocKey
ImGuiLocKey_WindowingMainMenuBar	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiLocKey_WindowingMainMenuBar,$/;"	e	enum:ImGuiLocKey
ImGuiLocKey_WindowingPopup	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiLocKey_WindowingPopup,$/;"	e	enum:ImGuiLocKey
ImGuiLocKey_WindowingUntitled	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiLocKey_WindowingUntitled,$/;"	e	enum:ImGuiLocKey
ImGuiLogType	build/_deps/imgui-proj-src/imgui_internal.h	/^enum ImGuiLogType$/;"	g
ImGuiLogType_Buffer	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiLogType_Buffer,$/;"	e	enum:ImGuiLogType
ImGuiLogType_Clipboard	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiLogType_Clipboard,$/;"	e	enum:ImGuiLogType
ImGuiLogType_File	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiLogType_File,$/;"	e	enum:ImGuiLogType
ImGuiLogType_None	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiLogType_None = 0,$/;"	e	enum:ImGuiLogType
ImGuiLogType_TTY	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiLogType_TTY,$/;"	e	enum:ImGuiLogType
ImGuiLunasvgPortFree	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^static void ImGuiLunasvgPortFree(FT_Pointer* _state)$/;"	f	typeref:typename:void	file:
ImGuiLunasvgPortInit	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^static FT_Error ImGuiLunasvgPortInit(FT_Pointer* _state)$/;"	f	typeref:typename:FT_Error	file:
ImGuiLunasvgPortPresetSlot	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^static FT_Error ImGuiLunasvgPortPresetSlot(FT_GlyphSlot slot, FT_Bool cache, FT_Pointer* _state)$/;"	f	typeref:typename:FT_Error	file:
ImGuiLunasvgPortRender	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^static FT_Error ImGuiLunasvgPortRender(FT_GlyphSlot slot, FT_Pointer* _state)$/;"	f	typeref:typename:FT_Error	file:
ImGuiMemAllocFunc	build/_deps/imgui-proj-src/imgui.h	/^typedef void*   (*ImGuiMemAllocFunc)(size_t sz, void* user_data);               \/\/ Function si/;"	t	typeref:typename:void * (*)(size_t sz,void * user_data)
ImGuiMemFreeFunc	build/_deps/imgui-proj-src/imgui.h	/^typedef void    (*ImGuiMemFreeFunc)(void* ptr, void* user_data);                \/\/ Function si/;"	t	typeref:typename:void (*)(void * ptr,void * user_data)
ImGuiMenuColumns	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiMenuColumns() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiMenuColumns
ImGuiMenuColumns	build/_deps/imgui-proj-src/imgui_internal.h	/^struct IMGUI_API ImGuiMenuColumns$/;"	s
ImGuiMetricsConfig	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiMetricsConfig$/;"	s
ImGuiModFlags	build/_deps/imgui-proj-src/imgui.h	/^typedef ImGuiKeyChord ImGuiModFlags;      \/\/ == int. We generally use ImGuiKeyChord to mean "a/;"	t	typeref:typename:ImGuiKeyChord
ImGuiModFlags_	build/_deps/imgui-proj-src/imgui.h	/^enum ImGuiModFlags_ { ImGuiModFlags_None = 0, ImGuiModFlags_Ctrl = ImGuiMod_Ctrl, ImGuiModFlags_/;"	g
ImGuiModFlags_Alt	build/_deps/imgui-proj-src/imgui.h	/^enum ImGuiModFlags_ { ImGuiModFlags_None = 0, ImGuiModFlags_Ctrl = ImGuiMod_Ctrl, ImGuiModFlags_/;"	e	enum:ImGuiModFlags_
ImGuiModFlags_Ctrl	build/_deps/imgui-proj-src/imgui.h	/^enum ImGuiModFlags_ { ImGuiModFlags_None = 0, ImGuiModFlags_Ctrl = ImGuiMod_Ctrl, ImGuiModFlags_/;"	e	enum:ImGuiModFlags_
ImGuiModFlags_None	build/_deps/imgui-proj-src/imgui.h	/^enum ImGuiModFlags_ { ImGuiModFlags_None = 0, ImGuiModFlags_Ctrl = ImGuiMod_Ctrl, ImGuiModFlags_/;"	e	enum:ImGuiModFlags_
ImGuiModFlags_Shift	build/_deps/imgui-proj-src/imgui.h	/^enum ImGuiModFlags_ { ImGuiModFlags_None = 0, ImGuiModFlags_Ctrl = ImGuiMod_Ctrl, ImGuiModFlags_/;"	e	enum:ImGuiModFlags_
ImGuiModFlags_Super	build/_deps/imgui-proj-src/imgui.h	/^enum ImGuiModFlags_ { ImGuiModFlags_None = 0, ImGuiModFlags_Ctrl = ImGuiMod_Ctrl, ImGuiModFlags_/;"	e	enum:ImGuiModFlags_
ImGuiMod_Alt	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiMod_Alt                    = 1 << 14, \/\/ Option\/Menu$/;"	e	enum:ImGuiKey
ImGuiMod_Ctrl	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiMod_Ctrl                   = 1 << 12, \/\/ Ctrl$/;"	e	enum:ImGuiKey
ImGuiMod_Mask_	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiMod_Mask_                  = 0xF800,  \/\/ 5-bits$/;"	e	enum:ImGuiKey
ImGuiMod_None	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiMod_None                   = 0,$/;"	e	enum:ImGuiKey
ImGuiMod_Shift	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiMod_Shift                  = 1 << 13, \/\/ Shift$/;"	e	enum:ImGuiKey
ImGuiMod_Shortcut	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiMod_Shortcut               = 1 << 11, \/\/ Alias for Ctrl (non-macOS) _or_ Super (macOS/;"	e	enum:ImGuiKey
ImGuiMod_Super	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiMod_Super                  = 1 << 15, \/\/ Cmd\/Super\/Windows$/;"	e	enum:ImGuiKey
ImGuiMouseButton	build/_deps/imgui-proj-src/imgui.h	/^typedef int ImGuiMouseButton;       \/\/ -> enum ImGuiMouseButton_     \/\/ Enum: A mouse button/;"	t	typeref:typename:int
ImGuiMouseButton_	build/_deps/imgui-proj-src/imgui.h	/^enum ImGuiMouseButton_$/;"	g
ImGuiMouseButton_COUNT	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiMouseButton_COUNT = 5$/;"	e	enum:ImGuiMouseButton_
ImGuiMouseButton_Left	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiMouseButton_Left = 0,$/;"	e	enum:ImGuiMouseButton_
ImGuiMouseButton_Middle	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiMouseButton_Middle = 2,$/;"	e	enum:ImGuiMouseButton_
ImGuiMouseButton_Right	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiMouseButton_Right = 1,$/;"	e	enum:ImGuiMouseButton_
ImGuiMouseCursor	build/_deps/imgui-proj-src/imgui.h	/^typedef int ImGuiMouseCursor;       \/\/ -> enum ImGuiMouseCursor_     \/\/ Enum: A mouse cursor/;"	t	typeref:typename:int
ImGuiMouseCursor_	build/_deps/imgui-proj-src/imgui.h	/^enum ImGuiMouseCursor_$/;"	g
ImGuiMouseCursor_Arrow	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiMouseCursor_Arrow = 0,$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_COUNT	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiMouseCursor_COUNT$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_Hand	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiMouseCursor_Hand,              \/\/ (Unused by Dear ImGui functions. Use for e.g. hyper/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_None	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiMouseCursor_None = -1,$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_NotAllowed	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiMouseCursor_NotAllowed,        \/\/ When hovering something with disallowed interaction/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_ResizeAll	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiMouseCursor_ResizeAll,         \/\/ (Unused by Dear ImGui functions)$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_ResizeEW	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiMouseCursor_ResizeEW,          \/\/ When hovering over a vertical border or a column$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_ResizeNESW	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiMouseCursor_ResizeNESW,        \/\/ When hovering over the bottom-left corner of a wind/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_ResizeNS	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiMouseCursor_ResizeNS,          \/\/ When hovering over a horizontal border$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_ResizeNWSE	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiMouseCursor_ResizeNWSE,        \/\/ When hovering over the bottom-right corner of a win/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_TextInput	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiMouseCursor_TextInput,         \/\/ When hovering over InputText, etc.$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseSource	build/_deps/imgui-proj-src/imgui.h	/^enum ImGuiMouseSource : int$/;"	g	typeref:typename:int
ImGuiMouseSource_COUNT	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiMouseSource_COUNT$/;"	e	enum:ImGuiMouseSource
ImGuiMouseSource_Mouse	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiMouseSource_Mouse = 0,         \/\/ Input is coming from an actual mouse.$/;"	e	enum:ImGuiMouseSource
ImGuiMouseSource_Pen	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiMouseSource_Pen,               \/\/ Input is coming from a pressure\/magnetic pen (ofte/;"	e	enum:ImGuiMouseSource
ImGuiMouseSource_TouchScreen	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiMouseSource_TouchScreen,       \/\/ Input is coming from a touch screen (no hovering pr/;"	e	enum:ImGuiMouseSource
ImGuiNavHighlightFlags	build/_deps/imgui-proj-src/imgui_internal.h	/^typedef int ImGuiNavHighlightFlags;     \/\/ -> enum ImGuiNavHighlightFlags_  \/\/ Flags: for Re/;"	t	typeref:typename:int
ImGuiNavHighlightFlags_	build/_deps/imgui-proj-src/imgui_internal.h	/^enum ImGuiNavHighlightFlags_$/;"	g
ImGuiNavHighlightFlags_AlwaysDraw	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiNavHighlightFlags_AlwaysDraw       = 1 << 2,       \/\/ Draw rectangular highlight if (/;"	e	enum:ImGuiNavHighlightFlags_
ImGuiNavHighlightFlags_Compact	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiNavHighlightFlags_Compact          = 1 << 1,       \/\/ Compact highlight, no padding$/;"	e	enum:ImGuiNavHighlightFlags_
ImGuiNavHighlightFlags_NoRounding	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiNavHighlightFlags_NoRounding       = 1 << 3,$/;"	e	enum:ImGuiNavHighlightFlags_
ImGuiNavHighlightFlags_None	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiNavHighlightFlags_None             = 0,$/;"	e	enum:ImGuiNavHighlightFlags_
ImGuiNavInput	build/_deps/imgui-proj-src/imgui.h	/^enum ImGuiNavInput$/;"	g
ImGuiNavInput_Activate	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiNavInput_Activate, ImGuiNavInput_Cancel, ImGuiNavInput_Input, ImGuiNavInput_Menu, ImGui/;"	e	enum:ImGuiNavInput
ImGuiNavInput_COUNT	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiNavInput_COUNT,$/;"	e	enum:ImGuiNavInput
ImGuiNavInput_Cancel	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiNavInput_Activate, ImGuiNavInput_Cancel, ImGuiNavInput_Input, ImGuiNavInput_Menu, ImGui/;"	e	enum:ImGuiNavInput
ImGuiNavInput_DpadDown	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiNavInput_Activate, ImGuiNavInput_Cancel, ImGuiNavInput_Input, ImGuiNavInput_Menu, ImGui/;"	e	enum:ImGuiNavInput
ImGuiNavInput_DpadLeft	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiNavInput_Activate, ImGuiNavInput_Cancel, ImGuiNavInput_Input, ImGuiNavInput_Menu, ImGui/;"	e	enum:ImGuiNavInput
ImGuiNavInput_DpadRight	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiNavInput_Activate, ImGuiNavInput_Cancel, ImGuiNavInput_Input, ImGuiNavInput_Menu, ImGui/;"	e	enum:ImGuiNavInput
ImGuiNavInput_DpadUp	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiNavInput_Activate, ImGuiNavInput_Cancel, ImGuiNavInput_Input, ImGuiNavInput_Menu, ImGui/;"	e	enum:ImGuiNavInput
ImGuiNavInput_FocusNext	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiNavInput_LStickLeft, ImGuiNavInput_LStickRight, ImGuiNavInput_LStickUp, ImGuiNavInput_L/;"	e	enum:ImGuiNavInput
ImGuiNavInput_FocusPrev	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiNavInput_LStickLeft, ImGuiNavInput_LStickRight, ImGuiNavInput_LStickUp, ImGuiNavInput_L/;"	e	enum:ImGuiNavInput
ImGuiNavInput_Input	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiNavInput_Activate, ImGuiNavInput_Cancel, ImGuiNavInput_Input, ImGuiNavInput_Menu, ImGui/;"	e	enum:ImGuiNavInput
ImGuiNavInput_LStickDown	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiNavInput_LStickLeft, ImGuiNavInput_LStickRight, ImGuiNavInput_LStickUp, ImGuiNavInput_L/;"	e	enum:ImGuiNavInput
ImGuiNavInput_LStickLeft	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiNavInput_LStickLeft, ImGuiNavInput_LStickRight, ImGuiNavInput_LStickUp, ImGuiNavInput_L/;"	e	enum:ImGuiNavInput
ImGuiNavInput_LStickRight	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiNavInput_LStickLeft, ImGuiNavInput_LStickRight, ImGuiNavInput_LStickUp, ImGuiNavInput_L/;"	e	enum:ImGuiNavInput
ImGuiNavInput_LStickUp	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiNavInput_LStickLeft, ImGuiNavInput_LStickRight, ImGuiNavInput_LStickUp, ImGuiNavInput_L/;"	e	enum:ImGuiNavInput
ImGuiNavInput_Menu	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiNavInput_Activate, ImGuiNavInput_Cancel, ImGuiNavInput_Input, ImGuiNavInput_Menu, ImGui/;"	e	enum:ImGuiNavInput
ImGuiNavInput_TweakFast	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiNavInput_LStickLeft, ImGuiNavInput_LStickRight, ImGuiNavInput_LStickUp, ImGuiNavInput_L/;"	e	enum:ImGuiNavInput
ImGuiNavInput_TweakSlow	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiNavInput_LStickLeft, ImGuiNavInput_LStickRight, ImGuiNavInput_LStickUp, ImGuiNavInput_L/;"	e	enum:ImGuiNavInput
ImGuiNavItemData	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiNavItemData()  { Clear(); }$/;"	f	struct:ImGuiNavItemData
ImGuiNavItemData	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiNavItemData$/;"	s
ImGuiNavLayer	build/_deps/imgui-proj-src/imgui_internal.h	/^enum ImGuiNavLayer$/;"	g
ImGuiNavLayer_COUNT	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiNavLayer_COUNT$/;"	e	enum:ImGuiNavLayer
ImGuiNavLayer_Main	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiNavLayer_Main  = 0,    \/\/ Main scrolling layer$/;"	e	enum:ImGuiNavLayer
ImGuiNavLayer_Menu	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiNavLayer_Menu  = 1,    \/\/ Menu layer (access with Alt)$/;"	e	enum:ImGuiNavLayer
ImGuiNavMoveFlags	build/_deps/imgui-proj-src/imgui_internal.h	/^typedef int ImGuiNavMoveFlags;          \/\/ -> enum ImGuiNavMoveFlags_       \/\/ Flags: for na/;"	t	typeref:typename:int
ImGuiNavMoveFlags_	build/_deps/imgui-proj-src/imgui_internal.h	/^enum ImGuiNavMoveFlags_$/;"	g
ImGuiNavMoveFlags_Activate	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiNavMoveFlags_Activate              = 1 << 12,  \/\/ Activate\/select target item.$/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_AllowCurrentNavId	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiNavMoveFlags_AllowCurrentNavId     = 1 << 4,   \/\/ Allow scoring and considering the c/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_AlsoScoreVisibleSet	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiNavMoveFlags_AlsoScoreVisibleSet   = 1 << 5,   \/\/ Store alternate result in NavMoveRe/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_DebugNoResult	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiNavMoveFlags_DebugNoResult         = 1 << 8,   \/\/ Dummy scoring for debug purpose, do/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_FocusApi	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiNavMoveFlags_FocusApi              = 1 << 9,   \/\/ Requests from focus API can land\/f/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_Forwarded	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiNavMoveFlags_Forwarded             = 1 << 7,$/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_IsPageMove	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiNavMoveFlags_IsPageMove            = 1 << 11,  \/\/ Identify a PageDown\/PageUp request/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_IsTabbing	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiNavMoveFlags_IsTabbing             = 1 << 10,  \/\/ == Focus + Activate if item is Inpu/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_LoopX	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiNavMoveFlags_LoopX                 = 1 << 0,   \/\/ On failed request, restart from opp/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_LoopY	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiNavMoveFlags_LoopY                 = 1 << 1,$/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_NoSelect	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiNavMoveFlags_NoSelect              = 1 << 13,  \/\/ Don't trigger selection by not sett/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_NoSetNavHighlight	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiNavMoveFlags_NoSetNavHighlight     = 1 << 14,  \/\/ Do not alter the visible state of k/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_None	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiNavMoveFlags_None                  = 0,$/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_ScrollToEdgeY	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiNavMoveFlags_ScrollToEdgeY         = 1 << 6,   \/\/ Force scrolling to min\/max (used b/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_WrapMask_	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiNavMoveFlags_WrapMask_             = ImGuiNavMoveFlags_LoopX | ImGuiNavMoveFlags_LoopY /;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_WrapX	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiNavMoveFlags_WrapX                 = 1 << 2,   \/\/ On failed request, request from opp/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_WrapY	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiNavMoveFlags_WrapY                 = 1 << 3,   \/\/ This is not super useful but provid/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavTreeNodeData	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiNavTreeNodeData$/;"	s
ImGuiNextItemData	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiNextItemData()         { memset(this, 0, sizeof(*this)); SelectionUserData = -1; }$/;"	f	struct:ImGuiNextItemData
ImGuiNextItemData	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiNextItemData$/;"	s
ImGuiNextItemDataFlags	build/_deps/imgui-proj-src/imgui_internal.h	/^typedef int ImGuiNextItemDataFlags;     \/\/ -> enum ImGuiNextItemDataFlags_  \/\/ Flags: for Se/;"	t	typeref:typename:int
ImGuiNextItemDataFlags_	build/_deps/imgui-proj-src/imgui_internal.h	/^enum ImGuiNextItemDataFlags_$/;"	g
ImGuiNextItemDataFlags_HasOpen	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiNextItemDataFlags_HasOpen      = 1 << 1,$/;"	e	enum:ImGuiNextItemDataFlags_
ImGuiNextItemDataFlags_HasShortcut	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiNextItemDataFlags_HasShortcut  = 1 << 2,$/;"	e	enum:ImGuiNextItemDataFlags_
ImGuiNextItemDataFlags_HasWidth	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiNextItemDataFlags_HasWidth     = 1 << 0,$/;"	e	enum:ImGuiNextItemDataFlags_
ImGuiNextItemDataFlags_None	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiNextItemDataFlags_None         = 0,$/;"	e	enum:ImGuiNextItemDataFlags_
ImGuiNextWindowData	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiNextWindowData()       { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiNextWindowData
ImGuiNextWindowData	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiNextWindowData$/;"	s
ImGuiNextWindowDataFlags	build/_deps/imgui-proj-src/imgui_internal.h	/^typedef int ImGuiNextWindowDataFlags;   \/\/ -> enum ImGuiNextWindowDataFlags_\/\/ Flags: for Se/;"	t	typeref:typename:int
ImGuiNextWindowDataFlags_	build/_deps/imgui-proj-src/imgui_internal.h	/^enum ImGuiNextWindowDataFlags_$/;"	g
ImGuiNextWindowDataFlags_HasBgAlpha	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasBgAlpha         = 1 << 6,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasChildFlags	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasChildFlags      = 1 << 8,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasCollapsed	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasCollapsed       = 1 << 3,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasContentSize	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasContentSize     = 1 << 2,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasDock	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasDock            = 1 << 10,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasFocus	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasFocus           = 1 << 5,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasPos	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasPos             = 1 << 0,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasScroll	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasScroll          = 1 << 7,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasSize	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasSize            = 1 << 1,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasSizeConstraint	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasSizeConstraint  = 1 << 4,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasViewport	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasViewport        = 1 << 9,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasWindowClass	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasWindowClass     = 1 << 11,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_None	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiNextWindowDataFlags_None               = 0,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiObserver	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^@implementation ImGuiObserver$/;"	I
ImGuiObserver	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^@interface ImGuiObserver : NSObject$/;"	i
ImGuiOldColumnData	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiOldColumnData() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiOldColumnData
ImGuiOldColumnData	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiOldColumnData$/;"	s
ImGuiOldColumnFlags	build/_deps/imgui-proj-src/imgui_internal.h	/^typedef int ImGuiOldColumnFlags;        \/\/ -> enum ImGuiOldColumnFlags_     \/\/ Flags: for Be/;"	t	typeref:typename:int
ImGuiOldColumnFlags_	build/_deps/imgui-proj-src/imgui_internal.h	/^enum ImGuiOldColumnFlags_$/;"	g
ImGuiOldColumnFlags_GrowParentContentsSize	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiOldColumnFlags_GrowParentContentsSize  = 1 << 4,   \/\/ Restore pre-1.51 behavior of ex/;"	e	enum:ImGuiOldColumnFlags_
ImGuiOldColumnFlags_NoBorder	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiOldColumnFlags_NoBorder                = 1 << 0,   \/\/ Disable column dividers$/;"	e	enum:ImGuiOldColumnFlags_
ImGuiOldColumnFlags_NoForceWithinWindow	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiOldColumnFlags_NoForceWithinWindow     = 1 << 3,   \/\/ Disable forcing columns to fit /;"	e	enum:ImGuiOldColumnFlags_
ImGuiOldColumnFlags_NoPreserveWidths	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiOldColumnFlags_NoPreserveWidths        = 1 << 2,   \/\/ Disable column width preservati/;"	e	enum:ImGuiOldColumnFlags_
ImGuiOldColumnFlags_NoResize	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiOldColumnFlags_NoResize                = 1 << 1,   \/\/ Disable resizing columns when c/;"	e	enum:ImGuiOldColumnFlags_
ImGuiOldColumnFlags_None	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiOldColumnFlags_None                    = 0,$/;"	e	enum:ImGuiOldColumnFlags_
ImGuiOldColumns	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiOldColumns()   { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiOldColumns
ImGuiOldColumns	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiOldColumns$/;"	s
ImGuiOnceUponAFrame	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiOnceUponAFrame() { RefFrame = -1; }$/;"	f	struct:ImGuiOnceUponAFrame
ImGuiOnceUponAFrame	build/_deps/imgui-proj-src/imgui.h	/^struct ImGuiOnceUponAFrame$/;"	s
ImGuiPayload	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiPayload()  { Clear(); }$/;"	f	struct:ImGuiPayload
ImGuiPayload	build/_deps/imgui-proj-src/imgui.h	/^struct ImGuiPayload$/;"	s
ImGuiPlatformIO	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiPlatformIO()               { memset(this, 0, sizeof(*this)); }     \/\/ Zero clear$/;"	f	struct:ImGuiPlatformIO
ImGuiPlatformIO	build/_deps/imgui-proj-src/imgui.h	/^struct ImGuiPlatformIO$/;"	s
ImGuiPlatformImeData	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiPlatformImeData() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiPlatformImeData
ImGuiPlatformImeData	build/_deps/imgui-proj-src/imgui.h	/^struct ImGuiPlatformImeData$/;"	s
ImGuiPlatformMonitor	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiPlatformMonitor()          { MainPos = MainSize = WorkPos = WorkSize = ImVec2(0, 0); Dp/;"	f	struct:ImGuiPlatformMonitor
ImGuiPlatformMonitor	build/_deps/imgui-proj-src/imgui.h	/^struct ImGuiPlatformMonitor$/;"	s
ImGuiPlotArrayGetterData	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^    ImGuiPlotArrayGetterData(const float* values, int stride) { Values = values; Stride = stride/;"	f	struct:ImGuiPlotArrayGetterData	file:
ImGuiPlotArrayGetterData	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^struct ImGuiPlotArrayGetterData$/;"	s	file:
ImGuiPlotType	build/_deps/imgui-proj-src/imgui_internal.h	/^enum ImGuiPlotType$/;"	g
ImGuiPlotType_Histogram	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiPlotType_Histogram,$/;"	e	enum:ImGuiPlotType
ImGuiPlotType_Lines	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiPlotType_Lines,$/;"	e	enum:ImGuiPlotType
ImGuiPopupData	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiPopupData()    { memset(this, 0, sizeof(*this)); ParentNavLayer = OpenFrameCount = -1; /;"	f	struct:ImGuiPopupData
ImGuiPopupData	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiPopupData$/;"	s
ImGuiPopupFlags	build/_deps/imgui-proj-src/imgui.h	/^typedef int ImGuiPopupFlags;        \/\/ -> enum ImGuiPopupFlags_      \/\/ Flags: for OpenPopup/;"	t	typeref:typename:int
ImGuiPopupFlags_	build/_deps/imgui-proj-src/imgui.h	/^enum ImGuiPopupFlags_$/;"	g
ImGuiPopupFlags_AnyPopup	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiPopupFlags_AnyPopup                = ImGuiPopupFlags_AnyPopupId | ImGuiPopupFlags_AnyPo/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_AnyPopupId	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiPopupFlags_AnyPopupId              = 1 << 10,  \/\/ For IsPopupOpen(): ignore the ImGui/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_AnyPopupLevel	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiPopupFlags_AnyPopupLevel           = 1 << 11,  \/\/ For IsPopupOpen(): search\/test at /;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_MouseButtonDefault_	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiPopupFlags_MouseButtonDefault_     = 1,$/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_MouseButtonLeft	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiPopupFlags_MouseButtonLeft         = 0,        \/\/ For BeginPopupContext*(): open on L/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_MouseButtonMask_	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiPopupFlags_MouseButtonMask_        = 0x1F,$/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_MouseButtonMiddle	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiPopupFlags_MouseButtonMiddle       = 2,        \/\/ For BeginPopupContext*(): open on M/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_MouseButtonRight	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiPopupFlags_MouseButtonRight        = 1,        \/\/ For BeginPopupContext*(): open on R/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_NoOpenOverExistingPopup	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiPopupFlags_NoOpenOverExistingPopup = 1 << 7,   \/\/ For OpenPopup*(), BeginPopupContext/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_NoOpenOverItems	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiPopupFlags_NoOpenOverItems         = 1 << 8,   \/\/ For BeginPopupContextWindow(): don'/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_NoReopen	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiPopupFlags_NoReopen                = 1 << 5,   \/\/ For OpenPopup*(), BeginPopupContext/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_None	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiPopupFlags_None                    = 0,$/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupPositionPolicy	build/_deps/imgui-proj-src/imgui_internal.h	/^enum ImGuiPopupPositionPolicy$/;"	g
ImGuiPopupPositionPolicy_ComboBox	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiPopupPositionPolicy_ComboBox,$/;"	e	enum:ImGuiPopupPositionPolicy
ImGuiPopupPositionPolicy_Default	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiPopupPositionPolicy_Default,$/;"	e	enum:ImGuiPopupPositionPolicy
ImGuiPopupPositionPolicy_Tooltip	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiPopupPositionPolicy_Tooltip,$/;"	e	enum:ImGuiPopupPositionPolicy
ImGuiPtrOrIndex	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiPtrOrIndex(int index)  { Ptr = NULL; Index = index; }$/;"	f	struct:ImGuiPtrOrIndex
ImGuiPtrOrIndex	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiPtrOrIndex(void* ptr)  { Ptr = ptr; Index = -1; }$/;"	f	struct:ImGuiPtrOrIndex
ImGuiPtrOrIndex	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiPtrOrIndex$/;"	s
ImGuiResizeBorderDef	build/_deps/imgui-proj-src/imgui.cpp	/^struct ImGuiResizeBorderDef$/;"	s	file:
ImGuiResizeGripDef	build/_deps/imgui-proj-src/imgui.cpp	/^struct ImGuiResizeGripDef$/;"	s	file:
ImGuiScrollFlags	build/_deps/imgui-proj-src/imgui_internal.h	/^typedef int ImGuiScrollFlags;           \/\/ -> enum ImGuiScrollFlags_        \/\/ Flags: for Sc/;"	t	typeref:typename:int
ImGuiScrollFlags_	build/_deps/imgui-proj-src/imgui_internal.h	/^enum ImGuiScrollFlags_$/;"	g
ImGuiScrollFlags_AlwaysCenterX	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiScrollFlags_AlwaysCenterX          = 1 << 4,       \/\/ Always center the result item o/;"	e	enum:ImGuiScrollFlags_
ImGuiScrollFlags_AlwaysCenterY	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiScrollFlags_AlwaysCenterY          = 1 << 5,       \/\/ Always center the result item o/;"	e	enum:ImGuiScrollFlags_
ImGuiScrollFlags_KeepVisibleCenterX	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiScrollFlags_KeepVisibleCenterX     = 1 << 2,       \/\/ If item is not visible: scroll /;"	e	enum:ImGuiScrollFlags_
ImGuiScrollFlags_KeepVisibleCenterY	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiScrollFlags_KeepVisibleCenterY     = 1 << 3,       \/\/ If item is not visible: scroll /;"	e	enum:ImGuiScrollFlags_
ImGuiScrollFlags_KeepVisibleEdgeX	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiScrollFlags_KeepVisibleEdgeX       = 1 << 0,       \/\/ If item is not visible: scroll /;"	e	enum:ImGuiScrollFlags_
ImGuiScrollFlags_KeepVisibleEdgeY	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiScrollFlags_KeepVisibleEdgeY       = 1 << 1,       \/\/ If item is not visible: scroll /;"	e	enum:ImGuiScrollFlags_
ImGuiScrollFlags_MaskX_	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiScrollFlags_MaskX_                 = ImGuiScrollFlags_KeepVisibleEdgeX | ImGuiScrollFla/;"	e	enum:ImGuiScrollFlags_
ImGuiScrollFlags_MaskY_	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiScrollFlags_MaskY_                 = ImGuiScrollFlags_KeepVisibleEdgeY | ImGuiScrollFla/;"	e	enum:ImGuiScrollFlags_
ImGuiScrollFlags_NoScrollParent	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiScrollFlags_NoScrollParent         = 1 << 6,       \/\/ Disable forwarding scrolling to/;"	e	enum:ImGuiScrollFlags_
ImGuiScrollFlags_None	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiScrollFlags_None                   = 0,$/;"	e	enum:ImGuiScrollFlags_
ImGuiSelectableFlags	build/_deps/imgui-proj-src/imgui.h	/^typedef int ImGuiSelectableFlags;   \/\/ -> enum ImGuiSelectableFlags_ \/\/ Flags: for Selectabl/;"	t	typeref:typename:int
ImGuiSelectableFlagsPrivate_	build/_deps/imgui-proj-src/imgui_internal.h	/^enum ImGuiSelectableFlagsPrivate_$/;"	g
ImGuiSelectableFlags_	build/_deps/imgui-proj-src/imgui.h	/^enum ImGuiSelectableFlags_$/;"	g
ImGuiSelectableFlags_AllowDoubleClick	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiSelectableFlags_AllowDoubleClick   = 1 << 2,   \/\/ Generate press events on double cli/;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_AllowItemOverlap	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiSelectableFlags_AllowItemOverlap   = ImGuiSelectableFlags_AllowOverlap,  \/\/ Renamed i/;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_AllowOverlap	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiSelectableFlags_AllowOverlap       = 1 << 4,   \/\/ (WIP) Hit testing to allow subseque/;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_Disabled	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiSelectableFlags_Disabled           = 1 << 3,   \/\/ Cannot be selected, display grayed /;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_DontClosePopups	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiSelectableFlags_DontClosePopups    = 1 << 0,   \/\/ Clicking this doesn't close parent /;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_NoHoldingActiveID	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiSelectableFlags_NoHoldingActiveID      = 1 << 20,$/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_NoPadWithHalfSpacing	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiSelectableFlags_NoPadWithHalfSpacing   = 1 << 26,  \/\/ Disable padding each side with /;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_NoSetKeyOwner	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiSelectableFlags_NoSetKeyOwner          = 1 << 27,  \/\/ Don't set key\/input owner on t/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_None	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiSelectableFlags_None               = 0,$/;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_SelectOnClick	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiSelectableFlags_SelectOnClick          = 1 << 22,  \/\/ Override button behavior to rea/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_SelectOnNav	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiSelectableFlags_SelectOnNav            = 1 << 21,  \/\/ (WIP) Auto-select when moved in/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_SelectOnRelease	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiSelectableFlags_SelectOnRelease        = 1 << 23,  \/\/ Override button behavior to rea/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_SetNavIdOnHover	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiSelectableFlags_SetNavIdOnHover        = 1 << 25,  \/\/ Set Nav\/Focus ID on mouse hove/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_SpanAllColumns	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiSelectableFlags_SpanAllColumns     = 1 << 1,   \/\/ Frame will span all columns of its /;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_SpanAvailWidth	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiSelectableFlags_SpanAvailWidth         = 1 << 24,  \/\/ Span all avail width even if we/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectionUserData	build/_deps/imgui-proj-src/imgui_internal.h	/^typedef ImS64 ImGuiSelectionUserData;$/;"	t	typeref:typename:ImS64
ImGuiSelectionUserData_Invalid	build/_deps/imgui-proj-src/imgui_internal.h	/^#define ImGuiSelectionUserData_Invalid /;"	d
ImGuiSeparatorFlags	build/_deps/imgui-proj-src/imgui_internal.h	/^typedef int ImGuiSeparatorFlags;        \/\/ -> enum ImGuiSeparatorFlags_     \/\/ Flags: for Se/;"	t	typeref:typename:int
ImGuiSeparatorFlags_	build/_deps/imgui-proj-src/imgui_internal.h	/^enum ImGuiSeparatorFlags_$/;"	g
ImGuiSeparatorFlags_Horizontal	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiSeparatorFlags_Horizontal              = 1 << 0,   \/\/ Axis default to current layout /;"	e	enum:ImGuiSeparatorFlags_
ImGuiSeparatorFlags_None	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiSeparatorFlags_None                    = 0,$/;"	e	enum:ImGuiSeparatorFlags_
ImGuiSeparatorFlags_SpanAllColumns	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiSeparatorFlags_SpanAllColumns          = 1 << 2,   \/\/ Make separator cover all column/;"	e	enum:ImGuiSeparatorFlags_
ImGuiSeparatorFlags_Vertical	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiSeparatorFlags_Vertical                = 1 << 1,$/;"	e	enum:ImGuiSeparatorFlags_
ImGuiSettingsHandler	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiSettingsHandler() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiSettingsHandler
ImGuiSettingsHandler	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiSettingsHandler$/;"	s
ImGuiShrinkWidthItem	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiShrinkWidthItem$/;"	s
ImGuiSizeCallback	build/_deps/imgui-proj-src/imgui.h	/^typedef void    (*ImGuiSizeCallback)(ImGuiSizeCallbackData* data);              \/\/ Callback fu/;"	t	typeref:typename:void (*)(ImGuiSizeCallbackData * data)
ImGuiSizeCallbackData	build/_deps/imgui-proj-src/imgui.h	/^struct ImGuiSizeCallbackData$/;"	s
ImGuiSliderFlags	build/_deps/imgui-proj-src/imgui.h	/^typedef int ImGuiSliderFlags;       \/\/ -> enum ImGuiSliderFlags_     \/\/ Flags: for DragFloat/;"	t	typeref:typename:int
ImGuiSliderFlagsPrivate_	build/_deps/imgui-proj-src/imgui_internal.h	/^enum ImGuiSliderFlagsPrivate_$/;"	g
ImGuiSliderFlags_	build/_deps/imgui-proj-src/imgui.h	/^enum ImGuiSliderFlags_$/;"	g
ImGuiSliderFlags_AlwaysClamp	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiSliderFlags_AlwaysClamp            = 1 << 4,       \/\/ Clamp value to min\/max bounds /;"	e	enum:ImGuiSliderFlags_
ImGuiSliderFlags_InvalidMask_	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiSliderFlags_InvalidMask_           = 0x7000000F,   \/\/ [Internal] We treat using those/;"	e	enum:ImGuiSliderFlags_
ImGuiSliderFlags_Logarithmic	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiSliderFlags_Logarithmic            = 1 << 5,       \/\/ Make the widget logarithmic (li/;"	e	enum:ImGuiSliderFlags_
ImGuiSliderFlags_NoInput	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiSliderFlags_NoInput                = 1 << 7,       \/\/ Disable CTRL+Click or Enter key/;"	e	enum:ImGuiSliderFlags_
ImGuiSliderFlags_NoRoundToFormat	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiSliderFlags_NoRoundToFormat        = 1 << 6,       \/\/ Disable rounding underlying val/;"	e	enum:ImGuiSliderFlags_
ImGuiSliderFlags_None	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiSliderFlags_None                   = 0,$/;"	e	enum:ImGuiSliderFlags_
ImGuiSliderFlags_ReadOnly	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiSliderFlags_ReadOnly               = 1 << 21,  \/\/ Consider using g.NextItemData.ItemF/;"	e	enum:ImGuiSliderFlagsPrivate_
ImGuiSliderFlags_Vertical	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiSliderFlags_Vertical               = 1 << 20,  \/\/ Should this slider be orientated ve/;"	e	enum:ImGuiSliderFlagsPrivate_
ImGuiSortDirection	build/_deps/imgui-proj-src/imgui.h	/^typedef int ImGuiSortDirection;     \/\/ -> enum ImGuiSortDirection_   \/\/ Enum: A sorting dire/;"	t	typeref:typename:int
ImGuiSortDirection_	build/_deps/imgui-proj-src/imgui.h	/^enum ImGuiSortDirection_$/;"	g
ImGuiSortDirection_Ascending	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiSortDirection_Ascending    = 1,    \/\/ Ascending = 0->9, A->Z etc.$/;"	e	enum:ImGuiSortDirection_
ImGuiSortDirection_Descending	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiSortDirection_Descending   = 2     \/\/ Descending = 9->0, Z->A etc.$/;"	e	enum:ImGuiSortDirection_
ImGuiSortDirection_None	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiSortDirection_None         = 0,$/;"	e	enum:ImGuiSortDirection_
ImGuiStackLevelInfo	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiStackLevelInfo()   { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiStackLevelInfo
ImGuiStackLevelInfo	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiStackLevelInfo$/;"	s
ImGuiStackSizes	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiStackSizes() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiStackSizes
ImGuiStackSizes	build/_deps/imgui-proj-src/imgui_internal.h	/^struct IMGUI_API ImGuiStackSizes$/;"	s
ImGuiStorage	build/_deps/imgui-proj-src/imgui.h	/^struct ImGuiStorage$/;"	s
ImGuiStoragePair	build/_deps/imgui-proj-src/imgui.h	/^        ImGuiStoragePair(ImGuiID _key, float _val)  { key = _key; val_f = _val; }$/;"	f	struct:ImGuiStorage::ImGuiStoragePair
ImGuiStoragePair	build/_deps/imgui-proj-src/imgui.h	/^        ImGuiStoragePair(ImGuiID _key, int _val)    { key = _key; val_i = _val; }$/;"	f	struct:ImGuiStorage::ImGuiStoragePair
ImGuiStoragePair	build/_deps/imgui-proj-src/imgui.h	/^        ImGuiStoragePair(ImGuiID _key, void* _val)  { key = _key; val_p = _val; }$/;"	f	struct:ImGuiStorage::ImGuiStoragePair
ImGuiStoragePair	build/_deps/imgui-proj-src/imgui.h	/^    struct ImGuiStoragePair$/;"	s	struct:ImGuiStorage
ImGuiStyle	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiStyle::ImGuiStyle()$/;"	f	class:ImGuiStyle
ImGuiStyle	build/_deps/imgui-proj-src/imgui.h	/^struct ImGuiStyle$/;"	s
ImGuiStyleMod	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiStyleMod(ImGuiStyleVar idx, ImVec2 v)  { VarIdx = idx; BackupFloat[0] = v.x; BackupFloa/;"	f	struct:ImGuiStyleMod
ImGuiStyleMod	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiStyleMod(ImGuiStyleVar idx, float v)   { VarIdx = idx; BackupFloat[0] = v; }$/;"	f	struct:ImGuiStyleMod
ImGuiStyleMod	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiStyleMod(ImGuiStyleVar idx, int v)     { VarIdx = idx; BackupInt[0] = v; }$/;"	f	struct:ImGuiStyleMod
ImGuiStyleMod	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiStyleMod$/;"	s
ImGuiStyleVar	build/_deps/imgui-proj-src/imgui.h	/^typedef int ImGuiStyleVar;          \/\/ -> enum ImGuiStyleVar_        \/\/ Enum: A variable ide/;"	t	typeref:typename:int
ImGuiStyleVar_	build/_deps/imgui-proj-src/imgui.h	/^enum ImGuiStyleVar_$/;"	g
ImGuiStyleVar_Alpha	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiStyleVar_Alpha,               \/\/ float     Alpha$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ButtonTextAlign	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiStyleVar_ButtonTextAlign,     \/\/ ImVec2    ButtonTextAlign$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_COUNT	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiStyleVar_COUNT$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_CellPadding	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiStyleVar_CellPadding,         \/\/ ImVec2    CellPadding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ChildBorderSize	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiStyleVar_ChildBorderSize,     \/\/ float     ChildBorderSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ChildRounding	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiStyleVar_ChildRounding,       \/\/ float     ChildRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_DisabledAlpha	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiStyleVar_DisabledAlpha,       \/\/ float     DisabledAlpha$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_DockingSeparatorSize	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiStyleVar_DockingSeparatorSize,\/\/ float     DockingSeparatorSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_FrameBorderSize	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiStyleVar_FrameBorderSize,     \/\/ float     FrameBorderSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_FramePadding	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiStyleVar_FramePadding,        \/\/ ImVec2    FramePadding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_FrameRounding	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiStyleVar_FrameRounding,       \/\/ float     FrameRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_GrabMinSize	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiStyleVar_GrabMinSize,         \/\/ float     GrabMinSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_GrabRounding	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiStyleVar_GrabRounding,        \/\/ float     GrabRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_IndentSpacing	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiStyleVar_IndentSpacing,       \/\/ float     IndentSpacing$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ItemInnerSpacing	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiStyleVar_ItemInnerSpacing,    \/\/ ImVec2    ItemInnerSpacing$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ItemSpacing	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiStyleVar_ItemSpacing,         \/\/ ImVec2    ItemSpacing$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_PopupBorderSize	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiStyleVar_PopupBorderSize,     \/\/ float     PopupBorderSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_PopupRounding	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiStyleVar_PopupRounding,       \/\/ float     PopupRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ScrollbarRounding	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiStyleVar_ScrollbarRounding,   \/\/ float     ScrollbarRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ScrollbarSize	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiStyleVar_ScrollbarSize,       \/\/ float     ScrollbarSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_SelectableTextAlign	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiStyleVar_SelectableTextAlign, \/\/ ImVec2    SelectableTextAlign$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_SeparatorTextAlign	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiStyleVar_SeparatorTextAlign,  \/\/ ImVec2    SeparatorTextAlign$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_SeparatorTextBorderSize	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiStyleVar_SeparatorTextBorderSize,\/\/ float  SeparatorTextBorderSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_SeparatorTextPadding	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiStyleVar_SeparatorTextPadding,\/\/ ImVec2    SeparatorTextPadding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_TabBarBorderSize	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiStyleVar_TabBarBorderSize,    \/\/ float     TabBarBorderSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_TabRounding	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiStyleVar_TabRounding,         \/\/ float     TabRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_WindowBorderSize	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiStyleVar_WindowBorderSize,    \/\/ float     WindowBorderSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_WindowMinSize	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiStyleVar_WindowMinSize,       \/\/ ImVec2    WindowMinSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_WindowPadding	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiStyleVar_WindowPadding,       \/\/ ImVec2    WindowPadding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_WindowRounding	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiStyleVar_WindowRounding,      \/\/ float     WindowRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_WindowTitleAlign	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiStyleVar_WindowTitleAlign,    \/\/ ImVec2    WindowTitleAlign$/;"	e	enum:ImGuiStyleVar_
ImGuiTabBar	build/_deps/imgui-proj-src/imgui_internal.h	/^struct IMGUI_API ImGuiTabBar$/;"	s
ImGuiTabBar	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^ImGuiTabBar::ImGuiTabBar()$/;"	f	class:ImGuiTabBar
ImGuiTabBarFlags	build/_deps/imgui-proj-src/imgui.h	/^typedef int ImGuiTabBarFlags;       \/\/ -> enum ImGuiTabBarFlags_     \/\/ Flags: for BeginTabB/;"	t	typeref:typename:int
ImGuiTabBarFlagsPrivate_	build/_deps/imgui-proj-src/imgui_internal.h	/^enum ImGuiTabBarFlagsPrivate_$/;"	g
ImGuiTabBarFlags_	build/_deps/imgui-proj-src/imgui.h	/^enum ImGuiTabBarFlags_$/;"	g
ImGuiTabBarFlags_AutoSelectNewTabs	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTabBarFlags_AutoSelectNewTabs              = 1 << 1,   \/\/ Automatically select new ta/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_DockNode	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTabBarFlags_DockNode                   = 1 << 20,  \/\/ Part of a dock node [we don't u/;"	e	enum:ImGuiTabBarFlagsPrivate_
ImGuiTabBarFlags_FittingPolicyDefault_	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTabBarFlags_FittingPolicyDefault_          = ImGuiTabBarFlags_FittingPolicyResizeDown,$/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_FittingPolicyMask_	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTabBarFlags_FittingPolicyMask_             = ImGuiTabBarFlags_FittingPolicyResizeDown |/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_FittingPolicyResizeDown	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTabBarFlags_FittingPolicyResizeDown        = 1 << 6,   \/\/ Resize tabs when they don't/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_FittingPolicyScroll	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTabBarFlags_FittingPolicyScroll            = 1 << 7,   \/\/ Add scroll buttons when tab/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_IsFocused	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTabBarFlags_IsFocused                  = 1 << 21,$/;"	e	enum:ImGuiTabBarFlagsPrivate_
ImGuiTabBarFlags_NoCloseWithMiddleMouseButton	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTabBarFlags_NoCloseWithMiddleMouseButton   = 1 << 3,   \/\/ Disable behavior of closing/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_NoTabListScrollingButtons	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTabBarFlags_NoTabListScrollingButtons      = 1 << 4,   \/\/ Disable scrolling buttons (/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_NoTooltip	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTabBarFlags_NoTooltip                      = 1 << 5,   \/\/ Disable tooltips when hover/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_None	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTabBarFlags_None                           = 0,$/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_Reorderable	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTabBarFlags_Reorderable                    = 1 << 0,   \/\/ Allow manually dragging tab/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_SaveSettings	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTabBarFlags_SaveSettings               = 1 << 22,  \/\/ FIXME: Settings are handled by /;"	e	enum:ImGuiTabBarFlagsPrivate_
ImGuiTabBarFlags_TabListPopupButton	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTabBarFlags_TabListPopupButton             = 1 << 2,   \/\/ Disable buttons to open the/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarSection	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^    ImGuiTabBarSection() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiTabBarSection	file:
ImGuiTabBarSection	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^struct ImGuiTabBarSection$/;"	s	file:
ImGuiTabItem	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTabItem()      { memset(this, 0, sizeof(*this)); LastFrameVisible = LastFrameSelected =/;"	f	struct:ImGuiTabItem
ImGuiTabItem	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiTabItem$/;"	s
ImGuiTabItemFlags	build/_deps/imgui-proj-src/imgui.h	/^typedef int ImGuiTabItemFlags;      \/\/ -> enum ImGuiTabItemFlags_    \/\/ Flags: for BeginTabI/;"	t	typeref:typename:int
ImGuiTabItemFlagsPrivate_	build/_deps/imgui-proj-src/imgui_internal.h	/^enum ImGuiTabItemFlagsPrivate_$/;"	g
ImGuiTabItemFlags_	build/_deps/imgui-proj-src/imgui.h	/^enum ImGuiTabItemFlags_$/;"	g
ImGuiTabItemFlags_Button	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTabItemFlags_Button                    = 1 << 21,  \/\/ Used by TabItemButton, change t/;"	e	enum:ImGuiTabItemFlagsPrivate_
ImGuiTabItemFlags_Leading	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTabItemFlags_Leading                       = 1 << 6,   \/\/ Enforce the tab position to/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_NoAssumedClosure	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTabItemFlags_NoAssumedClosure              = 1 << 8,   \/\/ Tab is selected when trying/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_NoCloseButton	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTabItemFlags_NoCloseButton             = 1 << 20,  \/\/ Track whether p_open was set or/;"	e	enum:ImGuiTabItemFlagsPrivate_
ImGuiTabItemFlags_NoCloseWithMiddleMouseButton	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTabItemFlags_NoCloseWithMiddleMouseButton  = 1 << 2,   \/\/ Disable behavior of closing/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_NoPushId	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTabItemFlags_NoPushId                      = 1 << 3,   \/\/ Don't call PushID()\/PopID(/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_NoReorder	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTabItemFlags_NoReorder                     = 1 << 5,   \/\/ Disable reordering this tab/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_NoTooltip	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTabItemFlags_NoTooltip                     = 1 << 4,   \/\/ Disable tooltip for the giv/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_None	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTabItemFlags_None                          = 0,$/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_SectionMask_	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTabItemFlags_SectionMask_              = ImGuiTabItemFlags_Leading | ImGuiTabItemFlags_/;"	e	enum:ImGuiTabItemFlagsPrivate_
ImGuiTabItemFlags_SetSelected	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTabItemFlags_SetSelected                   = 1 << 1,   \/\/ Trigger flag to programmati/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_Trailing	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTabItemFlags_Trailing                      = 1 << 7,   \/\/ Enforce the tab position to/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_UnsavedDocument	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTabItemFlags_UnsavedDocument               = 1 << 0,   \/\/ Display a dot next to the t/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_Unsorted	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTabItemFlags_Unsorted                  = 1 << 22,  \/\/ [Docking] Trailing tabs with th/;"	e	enum:ImGuiTabItemFlagsPrivate_
ImGuiTable	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTable()                { memset(this, 0, sizeof(*this)); LastFrameActive = -1; }$/;"	f	struct:ImGuiTable
ImGuiTable	build/_deps/imgui-proj-src/imgui_internal.h	/^struct IMGUI_API ImGuiTable$/;"	s
ImGuiTableBgTarget	build/_deps/imgui-proj-src/imgui.h	/^typedef int ImGuiTableBgTarget;     \/\/ -> enum ImGuiTableBgTarget_   \/\/ Enum: A color target/;"	t	typeref:typename:int
ImGuiTableBgTarget_	build/_deps/imgui-proj-src/imgui.h	/^enum ImGuiTableBgTarget_$/;"	g
ImGuiTableBgTarget_CellBg	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableBgTarget_CellBg                   = 3,        \/\/ Set cell background color (top-/;"	e	enum:ImGuiTableBgTarget_
ImGuiTableBgTarget_None	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableBgTarget_None                     = 0,$/;"	e	enum:ImGuiTableBgTarget_
ImGuiTableBgTarget_RowBg0	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableBgTarget_RowBg0                   = 1,        \/\/ Set row background color 0 (gen/;"	e	enum:ImGuiTableBgTarget_
ImGuiTableBgTarget_RowBg1	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableBgTarget_RowBg1                   = 2,        \/\/ Set row background color 1 (gen/;"	e	enum:ImGuiTableBgTarget_
ImGuiTableCellData	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiTableCellData$/;"	s
ImGuiTableColumn	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTableColumn()$/;"	f	struct:ImGuiTableColumn
ImGuiTableColumn	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiTableColumn$/;"	s
ImGuiTableColumnFlags	build/_deps/imgui-proj-src/imgui.h	/^typedef int ImGuiTableColumnFlags;  \/\/ -> enum ImGuiTableColumnFlags_\/\/ Flags: For TableSetu/;"	t	typeref:typename:int
ImGuiTableColumnFlags_	build/_deps/imgui-proj-src/imgui.h	/^enum ImGuiTableColumnFlags_$/;"	g
ImGuiTableColumnFlags_AngledHeader	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableColumnFlags_AngledHeader          = 1 << 18,  \/\/ TableHeadersRow() will submit a/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_DefaultHide	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableColumnFlags_DefaultHide           = 1 << 1,   \/\/ Default as a hidden\/disabled c/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_DefaultSort	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableColumnFlags_DefaultSort           = 1 << 2,   \/\/ Default as a sorting column.$/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_Disabled	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableColumnFlags_Disabled              = 1 << 0,   \/\/ Overriding\/master disable flag/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_IndentDisable	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableColumnFlags_IndentDisable         = 1 << 17,  \/\/ Ignore current Indent value whe/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_IndentEnable	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableColumnFlags_IndentEnable          = 1 << 16,  \/\/ Use current Indent value when e/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_IndentMask_	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableColumnFlags_IndentMask_           = ImGuiTableColumnFlags_IndentEnable | ImGuiTabl/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_IsEnabled	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableColumnFlags_IsEnabled             = 1 << 24,  \/\/ Status: is enabled == not hidde/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_IsHovered	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableColumnFlags_IsHovered             = 1 << 27,  \/\/ Status: is hovered by mouse$/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_IsSorted	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableColumnFlags_IsSorted              = 1 << 26,  \/\/ Status: is currently part of th/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_IsVisible	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableColumnFlags_IsVisible             = 1 << 25,  \/\/ Status: is visible == is enable/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_NoClip	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableColumnFlags_NoClip                = 1 << 8,   \/\/ Disable clipping for this colum/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_NoDirectResize_	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableColumnFlags_NoDirectResize_       = 1 << 30,  \/\/ [Internal] Disable user resizin/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_NoHeaderLabel	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableColumnFlags_NoHeaderLabel         = 1 << 12,  \/\/ TableHeadersRow() will not subm/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_NoHeaderWidth	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableColumnFlags_NoHeaderWidth         = 1 << 13,  \/\/ Disable header text width contr/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_NoHide	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableColumnFlags_NoHide                = 1 << 7,   \/\/ Disable ability to hide\/disabl/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_NoReorder	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableColumnFlags_NoReorder             = 1 << 6,   \/\/ Disable manual reordering this /;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_NoResize	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableColumnFlags_NoResize              = 1 << 5,   \/\/ Disable manual resizing.$/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_NoSort	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableColumnFlags_NoSort                = 1 << 9,   \/\/ Disable ability to sort on this/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_NoSortAscending	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableColumnFlags_NoSortAscending       = 1 << 10,  \/\/ Disable ability to sort in the /;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_NoSortDescending	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableColumnFlags_NoSortDescending      = 1 << 11,  \/\/ Disable ability to sort in the /;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_None	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableColumnFlags_None                  = 0,$/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_PreferSortAscending	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableColumnFlags_PreferSortAscending   = 1 << 14,  \/\/ Make the initial sort direction/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_PreferSortDescending	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableColumnFlags_PreferSortDescending  = 1 << 15,  \/\/ Make the initial sort direction/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_StatusMask_	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableColumnFlags_StatusMask_           = ImGuiTableColumnFlags_IsEnabled | ImGuiTableCo/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_WidthFixed	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableColumnFlags_WidthFixed            = 1 << 4,   \/\/ Column will not stretch. Prefer/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_WidthMask_	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableColumnFlags_WidthMask_            = ImGuiTableColumnFlags_WidthStretch | ImGuiTabl/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_WidthStretch	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableColumnFlags_WidthStretch          = 1 << 3,   \/\/ Column will stretch. Preferable/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnIdx	build/_deps/imgui-proj-src/imgui_internal.h	/^typedef ImS16 ImGuiTableColumnIdx;$/;"	t	typeref:typename:ImS16
ImGuiTableColumnSettings	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTableColumnSettings()$/;"	f	struct:ImGuiTableColumnSettings
ImGuiTableColumnSettings	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiTableColumnSettings$/;"	s
ImGuiTableColumnSortSpecs	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableColumnSortSpecs() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiTableColumnSortSpecs
ImGuiTableColumnSortSpecs	build/_deps/imgui-proj-src/imgui.h	/^struct ImGuiTableColumnSortSpecs$/;"	s
ImGuiTableDrawChannelIdx	build/_deps/imgui-proj-src/imgui_internal.h	/^typedef ImU16 ImGuiTableDrawChannelIdx;$/;"	t	typeref:typename:ImU16
ImGuiTableFlags	build/_deps/imgui-proj-src/imgui.h	/^typedef int ImGuiTableFlags;        \/\/ -> enum ImGuiTableFlags_      \/\/ Flags: For BeginTabl/;"	t	typeref:typename:int
ImGuiTableFlags_	build/_deps/imgui-proj-src/imgui.h	/^enum ImGuiTableFlags_$/;"	g
ImGuiTableFlags_Borders	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableFlags_Borders                    = ImGuiTableFlags_BordersInner | ImGuiTableFlags_/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_BordersH	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableFlags_BordersH                   = ImGuiTableFlags_BordersInnerH | ImGuiTableFlags/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_BordersInner	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableFlags_BordersInner               = ImGuiTableFlags_BordersInnerV | ImGuiTableFlags/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_BordersInnerH	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableFlags_BordersInnerH              = 1 << 7,   \/\/ Draw horizontal borders between /;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_BordersInnerV	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableFlags_BordersInnerV              = 1 << 9,   \/\/ Draw vertical borders between co/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_BordersOuter	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableFlags_BordersOuter               = ImGuiTableFlags_BordersOuterV | ImGuiTableFlags/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_BordersOuterH	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableFlags_BordersOuterH              = 1 << 8,   \/\/ Draw horizontal borders at the t/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_BordersOuterV	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableFlags_BordersOuterV              = 1 << 10,  \/\/ Draw vertical borders on the lef/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_BordersV	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableFlags_BordersV                   = ImGuiTableFlags_BordersInnerV | ImGuiTableFlags/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_ContextMenuInBody	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableFlags_ContextMenuInBody          = 1 << 5,   \/\/ Right-click on columns body\/con/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_Hideable	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableFlags_Hideable                   = 1 << 2,   \/\/ Enable hiding\/disabling columns/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_HighlightHoveredColumn	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableFlags_HighlightHoveredColumn     = 1 << 28,  \/\/ Highlight column headers when ho/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_NoBordersInBody	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableFlags_NoBordersInBody            = 1 << 11,  \/\/ [ALPHA] Disable vertical borders/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_NoBordersInBodyUntilResize	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableFlags_NoBordersInBodyUntilResize = 1 << 12,  \/\/ [ALPHA] Disable vertical borders/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_NoClip	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableFlags_NoClip                     = 1 << 20,  \/\/ Disable clipping rectangle for e/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_NoHostExtendX	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableFlags_NoHostExtendX              = 1 << 16,  \/\/ Make outer width auto-fit to col/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_NoHostExtendY	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableFlags_NoHostExtendY              = 1 << 17,  \/\/ Make outer height stop exactly a/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_NoKeepColumnsVisible	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableFlags_NoKeepColumnsVisible       = 1 << 18,  \/\/ Disable keeping column always mi/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_NoPadInnerX	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableFlags_NoPadInnerX                = 1 << 23,  \/\/ Disable inner padding between co/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_NoPadOuterX	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableFlags_NoPadOuterX                = 1 << 22,  \/\/ Default if BordersOuterV is off./;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_NoSavedSettings	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableFlags_NoSavedSettings            = 1 << 4,   \/\/ Disable persisting columns order/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_None	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableFlags_None                       = 0,$/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_PadOuterX	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableFlags_PadOuterX                  = 1 << 21,  \/\/ Default if BordersOuterV is on. /;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_PreciseWidths	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableFlags_PreciseWidths              = 1 << 19,  \/\/ Disable distributing remainder w/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_Reorderable	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableFlags_Reorderable                = 1 << 1,   \/\/ Enable reordering columns in hea/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_Resizable	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableFlags_Resizable                  = 1 << 0,   \/\/ Enable resizing columns.$/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_RowBg	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableFlags_RowBg                      = 1 << 6,   \/\/ Set each RowBg color with ImGuiC/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_ScrollX	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableFlags_ScrollX                    = 1 << 24,  \/\/ Enable horizontal scrolling. Req/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_ScrollY	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableFlags_ScrollY                    = 1 << 25,  \/\/ Enable vertical scrolling. Requi/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_SizingFixedFit	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableFlags_SizingFixedFit             = 1 << 13,  \/\/ Columns default to _WidthFixed o/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_SizingFixedSame	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableFlags_SizingFixedSame            = 2 << 13,  \/\/ Columns default to _WidthFixed o/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_SizingMask_	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableFlags_SizingMask_                = ImGuiTableFlags_SizingFixedFit | ImGuiTableFlag/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_SizingStretchProp	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableFlags_SizingStretchProp          = 3 << 13,  \/\/ Columns default to _WidthStretch/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_SizingStretchSame	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableFlags_SizingStretchSame          = 4 << 13,  \/\/ Columns default to _WidthStretch/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_SortMulti	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableFlags_SortMulti                  = 1 << 26,  \/\/ Hold shift when clicking headers/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_SortTristate	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableFlags_SortTristate               = 1 << 27,  \/\/ Allow no sorting, disable defaul/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_Sortable	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableFlags_Sortable                   = 1 << 3,   \/\/ Enable sorting. Call TableGetSor/;"	e	enum:ImGuiTableFlags_
ImGuiTableInstanceData	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTableInstanceData()    { TableInstanceID = 0; LastOuterHeight = LastTopHeadersRowHeight/;"	f	struct:ImGuiTableInstanceData
ImGuiTableInstanceData	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiTableInstanceData$/;"	s
ImGuiTableRowFlags	build/_deps/imgui-proj-src/imgui.h	/^typedef int ImGuiTableRowFlags;     \/\/ -> enum ImGuiTableRowFlags_   \/\/ Flags: For TableNext/;"	t	typeref:typename:int
ImGuiTableRowFlags_	build/_deps/imgui-proj-src/imgui.h	/^enum ImGuiTableRowFlags_$/;"	g
ImGuiTableRowFlags_Headers	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableRowFlags_Headers                  = 1 << 0,   \/\/ Identify header row (set defaul/;"	e	enum:ImGuiTableRowFlags_
ImGuiTableRowFlags_None	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableRowFlags_None                     = 0,$/;"	e	enum:ImGuiTableRowFlags_
ImGuiTableSettings	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTableSettings()        { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiTableSettings
ImGuiTableSettings	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiTableSettings$/;"	s
ImGuiTableSortSpecs	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTableSortSpecs()       { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiTableSortSpecs
ImGuiTableSortSpecs	build/_deps/imgui-proj-src/imgui.h	/^struct ImGuiTableSortSpecs$/;"	s
ImGuiTableTempData	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTableTempData()        { memset(this, 0, sizeof(*this)); LastTimeActive = -1.0f; }$/;"	f	struct:ImGuiTableTempData
ImGuiTableTempData	build/_deps/imgui-proj-src/imgui_internal.h	/^struct IMGUI_API ImGuiTableTempData$/;"	s
ImGuiTextBuffer	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTextBuffer()   { }$/;"	f	struct:ImGuiTextBuffer
ImGuiTextBuffer	build/_deps/imgui-proj-src/imgui.h	/^struct ImGuiTextBuffer$/;"	s
ImGuiTextFilter	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiTextFilter::ImGuiTextFilter(const char* default_filter) \/\/-V1077$/;"	f	class:ImGuiTextFilter
ImGuiTextFilter	build/_deps/imgui-proj-src/imgui.h	/^struct ImGuiTextFilter$/;"	s
ImGuiTextFlags	build/_deps/imgui-proj-src/imgui_internal.h	/^typedef int ImGuiTextFlags;             \/\/ -> enum ImGuiTextFlags_          \/\/ Flags: for Te/;"	t	typeref:typename:int
ImGuiTextFlags_	build/_deps/imgui-proj-src/imgui_internal.h	/^enum ImGuiTextFlags_$/;"	g
ImGuiTextFlags_NoWidthForLargeClippedText	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTextFlags_NoWidthForLargeClippedText   = 1 << 0,$/;"	e	enum:ImGuiTextFlags_
ImGuiTextFlags_None	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTextFlags_None                         = 0,$/;"	e	enum:ImGuiTextFlags_
ImGuiTextIndex	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiTextIndex$/;"	s
ImGuiTextRange	build/_deps/imgui-proj-src/imgui.h	/^        ImGuiTextRange()                                { b = e = NULL; }$/;"	f	struct:ImGuiTextFilter::ImGuiTextRange
ImGuiTextRange	build/_deps/imgui-proj-src/imgui.h	/^        ImGuiTextRange(const char* _b, const char* _e)  { b = _b; e = _e; }$/;"	f	struct:ImGuiTextFilter::ImGuiTextRange
ImGuiTextRange	build/_deps/imgui-proj-src/imgui.h	/^    struct ImGuiTextRange$/;"	s	struct:ImGuiTextFilter
ImGuiTooltipFlags	build/_deps/imgui-proj-src/imgui_internal.h	/^typedef int ImGuiTooltipFlags;          \/\/ -> enum ImGuiTooltipFlags_       \/\/ Flags: for Be/;"	t	typeref:typename:int
ImGuiTooltipFlags_	build/_deps/imgui-proj-src/imgui_internal.h	/^enum ImGuiTooltipFlags_$/;"	g
ImGuiTooltipFlags_None	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTooltipFlags_None                      = 0,$/;"	e	enum:ImGuiTooltipFlags_
ImGuiTooltipFlags_OverridePrevious	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTooltipFlags_OverridePrevious          = 1 << 1,   \/\/ Clear\/ignore previously submit/;"	e	enum:ImGuiTooltipFlags_
ImGuiTreeNodeFlags	build/_deps/imgui-proj-src/imgui.h	/^typedef int ImGuiTreeNodeFlags;     \/\/ -> enum ImGuiTreeNodeFlags_   \/\/ Flags: for TreeNode(/;"	t	typeref:typename:int
ImGuiTreeNodeFlagsPrivate_	build/_deps/imgui-proj-src/imgui_internal.h	/^enum ImGuiTreeNodeFlagsPrivate_$/;"	g
ImGuiTreeNodeFlags_	build/_deps/imgui-proj-src/imgui.h	/^enum ImGuiTreeNodeFlags_$/;"	g
ImGuiTreeNodeFlags_AllowItemOverlap	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTreeNodeFlags_AllowItemOverlap     = ImGuiTreeNodeFlags_AllowOverlap,  \/\/ Renamed in /;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_AllowOverlap	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTreeNodeFlags_AllowOverlap         = 1 << 2,   \/\/ Hit testing to allow subsequent wid/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_Bullet	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTreeNodeFlags_Bullet               = 1 << 9,   \/\/ Display a bullet instead of arrow. /;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_ClipLabelForTrailingButton	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTreeNodeFlags_ClipLabelForTrailingButton = 1 << 20,$/;"	e	enum:ImGuiTreeNodeFlagsPrivate_
ImGuiTreeNodeFlags_CollapsingHeader	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTreeNodeFlags_CollapsingHeader     = ImGuiTreeNodeFlags_Framed | ImGuiTreeNodeFlags_NoT/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_DefaultOpen	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTreeNodeFlags_DefaultOpen          = 1 << 5,   \/\/ Default node to be open$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_FramePadding	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTreeNodeFlags_FramePadding         = 1 << 10,  \/\/ Use FramePadding (even for an unfra/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_Framed	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTreeNodeFlags_Framed               = 1 << 1,   \/\/ Draw frame with background (e.g. fo/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_Leaf	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTreeNodeFlags_Leaf                 = 1 << 8,   \/\/ No collapsing, no arrow (use as a c/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_NavLeftJumpsBackHere	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTreeNodeFlags_NavLeftJumpsBackHere = 1 << 14,  \/\/ (WIP) Nav: left direction may move /;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_NoAutoOpenOnLog	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTreeNodeFlags_NoAutoOpenOnLog      = 1 << 4,   \/\/ Don't automatically and temporarily/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_NoTreePushOnOpen	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTreeNodeFlags_NoTreePushOnOpen     = 1 << 3,   \/\/ Don't do a TreePush() when open (e./;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_None	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTreeNodeFlags_None                 = 0,$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_OpenOnArrow	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTreeNodeFlags_OpenOnArrow          = 1 << 7,   \/\/ Only open when clicking on the arro/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_OpenOnDoubleClick	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTreeNodeFlags_OpenOnDoubleClick    = 1 << 6,   \/\/ Need double-click to open node$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_Selected	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTreeNodeFlags_Selected             = 1 << 0,   \/\/ Draw as selected$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_SpanAllColumns	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTreeNodeFlags_SpanAllColumns       = 1 << 13,  \/\/ Frame will span all columns of its /;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_SpanAvailWidth	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTreeNodeFlags_SpanAvailWidth       = 1 << 11,  \/\/ Extend hit box to the right-most ed/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_SpanFullWidth	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTreeNodeFlags_SpanFullWidth        = 1 << 12,  \/\/ Extend hit box to the left-most and/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_UpsideDownArrow	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTreeNodeFlags_UpsideDownArrow            = 1 << 21,\/\/ (FIXME-WIP) Turn Down arrow int/;"	e	enum:ImGuiTreeNodeFlagsPrivate_
ImGuiTypingSelectFlags	build/_deps/imgui-proj-src/imgui_internal.h	/^typedef int ImGuiTypingSelectFlags;     \/\/ -> enum ImGuiTypingSelectFlags_  \/\/ Flags: for Ge/;"	t	typeref:typename:int
ImGuiTypingSelectFlags_	build/_deps/imgui-proj-src/imgui_internal.h	/^enum ImGuiTypingSelectFlags_$/;"	g
ImGuiTypingSelectFlags_AllowBackspace	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTypingSelectFlags_AllowBackspace       = 1 << 0,   \/\/ Backspace to delete character i/;"	e	enum:ImGuiTypingSelectFlags_
ImGuiTypingSelectFlags_AllowSingleCharMode	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTypingSelectFlags_AllowSingleCharMode  = 1 << 1,   \/\/ Allow "single char" search mode/;"	e	enum:ImGuiTypingSelectFlags_
ImGuiTypingSelectFlags_None	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTypingSelectFlags_None                 = 0,$/;"	e	enum:ImGuiTypingSelectFlags_
ImGuiTypingSelectRequest	build/_deps/imgui-proj-src/imgui_internal.h	/^struct IMGUI_API ImGuiTypingSelectRequest$/;"	s
ImGuiTypingSelectState	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTypingSelectState() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiTypingSelectState
ImGuiTypingSelectState	build/_deps/imgui-proj-src/imgui_internal.h	/^struct IMGUI_API ImGuiTypingSelectState$/;"	s
ImGuiViewport	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiViewport()     { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiViewport
ImGuiViewport	build/_deps/imgui-proj-src/imgui.h	/^struct ImGuiViewport$/;"	s
ImGuiViewportFlags	build/_deps/imgui-proj-src/imgui.h	/^typedef int ImGuiViewportFlags;     \/\/ -> enum ImGuiViewportFlags_   \/\/ Flags: for ImGuiView/;"	t	typeref:typename:int
ImGuiViewportFlags_	build/_deps/imgui-proj-src/imgui.h	/^enum ImGuiViewportFlags_$/;"	g
ImGuiViewportFlags_CanHostOtherWindows	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiViewportFlags_CanHostOtherWindows      = 1 << 11,  \/\/ Viewport can host multiple imgu/;"	e	enum:ImGuiViewportFlags_
ImGuiViewportFlags_IsFocused	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiViewportFlags_IsFocused                = 1 << 13,  \/\/ Platform Window: Window is focu/;"	e	enum:ImGuiViewportFlags_
ImGuiViewportFlags_IsMinimized	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiViewportFlags_IsMinimized              = 1 << 12,  \/\/ Platform Window: Window is mini/;"	e	enum:ImGuiViewportFlags_
ImGuiViewportFlags_IsPlatformMonitor	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiViewportFlags_IsPlatformMonitor        = 1 << 1,   \/\/ Represent a Platform Monitor (u/;"	e	enum:ImGuiViewportFlags_
ImGuiViewportFlags_IsPlatformWindow	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiViewportFlags_IsPlatformWindow         = 1 << 0,   \/\/ Represent a Platform Window$/;"	e	enum:ImGuiViewportFlags_
ImGuiViewportFlags_NoAutoMerge	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiViewportFlags_NoAutoMerge              = 1 << 9,   \/\/ Platform Window: Avoid merging /;"	e	enum:ImGuiViewportFlags_
ImGuiViewportFlags_NoDecoration	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiViewportFlags_NoDecoration             = 1 << 3,   \/\/ Platform Window: Disable platfo/;"	e	enum:ImGuiViewportFlags_
ImGuiViewportFlags_NoFocusOnAppearing	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiViewportFlags_NoFocusOnAppearing       = 1 << 5,   \/\/ Platform Window: Don't take foc/;"	e	enum:ImGuiViewportFlags_
ImGuiViewportFlags_NoFocusOnClick	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiViewportFlags_NoFocusOnClick           = 1 << 6,   \/\/ Platform Window: Don't take foc/;"	e	enum:ImGuiViewportFlags_
ImGuiViewportFlags_NoInputs	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiViewportFlags_NoInputs                 = 1 << 7,   \/\/ Platform Window: Make mouse pas/;"	e	enum:ImGuiViewportFlags_
ImGuiViewportFlags_NoRendererClear	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiViewportFlags_NoRendererClear          = 1 << 8,   \/\/ Platform Window: Renderer doesn/;"	e	enum:ImGuiViewportFlags_
ImGuiViewportFlags_NoTaskBarIcon	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiViewportFlags_NoTaskBarIcon            = 1 << 4,   \/\/ Platform Window: Disable platfo/;"	e	enum:ImGuiViewportFlags_
ImGuiViewportFlags_None	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiViewportFlags_None                     = 0,$/;"	e	enum:ImGuiViewportFlags_
ImGuiViewportFlags_OwnedByApp	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiViewportFlags_OwnedByApp               = 1 << 2,   \/\/ Platform Window: Was created\/m/;"	e	enum:ImGuiViewportFlags_
ImGuiViewportFlags_TopMost	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiViewportFlags_TopMost                  = 1 << 10,  \/\/ Platform Window: Display on top/;"	e	enum:ImGuiViewportFlags_
ImGuiViewportP	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiViewportP()                    { Window = NULL; Idx = -1; LastFrameActive = BgFgDrawLis/;"	f	struct:ImGuiViewportP
ImGuiViewportP	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiViewportP : public ImGuiViewport$/;"	s
ImGuiWindow	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiWindow::ImGuiWindow(ImGuiContext* ctx, const char* name) : DrawListInst(NULL)$/;"	f	class:ImGuiWindow
ImGuiWindow	build/_deps/imgui-proj-src/imgui_internal.h	/^struct IMGUI_API ImGuiWindow$/;"	s
ImGuiWindowClass	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiWindowClass() { memset(this, 0, sizeof(*this)); ParentViewportId = (ImGuiID)-1; Docking/;"	f	struct:ImGuiWindowClass
ImGuiWindowClass	build/_deps/imgui-proj-src/imgui.h	/^struct ImGuiWindowClass$/;"	s
ImGuiWindowDockStyle	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiWindowDockStyle$/;"	s
ImGuiWindowDockStyleCol	build/_deps/imgui-proj-src/imgui_internal.h	/^enum ImGuiWindowDockStyleCol$/;"	g
ImGuiWindowDockStyleCol_COUNT	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiWindowDockStyleCol_COUNT$/;"	e	enum:ImGuiWindowDockStyleCol
ImGuiWindowDockStyleCol_Tab	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiWindowDockStyleCol_Tab,$/;"	e	enum:ImGuiWindowDockStyleCol
ImGuiWindowDockStyleCol_TabActive	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiWindowDockStyleCol_TabActive,$/;"	e	enum:ImGuiWindowDockStyleCol
ImGuiWindowDockStyleCol_TabHovered	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiWindowDockStyleCol_TabHovered,$/;"	e	enum:ImGuiWindowDockStyleCol
ImGuiWindowDockStyleCol_TabUnfocused	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiWindowDockStyleCol_TabUnfocused,$/;"	e	enum:ImGuiWindowDockStyleCol
ImGuiWindowDockStyleCol_TabUnfocusedActive	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiWindowDockStyleCol_TabUnfocusedActive,$/;"	e	enum:ImGuiWindowDockStyleCol
ImGuiWindowDockStyleCol_Text	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiWindowDockStyleCol_Text,$/;"	e	enum:ImGuiWindowDockStyleCol
ImGuiWindowFlags	build/_deps/imgui-proj-src/imgui.h	/^typedef int ImGuiWindowFlags;       \/\/ -> enum ImGuiWindowFlags_     \/\/ Flags: for Begin(), /;"	t	typeref:typename:int
ImGuiWindowFlags_	build/_deps/imgui-proj-src/imgui.h	/^enum ImGuiWindowFlags_$/;"	g
ImGuiWindowFlags_AlwaysAutoResize	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiWindowFlags_AlwaysAutoResize       = 1 << 6,   \/\/ Resize every window to its content /;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_AlwaysHorizontalScrollbar	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiWindowFlags_AlwaysHorizontalScrollbar=1<< 15,  \/\/ Always show horizontal scrollbar (e/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_AlwaysUseWindowPadding	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiWindowFlags_AlwaysUseWindowPadding = 1 << 30,  \/\/ Obsoleted in 1.90: Use ImGuiChildFl/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_AlwaysVerticalScrollbar	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiWindowFlags_AlwaysVerticalScrollbar= 1 << 14,  \/\/ Always show vertical scrollbar (eve/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_ChildMenu	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiWindowFlags_ChildMenu              = 1 << 28,  \/\/ Don't use! For internal use by Begi/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_ChildWindow	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiWindowFlags_ChildWindow            = 1 << 24,  \/\/ Don't use! For internal use by Begi/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_DockNodeHost	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiWindowFlags_DockNodeHost           = 1 << 29,  \/\/ Don't use! For internal use by Begi/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_HorizontalScrollbar	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiWindowFlags_HorizontalScrollbar    = 1 << 11,  \/\/ Allow horizontal scrollbar to appea/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_MenuBar	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiWindowFlags_MenuBar                = 1 << 10,  \/\/ Has a menu-bar$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_Modal	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiWindowFlags_Modal                  = 1 << 27,  \/\/ Don't use! For internal use by Begi/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NavFlattened	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiWindowFlags_NavFlattened           = 1 << 23,  \/\/ [BETA] On child window: share focus/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoBackground	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiWindowFlags_NoBackground           = 1 << 7,   \/\/ Disable drawing background color (W/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoBringToFrontOnFocus	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiWindowFlags_NoBringToFrontOnFocus  = 1 << 13,  \/\/ Disable bringing window to front wh/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoCollapse	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiWindowFlags_NoCollapse             = 1 << 5,   \/\/ Disable user collapsing window by d/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoDecoration	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiWindowFlags_NoDecoration           = ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoR/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoDocking	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiWindowFlags_NoDocking              = 1 << 19,  \/\/ Disable docking of this window$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoFocusOnAppearing	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiWindowFlags_NoFocusOnAppearing     = 1 << 12,  \/\/ Disable taking focus when transitio/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoInputs	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiWindowFlags_NoInputs               = ImGuiWindowFlags_NoMouseInputs | ImGuiWindowFlags_/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoMouseInputs	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiWindowFlags_NoMouseInputs          = 1 << 9,   \/\/ Disable catching mouse, hovering te/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoMove	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiWindowFlags_NoMove                 = 1 << 2,   \/\/ Disable user moving the window$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoNav	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiWindowFlags_NoNav                  = ImGuiWindowFlags_NoNavInputs | ImGuiWindowFlags_No/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoNavFocus	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiWindowFlags_NoNavFocus             = 1 << 17,  \/\/ No focusing toward this window with/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoNavInputs	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiWindowFlags_NoNavInputs            = 1 << 16,  \/\/ No gamepad\/keyboard navigation wit/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoResize	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiWindowFlags_NoResize               = 1 << 1,   \/\/ Disable user resizing with the lowe/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoSavedSettings	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiWindowFlags_NoSavedSettings        = 1 << 8,   \/\/ Never load\/save settings in .ini f/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoScrollWithMouse	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiWindowFlags_NoScrollWithMouse      = 1 << 4,   \/\/ Disable user vertically scrolling w/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoScrollbar	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiWindowFlags_NoScrollbar            = 1 << 3,   \/\/ Disable scrollbars (window can stil/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoTitleBar	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiWindowFlags_NoTitleBar             = 1 << 0,   \/\/ Disable title-bar$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_None	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiWindowFlags_None                   = 0,$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_Popup	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiWindowFlags_Popup                  = 1 << 26,  \/\/ Don't use! For internal use by Begi/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_Tooltip	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiWindowFlags_Tooltip                = 1 << 25,  \/\/ Don't use! For internal use by Begi/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_UnsavedDocument	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiWindowFlags_UnsavedDocument        = 1 << 18,  \/\/ Display a dot next to the title. Wh/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowSettings	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiWindowSettings()       { memset(this, 0, sizeof(*this)); DockOrder = -1; }$/;"	f	struct:ImGuiWindowSettings
ImGuiWindowSettings	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiWindowSettings$/;"	s
ImGuiWindowStackData	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiWindowStackData$/;"	s
ImGuiWindowTempData	build/_deps/imgui-proj-src/imgui_internal.h	/^struct IMGUI_API ImGuiWindowTempData$/;"	s
ImGui_ImplAllegro5_CreateDeviceObjects	build/_deps/imgui-proj-src/backends/imgui_impl_allegro5.cpp	/^bool ImGui_ImplAllegro5_CreateDeviceObjects()$/;"	f	typeref:typename:bool
ImGui_ImplAllegro5_Data	build/_deps/imgui-proj-src/backends/imgui_impl_allegro5.cpp	/^    ImGui_ImplAllegro5_Data()   { memset((void*)this, 0, sizeof(*this)); }$/;"	f	struct:ImGui_ImplAllegro5_Data	file:
ImGui_ImplAllegro5_Data	build/_deps/imgui-proj-src/backends/imgui_impl_allegro5.cpp	/^struct ImGui_ImplAllegro5_Data$/;"	s	file:
ImGui_ImplAllegro5_GetBackendData	build/_deps/imgui-proj-src/backends/imgui_impl_allegro5.cpp	/^static ImGui_ImplAllegro5_Data* ImGui_ImplAllegro5_GetBackendData()     { return ImGui::GetCurre/;"	f	typeref:typename:ImGui_ImplAllegro5_Data *	file:
ImGui_ImplAllegro5_GetClipboardText	build/_deps/imgui-proj-src/backends/imgui_impl_allegro5.cpp	/^static const char* ImGui_ImplAllegro5_GetClipboardText(void*)$/;"	f	typeref:typename:const char *	file:
ImGui_ImplAllegro5_Init	build/_deps/imgui-proj-src/backends/imgui_impl_allegro5.cpp	/^bool ImGui_ImplAllegro5_Init(ALLEGRO_DISPLAY* display)$/;"	f	typeref:typename:bool
ImGui_ImplAllegro5_InvalidateDeviceObjects	build/_deps/imgui-proj-src/backends/imgui_impl_allegro5.cpp	/^void ImGui_ImplAllegro5_InvalidateDeviceObjects()$/;"	f	typeref:typename:void
ImGui_ImplAllegro5_KeyCodeToImGuiKey	build/_deps/imgui-proj-src/backends/imgui_impl_allegro5.cpp	/^static ImGuiKey ImGui_ImplAllegro5_KeyCodeToImGuiKey(int key_code)$/;"	f	typeref:typename:ImGuiKey	file:
ImGui_ImplAllegro5_NewFrame	build/_deps/imgui-proj-src/backends/imgui_impl_allegro5.cpp	/^void ImGui_ImplAllegro5_NewFrame()$/;"	f	typeref:typename:void
ImGui_ImplAllegro5_ProcessEvent	build/_deps/imgui-proj-src/backends/imgui_impl_allegro5.cpp	/^bool ImGui_ImplAllegro5_ProcessEvent(ALLEGRO_EVENT* ev)$/;"	f	typeref:typename:bool
ImGui_ImplAllegro5_RenderDrawData	build/_deps/imgui-proj-src/backends/imgui_impl_allegro5.cpp	/^void ImGui_ImplAllegro5_RenderDrawData(ImDrawData* draw_data)$/;"	f	typeref:typename:void
ImGui_ImplAllegro5_SetClipboardText	build/_deps/imgui-proj-src/backends/imgui_impl_allegro5.cpp	/^static void ImGui_ImplAllegro5_SetClipboardText(void*, const char* text)$/;"	f	typeref:typename:void	file:
ImGui_ImplAllegro5_SetupRenderState	build/_deps/imgui-proj-src/backends/imgui_impl_allegro5.cpp	/^static void ImGui_ImplAllegro5_SetupRenderState(ImDrawData* draw_data)$/;"	f	typeref:typename:void	file:
ImGui_ImplAllegro5_Shutdown	build/_deps/imgui-proj-src/backends/imgui_impl_allegro5.cpp	/^void ImGui_ImplAllegro5_Shutdown()$/;"	f	typeref:typename:void
ImGui_ImplAllegro5_UpdateKeyModifiers	build/_deps/imgui-proj-src/backends/imgui_impl_allegro5.cpp	/^static void ImGui_ImplAllegro5_UpdateKeyModifiers()$/;"	f	typeref:typename:void	file:
ImGui_ImplAllegro5_UpdateMouseCursor	build/_deps/imgui-proj-src/backends/imgui_impl_allegro5.cpp	/^static void ImGui_ImplAllegro5_UpdateMouseCursor()$/;"	f	typeref:typename:void	file:
ImGui_ImplAndroid_HandleInputEvent	build/_deps/imgui-proj-src/backends/imgui_impl_android.cpp	/^int32_t ImGui_ImplAndroid_HandleInputEvent(const AInputEvent* input_event)$/;"	f	typeref:typename:int32_t
ImGui_ImplAndroid_Init	build/_deps/imgui-proj-src/backends/imgui_impl_android.cpp	/^bool ImGui_ImplAndroid_Init(ANativeWindow* window)$/;"	f	typeref:typename:bool
ImGui_ImplAndroid_KeyCodeToImGuiKey	build/_deps/imgui-proj-src/backends/imgui_impl_android.cpp	/^static ImGuiKey ImGui_ImplAndroid_KeyCodeToImGuiKey(int32_t key_code)$/;"	f	typeref:typename:ImGuiKey	file:
ImGui_ImplAndroid_NewFrame	build/_deps/imgui-proj-src/backends/imgui_impl_android.cpp	/^void ImGui_ImplAndroid_NewFrame()$/;"	f	typeref:typename:void
ImGui_ImplAndroid_Shutdown	build/_deps/imgui-proj-src/backends/imgui_impl_android.cpp	/^void ImGui_ImplAndroid_Shutdown()$/;"	f	typeref:typename:void
ImGui_ImplDX10_CreateDeviceObjects	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^bool    ImGui_ImplDX10_CreateDeviceObjects()$/;"	f	typeref:typename:bool
ImGui_ImplDX10_CreateFontsTexture	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^static void ImGui_ImplDX10_CreateFontsTexture()$/;"	f	typeref:typename:void	file:
ImGui_ImplDX10_CreateWindow	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^static void ImGui_ImplDX10_CreateWindow(ImGuiViewport* viewport)$/;"	f	typeref:typename:void	file:
ImGui_ImplDX10_Data	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^    ImGui_ImplDX10_Data()       { memset((void*)this, 0, sizeof(*this)); VertexBufferSize = 5000/;"	f	struct:ImGui_ImplDX10_Data	file:
ImGui_ImplDX10_Data	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^struct ImGui_ImplDX10_Data$/;"	s	file:
ImGui_ImplDX10_DestroyWindow	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^static void ImGui_ImplDX10_DestroyWindow(ImGuiViewport* viewport)$/;"	f	typeref:typename:void	file:
ImGui_ImplDX10_GetBackendData	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^static ImGui_ImplDX10_Data* ImGui_ImplDX10_GetBackendData()$/;"	f	typeref:typename:ImGui_ImplDX10_Data *	file:
ImGui_ImplDX10_Init	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^bool    ImGui_ImplDX10_Init(ID3D10Device* device)$/;"	f	typeref:typename:bool
ImGui_ImplDX10_InitPlatformInterface	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^void ImGui_ImplDX10_InitPlatformInterface()$/;"	f	typeref:typename:void
ImGui_ImplDX10_InvalidateDeviceObjects	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^void    ImGui_ImplDX10_InvalidateDeviceObjects()$/;"	f	typeref:typename:void
ImGui_ImplDX10_NewFrame	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^void ImGui_ImplDX10_NewFrame()$/;"	f	typeref:typename:void
ImGui_ImplDX10_RenderDrawData	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^void ImGui_ImplDX10_RenderDrawData(ImDrawData* draw_data)$/;"	f	typeref:typename:void
ImGui_ImplDX10_RenderViewport	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^static void ImGui_ImplDX10_RenderViewport(ImGuiViewport* viewport, void*)$/;"	f	typeref:typename:void	file:
ImGui_ImplDX10_SetWindowSize	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^static void ImGui_ImplDX10_SetWindowSize(ImGuiViewport* viewport, ImVec2 size)$/;"	f	typeref:typename:void	file:
ImGui_ImplDX10_SetupRenderState	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^static void ImGui_ImplDX10_SetupRenderState(ImDrawData* draw_data, ID3D10Device* ctx)$/;"	f	typeref:typename:void	file:
ImGui_ImplDX10_Shutdown	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^void ImGui_ImplDX10_Shutdown()$/;"	f	typeref:typename:void
ImGui_ImplDX10_ShutdownPlatformInterface	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^void ImGui_ImplDX10_ShutdownPlatformInterface()$/;"	f	typeref:typename:void
ImGui_ImplDX10_SwapBuffers	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^static void ImGui_ImplDX10_SwapBuffers(ImGuiViewport* viewport, void*)$/;"	f	typeref:typename:void	file:
ImGui_ImplDX10_ViewportData	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^    ImGui_ImplDX10_ViewportData()   { SwapChain = nullptr; RTView = nullptr; }$/;"	f	struct:ImGui_ImplDX10_ViewportData	file:
ImGui_ImplDX10_ViewportData	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^struct ImGui_ImplDX10_ViewportData$/;"	s	file:
ImGui_ImplDX11_CreateDeviceObjects	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^bool    ImGui_ImplDX11_CreateDeviceObjects()$/;"	f	typeref:typename:bool
ImGui_ImplDX11_CreateFontsTexture	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^static void ImGui_ImplDX11_CreateFontsTexture()$/;"	f	typeref:typename:void	file:
ImGui_ImplDX11_CreateWindow	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^static void ImGui_ImplDX11_CreateWindow(ImGuiViewport* viewport)$/;"	f	typeref:typename:void	file:
ImGui_ImplDX11_Data	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^    ImGui_ImplDX11_Data()       { memset((void*)this, 0, sizeof(*this)); VertexBufferSize = 5000/;"	f	struct:ImGui_ImplDX11_Data	file:
ImGui_ImplDX11_Data	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^struct ImGui_ImplDX11_Data$/;"	s	file:
ImGui_ImplDX11_DestroyWindow	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^static void ImGui_ImplDX11_DestroyWindow(ImGuiViewport* viewport)$/;"	f	typeref:typename:void	file:
ImGui_ImplDX11_GetBackendData	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^static ImGui_ImplDX11_Data* ImGui_ImplDX11_GetBackendData()$/;"	f	typeref:typename:ImGui_ImplDX11_Data *	file:
ImGui_ImplDX11_Init	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^bool    ImGui_ImplDX11_Init(ID3D11Device* device, ID3D11DeviceContext* device_context)$/;"	f	typeref:typename:bool
ImGui_ImplDX11_InitPlatformInterface	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^static void ImGui_ImplDX11_InitPlatformInterface()$/;"	f	typeref:typename:void	file:
ImGui_ImplDX11_InvalidateDeviceObjects	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^void    ImGui_ImplDX11_InvalidateDeviceObjects()$/;"	f	typeref:typename:void
ImGui_ImplDX11_NewFrame	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^void ImGui_ImplDX11_NewFrame()$/;"	f	typeref:typename:void
ImGui_ImplDX11_RenderDrawData	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^void ImGui_ImplDX11_RenderDrawData(ImDrawData* draw_data)$/;"	f	typeref:typename:void
ImGui_ImplDX11_RenderWindow	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^static void ImGui_ImplDX11_RenderWindow(ImGuiViewport* viewport, void*)$/;"	f	typeref:typename:void	file:
ImGui_ImplDX11_SetWindowSize	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^static void ImGui_ImplDX11_SetWindowSize(ImGuiViewport* viewport, ImVec2 size)$/;"	f	typeref:typename:void	file:
ImGui_ImplDX11_SetupRenderState	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^static void ImGui_ImplDX11_SetupRenderState(ImDrawData* draw_data, ID3D11DeviceContext* ctx)$/;"	f	typeref:typename:void	file:
ImGui_ImplDX11_Shutdown	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^void ImGui_ImplDX11_Shutdown()$/;"	f	typeref:typename:void
ImGui_ImplDX11_ShutdownPlatformInterface	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^static void ImGui_ImplDX11_ShutdownPlatformInterface()$/;"	f	typeref:typename:void	file:
ImGui_ImplDX11_SwapBuffers	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^static void ImGui_ImplDX11_SwapBuffers(ImGuiViewport* viewport, void*)$/;"	f	typeref:typename:void	file:
ImGui_ImplDX11_ViewportData	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^    ImGui_ImplDX11_ViewportData()   { SwapChain = nullptr; RTView = nullptr; }$/;"	f	struct:ImGui_ImplDX11_ViewportData	file:
ImGui_ImplDX11_ViewportData	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^struct ImGui_ImplDX11_ViewportData$/;"	s	file:
ImGui_ImplDX12_CreateDeviceObjects	build/_deps/imgui-proj-src/backends/imgui_impl_dx12.cpp	/^bool    ImGui_ImplDX12_CreateDeviceObjects()$/;"	f	typeref:typename:bool
ImGui_ImplDX12_CreateFontsTexture	build/_deps/imgui-proj-src/backends/imgui_impl_dx12.cpp	/^static void ImGui_ImplDX12_CreateFontsTexture()$/;"	f	typeref:typename:void	file:
ImGui_ImplDX12_CreateWindow	build/_deps/imgui-proj-src/backends/imgui_impl_dx12.cpp	/^static void ImGui_ImplDX12_CreateWindow(ImGuiViewport* viewport)$/;"	f	typeref:typename:void	file:
ImGui_ImplDX12_Data	build/_deps/imgui-proj-src/backends/imgui_impl_dx12.cpp	/^    ImGui_ImplDX12_Data()       { memset((void*)this, 0, sizeof(*this)); }$/;"	f	struct:ImGui_ImplDX12_Data	file:
ImGui_ImplDX12_Data	build/_deps/imgui-proj-src/backends/imgui_impl_dx12.cpp	/^struct ImGui_ImplDX12_Data$/;"	s	file:
ImGui_ImplDX12_DestroyRenderBuffers	build/_deps/imgui-proj-src/backends/imgui_impl_dx12.cpp	/^static void ImGui_ImplDX12_DestroyRenderBuffers(ImGui_ImplDX12_RenderBuffers* render_buffers)$/;"	f	typeref:typename:void	file:
ImGui_ImplDX12_DestroyWindow	build/_deps/imgui-proj-src/backends/imgui_impl_dx12.cpp	/^static void ImGui_ImplDX12_DestroyWindow(ImGuiViewport* viewport)$/;"	f	typeref:typename:void	file:
ImGui_ImplDX12_FrameContext	build/_deps/imgui-proj-src/backends/imgui_impl_dx12.cpp	/^struct ImGui_ImplDX12_FrameContext$/;"	s	file:
ImGui_ImplDX12_GetBackendData	build/_deps/imgui-proj-src/backends/imgui_impl_dx12.cpp	/^static ImGui_ImplDX12_Data* ImGui_ImplDX12_GetBackendData()$/;"	f	typeref:typename:ImGui_ImplDX12_Data *	file:
ImGui_ImplDX12_Init	build/_deps/imgui-proj-src/backends/imgui_impl_dx12.cpp	/^bool ImGui_ImplDX12_Init(ID3D12Device* device, int num_frames_in_flight, DXGI_FORMAT rtv_format,/;"	f	typeref:typename:bool
ImGui_ImplDX12_InitPlatformInterface	build/_deps/imgui-proj-src/backends/imgui_impl_dx12.cpp	/^void ImGui_ImplDX12_InitPlatformInterface()$/;"	f	typeref:typename:void
ImGui_ImplDX12_InvalidateDeviceObjects	build/_deps/imgui-proj-src/backends/imgui_impl_dx12.cpp	/^void    ImGui_ImplDX12_InvalidateDeviceObjects()$/;"	f	typeref:typename:void
ImGui_ImplDX12_NewFrame	build/_deps/imgui-proj-src/backends/imgui_impl_dx12.cpp	/^void ImGui_ImplDX12_NewFrame()$/;"	f	typeref:typename:void
ImGui_ImplDX12_RenderBuffers	build/_deps/imgui-proj-src/backends/imgui_impl_dx12.cpp	/^struct ImGui_ImplDX12_RenderBuffers$/;"	s	file:
ImGui_ImplDX12_RenderDrawData	build/_deps/imgui-proj-src/backends/imgui_impl_dx12.cpp	/^void ImGui_ImplDX12_RenderDrawData(ImDrawData* draw_data, ID3D12GraphicsCommandList* ctx)$/;"	f	typeref:typename:void
ImGui_ImplDX12_RenderWindow	build/_deps/imgui-proj-src/backends/imgui_impl_dx12.cpp	/^static void ImGui_ImplDX12_RenderWindow(ImGuiViewport* viewport, void*)$/;"	f	typeref:typename:void	file:
ImGui_ImplDX12_SetWindowSize	build/_deps/imgui-proj-src/backends/imgui_impl_dx12.cpp	/^static void ImGui_ImplDX12_SetWindowSize(ImGuiViewport* viewport, ImVec2 size)$/;"	f	typeref:typename:void	file:
ImGui_ImplDX12_SetupRenderState	build/_deps/imgui-proj-src/backends/imgui_impl_dx12.cpp	/^static void ImGui_ImplDX12_SetupRenderState(ImDrawData* draw_data, ID3D12GraphicsCommandList* ct/;"	f	typeref:typename:void	file:
ImGui_ImplDX12_Shutdown	build/_deps/imgui-proj-src/backends/imgui_impl_dx12.cpp	/^void ImGui_ImplDX12_Shutdown()$/;"	f	typeref:typename:void
ImGui_ImplDX12_ShutdownPlatformInterface	build/_deps/imgui-proj-src/backends/imgui_impl_dx12.cpp	/^void ImGui_ImplDX12_ShutdownPlatformInterface()$/;"	f	typeref:typename:void
ImGui_ImplDX12_SwapBuffers	build/_deps/imgui-proj-src/backends/imgui_impl_dx12.cpp	/^static void ImGui_ImplDX12_SwapBuffers(ImGuiViewport* viewport, void*)$/;"	f	typeref:typename:void	file:
ImGui_ImplDX12_ViewportData	build/_deps/imgui-proj-src/backends/imgui_impl_dx12.cpp	/^    ImGui_ImplDX12_ViewportData(UINT num_frames_in_flight)$/;"	f	struct:ImGui_ImplDX12_ViewportData	file:
ImGui_ImplDX12_ViewportData	build/_deps/imgui-proj-src/backends/imgui_impl_dx12.cpp	/^struct ImGui_ImplDX12_ViewportData$/;"	s	file:
ImGui_ImplDX9_CheckFormatSupport	build/_deps/imgui-proj-src/backends/imgui_impl_dx9.cpp	/^static bool ImGui_ImplDX9_CheckFormatSupport(IDirect3DDevice9* pDevice, D3DFORMAT format)$/;"	f	typeref:typename:bool	file:
ImGui_ImplDX9_CreateDeviceObjects	build/_deps/imgui-proj-src/backends/imgui_impl_dx9.cpp	/^bool ImGui_ImplDX9_CreateDeviceObjects()$/;"	f	typeref:typename:bool
ImGui_ImplDX9_CreateDeviceObjectsForPlatformWindows	build/_deps/imgui-proj-src/backends/imgui_impl_dx9.cpp	/^static void ImGui_ImplDX9_CreateDeviceObjectsForPlatformWindows()$/;"	f	typeref:typename:void	file:
ImGui_ImplDX9_CreateFontsTexture	build/_deps/imgui-proj-src/backends/imgui_impl_dx9.cpp	/^static bool ImGui_ImplDX9_CreateFontsTexture()$/;"	f	typeref:typename:bool	file:
ImGui_ImplDX9_CreateWindow	build/_deps/imgui-proj-src/backends/imgui_impl_dx9.cpp	/^static void ImGui_ImplDX9_CreateWindow(ImGuiViewport* viewport)$/;"	f	typeref:typename:void	file:
ImGui_ImplDX9_Data	build/_deps/imgui-proj-src/backends/imgui_impl_dx9.cpp	/^    ImGui_ImplDX9_Data()        { memset((void*)this, 0, sizeof(*this)); VertexBufferSize = 5000/;"	f	struct:ImGui_ImplDX9_Data	file:
ImGui_ImplDX9_Data	build/_deps/imgui-proj-src/backends/imgui_impl_dx9.cpp	/^struct ImGui_ImplDX9_Data$/;"	s	file:
ImGui_ImplDX9_DestroyWindow	build/_deps/imgui-proj-src/backends/imgui_impl_dx9.cpp	/^static void ImGui_ImplDX9_DestroyWindow(ImGuiViewport* viewport)$/;"	f	typeref:typename:void	file:
ImGui_ImplDX9_GetBackendData	build/_deps/imgui-proj-src/backends/imgui_impl_dx9.cpp	/^static ImGui_ImplDX9_Data* ImGui_ImplDX9_GetBackendData()$/;"	f	typeref:typename:ImGui_ImplDX9_Data *	file:
ImGui_ImplDX9_Init	build/_deps/imgui-proj-src/backends/imgui_impl_dx9.cpp	/^bool ImGui_ImplDX9_Init(IDirect3DDevice9* device)$/;"	f	typeref:typename:bool
ImGui_ImplDX9_InitPlatformInterface	build/_deps/imgui-proj-src/backends/imgui_impl_dx9.cpp	/^static void ImGui_ImplDX9_InitPlatformInterface()$/;"	f	typeref:typename:void	file:
ImGui_ImplDX9_InvalidateDeviceObjects	build/_deps/imgui-proj-src/backends/imgui_impl_dx9.cpp	/^void ImGui_ImplDX9_InvalidateDeviceObjects()$/;"	f	typeref:typename:void
ImGui_ImplDX9_InvalidateDeviceObjectsForPlatformWindows	build/_deps/imgui-proj-src/backends/imgui_impl_dx9.cpp	/^static void ImGui_ImplDX9_InvalidateDeviceObjectsForPlatformWindows()$/;"	f	typeref:typename:void	file:
ImGui_ImplDX9_NewFrame	build/_deps/imgui-proj-src/backends/imgui_impl_dx9.cpp	/^void ImGui_ImplDX9_NewFrame()$/;"	f	typeref:typename:void
ImGui_ImplDX9_RenderDrawData	build/_deps/imgui-proj-src/backends/imgui_impl_dx9.cpp	/^void ImGui_ImplDX9_RenderDrawData(ImDrawData* draw_data)$/;"	f	typeref:typename:void
ImGui_ImplDX9_RenderWindow	build/_deps/imgui-proj-src/backends/imgui_impl_dx9.cpp	/^static void ImGui_ImplDX9_RenderWindow(ImGuiViewport* viewport, void*)$/;"	f	typeref:typename:void	file:
ImGui_ImplDX9_SetWindowSize	build/_deps/imgui-proj-src/backends/imgui_impl_dx9.cpp	/^static void ImGui_ImplDX9_SetWindowSize(ImGuiViewport* viewport, ImVec2 size)$/;"	f	typeref:typename:void	file:
ImGui_ImplDX9_SetupRenderState	build/_deps/imgui-proj-src/backends/imgui_impl_dx9.cpp	/^static void ImGui_ImplDX9_SetupRenderState(ImDrawData* draw_data)$/;"	f	typeref:typename:void	file:
ImGui_ImplDX9_Shutdown	build/_deps/imgui-proj-src/backends/imgui_impl_dx9.cpp	/^void ImGui_ImplDX9_Shutdown()$/;"	f	typeref:typename:void
ImGui_ImplDX9_ShutdownPlatformInterface	build/_deps/imgui-proj-src/backends/imgui_impl_dx9.cpp	/^static void ImGui_ImplDX9_ShutdownPlatformInterface()$/;"	f	typeref:typename:void	file:
ImGui_ImplDX9_SwapBuffers	build/_deps/imgui-proj-src/backends/imgui_impl_dx9.cpp	/^static void ImGui_ImplDX9_SwapBuffers(ImGuiViewport* viewport, void*)$/;"	f	typeref:typename:void	file:
ImGui_ImplDX9_ViewportData	build/_deps/imgui-proj-src/backends/imgui_impl_dx9.cpp	/^    ImGui_ImplDX9_ViewportData()  { SwapChain = nullptr; ZeroMemory(&d3dpp, sizeof(D3DPRESENT_PA/;"	f	struct:ImGui_ImplDX9_ViewportData	file:
ImGui_ImplDX9_ViewportData	build/_deps/imgui-proj-src/backends/imgui_impl_dx9.cpp	/^struct ImGui_ImplDX9_ViewportData$/;"	s	file:
ImGui_ImplEmscripten_FullscreenChangeCallback	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^static EM_BOOL ImGui_ImplEmscripten_FullscreenChangeCallback(int event_type, const EmscriptenFul/;"	f	typeref:typename:EM_BOOL	file:
ImGui_ImplEmscripten_WheelCallback	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^static EM_BOOL ImGui_ImplEmscripten_WheelCallback(int, const EmscriptenWheelEvent* ev, void*)$/;"	f	typeref:typename:EM_BOOL	file:
ImGui_ImplGLUT_AddKeyEvent	build/_deps/imgui-proj-src/backends/imgui_impl_glut.cpp	/^static void ImGui_ImplGLUT_AddKeyEvent(ImGuiKey key, bool down, int native_keycode)$/;"	f	typeref:typename:void	file:
ImGui_ImplGLUT_Init	build/_deps/imgui-proj-src/backends/imgui_impl_glut.cpp	/^bool ImGui_ImplGLUT_Init()$/;"	f	typeref:typename:bool
ImGui_ImplGLUT_InstallFuncs	build/_deps/imgui-proj-src/backends/imgui_impl_glut.cpp	/^void ImGui_ImplGLUT_InstallFuncs()$/;"	f	typeref:typename:void
ImGui_ImplGLUT_KeyToImGuiKey	build/_deps/imgui-proj-src/backends/imgui_impl_glut.cpp	/^static ImGuiKey ImGui_ImplGLUT_KeyToImGuiKey(int key)$/;"	f	typeref:typename:ImGuiKey	file:
ImGui_ImplGLUT_KeyboardFunc	build/_deps/imgui-proj-src/backends/imgui_impl_glut.cpp	/^void ImGui_ImplGLUT_KeyboardFunc(unsigned char c, int x, int y)$/;"	f	typeref:typename:void
ImGui_ImplGLUT_KeyboardUpFunc	build/_deps/imgui-proj-src/backends/imgui_impl_glut.cpp	/^void ImGui_ImplGLUT_KeyboardUpFunc(unsigned char c, int x, int y)$/;"	f	typeref:typename:void
ImGui_ImplGLUT_MotionFunc	build/_deps/imgui-proj-src/backends/imgui_impl_glut.cpp	/^void ImGui_ImplGLUT_MotionFunc(int x, int y)$/;"	f	typeref:typename:void
ImGui_ImplGLUT_MouseFunc	build/_deps/imgui-proj-src/backends/imgui_impl_glut.cpp	/^void ImGui_ImplGLUT_MouseFunc(int glut_button, int state, int x, int y)$/;"	f	typeref:typename:void
ImGui_ImplGLUT_MouseWheelFunc	build/_deps/imgui-proj-src/backends/imgui_impl_glut.cpp	/^void ImGui_ImplGLUT_MouseWheelFunc(int button, int dir, int x, int y)$/;"	f	typeref:typename:void
ImGui_ImplGLUT_NewFrame	build/_deps/imgui-proj-src/backends/imgui_impl_glut.cpp	/^void ImGui_ImplGLUT_NewFrame()$/;"	f	typeref:typename:void
ImGui_ImplGLUT_ReshapeFunc	build/_deps/imgui-proj-src/backends/imgui_impl_glut.cpp	/^void ImGui_ImplGLUT_ReshapeFunc(int w, int h)$/;"	f	typeref:typename:void
ImGui_ImplGLUT_Shutdown	build/_deps/imgui-proj-src/backends/imgui_impl_glut.cpp	/^void ImGui_ImplGLUT_Shutdown()$/;"	f	typeref:typename:void
ImGui_ImplGLUT_SpecialFunc	build/_deps/imgui-proj-src/backends/imgui_impl_glut.cpp	/^void ImGui_ImplGLUT_SpecialFunc(int key, int x, int y)$/;"	f	typeref:typename:void
ImGui_ImplGLUT_SpecialUpFunc	build/_deps/imgui-proj-src/backends/imgui_impl_glut.cpp	/^void ImGui_ImplGLUT_SpecialUpFunc(int key, int x, int y)$/;"	f	typeref:typename:void
ImGui_ImplGLUT_UpdateKeyModifiers	build/_deps/imgui-proj-src/backends/imgui_impl_glut.cpp	/^static void ImGui_ImplGLUT_UpdateKeyModifiers()$/;"	f	typeref:typename:void	file:
ImGui_ImplGlfw_CharCallback	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_CharCallback(GLFWwindow* window, unsigned int c)$/;"	f	typeref:typename:void
ImGui_ImplGlfw_CreateVkSurface	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^static int ImGui_ImplGlfw_CreateVkSurface(ImGuiViewport* viewport, ImU64 vk_instance, const void/;"	f	typeref:typename:int	file:
ImGui_ImplGlfw_CreateWindow	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^static void ImGui_ImplGlfw_CreateWindow(ImGuiViewport* viewport)$/;"	f	typeref:typename:void	file:
ImGui_ImplGlfw_CursorEnterCallback	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_CursorEnterCallback(GLFWwindow* window, int entered)$/;"	f	typeref:typename:void
ImGui_ImplGlfw_CursorPosCallback	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_CursorPosCallback(GLFWwindow* window, double x, double y)$/;"	f	typeref:typename:void
ImGui_ImplGlfw_Data	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^    ImGui_ImplGlfw_Data()   { memset((void*)this, 0, sizeof(*this)); }$/;"	f	struct:ImGui_ImplGlfw_Data	file:
ImGui_ImplGlfw_Data	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^struct ImGui_ImplGlfw_Data$/;"	s	file:
ImGui_ImplGlfw_DestroyWindow	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^static void ImGui_ImplGlfw_DestroyWindow(ImGuiViewport* viewport)$/;"	f	typeref:typename:void	file:
ImGui_ImplGlfw_GetBackendData	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^static ImGui_ImplGlfw_Data* ImGui_ImplGlfw_GetBackendData()$/;"	f	typeref:typename:ImGui_ImplGlfw_Data *	file:
ImGui_ImplGlfw_GetClipboardText	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^static const char* ImGui_ImplGlfw_GetClipboardText(void* user_data)$/;"	f	typeref:typename:const char *	file:
ImGui_ImplGlfw_GetWindowFocus	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^static bool ImGui_ImplGlfw_GetWindowFocus(ImGuiViewport* viewport)$/;"	f	typeref:typename:bool	file:
ImGui_ImplGlfw_GetWindowMinimized	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^static bool ImGui_ImplGlfw_GetWindowMinimized(ImGuiViewport* viewport)$/;"	f	typeref:typename:bool	file:
ImGui_ImplGlfw_GetWindowPos	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^static ImVec2 ImGui_ImplGlfw_GetWindowPos(ImGuiViewport* viewport)$/;"	f	typeref:typename:ImVec2	file:
ImGui_ImplGlfw_GetWindowSize	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^static ImVec2 ImGui_ImplGlfw_GetWindowSize(ImGuiViewport* viewport)$/;"	f	typeref:typename:ImVec2	file:
ImGui_ImplGlfw_Init	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^static bool ImGui_ImplGlfw_Init(GLFWwindow* window, bool install_callbacks, GlfwClientApi client/;"	f	typeref:typename:bool	file:
ImGui_ImplGlfw_InitForOpenGL	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^bool ImGui_ImplGlfw_InitForOpenGL(GLFWwindow* window, bool install_callbacks)$/;"	f	typeref:typename:bool
ImGui_ImplGlfw_InitForOther	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^bool ImGui_ImplGlfw_InitForOther(GLFWwindow* window, bool install_callbacks)$/;"	f	typeref:typename:bool
ImGui_ImplGlfw_InitForVulkan	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^bool ImGui_ImplGlfw_InitForVulkan(GLFWwindow* window, bool install_callbacks)$/;"	f	typeref:typename:bool
ImGui_ImplGlfw_InitPlatformInterface	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^static void ImGui_ImplGlfw_InitPlatformInterface()$/;"	f	typeref:typename:void	file:
ImGui_ImplGlfw_InstallCallbacks	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_InstallCallbacks(GLFWwindow* window)$/;"	f	typeref:typename:void
ImGui_ImplGlfw_InstallEmscriptenCanvasResizeCallback	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_InstallEmscriptenCanvasResizeCallback(const char* canvas_selector)$/;"	f	typeref:typename:void
ImGui_ImplGlfw_KeyCallback	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_KeyCallback(GLFWwindow* window, int keycode, int scancode, int action, int m/;"	f	typeref:typename:void
ImGui_ImplGlfw_KeyToImGuiKey	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^static ImGuiKey ImGui_ImplGlfw_KeyToImGuiKey(int key)$/;"	f	typeref:typename:ImGuiKey	file:
ImGui_ImplGlfw_MonitorCallback	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_MonitorCallback(GLFWmonitor*, int)$/;"	f	typeref:typename:void
ImGui_ImplGlfw_MouseButtonCallback	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_MouseButtonCallback(GLFWwindow* window, int button, int action, int mods)$/;"	f	typeref:typename:void
ImGui_ImplGlfw_NewFrame	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_NewFrame()$/;"	f	typeref:typename:void
ImGui_ImplGlfw_OnCanvasSizeChange	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^static EM_BOOL ImGui_ImplGlfw_OnCanvasSizeChange(int event_type, const EmscriptenUiEvent* event,/;"	f	typeref:typename:EM_BOOL	file:
ImGui_ImplGlfw_RenderWindow	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^static void ImGui_ImplGlfw_RenderWindow(ImGuiViewport* viewport, void*)$/;"	f	typeref:typename:void	file:
ImGui_ImplGlfw_RestoreCallbacks	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_RestoreCallbacks(GLFWwindow* window)$/;"	f	typeref:typename:void
ImGui_ImplGlfw_ScrollCallback	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_ScrollCallback(GLFWwindow* window, double xoffset, double yoffset)$/;"	f	typeref:typename:void
ImGui_ImplGlfw_SetCallbacksChainForAllWindows	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_SetCallbacksChainForAllWindows(bool chain_for_all_windows)$/;"	f	typeref:typename:void
ImGui_ImplGlfw_SetClipboardText	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^static void ImGui_ImplGlfw_SetClipboardText(void* user_data, const char* text)$/;"	f	typeref:typename:void	file:
ImGui_ImplGlfw_SetWindowAlpha	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^static void ImGui_ImplGlfw_SetWindowAlpha(ImGuiViewport* viewport, float alpha)$/;"	f	typeref:typename:void	file:
ImGui_ImplGlfw_SetWindowFocus	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^static void ImGui_ImplGlfw_SetWindowFocus(ImGuiViewport* viewport)$/;"	f	typeref:typename:void	file:
ImGui_ImplGlfw_SetWindowPos	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^static void ImGui_ImplGlfw_SetWindowPos(ImGuiViewport* viewport, ImVec2 pos)$/;"	f	typeref:typename:void	file:
ImGui_ImplGlfw_SetWindowSize	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^static void ImGui_ImplGlfw_SetWindowSize(ImGuiViewport* viewport, ImVec2 size)$/;"	f	typeref:typename:void	file:
ImGui_ImplGlfw_SetWindowTitle	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^static void ImGui_ImplGlfw_SetWindowTitle(ImGuiViewport* viewport, const char* title)$/;"	f	typeref:typename:void	file:
ImGui_ImplGlfw_ShouldChainCallback	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^static bool ImGui_ImplGlfw_ShouldChainCallback(GLFWwindow* window)$/;"	f	typeref:typename:bool	file:
ImGui_ImplGlfw_ShowWindow	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^static void ImGui_ImplGlfw_ShowWindow(ImGuiViewport* viewport)$/;"	f	typeref:typename:void	file:
ImGui_ImplGlfw_Shutdown	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_Shutdown()$/;"	f	typeref:typename:void
ImGui_ImplGlfw_ShutdownPlatformInterface	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^static void ImGui_ImplGlfw_ShutdownPlatformInterface()$/;"	f	typeref:typename:void	file:
ImGui_ImplGlfw_SwapBuffers	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^static void ImGui_ImplGlfw_SwapBuffers(ImGuiViewport* viewport, void*)$/;"	f	typeref:typename:void	file:
ImGui_ImplGlfw_TranslateUntranslatedKey	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^static int ImGui_ImplGlfw_TranslateUntranslatedKey(int key, int scancode)$/;"	f	typeref:typename:int	file:
ImGui_ImplGlfw_UpdateGamepads	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^static void ImGui_ImplGlfw_UpdateGamepads()$/;"	f	typeref:typename:void	file:
ImGui_ImplGlfw_UpdateKeyModifiers	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^static void ImGui_ImplGlfw_UpdateKeyModifiers(GLFWwindow* window)$/;"	f	typeref:typename:void	file:
ImGui_ImplGlfw_UpdateMonitors	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^static void ImGui_ImplGlfw_UpdateMonitors()$/;"	f	typeref:typename:void	file:
ImGui_ImplGlfw_UpdateMouseCursor	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^static void ImGui_ImplGlfw_UpdateMouseCursor()$/;"	f	typeref:typename:void	file:
ImGui_ImplGlfw_UpdateMouseData	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^static void ImGui_ImplGlfw_UpdateMouseData()$/;"	f	typeref:typename:void	file:
ImGui_ImplGlfw_ViewportData	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^    ImGui_ImplGlfw_ViewportData()  { memset(this, 0, sizeof(*this)); IgnoreWindowSizeEventFrame /;"	f	struct:ImGui_ImplGlfw_ViewportData	file:
ImGui_ImplGlfw_ViewportData	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^struct ImGui_ImplGlfw_ViewportData$/;"	s	file:
ImGui_ImplGlfw_WindowCloseCallback	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^static void ImGui_ImplGlfw_WindowCloseCallback(GLFWwindow* window)$/;"	f	typeref:typename:void	file:
ImGui_ImplGlfw_WindowFocusCallback	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_WindowFocusCallback(GLFWwindow* window, int focused)$/;"	f	typeref:typename:void
ImGui_ImplGlfw_WindowPosCallback	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^static void ImGui_ImplGlfw_WindowPosCallback(GLFWwindow* window, int, int)$/;"	f	typeref:typename:void	file:
ImGui_ImplGlfw_WindowSizeCallback	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^static void ImGui_ImplGlfw_WindowSizeCallback(GLFWwindow* window, int, int)$/;"	f	typeref:typename:void	file:
ImGui_ImplGlfw_WndProc	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^static LRESULT CALLBACK ImGui_ImplGlfw_WndProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam/;"	f	typeref:typename:LRESULT CALLBACK	file:
ImGui_ImplMetal_CreateBackendData	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^static ImGui_ImplMetal_Data*    ImGui_ImplMetal_CreateBackendData() { return IM_NEW(ImGui_ImplMe/;"	f	struct:ImGui_ImplMetal_Data
ImGui_ImplMetal_CreateDeviceObjects	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^bool ImGui_ImplMetal_CreateDeviceObjects(MTL::Device* device)$/;"	f	struct:ImGui_ImplMetal_Data
ImGui_ImplMetal_CreateDeviceObjects	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^bool ImGui_ImplMetal_CreateDeviceObjects(id<MTLDevice> device)$/;"	f	struct:ImGui_ImplMetal_Data
ImGui_ImplMetal_CreateDeviceObjectsForPlatformWindows	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^static void ImGui_ImplMetal_CreateDeviceObjectsForPlatformWindows()$/;"	f
ImGui_ImplMetal_CreateDeviceObjectsForPlatformWindows	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^static void ImGui_ImplMetal_CreateDeviceObjectsForPlatformWindows();$/;"	f
ImGui_ImplMetal_CreateFontsTexture	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^bool ImGui_ImplMetal_CreateFontsTexture(MTL::Device* device)$/;"	f	struct:ImGui_ImplMetal_Data
ImGui_ImplMetal_CreateFontsTexture	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^bool ImGui_ImplMetal_CreateFontsTexture(id<MTLDevice> device)$/;"	f	struct:ImGui_ImplMetal_Data
ImGui_ImplMetal_CreateWindow	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^static void ImGui_ImplMetal_CreateWindow(ImGuiViewport* viewport)$/;"	f
ImGui_ImplMetal_Data	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^struct ImGui_ImplMetal_Data$/;"	s
ImGui_ImplMetal_DestroyBackendData	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^static void                     ImGui_ImplMetal_DestroyBackendData(){ IM_DELETE(ImGui_ImplMetal_/;"	f	struct:ImGui_ImplMetal_Data
ImGui_ImplMetal_DestroyDeviceObjects	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^void ImGui_ImplMetal_DestroyDeviceObjects()$/;"	f	struct:ImGui_ImplMetal_Data
ImGui_ImplMetal_DestroyFontsTexture	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^void ImGui_ImplMetal_DestroyFontsTexture()$/;"	f	struct:ImGui_ImplMetal_Data
ImGui_ImplMetal_DestroyWindow	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^static void ImGui_ImplMetal_DestroyWindow(ImGuiViewport* viewport)$/;"	f
ImGui_ImplMetal_GetBackendData	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^static ImGui_ImplMetal_Data*    ImGui_ImplMetal_GetBackendData()    { return ImGui::GetCurrentCo/;"	f	struct:ImGui_ImplMetal_Data
ImGui_ImplMetal_Init	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^bool ImGui_ImplMetal_Init(MTL::Device* device)$/;"	f	struct:ImGui_ImplMetal_Data
ImGui_ImplMetal_Init	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^bool ImGui_ImplMetal_Init(id<MTLDevice> device)$/;"	f	struct:ImGui_ImplMetal_Data
ImGui_ImplMetal_InitPlatformInterface	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^static void ImGui_ImplMetal_InitPlatformInterface()$/;"	f
ImGui_ImplMetal_InitPlatformInterface	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^static void ImGui_ImplMetal_InitPlatformInterface();$/;"	f
ImGui_ImplMetal_InvalidateDeviceObjectsForPlatformWindows	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^static void ImGui_ImplMetal_InvalidateDeviceObjectsForPlatformWindows()$/;"	f
ImGui_ImplMetal_InvalidateDeviceObjectsForPlatformWindows	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^static void ImGui_ImplMetal_InvalidateDeviceObjectsForPlatformWindows();$/;"	f
ImGui_ImplMetal_NewFrame	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^void ImGui_ImplMetal_NewFrame(MTL::RenderPassDescriptor* renderPassDescriptor)$/;"	f	struct:ImGui_ImplMetal_Data
ImGui_ImplMetal_NewFrame	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^void ImGui_ImplMetal_NewFrame(MTLRenderPassDescriptor* renderPassDescriptor)$/;"	f	struct:ImGui_ImplMetal_Data
ImGui_ImplMetal_RenderDrawData	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^void ImGui_ImplMetal_RenderDrawData(ImDrawData* drawData, id<MTLCommandBuffer> commandBuffer, id/;"	f	struct:ImGui_ImplMetal_Data
ImGui_ImplMetal_RenderDrawData	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^void ImGui_ImplMetal_RenderDrawData(ImDrawData* draw_data,$/;"	f	struct:ImGui_ImplMetal_Data
ImGui_ImplMetal_RenderWindow	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^static void ImGui_ImplMetal_RenderWindow(ImGuiViewport* viewport, void*)$/;"	f
ImGui_ImplMetal_SetWindowSize	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^static void ImGui_ImplMetal_SetWindowSize(ImGuiViewport* viewport, ImVec2 size)$/;"	f
ImGui_ImplMetal_SetupRenderState	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^static void ImGui_ImplMetal_SetupRenderState(ImDrawData* drawData, id<MTLCommandBuffer> commandB/;"	f	struct:ImGui_ImplMetal_Data
ImGui_ImplMetal_Shutdown	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^void ImGui_ImplMetal_Shutdown()$/;"	f	struct:ImGui_ImplMetal_Data
ImGui_ImplMetal_ShutdownPlatformInterface	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^static void ImGui_ImplMetal_ShutdownPlatformInterface()$/;"	f
ImGui_ImplMetal_ShutdownPlatformInterface	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^static void ImGui_ImplMetal_ShutdownPlatformInterface();$/;"	f
ImGui_ImplOSX_AddTrackingArea	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^static void ImGui_ImplOSX_AddTrackingArea(NSView* _Nonnull view)$/;"	f
ImGui_ImplOSX_AddTrackingArea	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^static void ImGui_ImplOSX_AddTrackingArea(NSView* _Nonnull view);$/;"	f	struct:ImGui_ImplOSX_Data
ImGui_ImplOSX_CreateBackendData	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^static ImGui_ImplOSX_Data*      ImGui_ImplOSX_CreateBackendData()   { return IM_NEW(ImGui_ImplOS/;"	f	struct:ImGui_ImplOSX_Data
ImGui_ImplOSX_CreateWindow	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^static void ImGui_ImplOSX_CreateWindow(ImGuiViewport* viewport)$/;"	f
ImGui_ImplOSX_Data	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^struct ImGui_ImplOSX_Data$/;"	s
ImGui_ImplOSX_DestroyBackendData	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^static void                     ImGui_ImplOSX_DestroyBackendData()  { IM_DELETE(ImGui_ImplOSX_Ge/;"	f	struct:ImGui_ImplOSX_Data
ImGui_ImplOSX_DestroyWindow	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^static void ImGui_ImplOSX_DestroyWindow(ImGuiViewport* viewport)$/;"	f
ImGui_ImplOSX_GetBackendData	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^static ImGui_ImplOSX_Data*      ImGui_ImplOSX_GetBackendData()      { return (ImGui_ImplOSX_Data/;"	f	struct:ImGui_ImplOSX_Data
ImGui_ImplOSX_GetWindowDpiScale	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^static float ImGui_ImplOSX_GetWindowDpiScale(ImGuiViewport* viewport)$/;"	f
ImGui_ImplOSX_GetWindowFocus	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^static bool ImGui_ImplOSX_GetWindowFocus(ImGuiViewport* viewport)$/;"	f
ImGui_ImplOSX_GetWindowMinimized	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^static bool ImGui_ImplOSX_GetWindowMinimized(ImGuiViewport* viewport)$/;"	f
ImGui_ImplOSX_GetWindowPos	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^static ImVec2 ImGui_ImplOSX_GetWindowPos(ImGuiViewport* viewport)$/;"	f
ImGui_ImplOSX_GetWindowSize	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^static ImVec2 ImGui_ImplOSX_GetWindowSize(ImGuiViewport* viewport)$/;"	f
ImGui_ImplOSX_HandleEvent	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^static bool ImGui_ImplOSX_HandleEvent(NSEvent* event, NSView* view)$/;"	f
ImGui_ImplOSX_HandleEvent	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^static bool ImGui_ImplOSX_HandleEvent(NSEvent* event, NSView* view);$/;"	f	struct:ImGui_ImplOSX_Data
ImGui_ImplOSX_Init	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^IMGUI_IMPL_API bool ImGui_ImplOSX_Init(void* _Nonnull view) {$/;"	f
ImGui_ImplOSX_Init	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^bool ImGui_ImplOSX_Init(NSView* view)$/;"	f
ImGui_ImplOSX_InitPlatformInterface	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^static void ImGui_ImplOSX_InitPlatformInterface()$/;"	f
ImGui_ImplOSX_InitPlatformInterface	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^static void ImGui_ImplOSX_InitPlatformInterface();$/;"	f	struct:ImGui_ImplOSX_Data
ImGui_ImplOSX_KeyCodeToImGuiKey	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^static ImGuiKey ImGui_ImplOSX_KeyCodeToImGuiKey(int key_code)$/;"	f
ImGui_ImplOSX_NewFrame	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^IMGUI_IMPL_API void ImGui_ImplOSX_NewFrame(void* _Nullable view) {$/;"	f
ImGui_ImplOSX_NewFrame	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^void ImGui_ImplOSX_NewFrame(NSView* view)$/;"	f
ImGui_ImplOSX_SetWindowAlpha	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^static void ImGui_ImplOSX_SetWindowAlpha(ImGuiViewport* viewport, float alpha)$/;"	f
ImGui_ImplOSX_SetWindowFocus	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^static void ImGui_ImplOSX_SetWindowFocus(ImGuiViewport* viewport)$/;"	f
ImGui_ImplOSX_SetWindowPos	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^static void ImGui_ImplOSX_SetWindowPos(ImGuiViewport* viewport, ImVec2 pos)$/;"	f
ImGui_ImplOSX_SetWindowSize	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^static void ImGui_ImplOSX_SetWindowSize(ImGuiViewport* viewport, ImVec2 size)$/;"	f
ImGui_ImplOSX_SetWindowTitle	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^static void ImGui_ImplOSX_SetWindowTitle(ImGuiViewport* viewport, const char* title)$/;"	f
ImGui_ImplOSX_ShowWindow	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^static void ImGui_ImplOSX_ShowWindow(ImGuiViewport* viewport)$/;"	f
ImGui_ImplOSX_Shutdown	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^void ImGui_ImplOSX_Shutdown()$/;"	f
ImGui_ImplOSX_ShutdownPlatformInterface	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^static void ImGui_ImplOSX_ShutdownPlatformInterface()$/;"	f
ImGui_ImplOSX_ShutdownPlatformInterface	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^static void ImGui_ImplOSX_ShutdownPlatformInterface();$/;"	f	struct:ImGui_ImplOSX_Data
ImGui_ImplOSX_UpdateGamepads	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^static void ImGui_ImplOSX_UpdateGamepads()$/;"	f
ImGui_ImplOSX_UpdateImePosWithView	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^static void ImGui_ImplOSX_UpdateImePosWithView(NSView* view)$/;"	f
ImGui_ImplOSX_UpdateMonitors	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^static void ImGui_ImplOSX_UpdateMonitors()$/;"	f
ImGui_ImplOSX_UpdateMonitors	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^static void ImGui_ImplOSX_UpdateMonitors();$/;"	f	struct:ImGui_ImplOSX_Data
ImGui_ImplOSX_UpdateMouseCursor	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^static void ImGui_ImplOSX_UpdateMouseCursor()$/;"	f
ImGui_ImplOSX_Window	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^@implementation ImGui_ImplOSX_Window$/;"	I
ImGui_ImplOSX_Window	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^@interface ImGui_ImplOSX_Window: NSWindow$/;"	i
ImGui_ImplOpenGL2_CreateDeviceObjects	build/_deps/imgui-proj-src/backends/imgui_impl_opengl2.cpp	/^bool    ImGui_ImplOpenGL2_CreateDeviceObjects()$/;"	f	typeref:typename:bool
ImGui_ImplOpenGL2_CreateFontsTexture	build/_deps/imgui-proj-src/backends/imgui_impl_opengl2.cpp	/^bool ImGui_ImplOpenGL2_CreateFontsTexture()$/;"	f	typeref:typename:bool
ImGui_ImplOpenGL2_Data	build/_deps/imgui-proj-src/backends/imgui_impl_opengl2.cpp	/^    ImGui_ImplOpenGL2_Data() { memset((void*)this, 0, sizeof(*this)); }$/;"	f	struct:ImGui_ImplOpenGL2_Data	file:
ImGui_ImplOpenGL2_Data	build/_deps/imgui-proj-src/backends/imgui_impl_opengl2.cpp	/^struct ImGui_ImplOpenGL2_Data$/;"	s	file:
ImGui_ImplOpenGL2_DestroyDeviceObjects	build/_deps/imgui-proj-src/backends/imgui_impl_opengl2.cpp	/^void    ImGui_ImplOpenGL2_DestroyDeviceObjects()$/;"	f	typeref:typename:void
ImGui_ImplOpenGL2_DestroyFontsTexture	build/_deps/imgui-proj-src/backends/imgui_impl_opengl2.cpp	/^void ImGui_ImplOpenGL2_DestroyFontsTexture()$/;"	f	typeref:typename:void
ImGui_ImplOpenGL2_GetBackendData	build/_deps/imgui-proj-src/backends/imgui_impl_opengl2.cpp	/^static ImGui_ImplOpenGL2_Data* ImGui_ImplOpenGL2_GetBackendData()$/;"	f	typeref:typename:ImGui_ImplOpenGL2_Data *	file:
ImGui_ImplOpenGL2_Init	build/_deps/imgui-proj-src/backends/imgui_impl_opengl2.cpp	/^bool    ImGui_ImplOpenGL2_Init()$/;"	f	typeref:typename:bool
ImGui_ImplOpenGL2_InitPlatformInterface	build/_deps/imgui-proj-src/backends/imgui_impl_opengl2.cpp	/^static void ImGui_ImplOpenGL2_InitPlatformInterface()$/;"	f	typeref:typename:void	file:
ImGui_ImplOpenGL2_NewFrame	build/_deps/imgui-proj-src/backends/imgui_impl_opengl2.cpp	/^void    ImGui_ImplOpenGL2_NewFrame()$/;"	f	typeref:typename:void
ImGui_ImplOpenGL2_RenderDrawData	build/_deps/imgui-proj-src/backends/imgui_impl_opengl2.cpp	/^void ImGui_ImplOpenGL2_RenderDrawData(ImDrawData* draw_data)$/;"	f	typeref:typename:void
ImGui_ImplOpenGL2_RenderWindow	build/_deps/imgui-proj-src/backends/imgui_impl_opengl2.cpp	/^static void ImGui_ImplOpenGL2_RenderWindow(ImGuiViewport* viewport, void*)$/;"	f	typeref:typename:void	file:
ImGui_ImplOpenGL2_SetupRenderState	build/_deps/imgui-proj-src/backends/imgui_impl_opengl2.cpp	/^static void ImGui_ImplOpenGL2_SetupRenderState(ImDrawData* draw_data, int fb_width, int fb_heigh/;"	f	typeref:typename:void	file:
ImGui_ImplOpenGL2_Shutdown	build/_deps/imgui-proj-src/backends/imgui_impl_opengl2.cpp	/^void    ImGui_ImplOpenGL2_Shutdown()$/;"	f	typeref:typename:void
ImGui_ImplOpenGL2_ShutdownPlatformInterface	build/_deps/imgui-proj-src/backends/imgui_impl_opengl2.cpp	/^static void ImGui_ImplOpenGL2_ShutdownPlatformInterface()$/;"	f	typeref:typename:void	file:
ImGui_ImplOpenGL3_CreateDeviceObjects	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp	/^bool    ImGui_ImplOpenGL3_CreateDeviceObjects()$/;"	f	typeref:typename:bool
ImGui_ImplOpenGL3_CreateFontsTexture	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp	/^bool ImGui_ImplOpenGL3_CreateFontsTexture()$/;"	f	typeref:typename:bool
ImGui_ImplOpenGL3_Data	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp	/^    ImGui_ImplOpenGL3_Data() { memset((void*)this, 0, sizeof(*this)); }$/;"	f	struct:ImGui_ImplOpenGL3_Data	file:
ImGui_ImplOpenGL3_Data	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp	/^struct ImGui_ImplOpenGL3_Data$/;"	s	file:
ImGui_ImplOpenGL3_DestroyDeviceObjects	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp	/^void    ImGui_ImplOpenGL3_DestroyDeviceObjects()$/;"	f	typeref:typename:void
ImGui_ImplOpenGL3_DestroyFontsTexture	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp	/^void ImGui_ImplOpenGL3_DestroyFontsTexture()$/;"	f	typeref:typename:void
ImGui_ImplOpenGL3_GetBackendData	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp	/^static ImGui_ImplOpenGL3_Data* ImGui_ImplOpenGL3_GetBackendData()$/;"	f	typeref:typename:ImGui_ImplOpenGL3_Data *	file:
ImGui_ImplOpenGL3_Init	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp	/^bool    ImGui_ImplOpenGL3_Init(const char* glsl_version)$/;"	f	typeref:typename:bool
ImGui_ImplOpenGL3_InitPlatformInterface	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp	/^static void ImGui_ImplOpenGL3_InitPlatformInterface()$/;"	f	typeref:typename:void	file:
ImGui_ImplOpenGL3_NewFrame	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp	/^void    ImGui_ImplOpenGL3_NewFrame()$/;"	f	typeref:typename:void
ImGui_ImplOpenGL3_RenderDrawData	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp	/^void    ImGui_ImplOpenGL3_RenderDrawData(ImDrawData* draw_data)$/;"	f	typeref:typename:void
ImGui_ImplOpenGL3_RenderWindow	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp	/^static void ImGui_ImplOpenGL3_RenderWindow(ImGuiViewport* viewport, void*)$/;"	f	typeref:typename:void	file:
ImGui_ImplOpenGL3_SetupRenderState	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp	/^static void ImGui_ImplOpenGL3_SetupRenderState(ImDrawData* draw_data, int fb_width, int fb_heigh/;"	f	typeref:typename:void	file:
ImGui_ImplOpenGL3_Shutdown	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp	/^void    ImGui_ImplOpenGL3_Shutdown()$/;"	f	typeref:typename:void
ImGui_ImplOpenGL3_ShutdownPlatformInterface	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp	/^static void ImGui_ImplOpenGL3_ShutdownPlatformInterface()$/;"	f	typeref:typename:void	file:
ImGui_ImplOpenGL3_VtxAttribState	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp	/^struct ImGui_ImplOpenGL3_VtxAttribState$/;"	s	file:
ImGui_ImplSDL2_CloseGamepads	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^static void ImGui_ImplSDL2_CloseGamepads()$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL2_CreateVkSurface	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^static int ImGui_ImplSDL2_CreateVkSurface(ImGuiViewport* viewport, ImU64 vk_instance, const void/;"	f	typeref:typename:int	file:
ImGui_ImplSDL2_CreateWindow	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^static void ImGui_ImplSDL2_CreateWindow(ImGuiViewport* viewport)$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL2_Data	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^    ImGui_ImplSDL2_Data()   { memset((void*)this, 0, sizeof(*this)); }$/;"	f	struct:ImGui_ImplSDL2_Data	file:
ImGui_ImplSDL2_Data	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^struct ImGui_ImplSDL2_Data$/;"	s	file:
ImGui_ImplSDL2_DestroyWindow	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^static void ImGui_ImplSDL2_DestroyWindow(ImGuiViewport* viewport)$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL2_GamepadMode	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.h	/^enum ImGui_ImplSDL2_GamepadMode { ImGui_ImplSDL2_GamepadMode_AutoFirst, ImGui_ImplSDL2_GamepadMo/;"	g
ImGui_ImplSDL2_GamepadMode_AutoAll	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.h	/^enum ImGui_ImplSDL2_GamepadMode { ImGui_ImplSDL2_GamepadMode_AutoFirst, ImGui_ImplSDL2_GamepadMo/;"	e	enum:ImGui_ImplSDL2_GamepadMode
ImGui_ImplSDL2_GamepadMode_AutoFirst	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.h	/^enum ImGui_ImplSDL2_GamepadMode { ImGui_ImplSDL2_GamepadMode_AutoFirst, ImGui_ImplSDL2_GamepadMo/;"	e	enum:ImGui_ImplSDL2_GamepadMode
ImGui_ImplSDL2_GamepadMode_Manual	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.h	/^enum ImGui_ImplSDL2_GamepadMode { ImGui_ImplSDL2_GamepadMode_AutoFirst, ImGui_ImplSDL2_GamepadMo/;"	e	enum:ImGui_ImplSDL2_GamepadMode
ImGui_ImplSDL2_GetBackendData	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^static ImGui_ImplSDL2_Data* ImGui_ImplSDL2_GetBackendData()$/;"	f	typeref:typename:ImGui_ImplSDL2_Data *	file:
ImGui_ImplSDL2_GetClipboardText	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^static const char* ImGui_ImplSDL2_GetClipboardText(void*)$/;"	f	typeref:typename:const char *	file:
ImGui_ImplSDL2_GetWindowFocus	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^static bool ImGui_ImplSDL2_GetWindowFocus(ImGuiViewport* viewport)$/;"	f	typeref:typename:bool	file:
ImGui_ImplSDL2_GetWindowMinimized	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^static bool ImGui_ImplSDL2_GetWindowMinimized(ImGuiViewport* viewport)$/;"	f	typeref:typename:bool	file:
ImGui_ImplSDL2_GetWindowPos	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^static ImVec2 ImGui_ImplSDL2_GetWindowPos(ImGuiViewport* viewport)$/;"	f	typeref:typename:ImVec2	file:
ImGui_ImplSDL2_GetWindowSize	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^static ImVec2 ImGui_ImplSDL2_GetWindowSize(ImGuiViewport* viewport)$/;"	f	typeref:typename:ImVec2	file:
ImGui_ImplSDL2_Init	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^static bool ImGui_ImplSDL2_Init(SDL_Window* window, SDL_Renderer* renderer, void* sdl_gl_context/;"	f	typeref:typename:bool	file:
ImGui_ImplSDL2_InitForD3D	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^bool ImGui_ImplSDL2_InitForD3D(SDL_Window* window)$/;"	f	typeref:typename:bool
ImGui_ImplSDL2_InitForMetal	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^bool ImGui_ImplSDL2_InitForMetal(SDL_Window* window)$/;"	f	typeref:typename:bool
ImGui_ImplSDL2_InitForOpenGL	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^bool ImGui_ImplSDL2_InitForOpenGL(SDL_Window* window, void* sdl_gl_context)$/;"	f	typeref:typename:bool
ImGui_ImplSDL2_InitForOther	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^bool ImGui_ImplSDL2_InitForOther(SDL_Window* window)$/;"	f	typeref:typename:bool
ImGui_ImplSDL2_InitForSDLRenderer	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^bool ImGui_ImplSDL2_InitForSDLRenderer(SDL_Window* window, SDL_Renderer* renderer)$/;"	f	typeref:typename:bool
ImGui_ImplSDL2_InitForVulkan	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^bool ImGui_ImplSDL2_InitForVulkan(SDL_Window* window)$/;"	f	typeref:typename:bool
ImGui_ImplSDL2_InitPlatformInterface	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^static void ImGui_ImplSDL2_InitPlatformInterface(SDL_Window* window, void* sdl_gl_context)$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL2_KeycodeToImGuiKey	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^static ImGuiKey ImGui_ImplSDL2_KeycodeToImGuiKey(int keycode)$/;"	f	typeref:typename:ImGuiKey	file:
ImGui_ImplSDL2_NewFrame	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^void ImGui_ImplSDL2_NewFrame()$/;"	f	typeref:typename:void
ImGui_ImplSDL2_ProcessEvent	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^bool ImGui_ImplSDL2_ProcessEvent(const SDL_Event* event)$/;"	f	typeref:typename:bool
ImGui_ImplSDL2_RenderWindow	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^static void ImGui_ImplSDL2_RenderWindow(ImGuiViewport* viewport, void*)$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL2_SetClipboardText	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^static void ImGui_ImplSDL2_SetClipboardText(void*, const char* text)$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL2_SetGamepadMode	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^void ImGui_ImplSDL2_SetGamepadMode(ImGui_ImplSDL2_GamepadMode mode, struct _SDL_GameController**/;"	f	typeref:typename:void
ImGui_ImplSDL2_SetPlatformImeData	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^static void ImGui_ImplSDL2_SetPlatformImeData(ImGuiViewport* viewport, ImGuiPlatformImeData* dat/;"	f	typeref:typename:void	file:
ImGui_ImplSDL2_SetWindowAlpha	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^static void ImGui_ImplSDL2_SetWindowAlpha(ImGuiViewport* viewport, float alpha)$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL2_SetWindowFocus	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^static void ImGui_ImplSDL2_SetWindowFocus(ImGuiViewport* viewport)$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL2_SetWindowPos	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^static void ImGui_ImplSDL2_SetWindowPos(ImGuiViewport* viewport, ImVec2 pos)$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL2_SetWindowSize	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^static void ImGui_ImplSDL2_SetWindowSize(ImGuiViewport* viewport, ImVec2 size)$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL2_SetWindowTitle	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^static void ImGui_ImplSDL2_SetWindowTitle(ImGuiViewport* viewport, const char* title)$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL2_ShowWindow	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^static void ImGui_ImplSDL2_ShowWindow(ImGuiViewport* viewport)$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL2_Shutdown	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^void ImGui_ImplSDL2_Shutdown()$/;"	f	typeref:typename:void
ImGui_ImplSDL2_ShutdownPlatformInterface	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^static void ImGui_ImplSDL2_ShutdownPlatformInterface()$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL2_SwapBuffers	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^static void ImGui_ImplSDL2_SwapBuffers(ImGuiViewport* viewport, void*)$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL2_UpdateGamepadAnalog	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^static void ImGui_ImplSDL2_UpdateGamepadAnalog(ImGui_ImplSDL2_Data* bd, ImGuiIO& io, ImGuiKey ke/;"	f	typeref:typename:void	file:
ImGui_ImplSDL2_UpdateGamepadButton	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^static void ImGui_ImplSDL2_UpdateGamepadButton(ImGui_ImplSDL2_Data* bd, ImGuiIO& io, ImGuiKey ke/;"	f	typeref:typename:void	file:
ImGui_ImplSDL2_UpdateGamepads	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^static void ImGui_ImplSDL2_UpdateGamepads()$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL2_UpdateKeyModifiers	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^static void ImGui_ImplSDL2_UpdateKeyModifiers(SDL_Keymod sdl_key_mods)$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL2_UpdateMonitors	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^static void ImGui_ImplSDL2_UpdateMonitors()$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL2_UpdateMouseCursor	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^static void ImGui_ImplSDL2_UpdateMouseCursor()$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL2_UpdateMouseData	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^static void ImGui_ImplSDL2_UpdateMouseData()$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL2_ViewportData	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^    ImGui_ImplSDL2_ViewportData() { Window = nullptr; WindowID = 0; WindowOwned = false; GLConte/;"	f	struct:ImGui_ImplSDL2_ViewportData	file:
ImGui_ImplSDL2_ViewportData	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^struct ImGui_ImplSDL2_ViewportData$/;"	s	file:
ImGui_ImplSDL3_CloseGamepads	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^static void ImGui_ImplSDL3_CloseGamepads()$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL3_CreateVkSurface	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^static int ImGui_ImplSDL3_CreateVkSurface(ImGuiViewport* viewport, ImU64 vk_instance, const void/;"	f	typeref:typename:int	file:
ImGui_ImplSDL3_CreateWindow	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^static void ImGui_ImplSDL3_CreateWindow(ImGuiViewport* viewport)$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL3_Data	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^    ImGui_ImplSDL3_Data()   { memset((void*)this, 0, sizeof(*this)); }$/;"	f	struct:ImGui_ImplSDL3_Data	file:
ImGui_ImplSDL3_Data	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^struct ImGui_ImplSDL3_Data$/;"	s	file:
ImGui_ImplSDL3_DestroyWindow	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^static void ImGui_ImplSDL3_DestroyWindow(ImGuiViewport* viewport)$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL3_GamepadMode	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.h	/^enum ImGui_ImplSDL3_GamepadMode { ImGui_ImplSDL3_GamepadMode_AutoFirst, ImGui_ImplSDL3_GamepadMo/;"	g
ImGui_ImplSDL3_GamepadMode_AutoAll	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.h	/^enum ImGui_ImplSDL3_GamepadMode { ImGui_ImplSDL3_GamepadMode_AutoFirst, ImGui_ImplSDL3_GamepadMo/;"	e	enum:ImGui_ImplSDL3_GamepadMode
ImGui_ImplSDL3_GamepadMode_AutoFirst	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.h	/^enum ImGui_ImplSDL3_GamepadMode { ImGui_ImplSDL3_GamepadMode_AutoFirst, ImGui_ImplSDL3_GamepadMo/;"	e	enum:ImGui_ImplSDL3_GamepadMode
ImGui_ImplSDL3_GamepadMode_Manual	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.h	/^enum ImGui_ImplSDL3_GamepadMode { ImGui_ImplSDL3_GamepadMode_AutoFirst, ImGui_ImplSDL3_GamepadMo/;"	e	enum:ImGui_ImplSDL3_GamepadMode
ImGui_ImplSDL3_GetBackendData	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^static ImGui_ImplSDL3_Data* ImGui_ImplSDL3_GetBackendData()$/;"	f	typeref:typename:ImGui_ImplSDL3_Data *	file:
ImGui_ImplSDL3_GetClipboardText	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^static const char* ImGui_ImplSDL3_GetClipboardText(void*)$/;"	f	typeref:typename:const char *	file:
ImGui_ImplSDL3_GetWindowFocus	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^static bool ImGui_ImplSDL3_GetWindowFocus(ImGuiViewport* viewport)$/;"	f	typeref:typename:bool	file:
ImGui_ImplSDL3_GetWindowMinimized	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^static bool ImGui_ImplSDL3_GetWindowMinimized(ImGuiViewport* viewport)$/;"	f	typeref:typename:bool	file:
ImGui_ImplSDL3_GetWindowPos	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^static ImVec2 ImGui_ImplSDL3_GetWindowPos(ImGuiViewport* viewport)$/;"	f	typeref:typename:ImVec2	file:
ImGui_ImplSDL3_GetWindowSize	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^static ImVec2 ImGui_ImplSDL3_GetWindowSize(ImGuiViewport* viewport)$/;"	f	typeref:typename:ImVec2	file:
ImGui_ImplSDL3_Init	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^static bool ImGui_ImplSDL3_Init(SDL_Window* window, SDL_Renderer* renderer, void* sdl_gl_context/;"	f	typeref:typename:bool	file:
ImGui_ImplSDL3_InitForD3D	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^bool ImGui_ImplSDL3_InitForD3D(SDL_Window* window)$/;"	f	typeref:typename:bool
ImGui_ImplSDL3_InitForMetal	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^bool ImGui_ImplSDL3_InitForMetal(SDL_Window* window)$/;"	f	typeref:typename:bool
ImGui_ImplSDL3_InitForOpenGL	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^bool ImGui_ImplSDL3_InitForOpenGL(SDL_Window* window, void* sdl_gl_context)$/;"	f	typeref:typename:bool
ImGui_ImplSDL3_InitForOther	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^bool ImGui_ImplSDL3_InitForOther(SDL_Window* window)$/;"	f	typeref:typename:bool
ImGui_ImplSDL3_InitForSDLRenderer	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^bool ImGui_ImplSDL3_InitForSDLRenderer(SDL_Window* window, SDL_Renderer* renderer)$/;"	f	typeref:typename:bool
ImGui_ImplSDL3_InitForVulkan	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^bool ImGui_ImplSDL3_InitForVulkan(SDL_Window* window)$/;"	f	typeref:typename:bool
ImGui_ImplSDL3_InitPlatformInterface	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^static void ImGui_ImplSDL3_InitPlatformInterface(SDL_Window* window, void* sdl_gl_context)$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL3_KeycodeToImGuiKey	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^static ImGuiKey ImGui_ImplSDL3_KeycodeToImGuiKey(int keycode)$/;"	f	typeref:typename:ImGuiKey	file:
ImGui_ImplSDL3_NewFrame	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^void ImGui_ImplSDL3_NewFrame()$/;"	f	typeref:typename:void
ImGui_ImplSDL3_ProcessEvent	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^bool ImGui_ImplSDL3_ProcessEvent(const SDL_Event* event)$/;"	f	typeref:typename:bool
ImGui_ImplSDL3_RenderWindow	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^static void ImGui_ImplSDL3_RenderWindow(ImGuiViewport* viewport, void*)$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL3_SetClipboardText	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^static void ImGui_ImplSDL3_SetClipboardText(void*, const char* text)$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL3_SetGamepadMode	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^void ImGui_ImplSDL3_SetGamepadMode(ImGui_ImplSDL3_GamepadMode mode, SDL_Gamepad** manual_gamepad/;"	f	typeref:typename:void
ImGui_ImplSDL3_SetPlatformImeData	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^static void ImGui_ImplSDL3_SetPlatformImeData(ImGuiViewport* viewport, ImGuiPlatformImeData* dat/;"	f	typeref:typename:void	file:
ImGui_ImplSDL3_SetWindowAlpha	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^static void ImGui_ImplSDL3_SetWindowAlpha(ImGuiViewport* viewport, float alpha)$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL3_SetWindowFocus	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^static void ImGui_ImplSDL3_SetWindowFocus(ImGuiViewport* viewport)$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL3_SetWindowPos	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^static void ImGui_ImplSDL3_SetWindowPos(ImGuiViewport* viewport, ImVec2 pos)$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL3_SetWindowSize	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^static void ImGui_ImplSDL3_SetWindowSize(ImGuiViewport* viewport, ImVec2 size)$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL3_SetWindowTitle	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^static void ImGui_ImplSDL3_SetWindowTitle(ImGuiViewport* viewport, const char* title)$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL3_SetupPlatformHandles	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^static void ImGui_ImplSDL3_SetupPlatformHandles(ImGuiViewport* viewport, SDL_Window* window)$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL3_ShowWindow	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^static void ImGui_ImplSDL3_ShowWindow(ImGuiViewport* viewport)$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL3_Shutdown	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^void ImGui_ImplSDL3_Shutdown()$/;"	f	typeref:typename:void
ImGui_ImplSDL3_ShutdownPlatformInterface	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^static void ImGui_ImplSDL3_ShutdownPlatformInterface()$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL3_SwapBuffers	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^static void ImGui_ImplSDL3_SwapBuffers(ImGuiViewport* viewport, void*)$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL3_UpdateGamepadAnalog	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^static void ImGui_ImplSDL3_UpdateGamepadAnalog(ImGui_ImplSDL3_Data* bd, ImGuiIO& io, ImGuiKey ke/;"	f	typeref:typename:void	file:
ImGui_ImplSDL3_UpdateGamepadButton	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^static void ImGui_ImplSDL3_UpdateGamepadButton(ImGui_ImplSDL3_Data* bd, ImGuiIO& io, ImGuiKey ke/;"	f	typeref:typename:void	file:
ImGui_ImplSDL3_UpdateGamepads	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^static void ImGui_ImplSDL3_UpdateGamepads()$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL3_UpdateKeyModifiers	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^static void ImGui_ImplSDL3_UpdateKeyModifiers(SDL_Keymod sdl_key_mods)$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL3_UpdateMonitors	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^static void ImGui_ImplSDL3_UpdateMonitors()$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL3_UpdateMouseCursor	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^static void ImGui_ImplSDL3_UpdateMouseCursor()$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL3_UpdateMouseData	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^static void ImGui_ImplSDL3_UpdateMouseData()$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL3_ViewportData	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^    ImGui_ImplSDL3_ViewportData() { Window = nullptr; WindowID = 0; WindowOwned = false; GLConte/;"	f	struct:ImGui_ImplSDL3_ViewportData	file:
ImGui_ImplSDL3_ViewportData	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^struct ImGui_ImplSDL3_ViewportData$/;"	s	file:
ImGui_ImplSDLRenderer2_CreateDeviceObjects	build/_deps/imgui-proj-src/backends/imgui_impl_sdlrenderer2.cpp	/^bool ImGui_ImplSDLRenderer2_CreateDeviceObjects()$/;"	f	typeref:typename:bool
ImGui_ImplSDLRenderer2_CreateFontsTexture	build/_deps/imgui-proj-src/backends/imgui_impl_sdlrenderer2.cpp	/^bool ImGui_ImplSDLRenderer2_CreateFontsTexture()$/;"	f	typeref:typename:bool
ImGui_ImplSDLRenderer2_Data	build/_deps/imgui-proj-src/backends/imgui_impl_sdlrenderer2.cpp	/^    ImGui_ImplSDLRenderer2_Data() { memset((void*)this, 0, sizeof(*this)); }$/;"	f	struct:ImGui_ImplSDLRenderer2_Data	file:
ImGui_ImplSDLRenderer2_Data	build/_deps/imgui-proj-src/backends/imgui_impl_sdlrenderer2.cpp	/^struct ImGui_ImplSDLRenderer2_Data$/;"	s	file:
ImGui_ImplSDLRenderer2_DestroyDeviceObjects	build/_deps/imgui-proj-src/backends/imgui_impl_sdlrenderer2.cpp	/^void ImGui_ImplSDLRenderer2_DestroyDeviceObjects()$/;"	f	typeref:typename:void
ImGui_ImplSDLRenderer2_DestroyFontsTexture	build/_deps/imgui-proj-src/backends/imgui_impl_sdlrenderer2.cpp	/^void ImGui_ImplSDLRenderer2_DestroyFontsTexture()$/;"	f	typeref:typename:void
ImGui_ImplSDLRenderer2_GetBackendData	build/_deps/imgui-proj-src/backends/imgui_impl_sdlrenderer2.cpp	/^static ImGui_ImplSDLRenderer2_Data* ImGui_ImplSDLRenderer2_GetBackendData()$/;"	f	typeref:typename:ImGui_ImplSDLRenderer2_Data *	file:
ImGui_ImplSDLRenderer2_Init	build/_deps/imgui-proj-src/backends/imgui_impl_sdlrenderer2.cpp	/^bool ImGui_ImplSDLRenderer2_Init(SDL_Renderer* renderer)$/;"	f	typeref:typename:bool
ImGui_ImplSDLRenderer2_NewFrame	build/_deps/imgui-proj-src/backends/imgui_impl_sdlrenderer2.cpp	/^void ImGui_ImplSDLRenderer2_NewFrame()$/;"	f	typeref:typename:void
ImGui_ImplSDLRenderer2_RenderDrawData	build/_deps/imgui-proj-src/backends/imgui_impl_sdlrenderer2.cpp	/^void ImGui_ImplSDLRenderer2_RenderDrawData(ImDrawData* draw_data)$/;"	f	typeref:typename:void
ImGui_ImplSDLRenderer2_SetupRenderState	build/_deps/imgui-proj-src/backends/imgui_impl_sdlrenderer2.cpp	/^static void ImGui_ImplSDLRenderer2_SetupRenderState()$/;"	f	typeref:typename:void	file:
ImGui_ImplSDLRenderer2_Shutdown	build/_deps/imgui-proj-src/backends/imgui_impl_sdlrenderer2.cpp	/^void ImGui_ImplSDLRenderer2_Shutdown()$/;"	f	typeref:typename:void
ImGui_ImplSDLRenderer3_CreateDeviceObjects	build/_deps/imgui-proj-src/backends/imgui_impl_sdlrenderer3.cpp	/^bool ImGui_ImplSDLRenderer3_CreateDeviceObjects()$/;"	f	typeref:typename:bool
ImGui_ImplSDLRenderer3_CreateFontsTexture	build/_deps/imgui-proj-src/backends/imgui_impl_sdlrenderer3.cpp	/^bool ImGui_ImplSDLRenderer3_CreateFontsTexture()$/;"	f	typeref:typename:bool
ImGui_ImplSDLRenderer3_Data	build/_deps/imgui-proj-src/backends/imgui_impl_sdlrenderer3.cpp	/^    ImGui_ImplSDLRenderer3_Data() { memset((void*)this, 0, sizeof(*this)); }$/;"	f	struct:ImGui_ImplSDLRenderer3_Data	file:
ImGui_ImplSDLRenderer3_Data	build/_deps/imgui-proj-src/backends/imgui_impl_sdlrenderer3.cpp	/^struct ImGui_ImplSDLRenderer3_Data$/;"	s	file:
ImGui_ImplSDLRenderer3_DestroyDeviceObjects	build/_deps/imgui-proj-src/backends/imgui_impl_sdlrenderer3.cpp	/^void ImGui_ImplSDLRenderer3_DestroyDeviceObjects()$/;"	f	typeref:typename:void
ImGui_ImplSDLRenderer3_DestroyFontsTexture	build/_deps/imgui-proj-src/backends/imgui_impl_sdlrenderer3.cpp	/^void ImGui_ImplSDLRenderer3_DestroyFontsTexture()$/;"	f	typeref:typename:void
ImGui_ImplSDLRenderer3_GetBackendData	build/_deps/imgui-proj-src/backends/imgui_impl_sdlrenderer3.cpp	/^static ImGui_ImplSDLRenderer3_Data* ImGui_ImplSDLRenderer3_GetBackendData()$/;"	f	typeref:typename:ImGui_ImplSDLRenderer3_Data *	file:
ImGui_ImplSDLRenderer3_Init	build/_deps/imgui-proj-src/backends/imgui_impl_sdlrenderer3.cpp	/^bool ImGui_ImplSDLRenderer3_Init(SDL_Renderer* renderer)$/;"	f	typeref:typename:bool
ImGui_ImplSDLRenderer3_NewFrame	build/_deps/imgui-proj-src/backends/imgui_impl_sdlrenderer3.cpp	/^void ImGui_ImplSDLRenderer3_NewFrame()$/;"	f	typeref:typename:void
ImGui_ImplSDLRenderer3_RenderDrawData	build/_deps/imgui-proj-src/backends/imgui_impl_sdlrenderer3.cpp	/^void ImGui_ImplSDLRenderer3_RenderDrawData(ImDrawData* draw_data)$/;"	f	typeref:typename:void
ImGui_ImplSDLRenderer3_SetupRenderState	build/_deps/imgui-proj-src/backends/imgui_impl_sdlrenderer3.cpp	/^static void ImGui_ImplSDLRenderer3_SetupRenderState()$/;"	f	typeref:typename:void	file:
ImGui_ImplSDLRenderer3_Shutdown	build/_deps/imgui-proj-src/backends/imgui_impl_sdlrenderer3.cpp	/^void ImGui_ImplSDLRenderer3_Shutdown()$/;"	f	typeref:typename:void
ImGui_ImplVulkanH_CreateOrResizeWindow	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkanH_CreateOrResizeWindow(VkInstance instance, VkPhysicalDevice physical_devic/;"	f	typeref:typename:void
ImGui_ImplVulkanH_CreateWindowCommandBuffers	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkanH_CreateWindowCommandBuffers(VkPhysicalDevice physical_device, VkDevice dev/;"	f	typeref:typename:void
ImGui_ImplVulkanH_CreateWindowSwapChain	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkanH_CreateWindowSwapChain(VkPhysicalDevice physical_device, VkDevice device, /;"	f	typeref:typename:void
ImGui_ImplVulkanH_DestroyAllViewportsRenderBuffers	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkanH_DestroyAllViewportsRenderBuffers(VkDevice device, const VkAllocationCallb/;"	f	typeref:typename:void
ImGui_ImplVulkanH_DestroyFrame	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkanH_DestroyFrame(VkDevice device, ImGui_ImplVulkanH_Frame* fd, const VkAlloca/;"	f	typeref:typename:void
ImGui_ImplVulkanH_DestroyFrameSemaphores	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkanH_DestroyFrameSemaphores(VkDevice device, ImGui_ImplVulkanH_FrameSemaphores/;"	f	typeref:typename:void
ImGui_ImplVulkanH_DestroyWindow	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkanH_DestroyWindow(VkInstance instance, VkDevice device, ImGui_ImplVulkanH_Win/;"	f	typeref:typename:void
ImGui_ImplVulkanH_Frame	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.h	/^struct ImGui_ImplVulkanH_Frame$/;"	s
ImGui_ImplVulkanH_FrameSemaphores	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.h	/^struct ImGui_ImplVulkanH_FrameSemaphores$/;"	s
ImGui_ImplVulkanH_GetMinImageCountFromPresentMode	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^int ImGui_ImplVulkanH_GetMinImageCountFromPresentMode(VkPresentModeKHR present_mode)$/;"	f	typeref:typename:int
ImGui_ImplVulkanH_SelectPresentMode	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^VkPresentModeKHR ImGui_ImplVulkanH_SelectPresentMode(VkPhysicalDevice physical_device, VkSurface/;"	f	typeref:typename:VkPresentModeKHR
ImGui_ImplVulkanH_SelectSurfaceFormat	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^VkSurfaceFormatKHR ImGui_ImplVulkanH_SelectSurfaceFormat(VkPhysicalDevice physical_device, VkSur/;"	f	typeref:typename:VkSurfaceFormatKHR
ImGui_ImplVulkanH_Window	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.h	/^    ImGui_ImplVulkanH_Window()$/;"	f	struct:ImGui_ImplVulkanH_Window
ImGui_ImplVulkanH_Window	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.h	/^struct ImGui_ImplVulkanH_Window$/;"	s
ImGui_ImplVulkan_AddTexture	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^VkDescriptorSet ImGui_ImplVulkan_AddTexture(VkSampler sampler, VkImageView image_view, VkImageLa/;"	f	typeref:typename:VkDescriptorSet
ImGui_ImplVulkan_CreateDeviceObjects	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^bool ImGui_ImplVulkan_CreateDeviceObjects()$/;"	f	typeref:typename:bool
ImGui_ImplVulkan_CreateFontsTexture	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^bool ImGui_ImplVulkan_CreateFontsTexture()$/;"	f	typeref:typename:bool
ImGui_ImplVulkan_CreatePipeline	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^static void ImGui_ImplVulkan_CreatePipeline(VkDevice device, const VkAllocationCallbacks* alloca/;"	f	typeref:typename:void	file:
ImGui_ImplVulkan_CreateShaderModules	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^static void ImGui_ImplVulkan_CreateShaderModules(VkDevice device, const VkAllocationCallbacks* a/;"	f	typeref:typename:void	file:
ImGui_ImplVulkan_CreateWindow	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^static void ImGui_ImplVulkan_CreateWindow(ImGuiViewport* viewport)$/;"	f	typeref:typename:void	file:
ImGui_ImplVulkan_Data	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^    ImGui_ImplVulkan_Data()$/;"	f	struct:ImGui_ImplVulkan_Data	file:
ImGui_ImplVulkan_Data	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^struct ImGui_ImplVulkan_Data$/;"	s	file:
ImGui_ImplVulkan_DestroyDeviceObjects	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^void    ImGui_ImplVulkan_DestroyDeviceObjects()$/;"	f	typeref:typename:void
ImGui_ImplVulkan_DestroyFontsTexture	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkan_DestroyFontsTexture()$/;"	f	typeref:typename:void
ImGui_ImplVulkan_DestroyFrameRenderBuffers	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkan_DestroyFrameRenderBuffers(VkDevice device, ImGui_ImplVulkan_FrameRenderBuf/;"	f	typeref:typename:void
ImGui_ImplVulkan_DestroyWindow	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^static void ImGui_ImplVulkan_DestroyWindow(ImGuiViewport* viewport)$/;"	f	typeref:typename:void	file:
ImGui_ImplVulkan_DestroyWindowRenderBuffers	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkan_DestroyWindowRenderBuffers(VkDevice device, ImGui_ImplVulkan_WindowRenderB/;"	f	typeref:typename:void
ImGui_ImplVulkan_FrameRenderBuffers	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^struct ImGui_ImplVulkan_FrameRenderBuffers$/;"	s	file:
ImGui_ImplVulkan_GetBackendData	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^static ImGui_ImplVulkan_Data* ImGui_ImplVulkan_GetBackendData()$/;"	f	typeref:typename:ImGui_ImplVulkan_Data *	file:
ImGui_ImplVulkan_Init	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^bool    ImGui_ImplVulkan_Init(ImGui_ImplVulkan_InitInfo* info)$/;"	f	typeref:typename:bool
ImGui_ImplVulkan_InitInfo	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.h	/^struct ImGui_ImplVulkan_InitInfo$/;"	s
ImGui_ImplVulkan_InitPlatformInterface	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkan_InitPlatformInterface()$/;"	f	typeref:typename:void
ImGui_ImplVulkan_LoadFunctions	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^bool    ImGui_ImplVulkan_LoadFunctions(PFN_vkVoidFunction(*loader_func)(const char* function_nam/;"	f	typeref:typename:bool
ImGui_ImplVulkan_MemoryType	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^static uint32_t ImGui_ImplVulkan_MemoryType(VkMemoryPropertyFlags properties, uint32_t type_bits/;"	f	typeref:typename:uint32_t	file:
ImGui_ImplVulkan_NewFrame	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkan_NewFrame()$/;"	f	typeref:typename:void
ImGui_ImplVulkan_RemoveTexture	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkan_RemoveTexture(VkDescriptorSet descriptor_set)$/;"	f	typeref:typename:void
ImGui_ImplVulkan_RenderDrawData	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkan_RenderDrawData(ImDrawData* draw_data, VkCommandBuffer command_buffer, VkPi/;"	f	typeref:typename:void
ImGui_ImplVulkan_RenderWindow	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^static void ImGui_ImplVulkan_RenderWindow(ImGuiViewport* viewport, void*)$/;"	f	typeref:typename:void	file:
ImGui_ImplVulkan_SetMinImageCount	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkan_SetMinImageCount(uint32_t min_image_count)$/;"	f	typeref:typename:void
ImGui_ImplVulkan_SetWindowSize	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^static void ImGui_ImplVulkan_SetWindowSize(ImGuiViewport* viewport, ImVec2 size)$/;"	f	typeref:typename:void	file:
ImGui_ImplVulkan_SetupRenderState	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^static void ImGui_ImplVulkan_SetupRenderState(ImDrawData* draw_data, VkPipeline pipeline, VkComm/;"	f	typeref:typename:void	file:
ImGui_ImplVulkan_Shutdown	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkan_Shutdown()$/;"	f	typeref:typename:void
ImGui_ImplVulkan_ShutdownPlatformInterface	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkan_ShutdownPlatformInterface()$/;"	f	typeref:typename:void
ImGui_ImplVulkan_SwapBuffers	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^static void ImGui_ImplVulkan_SwapBuffers(ImGuiViewport* viewport, void*)$/;"	f	typeref:typename:void	file:
ImGui_ImplVulkan_ViewportData	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^    ImGui_ImplVulkan_ViewportData()         { WindowOwned = false; memset(&RenderBuffers, 0, siz/;"	f	struct:ImGui_ImplVulkan_ViewportData	file:
ImGui_ImplVulkan_ViewportData	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^struct ImGui_ImplVulkan_ViewportData$/;"	s	file:
ImGui_ImplVulkan_WindowRenderBuffers	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^struct ImGui_ImplVulkan_WindowRenderBuffers$/;"	s	file:
ImGui_ImplWGPU_CreateDeviceObjects	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.cpp	/^bool ImGui_ImplWGPU_CreateDeviceObjects()$/;"	f	typeref:typename:bool
ImGui_ImplWGPU_CreateFontsTexture	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.cpp	/^static void ImGui_ImplWGPU_CreateFontsTexture()$/;"	f	typeref:typename:void	file:
ImGui_ImplWGPU_CreateImageBindGroup	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.cpp	/^static WGPUBindGroup ImGui_ImplWGPU_CreateImageBindGroup(WGPUBindGroupLayout layout, WGPUTexture/;"	f	typeref:typename:WGPUBindGroup	file:
ImGui_ImplWGPU_CreateShaderModule	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.cpp	/^static WGPUProgrammableStageDescriptor ImGui_ImplWGPU_CreateShaderModule(const char* wgsl_source/;"	f	typeref:typename:WGPUProgrammableStageDescriptor	file:
ImGui_ImplWGPU_CreateUniformBuffer	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.cpp	/^static void ImGui_ImplWGPU_CreateUniformBuffer()$/;"	f	typeref:typename:void	file:
ImGui_ImplWGPU_Data	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.cpp	/^struct ImGui_ImplWGPU_Data$/;"	s	file:
ImGui_ImplWGPU_GetBackendData	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.cpp	/^static ImGui_ImplWGPU_Data* ImGui_ImplWGPU_GetBackendData()$/;"	f	typeref:typename:ImGui_ImplWGPU_Data *	file:
ImGui_ImplWGPU_Init	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.cpp	/^bool ImGui_ImplWGPU_Init(ImGui_ImplWGPU_InitInfo* init_info)$/;"	f	typeref:typename:bool
ImGui_ImplWGPU_InitInfo	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.h	/^    ImGui_ImplWGPU_InitInfo()$/;"	f	struct:ImGui_ImplWGPU_InitInfo
ImGui_ImplWGPU_InitInfo	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.h	/^struct ImGui_ImplWGPU_InitInfo$/;"	s
ImGui_ImplWGPU_InvalidateDeviceObjects	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.cpp	/^void ImGui_ImplWGPU_InvalidateDeviceObjects()$/;"	f	typeref:typename:void
ImGui_ImplWGPU_NewFrame	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.cpp	/^void ImGui_ImplWGPU_NewFrame()$/;"	f	typeref:typename:void
ImGui_ImplWGPU_RenderDrawData	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.cpp	/^void ImGui_ImplWGPU_RenderDrawData(ImDrawData* draw_data, WGPURenderPassEncoder pass_encoder)$/;"	f	typeref:typename:void
ImGui_ImplWGPU_SetupRenderState	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.cpp	/^static void ImGui_ImplWGPU_SetupRenderState(ImDrawData* draw_data, WGPURenderPassEncoder ctx, Fr/;"	f	typeref:typename:void	file:
ImGui_ImplWGPU_Shutdown	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.cpp	/^void ImGui_ImplWGPU_Shutdown()$/;"	f	typeref:typename:void
ImGui_ImplWin32_AddKeyEvent	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^static void ImGui_ImplWin32_AddKeyEvent(ImGuiKey key, bool down, int native_keycode, int native_/;"	f	typeref:typename:void	file:
ImGui_ImplWin32_CreateWindow	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^static void ImGui_ImplWin32_CreateWindow(ImGuiViewport* viewport)$/;"	f	typeref:typename:void	file:
ImGui_ImplWin32_Data	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^    ImGui_ImplWin32_Data()      { memset((void*)this, 0, sizeof(*this)); }$/;"	f	struct:ImGui_ImplWin32_Data	file:
ImGui_ImplWin32_Data	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^struct ImGui_ImplWin32_Data$/;"	s	file:
ImGui_ImplWin32_DestroyWindow	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^static void ImGui_ImplWin32_DestroyWindow(ImGuiViewport* viewport)$/;"	f	typeref:typename:void	file:
ImGui_ImplWin32_EnableAlphaCompositing	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^void ImGui_ImplWin32_EnableAlphaCompositing(void* hwnd)$/;"	f	typeref:typename:void
ImGui_ImplWin32_EnableDpiAwareness	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^void ImGui_ImplWin32_EnableDpiAwareness()$/;"	f	typeref:typename:void
ImGui_ImplWin32_GetBackendData	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^static ImGui_ImplWin32_Data* ImGui_ImplWin32_GetBackendData()$/;"	f	typeref:typename:ImGui_ImplWin32_Data *	file:
ImGui_ImplWin32_GetDpiScaleForHwnd	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^float ImGui_ImplWin32_GetDpiScaleForHwnd(void* hwnd)$/;"	f	typeref:typename:float
ImGui_ImplWin32_GetDpiScaleForMonitor	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^float ImGui_ImplWin32_GetDpiScaleForMonitor(void* monitor)$/;"	f	typeref:typename:float
ImGui_ImplWin32_GetHwndFromViewportID	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^static HWND ImGui_ImplWin32_GetHwndFromViewportID(ImGuiID viewport_id)$/;"	f	typeref:typename:HWND	file:
ImGui_ImplWin32_GetWin32StyleFromViewportFlags	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^static void ImGui_ImplWin32_GetWin32StyleFromViewportFlags(ImGuiViewportFlags flags, DWORD* out_/;"	f	typeref:typename:void	file:
ImGui_ImplWin32_GetWindowDpiScale	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^static float ImGui_ImplWin32_GetWindowDpiScale(ImGuiViewport* viewport)$/;"	f	typeref:typename:float	file:
ImGui_ImplWin32_GetWindowFocus	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^static bool ImGui_ImplWin32_GetWindowFocus(ImGuiViewport* viewport)$/;"	f	typeref:typename:bool	file:
ImGui_ImplWin32_GetWindowMinimized	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^static bool ImGui_ImplWin32_GetWindowMinimized(ImGuiViewport* viewport)$/;"	f	typeref:typename:bool	file:
ImGui_ImplWin32_GetWindowPos	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^static ImVec2 ImGui_ImplWin32_GetWindowPos(ImGuiViewport* viewport)$/;"	f	typeref:typename:ImVec2	file:
ImGui_ImplWin32_GetWindowSize	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^static ImVec2 ImGui_ImplWin32_GetWindowSize(ImGuiViewport* viewport)$/;"	f	typeref:typename:ImVec2	file:
ImGui_ImplWin32_Init	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^IMGUI_IMPL_API bool     ImGui_ImplWin32_Init(void* hwnd)$/;"	f	typeref:typename:IMGUI_IMPL_API bool
ImGui_ImplWin32_InitEx	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^static bool ImGui_ImplWin32_InitEx(void* hwnd, bool platform_has_own_dc)$/;"	f	typeref:typename:bool	file:
ImGui_ImplWin32_InitForOpenGL	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^IMGUI_IMPL_API bool     ImGui_ImplWin32_InitForOpenGL(void* hwnd)$/;"	f	typeref:typename:IMGUI_IMPL_API bool
ImGui_ImplWin32_InitPlatformInterface	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^static void ImGui_ImplWin32_InitPlatformInterface(bool platform_has_own_dc)$/;"	f	typeref:typename:void	file:
ImGui_ImplWin32_NewFrame	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^void    ImGui_ImplWin32_NewFrame()$/;"	f	typeref:typename:void
ImGui_ImplWin32_OnChangedViewport	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^static void ImGui_ImplWin32_OnChangedViewport(ImGuiViewport* viewport)$/;"	f	typeref:typename:void	file:
ImGui_ImplWin32_ProcessKeyEventsWorkarounds	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^static void ImGui_ImplWin32_ProcessKeyEventsWorkarounds()$/;"	f	typeref:typename:void	file:
ImGui_ImplWin32_SetWindowAlpha	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^static void ImGui_ImplWin32_SetWindowAlpha(ImGuiViewport* viewport, float alpha)$/;"	f	typeref:typename:void	file:
ImGui_ImplWin32_SetWindowFocus	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^static void ImGui_ImplWin32_SetWindowFocus(ImGuiViewport* viewport)$/;"	f	typeref:typename:void	file:
ImGui_ImplWin32_SetWindowPos	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^static void ImGui_ImplWin32_SetWindowPos(ImGuiViewport* viewport, ImVec2 pos)$/;"	f	typeref:typename:void	file:
ImGui_ImplWin32_SetWindowSize	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^static void ImGui_ImplWin32_SetWindowSize(ImGuiViewport* viewport, ImVec2 size)$/;"	f	typeref:typename:void	file:
ImGui_ImplWin32_SetWindowTitle	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^static void ImGui_ImplWin32_SetWindowTitle(ImGuiViewport* viewport, const char* title)$/;"	f	typeref:typename:void	file:
ImGui_ImplWin32_ShowWindow	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^static void ImGui_ImplWin32_ShowWindow(ImGuiViewport* viewport)$/;"	f	typeref:typename:void	file:
ImGui_ImplWin32_Shutdown	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^void    ImGui_ImplWin32_Shutdown()$/;"	f	typeref:typename:void
ImGui_ImplWin32_ShutdownPlatformInterface	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^static void ImGui_ImplWin32_ShutdownPlatformInterface()$/;"	f	typeref:typename:void	file:
ImGui_ImplWin32_UpdateGamepads	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^static void ImGui_ImplWin32_UpdateGamepads()$/;"	f	typeref:typename:void	file:
ImGui_ImplWin32_UpdateKeyModifiers	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^static void ImGui_ImplWin32_UpdateKeyModifiers()$/;"	f	typeref:typename:void	file:
ImGui_ImplWin32_UpdateKeyboardCodePage	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^static void ImGui_ImplWin32_UpdateKeyboardCodePage()$/;"	f	typeref:typename:void	file:
ImGui_ImplWin32_UpdateMonitors	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^static void ImGui_ImplWin32_UpdateMonitors()$/;"	f	typeref:typename:void	file:
ImGui_ImplWin32_UpdateMonitors_EnumFunc	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^static BOOL CALLBACK ImGui_ImplWin32_UpdateMonitors_EnumFunc(HMONITOR monitor, HDC, LPRECT, LPAR/;"	f	typeref:typename:BOOL CALLBACK	file:
ImGui_ImplWin32_UpdateMouseCursor	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^static bool ImGui_ImplWin32_UpdateMouseCursor()$/;"	f	typeref:typename:bool	file:
ImGui_ImplWin32_UpdateMouseData	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^static void ImGui_ImplWin32_UpdateMouseData()$/;"	f	typeref:typename:void	file:
ImGui_ImplWin32_UpdateWindow	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^static void ImGui_ImplWin32_UpdateWindow(ImGuiViewport* viewport)$/;"	f	typeref:typename:void	file:
ImGui_ImplWin32_ViewportData	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^    ImGui_ImplWin32_ViewportData() { Hwnd = HwndParent = nullptr; HwndOwned = false;  DwStyle = /;"	f	struct:ImGui_ImplWin32_ViewportData	file:
ImGui_ImplWin32_ViewportData	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^struct ImGui_ImplWin32_ViewportData$/;"	s	file:
ImGui_ImplWin32_VirtualKeyToImGuiKey	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^static ImGuiKey ImGui_ImplWin32_VirtualKeyToImGuiKey(WPARAM wParam)$/;"	f	typeref:typename:ImGuiKey	file:
ImGui_ImplWin32_WndProcHandler	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^IMGUI_IMPL_API LRESULT ImGui_ImplWin32_WndProcHandler(HWND hwnd, UINT msg, WPARAM wParam, LPARAM/;"	f	typeref:typename:IMGUI_IMPL_API LRESULT
ImGui_ImplWin32_WndProcHandler_PlatformWindow	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^static LRESULT CALLBACK ImGui_ImplWin32_WndProcHandler_PlatformWindow(HWND hWnd, UINT msg, WPARA/;"	f	typeref:typename:LRESULT CALLBACK	file:
ImGui_WaitForPendingOperations	build/_deps/imgui-proj-src/backends/imgui_impl_dx12.cpp	/^static void ImGui_WaitForPendingOperations(ImGui_ImplDX12_ViewportData* vd)$/;"	f	typeref:typename:void	file:
ImHashData	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiID ImHashData(const void* data_p, size_t data_size, ImGuiID seed)$/;"	f	typeref:typename:ImGuiID
ImHashStr	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiID ImHashStr(const char* data_p, size_t data_size, ImGuiID seed)$/;"	f	typeref:typename:ImGuiID
ImInvLength	build/_deps/imgui-proj-src/imgui_internal.h	/^static inline float  ImInvLength(const ImVec2& lhs, float fail_value)           { float d = (lhs/;"	f	typeref:typename:float
ImIsFloatAboveGuaranteedIntegerPrecision	build/_deps/imgui-proj-src/imgui_internal.h	/^static inline bool   ImIsFloatAboveGuaranteedIntegerPrecision(float f)          { return f <= -1/;"	f	typeref:typename:bool
ImIsPowerOfTwo	build/_deps/imgui-proj-src/imgui_internal.h	/^static inline bool      ImIsPowerOfTwo(ImU64 v)         { return v != 0 && (v & (v - 1)) == 0; }$/;"	f	typeref:typename:bool
ImIsPowerOfTwo	build/_deps/imgui-proj-src/imgui_internal.h	/^static inline bool      ImIsPowerOfTwo(int v)           { return v != 0 && (v & (v - 1)) == 0; }$/;"	f	typeref:typename:bool
ImLengthSqr	build/_deps/imgui-proj-src/imgui_internal.h	/^static inline float  ImLengthSqr(const ImVec2& lhs)                             { return (lhs.x /;"	f	typeref:typename:float
ImLengthSqr	build/_deps/imgui-proj-src/imgui_internal.h	/^static inline float  ImLengthSqr(const ImVec4& lhs)                             { return (lhs.x /;"	f	typeref:typename:float
ImLerp	build/_deps/imgui-proj-src/imgui_internal.h	/^static inline ImVec2 ImLerp(const ImVec2& a, const ImVec2& b, const ImVec2& t)  { return ImVec2(/;"	f	typeref:typename:ImVec2
ImLerp	build/_deps/imgui-proj-src/imgui_internal.h	/^static inline ImVec2 ImLerp(const ImVec2& a, const ImVec2& b, float t)          { return ImVec2(/;"	f	typeref:typename:ImVec2
ImLerp	build/_deps/imgui-proj-src/imgui_internal.h	/^static inline ImVec4 ImLerp(const ImVec4& a, const ImVec4& b, float t)          { return ImVec4(/;"	f	typeref:typename:ImVec4
ImLerp	build/_deps/imgui-proj-src/imgui_internal.h	/^template<typename T> static inline T ImLerp(T a, T b, float t)                  { return (T)(a +/;"	f	typeref:typename:T
ImLineClosestPoint	build/_deps/imgui-proj-src/imgui.cpp	/^ImVec2 ImLineClosestPoint(const ImVec2& a, const ImVec2& b, const ImVec2& p)$/;"	f	typeref:typename:ImVec2
ImLinearSweep	build/_deps/imgui-proj-src/imgui_internal.h	/^static inline float  ImLinearSweep(float current, float target, float speed)    { if (current < /;"	f	typeref:typename:float
ImLog	build/_deps/imgui-proj-src/imgui_internal.h	/^static inline double ImLog(double x)            { return log(x); }$/;"	f	typeref:typename:double
ImLog	build/_deps/imgui-proj-src/imgui_internal.h	/^static inline float  ImLog(float x)             { return logf(x); }             \/\/ DragBehavio/;"	f	typeref:typename:float
ImMax	build/_deps/imgui-proj-src/imgui_internal.h	/^static inline ImVec2 ImMax(const ImVec2& lhs, const ImVec2& rhs)                { return ImVec2(/;"	f	typeref:typename:ImVec2
ImMax	build/_deps/imgui-proj-src/imgui_internal.h	/^template<typename T> static inline T ImMax(T lhs, T rhs)                        { return lhs >= /;"	f	typeref:typename:T
ImMin	build/_deps/imgui-proj-src/imgui_internal.h	/^static inline ImVec2 ImMin(const ImVec2& lhs, const ImVec2& rhs)                { return ImVec2(/;"	f	typeref:typename:ImVec2
ImMin	build/_deps/imgui-proj-src/imgui_internal.h	/^template<typename T> static inline T ImMin(T lhs, T rhs)                        { return lhs < r/;"	f	typeref:typename:T
ImModPositive	build/_deps/imgui-proj-src/imgui_internal.h	/^static inline int    ImModPositive(int a, int b)                                { return (a + b)/;"	f	typeref:typename:int
ImMul	build/_deps/imgui-proj-src/imgui_internal.h	/^static inline ImVec2 ImMul(const ImVec2& lhs, const ImVec2& rhs)                { return ImVec2(/;"	f	typeref:typename:ImVec2
ImNewWrapper	build/_deps/imgui-proj-src/imgui.h	/^struct ImNewWrapper {};$/;"	s
ImParseFormatFindEnd	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^const char* ImParseFormatFindEnd(const char* fmt)$/;"	f	typeref:typename:const char *
ImParseFormatFindStart	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^const char* ImParseFormatFindStart(const char* fmt)$/;"	f	typeref:typename:const char *
ImParseFormatPrecision	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^int ImParseFormatPrecision(const char* fmt, int default_precision)$/;"	f	typeref:typename:int
ImParseFormatSanitizeForPrinting	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImParseFormatSanitizeForPrinting(const char* fmt_in, char* fmt_out, size_t fmt_out_size)$/;"	f	typeref:typename:void
ImParseFormatSanitizeForScanning	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^const char* ImParseFormatSanitizeForScanning(const char* fmt_in, char* fmt_out, size_t fmt_out_s/;"	f	typeref:typename:const char *
ImParseFormatTrimDecorations	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^const char* ImParseFormatTrimDecorations(const char* fmt, char* buf, size_t buf_size)$/;"	f	typeref:typename:const char *
ImPool	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImPool()    { FreeIdx = AliveCount = 0; }$/;"	f	struct:ImPool
ImPool	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImPool$/;"	s
ImPoolIdx	build/_deps/imgui-proj-src/imgui_internal.h	/^typedef int ImPoolIdx;$/;"	t	typeref:typename:int
ImPow	build/_deps/imgui-proj-src/imgui_internal.h	/^static inline double ImPow(double x, double y)  { return pow(x, y); }$/;"	f	typeref:typename:double
ImPow	build/_deps/imgui-proj-src/imgui_internal.h	/^static inline float  ImPow(float x, float y)    { return powf(x, y); }          \/\/ DragBehavio/;"	f	typeref:typename:IM_MSVC_RUNTIME_CHECKS_OFF float
ImQsort	build/_deps/imgui-proj-src/imgui_internal.h	/^static inline void      ImQsort(void* base, size_t count, size_t size_of_element, int(IMGUI_CDEC/;"	f	typeref:typename:void
ImRect	build/_deps/imgui-proj-src/imgui_internal.h	/^    constexpr ImRect()                                        : Min(0.0f, 0.0f), Max(0.0f, 0.0f)/;"	f	struct:ImRect
ImRect	build/_deps/imgui-proj-src/imgui_internal.h	/^    constexpr ImRect(const ImVec2& min, const ImVec2& max)    : Min(min), Max(max)              /;"	f	struct:ImRect
ImRect	build/_deps/imgui-proj-src/imgui_internal.h	/^    constexpr ImRect(const ImVec4& v)                         : Min(v.x, v.y), Max(v.z, v.w)    /;"	f	struct:ImRect
ImRect	build/_deps/imgui-proj-src/imgui_internal.h	/^    constexpr ImRect(float x1, float y1, float x2, float y2)  : Min(x1, y1), Max(x2, y2)        /;"	f	struct:ImRect
ImRect	build/_deps/imgui-proj-src/imgui_internal.h	/^struct IMGUI_API ImRect$/;"	s
ImRotate	build/_deps/imgui-proj-src/imgui_internal.h	/^static inline ImVec2 ImRotate(const ImVec2& v, float cos_a, float sin_a)        { return ImVec2(/;"	f	typeref:typename:ImVec2
ImRsqrt	build/_deps/imgui-proj-src/imgui_internal.h	/^static inline double ImRsqrt(double x)          { return 1.0 \/ sqrt(x); }$/;"	f	typeref:typename:double
ImRsqrt	build/_deps/imgui-proj-src/imgui_internal.h	/^static inline float  ImRsqrt(float x)           { return 1.0f \/ sqrtf(x); }$/;"	f	typeref:typename:float
ImRsqrt	build/_deps/imgui-proj-src/imgui_internal.h	/^static inline float  ImRsqrt(float x)           { return _mm_cvtss_f32(_mm_rsqrt_ss(_mm_set_ss(x/;"	f	typeref:typename:float
ImS16	build/_deps/imgui-proj-src/imgui.h	/^typedef signed short        ImS16;  \/\/ 16-bit signed integer$/;"	t	typeref:typename:signed short
ImS32	build/_deps/imgui-proj-src/imgui.h	/^typedef signed int          ImS32;  \/\/ 32-bit signed integer == int$/;"	t	typeref:typename:signed int
ImS64	build/_deps/imgui-proj-src/imgui.h	/^typedef signed   long long  ImS64;  \/\/ 64-bit signed integer$/;"	t	typeref:typename:signed long long
ImS8	build/_deps/imgui-proj-src/imgui.h	/^typedef signed char         ImS8;   \/\/ 8-bit signed integer$/;"	t	typeref:typename:signed char
ImSaturate	build/_deps/imgui-proj-src/imgui_internal.h	/^static inline float  ImSaturate(float f)                                        { return (f < 0./;"	f	typeref:typename:float
ImSign	build/_deps/imgui-proj-src/imgui_internal.h	/^static inline double ImSign(double x)           { return (x < 0.0) ? -1.0 : (x > 0.0) ? 1.0 : 0./;"	f	typeref:typename:double
ImSign	build/_deps/imgui-proj-src/imgui_internal.h	/^static inline float  ImSign(float x)            { return (x < 0.0f) ? -1.0f : (x > 0.0f) ? 1.0f /;"	f	typeref:typename:float
ImSin	build/_deps/imgui-proj-src/imgui_internal.h	/^#define ImSin(/;"	d
ImSpan	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline ImSpan()                                 { Data = DataEnd = NULL; }$/;"	f	struct:ImSpan
ImSpan	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline ImSpan(T* data, T* data_end)             { Data = data; DataEnd = data_end; }$/;"	f	struct:ImSpan
ImSpan	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline ImSpan(T* data, int size)                { Data = data; DataEnd = data + size; }$/;"	f	struct:ImSpan
ImSpan	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImSpan$/;"	s
ImSpanAllocator	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImSpanAllocator()                               { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImSpanAllocator
ImSpanAllocator	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImSpanAllocator$/;"	s
ImSqrt	build/_deps/imgui-proj-src/imgui_internal.h	/^#define ImSqrt(/;"	d
ImStb	build/_deps/imgui-proj-src/imgui_internal.h	/^namespace ImStb$/;"	n
ImStb	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^namespace ImStb$/;"	n	file:
ImStrSkipBlank	build/_deps/imgui-proj-src/imgui.cpp	/^const char* ImStrSkipBlank(const char* str)$/;"	f	typeref:typename:const char *
ImStrTrimBlanks	build/_deps/imgui-proj-src/imgui.cpp	/^void ImStrTrimBlanks(char* buf)$/;"	f	typeref:typename:void
ImStrbolW	build/_deps/imgui-proj-src/imgui.cpp	/^const ImWchar* ImStrbolW(const ImWchar* buf_mid_line, const ImWchar* buf_begin) \/\/ find beginn/;"	f	typeref:typename:const ImWchar *
ImStrchrRange	build/_deps/imgui-proj-src/imgui.cpp	/^const char* ImStrchrRange(const char* str, const char* str_end, char c)$/;"	f	typeref:typename:const char *
ImStrdup	build/_deps/imgui-proj-src/imgui.cpp	/^char* ImStrdup(const char* str)$/;"	f	typeref:typename:char *
ImStrdupcpy	build/_deps/imgui-proj-src/imgui.cpp	/^char* ImStrdupcpy(char* dst, size_t* p_dst_size, const char* src)$/;"	f	typeref:typename:char *
ImStreolRange	build/_deps/imgui-proj-src/imgui.cpp	/^const char* ImStreolRange(const char* str, const char* str_end)$/;"	f	typeref:typename:const char *
ImStricmp	build/_deps/imgui-proj-src/imgui.cpp	/^int ImStricmp(const char* str1, const char* str2)$/;"	f	typeref:typename:int
ImStrimatchlen	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static int ImStrimatchlen(const char* s1, const char* s1_end, const char* s2)$/;"	f	typeref:typename:int	file:
ImStristr	build/_deps/imgui-proj-src/imgui.cpp	/^const char* ImStristr(const char* haystack, const char* haystack_end, const char* needle, const /;"	f	typeref:typename:const char *
ImStrlenW	build/_deps/imgui-proj-src/imgui.cpp	/^int ImStrlenW(const ImWchar* str)$/;"	f	typeref:typename:int
ImStrncpy	build/_deps/imgui-proj-src/imgui.cpp	/^void ImStrncpy(char* dst, const char* src, size_t count)$/;"	f	typeref:typename:void
ImStrnicmp	build/_deps/imgui-proj-src/imgui.cpp	/^int ImStrnicmp(const char* str1, const char* str2, size_t count)$/;"	f	typeref:typename:int
ImSubClampOverflow	build/_deps/imgui-proj-src/imgui_internal.h	/^template<typename T> static inline T ImSubClampOverflow(T a, T b, T mn, T mx)   { if (b > 0 && (/;"	f	typeref:typename:T
ImSwap	build/_deps/imgui-proj-src/imgui_internal.h	/^template<typename T> static inline void ImSwap(T& a, T& b)                      { T tmp = a; a =/;"	f	typeref:typename:void
ImTextCharFromUtf8	build/_deps/imgui-proj-src/imgui.cpp	/^int ImTextCharFromUtf8(unsigned int* out_char, const char* in_text, const char* in_text_end)$/;"	f	typeref:typename:IM_MSVC_RUNTIME_CHECKS_OFF int
ImTextCharToUtf8	build/_deps/imgui-proj-src/imgui.cpp	/^const char* ImTextCharToUtf8(char out_buf[5], unsigned int c)$/;"	f	typeref:typename:const char *
ImTextCharToUtf8_inline	build/_deps/imgui-proj-src/imgui.cpp	/^static inline int ImTextCharToUtf8_inline(char* buf, int buf_size, unsigned int c)$/;"	f	typeref:typename:int	file:
ImTextCountCharsFromUtf8	build/_deps/imgui-proj-src/imgui.cpp	/^int ImTextCountCharsFromUtf8(const char* in_text, const char* in_text_end)$/;"	f	typeref:typename:int
ImTextCountUtf8BytesFromChar	build/_deps/imgui-proj-src/imgui.cpp	/^int ImTextCountUtf8BytesFromChar(const char* in_text, const char* in_text_end)$/;"	f	typeref:typename:int
ImTextCountUtf8BytesFromChar	build/_deps/imgui-proj-src/imgui.cpp	/^static inline int ImTextCountUtf8BytesFromChar(unsigned int c)$/;"	f	typeref:typename:int	file:
ImTextCountUtf8BytesFromStr	build/_deps/imgui-proj-src/imgui.cpp	/^int ImTextCountUtf8BytesFromStr(const ImWchar* in_text, const ImWchar* in_text_end)$/;"	f	typeref:typename:int
ImTextFindPreviousUtf8Codepoint	build/_deps/imgui-proj-src/imgui.cpp	/^const char* ImTextFindPreviousUtf8Codepoint(const char* in_text_start, const char* in_text_curr)$/;"	f	typeref:typename:const char *
ImTextStrFromUtf8	build/_deps/imgui-proj-src/imgui.cpp	/^int ImTextStrFromUtf8(ImWchar* buf, int buf_size, const char* in_text, const char* in_text_end, /;"	f	typeref:typename:int
ImTextStrToUtf8	build/_deps/imgui-proj-src/imgui.cpp	/^int ImTextStrToUtf8(char* out_buf, int out_buf_size, const ImWchar* in_text, const ImWchar* in_t/;"	f	typeref:typename:int
ImTextureID	build/_deps/imgui-proj-src/imgui.h	/^typedef void* ImTextureID;          \/\/ Default: store a pointer or an integer fitting in a poi/;"	t	typeref:typename:void *
ImToUpper	build/_deps/imgui-proj-src/imgui_internal.h	/^static inline char      ImToUpper(char c)               { return (c >= 'a' && c <= 'z') ? c &= ~/;"	f	typeref:typename:IM_MSVC_RUNTIME_CHECKS_OFF char
ImTriangleArea	build/_deps/imgui-proj-src/imgui_internal.h	/^inline float         ImTriangleArea(const ImVec2& a, const ImVec2& b, const ImVec2& c) { return /;"	f	typeref:typename:float
ImTriangleBarycentricCoords	build/_deps/imgui-proj-src/imgui.cpp	/^void ImTriangleBarycentricCoords(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2/;"	f	typeref:typename:void
ImTriangleClosestPoint	build/_deps/imgui-proj-src/imgui.cpp	/^ImVec2 ImTriangleClosestPoint(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& p/;"	f	typeref:typename:ImVec2
ImTriangleContainsPoint	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImTriangleContainsPoint(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& p)$/;"	f	typeref:typename:bool
ImTrunc	build/_deps/imgui-proj-src/imgui_internal.h	/^static inline ImVec2 ImTrunc(const ImVec2& v)                                   { return ImVec2(/;"	f	typeref:typename:ImVec2
ImTrunc	build/_deps/imgui-proj-src/imgui_internal.h	/^static inline float  ImTrunc(float f)                                           { return (float)/;"	f	typeref:typename:float
ImU16	build/_deps/imgui-proj-src/imgui.h	/^typedef unsigned short      ImU16;  \/\/ 16-bit unsigned integer$/;"	t	typeref:typename:unsigned short
ImU32	build/_deps/imgui-proj-src/imgui.h	/^typedef unsigned int        ImU32;  \/\/ 32-bit unsigned integer (often used to store packed col/;"	t	typeref:typename:unsigned int
ImU64	build/_deps/imgui-proj-src/imgui.h	/^typedef unsigned long long  ImU64;  \/\/ 64-bit unsigned integer$/;"	t	typeref:typename:unsigned long long
ImU8	build/_deps/imgui-proj-src/imgui.h	/^typedef unsigned char       ImU8;   \/\/ 8-bit unsigned integer$/;"	t	typeref:typename:unsigned char
ImUpperPowerOfTwo	build/_deps/imgui-proj-src/imgui_internal.h	/^static inline int       ImUpperPowerOfTwo(int v)        { v--; v |= v >> 1; v |= v >> 2; v |= v /;"	f	typeref:typename:int
ImVec1	build/_deps/imgui-proj-src/imgui_internal.h	/^    constexpr ImVec1()         : x(0.0f) { }$/;"	f	struct:ImVec1
ImVec1	build/_deps/imgui-proj-src/imgui_internal.h	/^    constexpr ImVec1(float _x) : x(_x) { }$/;"	f	struct:ImVec1
ImVec1	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImVec1$/;"	s
ImVec2	build/_deps/imgui-proj-src/imgui.h	/^    constexpr ImVec2()                      : x(0.0f), y(0.0f) { }$/;"	f	struct:ImVec2
ImVec2	build/_deps/imgui-proj-src/imgui.h	/^    constexpr ImVec2(float _x, float _y)    : x(_x), y(_y) { }$/;"	f	struct:ImVec2
ImVec2	build/_deps/imgui-proj-src/imgui.h	/^struct ImVec2$/;"	s
ImVec2ih	build/_deps/imgui-proj-src/imgui_internal.h	/^    constexpr ImVec2ih()                           : x(0), y(0) {}$/;"	f	struct:ImVec2ih
ImVec2ih	build/_deps/imgui-proj-src/imgui_internal.h	/^    constexpr ImVec2ih(short _x, short _y)         : x(_x), y(_y) {}$/;"	f	struct:ImVec2ih
ImVec2ih	build/_deps/imgui-proj-src/imgui_internal.h	/^    constexpr explicit ImVec2ih(const ImVec2& rhs) : x((short)rhs.x), y((short)rhs.y) {}$/;"	f	struct:ImVec2ih
ImVec2ih	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImVec2ih$/;"	s
ImVec4	build/_deps/imgui-proj-src/imgui.h	/^    constexpr ImVec4()                                        : x(0.0f), y(0.0f), z(0.0f), w(0.0/;"	f	struct:ImVec4
ImVec4	build/_deps/imgui-proj-src/imgui.h	/^    constexpr ImVec4(float _x, float _y, float _z, float _w)  : x(_x), y(_y), z(_z), w(_w) { }$/;"	f	struct:ImVec4
ImVec4	build/_deps/imgui-proj-src/imgui.h	/^struct ImVec4$/;"	s
ImVector	build/_deps/imgui-proj-src/imgui.h	/^    inline ImVector()                                       { Size = Capacity = 0; Data = NULL; /;"	f	struct:ImVector
ImVector	build/_deps/imgui-proj-src/imgui.h	/^    inline ImVector(const ImVector<T>& src)                 { Size = Capacity = 0; Data = NULL; /;"	f	struct:ImVector
ImVector	build/_deps/imgui-proj-src/imgui.h	/^struct ImVector$/;"	s
ImWchar	build/_deps/imgui-proj-src/imgui.h	/^typedef ImWchar16 ImWchar;$/;"	t	typeref:typename:ImWchar16
ImWchar	build/_deps/imgui-proj-src/imgui.h	/^typedef ImWchar32 ImWchar;$/;"	t	typeref:typename:ImWchar32
ImWchar16	build/_deps/imgui-proj-src/imgui.h	/^typedef unsigned short ImWchar16;   \/\/ A single decoded U16 character\/code point. We encode t/;"	t	typeref:typename:unsigned short
ImWchar32	build/_deps/imgui-proj-src/imgui.h	/^typedef unsigned int ImWchar32;     \/\/ A single decoded U32 character\/code point. We encode t/;"	t	typeref:typename:unsigned int
Image	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::Image(ImTextureID user_texture_id, const ImVec2& image_size, const ImVec2& uv0, cons/;"	f	class:ImGui	typeref:typename:void
ImageAcquiredSemaphore	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.h	/^    VkSemaphore         ImageAcquiredSemaphore;$/;"	m	struct:ImGui_ImplVulkanH_FrameSemaphores	typeref:typename:VkSemaphore
ImageBindGroup	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.cpp	/^    WGPUBindGroup       ImageBindGroup = nullptr;       \/\/ Default font-resource of Dear ImGui$/;"	m	struct:RenderResources	typeref:typename:WGPUBindGroup	file:
ImageBindGroupLayout	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.cpp	/^    WGPUBindGroupLayout ImageBindGroupLayout = nullptr; \/\/ Cache layout used for the image bin/;"	m	struct:RenderResources	typeref:typename:WGPUBindGroupLayout	file:
ImageBindGroups	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.cpp	/^    ImGuiStorage        ImageBindGroups;                \/\/ Resources bind-group to bind the fo/;"	m	struct:RenderResources	typeref:typename:ImGuiStorage	file:
ImageButton	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::ImageButton(ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0, cons/;"	f	class:ImGui	typeref:typename:bool
ImageButton	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::ImageButton(const char* str_id, ImTextureID user_texture_id, const ImVec2& image_siz/;"	f	class:ImGui	typeref:typename:bool
ImageButtonEx	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::ImageButtonEx(ImGuiID id, ImTextureID texture_id, const ImVec2& image_size, const Im/;"	f	class:ImGui	typeref:typename:bool
ImageCount	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.h	/^    uint32_t                        ImageCount;                   \/\/ >= MinImageCount$/;"	m	struct:ImGui_ImplVulkan_InitInfo	typeref:typename:uint32_t
ImageCount	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.h	/^    uint32_t            ImageCount;             \/\/ Number of simultaneous in-flight frames (re/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:uint32_t
InFlags	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiItemFlags          InFlags;            \/\/ See ImGuiItemFlags_$/;"	m	struct:ImGuiLastItemData	typeref:typename:ImGuiItemFlags
InFlags	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiItemFlags          InFlags;$/;"	m	struct:ImGuiNavTreeNodeData	typeref:typename:ImGuiItemFlags
InFlags	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiItemFlags      InFlags;        \/\/ ????,Move    \/\/ Best candidate item flags$/;"	m	struct:ImGuiNavItemData	typeref:typename:ImGuiItemFlags
IncludeItemByIndex	build/_deps/imgui-proj-src/imgui.h	/^    inline void     IncludeItemByIndex(int item_index)                  { IncludeItemsByIndex(it/;"	f	struct:ImGuiListClipper	typeref:typename:void
IncludeItemsByIndex	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGuiListClipper::IncludeItemsByIndex(int item_begin, int item_end)$/;"	f	class:ImGuiListClipper	typeref:typename:void
IncludeRangeByIndices	build/_deps/imgui-proj-src/imgui.h	/^    inline void IncludeRangeByIndices(int item_begin, int item_end)      { IncludeItemsByIndex(i/;"	f	struct:ImGuiListClipper	typeref:typename:void
Indent	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::Indent(float indent_w)$/;"	f	class:ImGui	typeref:typename:void
Indent	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec1                  Indent;                 \/\/ Indentation \/ start position from left/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec1
IndentSpacing	build/_deps/imgui-proj-src/imgui.h	/^    float       IndentSpacing;              \/\/ Horizontal indentation when e.g. entering a tre/;"	m	struct:ImGuiStyle	typeref:typename:float
Index	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^    uint32_t            Index;$/;"	m	struct:ImGui_ImplVulkan_WindowRenderBuffers	typeref:typename:uint32_t	file:
Index	build/_deps/imgui-proj-src/docs/CONTRIBUTING.md	/^## Index$/;"	s
Index	build/_deps/imgui-proj-src/docs/FAQ.md	/^## Index$/;"	s
Index	build/_deps/imgui-proj-src/docs/FONTS.md	/^## Index$/;"	s
Index	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiKeyRoutingIndex            Index[ImGuiKey_NamedKey_COUNT]; \/\/ Index of first entry in/;"	m	struct:ImGuiKeyRoutingTable	typeref:typename:ImGuiKeyRoutingIndex[]
Index	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTableColumnIdx     Index;$/;"	m	struct:ImGuiTableColumnSettings	typeref:typename:ImGuiTableColumnIdx
Index	build/_deps/imgui-proj-src/imgui_internal.h	/^    int         Index;          \/\/ Usually index in a main pool.$/;"	m	struct:ImGuiPtrOrIndex	typeref:typename:int
Index	build/_deps/imgui-proj-src/imgui_internal.h	/^    int         Index;$/;"	m	struct:ImGuiShrinkWidthItem	typeref:typename:int
IndexAdvanceX	build/_deps/imgui-proj-src/imgui.h	/^    ImVector<float>             IndexAdvanceX;      \/\/ 12-16 \/\/ out \/\/            \/\/ Spa/;"	m	struct:ImFont	typeref:typename:ImVector<float>
IndexBuffer	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^        ID3D10Buffer*               IndexBuffer, *VertexBuffer, *VSConstantBuffer;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:ID3D10Buffer *	file:
IndexBuffer	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^        ID3D11Buffer*               IndexBuffer, *VertexBuffer, *VSConstantBuffer;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:ID3D11Buffer *	file:
IndexBuffer	build/_deps/imgui-proj-src/backends/imgui_impl_dx12.cpp	/^    ID3D12Resource*     IndexBuffer;$/;"	m	struct:ImGui_ImplDX12_RenderBuffers	typeref:typename:ID3D12Resource *	file:
IndexBuffer	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^    VkBuffer            IndexBuffer;$/;"	m	struct:ImGui_ImplVulkan_FrameRenderBuffers	typeref:typename:VkBuffer	file:
IndexBuffer	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.cpp	/^    WGPUBuffer  IndexBuffer;$/;"	m	struct:FrameResources	typeref:typename:WGPUBuffer	file:
IndexBufferFormat	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^        DXGI_FORMAT                 IndexBufferFormat;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:DXGI_FORMAT	file:
IndexBufferFormat	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^        DXGI_FORMAT                 IndexBufferFormat;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:DXGI_FORMAT	file:
IndexBufferHost	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.cpp	/^    ImDrawIdx*  IndexBufferHost;$/;"	m	struct:FrameResources	typeref:typename:ImDrawIdx *	file:
IndexBufferMemory	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^    VkDeviceMemory      IndexBufferMemory;$/;"	m	struct:ImGui_ImplVulkan_FrameRenderBuffers	typeref:typename:VkDeviceMemory	file:
IndexBufferOffset	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^        UINT                        IndexBufferOffset, VertexBufferStride, VertexBufferOffset;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:UINT	file:
IndexBufferOffset	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^        UINT                        IndexBufferOffset, VertexBufferStride, VertexBufferOffset;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:UINT	file:
IndexBufferSize	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^    int                         IndexBufferSize;$/;"	m	struct:ImGui_ImplDX10_Data	typeref:typename:int	file:
IndexBufferSize	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^    int                         IndexBufferSize;$/;"	m	struct:ImGui_ImplDX11_Data	typeref:typename:int	file:
IndexBufferSize	build/_deps/imgui-proj-src/backends/imgui_impl_dx12.cpp	/^    int                 IndexBufferSize;$/;"	m	struct:ImGui_ImplDX12_RenderBuffers	typeref:typename:int	file:
IndexBufferSize	build/_deps/imgui-proj-src/backends/imgui_impl_dx9.cpp	/^    int                         IndexBufferSize;$/;"	m	struct:ImGui_ImplDX9_Data	typeref:typename:int	file:
IndexBufferSize	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp	/^    GLsizeiptr      IndexBufferSize;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:GLsizeiptr	file:
IndexBufferSize	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^    VkDeviceSize        IndexBufferSize;$/;"	m	struct:ImGui_ImplVulkan_FrameRenderBuffers	typeref:typename:VkDeviceSize	file:
IndexBufferSize	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.cpp	/^    int         IndexBufferSize;$/;"	m	struct:FrameResources	typeref:typename:int	file:
IndexDuringLayout	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImS16               IndexDuringLayout;      \/\/ Index only used during TabBarLayout(). Tabs/;"	m	struct:ImGuiTabItem	typeref:typename:ImS16
IndexLookup	build/_deps/imgui-proj-src/imgui.h	/^    ImVector<ImWchar>           IndexLookup;        \/\/ 12-16 \/\/ out \/\/            \/\/ Spa/;"	m	struct:ImFont	typeref:typename:ImVector<ImWchar>
IndexWithinEnabledSet	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTableColumnIdx     IndexWithinEnabledSet;          \/\/ Index within enabled\/visible s/;"	m	struct:ImGuiTableColumn	typeref:typename:ImGuiTableColumnIdx
Info	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^        FontInfo        Info;               \/\/ Font descriptor of the current font.$/;"	m	struct:__anon9c8900c20110::FreeTypeFont	typeref:typename:FontInfo	file:
Info	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^    GlyphInfo           Info;$/;"	m	struct:ImFontBuildSrcGlyphFT	typeref:typename:GlyphInfo	file:
IniFilename	build/_deps/imgui-proj-src/imgui.h	/^    const char* IniFilename;                    \/\/ = "imgui.ini"    \/\/ Path to .ini file (im/;"	m	struct:ImGuiIO	typeref:typename:const char *
IniSavingRate	build/_deps/imgui-proj-src/imgui.h	/^    float       IniSavingRate;                  \/\/ = 5.0f           \/\/ Minimum time between /;"	m	struct:ImGuiIO	typeref:typename:float
Init	build/_deps/imgui-proj-src/examples/example_android_opengl3/main.cpp	/^void Init(struct android_app* app)$/;"	f	typeref:typename:void
InitFont	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^    bool FreeTypeFont::InitFont(FT_Library ft_library, const ImFontConfig& cfg, unsigned int ext/;"	f	class:__anon9c8900c20110::FreeTypeFont	typeref:typename:bool
InitOrLoadWindowSettings	build/_deps/imgui-proj-src/imgui.cpp	/^static void InitOrLoadWindowSettings(ImGuiWindow* window, ImGuiWindowSettings* settings)$/;"	f	typeref:typename:void	file:
InitStretchWeightOrWidth	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   InitStretchWeightOrWidth;       \/\/ Value passed to TableSetupColum/;"	m	struct:ImGuiTableColumn	typeref:typename:float
InitViewportDrawData	build/_deps/imgui-proj-src/imgui.cpp	/^static void InitViewportDrawData(ImGuiViewportP* viewport)$/;"	f	typeref:typename:void	file:
InitWGPU	build/_deps/imgui-proj-src/examples/example_emscripten_wgpu/main.cpp	/^static bool InitWGPU()$/;"	f	typeref:typename:bool	file:
InitialFlags	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImDrawListFlags InitialFlags;               \/\/ Initial flags at the beginning of the frame/;"	m	struct:ImDrawListSharedData	typeref:typename:ImDrawListFlags
InitialTextA	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVector<char>          InitialTextA;           \/\/ value to revert to when pressing Escape/;"	m	struct:ImGuiInputTextState	typeref:typename:ImVector<char>
InitialWidth	build/_deps/imgui-proj-src/imgui_internal.h	/^    float       InitialWidth;$/;"	m	struct:ImGuiShrinkWidthItem	typeref:typename:float
Initialize	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::Initialize()$/;"	f	class:ImGui	typeref:typename:void
Initialized	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    Initialized;$/;"	m	struct:ImGuiContext	typeref:typename:bool
InnerClipRect	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImRect                      InnerClipRect;$/;"	m	struct:ImGuiTable	typeref:typename:ImRect
InnerClipRect	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImRect                  InnerClipRect;                      \/\/ == InnerRect shrunk by Wind/;"	m	struct:ImGuiWindow	typeref:typename:ImRect
InnerDir	build/_deps/imgui-proj-src/imgui.cpp	/^    ImVec2  InnerDir;               \/\/ Normal toward inside$/;"	m	struct:ImGuiResizeBorderDef	typeref:typename:ImVec2	file:
InnerDir	build/_deps/imgui-proj-src/imgui.cpp	/^    ImVec2  InnerDir;$/;"	m	struct:ImGuiResizeGripDef	typeref:typename:ImVec2	file:
InnerRect	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImRect                      InnerRect;                  \/\/ InnerRect but without decoratio/;"	m	struct:ImGuiTable	typeref:typename:ImRect
InnerRect	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImRect                  InnerRect;                          \/\/ Inner rectangle (omit title/;"	m	struct:ImGuiWindow	typeref:typename:ImRect
InnerWidth	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                       InnerWidth;                 \/\/ User value passed to BeginTable/;"	m	struct:ImGuiTable	typeref:typename:float
InnerWindow	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiWindow*                InnerWindow;                \/\/ Window holding the table data (/;"	m	struct:ImGuiTable	typeref:typename:ImGuiWindow *
InputBuf	build/_deps/imgui-proj-src/imgui.h	/^    char                    InputBuf[256];$/;"	m	struct:ImGuiTextFilter	typeref:typename:char[256]
InputBuf	build/_deps/imgui-proj-src/imgui_demo.cpp	/^    char                  InputBuf[256];$/;"	m	struct:ExampleAppConsole	typeref:typename:char[256]	file:
InputContext	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^    NSTextInputContext*         InputContext;$/;"	E	struct:ImGui_ImplOSX_Data
InputDouble	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::InputDouble(const char* label, double* v, double step, double step_fast, const char*/;"	f	class:ImGui	typeref:typename:bool
InputEventsNextEventId	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImU32                   InputEventsNextEventId;$/;"	m	struct:ImGuiContext	typeref:typename:ImU32
InputEventsNextMouseSource	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiMouseSource        InputEventsNextMouseSource;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiMouseSource
InputEventsQueue	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVector<ImGuiInputEvent> InputEventsQueue;                 \/\/ Input events which will be /;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiInputEvent>
InputEventsTrail	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVector<ImGuiInputEvent> InputEventsTrail;                 \/\/ Past input events processed/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiInputEvent>
InputFloat	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::InputFloat(const char* label, float* v, float step, float step_fast, const char* for/;"	f	class:ImGui	typeref:typename:bool
InputFloat2	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::InputFloat2(const char* label, float v[2], const char* format, ImGuiInputTextFlags f/;"	f	class:ImGui	typeref:typename:bool
InputFloat3	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::InputFloat3(const char* label, float v[3], const char* format, ImGuiInputTextFlags f/;"	f	class:ImGui	typeref:typename:bool
InputFloat4	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::InputFloat4(const char* label, float v[4], const char* format, ImGuiInputTextFlags f/;"	f	class:ImGui	typeref:typename:bool
InputInt	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::InputInt(const char* label, int* v, int step, int step_fast, ImGuiInputTextFlags fla/;"	f	class:ImGui	typeref:typename:bool
InputInt2	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::InputInt2(const char* label, int v[2], ImGuiInputTextFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
InputInt3	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::InputInt3(const char* label, int v[3], ImGuiInputTextFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
InputInt4	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::InputInt4(const char* label, int v[4], ImGuiInputTextFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
InputLayout	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^        ID3D10InputLayout*          InputLayout;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:ID3D10InputLayout *	file:
InputLayout	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^        ID3D11InputLayout*          InputLayout;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:ID3D11InputLayout *	file:
InputLineHeight	build/_deps/imgui-proj-src/imgui.h	/^    float   InputLineHeight;    \/\/ Line height$/;"	m	struct:ImGuiPlatformImeData	typeref:typename:float
InputPos	build/_deps/imgui-proj-src/imgui.h	/^    ImVec2  InputPos;           \/\/ Position of the input cursor$/;"	m	struct:ImGuiPlatformImeData	typeref:typename:ImVec2
InputQueueCharacters	build/_deps/imgui-proj-src/imgui.h	/^    ImVector<ImWchar> InputQueueCharacters;         \/\/ Queue of _characters_ input (obtained b/;"	m	struct:ImGuiIO	typeref:typename:ImVector<ImWchar>
InputQueueSurrogate	build/_deps/imgui-proj-src/imgui.h	/^    ImWchar16   InputQueueSurrogate;                \/\/ For AddInputCharacterUTF16()$/;"	m	struct:ImGuiIO	typeref:typename:ImWchar16
InputScalar	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::InputScalar(const char* label, ImGuiDataType data_type, void* p_data, const void* p_/;"	f	class:ImGui	typeref:typename:bool
InputScalarN	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::InputScalarN(const char* label, ImGuiDataType data_type, void* p_data, int component/;"	f	class:ImGui	typeref:typename:bool
InputText	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::InputText(const char* label, char* buf, size_t buf_size, ImGuiInputTextFlags flags, /;"	f	class:ImGui	typeref:typename:bool
InputText	build/_deps/imgui-proj-src/misc/cpp/imgui_stdlib.cpp	/^bool ImGui::InputText(const char* label, std::string* str, ImGuiInputTextFlags flags, ImGuiInput/;"	f	class:ImGui	typeref:typename:bool
InputTextCalcTextLenAndLineCount	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static int InputTextCalcTextLenAndLineCount(const char* text_begin, const char** out_text_end)$/;"	f	typeref:typename:int	file:
InputTextCalcTextSizeW	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static ImVec2 InputTextCalcTextSizeW(ImGuiContext* ctx, const ImWchar* text_begin, const ImWchar/;"	f	typeref:typename:ImVec2	file:
InputTextCallback	build/_deps/imgui-proj-src/misc/cpp/imgui_stdlib.cpp	/^static int InputTextCallback(ImGuiInputTextCallbackData* data)$/;"	f	typeref:typename:int	file:
InputTextCallback_UserData	build/_deps/imgui-proj-src/misc/cpp/imgui_stdlib.cpp	/^struct InputTextCallback_UserData$/;"	s	file:
InputTextDeactivateHook	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::InputTextDeactivateHook(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
InputTextDeactivatedState	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiInputTextDeactivatedState InputTextDeactivatedState;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiInputTextDeactivatedState
InputTextEx	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::InputTextEx(const char* label, const char* hint, char* buf, int buf_size, const ImVe/;"	f	class:ImGui	typeref:typename:bool
InputTextFilterCharacter	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static bool InputTextFilterCharacter(ImGuiContext* ctx, unsigned int* p_char, ImGuiInputTextFlag/;"	f	typeref:typename:bool	file:
InputTextMultiline	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::InputTextMultiline(const char* label, char* buf, size_t buf_size, const ImVec2& size/;"	f	class:ImGui	typeref:typename:bool
InputTextMultiline	build/_deps/imgui-proj-src/misc/cpp/imgui_stdlib.cpp	/^bool ImGui::InputTextMultiline(const char* label, std::string* str, const ImVec2& size, ImGuiInp/;"	f	class:ImGui	typeref:typename:bool
InputTextPasswordFont	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImFont                  InputTextPasswordFont;$/;"	m	struct:ImGuiContext	typeref:typename:ImFont
InputTextReconcileUndoStateAfterUserCallback	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static void InputTextReconcileUndoStateAfterUserCallback(ImGuiInputTextState* state, const char*/;"	f	typeref:typename:void	file:
InputTextState	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiInputTextState     InputTextState;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiInputTextState
InputTextWithHint	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::InputTextWithHint(const char* label, const char* hint, char* buf, size_t buf_size, I/;"	f	class:ImGui	typeref:typename:bool
InputTextWithHint	build/_deps/imgui-proj-src/misc/cpp/imgui_stdlib.cpp	/^bool ImGui::InputTextWithHint(const char* label, const char* hint, std::string* str, ImGuiInputT/;"	f	class:ImGui	typeref:typename:bool
InsertChars	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGuiInputTextCallbackData::InsertChars(int pos, const char* new_text, const char* new_text/;"	f	class:ImGuiInputTextCallbackData	typeref:typename:void
Installation	README.md	/^## Installation$/;"	s
InstalledCallbacks	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^    bool                    InstalledCallbacks;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:bool	file:
Instance	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.h	/^    VkInstance                      Instance;$/;"	m	struct:ImGui_ImplVulkan_InitInfo	typeref:typename:VkInstance
InstanceCurrent	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImS16                       InstanceCurrent;            \/\/ Count of BeginTable() calls wit/;"	m	struct:ImGuiTable	typeref:typename:ImS16
InstanceDataExtra	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVector<ImGuiTableInstanceData>    InstanceDataExtra;  \/\/ FIXME-OPT: Using a small-vector/;"	m	struct:ImGuiTable	typeref:typename:ImVector<ImGuiTableInstanceData>
InstanceDataFirst	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTableInstanceData      InstanceDataFirst;$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableInstanceData
InstanceInteracted	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImS16                       InstanceInteracted;         \/\/ Mark which instance (generally /;"	m	struct:ImGuiTable	typeref:typename:ImS16
Integrate with your tools	README.md	/^## Integrate with your tools$/;"	s
Integrating a backend	build/_deps/imgui-proj-src/docs/BACKENDS.md	/^### Integrating a backend$/;"	S
Integration	build/_deps/imgui-proj-src/docs/README.md	/^### Integration$/;"	S
Introduction	build/_deps/imgui-proj-src/examples/example_apple_metal/README.md	/^## Introduction$/;"	s
InvRasterizationDensity	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^        float           InvRasterizationDensity;$/;"	m	struct:__anon9c8900c20110::FreeTypeFont	typeref:typename:float	file:
InvisibleButton	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::InvisibleButton(const char* str_id, const ImVec2& size_arg, ImGuiButtonFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
IsActive	build/_deps/imgui-proj-src/imgui.h	/^    bool                IsActive() const { return !Filters.empty(); }$/;"	f	struct:ImGuiTextFilter	typeref:typename:bool
IsActiveIdAliveBeforeTable	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                        IsActiveIdAliveBeforeTable;$/;"	m	struct:ImGuiTable	typeref:typename:bool
IsActiveIdInTable	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                        IsActiveIdInTable;$/;"	m	struct:ImGuiTable	typeref:typename:bool
IsActiveIdUsingNavDir	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline bool             IsActiveIdUsingNavDir(ImGuiDir dir)                         { ImGuiC/;"	f	namespace:ImGui	typeref:typename:bool
IsAliasKey	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline bool             IsAliasKey(ImGuiKey key)                                    { return/;"	f	namespace:ImGui	typeref:typename:bool
IsAnyItemActive	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::IsAnyItemActive()$/;"	f	class:ImGui	typeref:typename:bool
IsAnyItemFocused	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::IsAnyItemFocused()$/;"	f	class:ImGui	typeref:typename:bool
IsAnyItemHovered	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::IsAnyItemHovered()$/;"	f	class:ImGui	typeref:typename:bool
IsAnyMouseDown	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::IsAnyMouseDown()$/;"	f	class:ImGui	typeref:typename:bool
IsBeingResized	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                IsBeingResized;$/;"	m	struct:ImGuiOldColumns	typeref:typename:bool
IsBgDrawnThisFrame	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    IsBgDrawnThisFrame      :1;$/;"	m	struct:ImGuiDockNode	typeref:typename:bool:1
IsBuilt	build/_deps/imgui-proj-src/imgui.h	/^    bool                        IsBuilt() const             { return Fonts.Size > 0 && TexReady;/;"	f	struct:ImFontAtlas	typeref:typename:bool
IsCenterAvailable	build/_deps/imgui-proj-src/imgui.cpp	/^    bool            IsCenterAvailable;$/;"	m	struct:ImGuiDockPreviewData	typeref:typename:bool	file:
IsCentralNode	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    IsCentralNode() const   { return (MergedFlags & ImGuiDockNodeFlags_C/;"	f	struct:ImGuiDockNode	typeref:typename:bool
IsChild	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool        IsChild;$/;"	m	struct:ImGuiWindowSettings	typeref:typename:bool
IsClippedEx	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::IsClippedEx(const ImRect& bb, ImGuiID id)$/;"	f	class:ImGui	typeref:typename:bool
IsColored	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^        bool        IsColored;          \/\/ The glyph is colored$/;"	m	struct:__anon9c8900c20110::GlyphInfo	typeref:typename:bool	file:
IsContextPopupOpen	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                        IsContextPopupOpen;         \/\/ Set when default context menu i/;"	m	struct:ImGuiTable	typeref:typename:bool
IsDataType	build/_deps/imgui-proj-src/imgui.h	/^    bool IsDataType(const char* type) const { return DataFrameCount != -1 && strcmp(type, DataTy/;"	f	struct:ImGuiPayload	typeref:typename:bool
IsDefaultDisplayOrder	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                        IsDefaultDisplayOrder;      \/\/ Set when display order is uncha/;"	m	struct:ImGuiTable	typeref:typename:bool
IsDefaultSizingPolicy	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                        IsDefaultSizingPolicy;      \/\/ Set if user didn't explicitly s/;"	m	struct:ImGuiTable	typeref:typename:bool
IsDelivery	build/_deps/imgui-proj-src/imgui.h	/^    bool IsDelivery() const                 { return Delivery; }$/;"	f	struct:ImGuiPayload	typeref:typename:bool
IsDockNodeTitleBarHighlighted	build/_deps/imgui-proj-src/imgui.cpp	/^static bool IsDockNodeTitleBarHighlighted(ImGuiDockNode* node, ImGuiDockNode* root_node)$/;"	f	typeref:typename:bool	file:
IsDockSpace	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    IsDockSpace() const     { return (MergedFlags & ImGuiDockNodeFlags_D/;"	f	struct:ImGuiDockNode	typeref:typename:bool
IsDragDropActive	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::IsDragDropActive()$/;"	f	class:ImGui	typeref:typename:bool
IsDragDropPayloadBeingAccepted	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::IsDragDropPayloadBeingAccepted()$/;"	f	class:ImGui	typeref:typename:bool
IsDropAllowed	build/_deps/imgui-proj-src/imgui.cpp	/^    bool            IsDropAllowed;$/;"	m	struct:ImGuiDockPreviewData	typeref:typename:bool	file:
IsEmpty	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    IsEmpty() const         { return ChildNodes[0] == NULL && Windows.Si/;"	f	struct:ImGuiDockNode	typeref:typename:bool
IsEnabled	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^        PFNGLISENABLEDPROC                IsEnabled;$/;"	m	struct:ImGL3WProcs::__anon6bce6ebe0108	typeref:typename:PFNGLISENABLEDPROC
IsEnabled	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImU8                    IsEnabled : 1; \/\/ "Visible" in ini file$/;"	m	struct:ImGuiTableColumnSettings	typeref:typename:ImU8:1
IsEnabled	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    IsEnabled;                      \/\/ IsUserEnabled && (Flags & ImGui/;"	m	struct:ImGuiTableColumn	typeref:typename:bool
IsExplicitChild	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    IsExplicitChild;                    \/\/ Set when passed _ChildWindo/;"	m	struct:ImGuiWindow	typeref:typename:bool
IsExtensionAvailable	build/_deps/imgui-proj-src/examples/example_glfw_vulkan/main.cpp	/^static bool IsExtensionAvailable(const ImVector<VkExtensionProperties>& properties, const char* /;"	f	typeref:typename:bool	file:
IsExtensionAvailable	build/_deps/imgui-proj-src/examples/example_sdl2_vulkan/main.cpp	/^static bool IsExtensionAvailable(const ImVector<VkExtensionProperties>& properties, const char* /;"	f	typeref:typename:bool	file:
IsFallbackWindow	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    IsFallbackWindow;                   \/\/ Set on the "Debug##Default"/;"	m	struct:ImGuiWindow	typeref:typename:bool
IsFirstFrame	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                IsFirstFrame;$/;"	m	struct:ImGuiOldColumns	typeref:typename:bool
IsFloatingNode	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    IsFloatingNode() const  { return ParentNode == NULL && (MergedFlags /;"	f	struct:ImGuiDockNode	typeref:typename:bool
IsFocused	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    IsFocused               :1;$/;"	m	struct:ImGuiDockNode	typeref:typename:bool:1
IsGamepadKey	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline bool             IsGamepadKey(ImGuiKey key)                                  { return/;"	f	namespace:ImGui	typeref:typename:bool
IsGlyphRangeUnused	build/_deps/imgui-proj-src/imgui_draw.cpp	/^bool ImFont::IsGlyphRangeUnused(unsigned int c_begin, unsigned int c_last)$/;"	f	class:ImFont	typeref:typename:bool
IsHiddenTabBar	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    IsHiddenTabBar() const  { return (MergedFlags & ImGuiDockNodeFlags_H/;"	f	struct:ImGuiDockNode	typeref:typename:bool
IsInitializing	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                        IsInitializing;$/;"	m	struct:ImGuiTable	typeref:typename:bool
IsInsideRow	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                        IsInsideRow;                \/\/ Set when inside TableBeginRow()/;"	m	struct:ImGuiTable	typeref:typename:bool
IsInverted	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool        IsInverted() const                  { return Min.x > Max.x || Min.y > Max.y; }$/;"	f	struct:ImRect	typeref:typename:bool
IsItemActivated	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::IsItemActivated()$/;"	f	class:ImGui	typeref:typename:bool
IsItemActive	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::IsItemActive()$/;"	f	class:ImGui	typeref:typename:bool
IsItemClicked	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::IsItemClicked(ImGuiMouseButton mouse_button)$/;"	f	class:ImGui	typeref:typename:bool
IsItemDeactivated	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::IsItemDeactivated()$/;"	f	class:ImGui	typeref:typename:bool
IsItemDeactivatedAfterEdit	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::IsItemDeactivatedAfterEdit()$/;"	f	class:ImGui	typeref:typename:bool
IsItemEdited	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::IsItemEdited()$/;"	f	class:ImGui	typeref:typename:bool
IsItemFocused	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::IsItemFocused()$/;"	f	class:ImGui	typeref:typename:bool
IsItemHovered	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::IsItemHovered(ImGuiHoveredFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
IsItemToggledOpen	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::IsItemToggledOpen()$/;"	f	class:ImGui	typeref:typename:bool
IsItemToggledSelection	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::IsItemToggledSelection()$/;"	f	class:ImGui	typeref:typename:bool
IsItemVisible	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::IsItemVisible()$/;"	f	class:ImGui	typeref:typename:bool
IsKeyChordPotentiallyCharInput	build/_deps/imgui-proj-src/imgui.cpp	/^static bool IsKeyChordPotentiallyCharInput(ImGuiKeyChord key_chord)$/;"	f	typeref:typename:bool	file:
IsKeyChordPressed	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::IsKeyChordPressed(ImGuiKeyChord key_chord)$/;"	f	class:ImGui	typeref:typename:bool
IsKeyChordPressed	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::IsKeyChordPressed(ImGuiKeyChord key_chord, ImGuiID owner_id, ImGuiInputFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
IsKeyDown	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::IsKeyDown(ImGuiKey key)$/;"	f	class:ImGui	typeref:typename:bool
IsKeyDown	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::IsKeyDown(ImGuiKey key, ImGuiID owner_id)$/;"	f	class:ImGui	typeref:typename:bool
IsKeyPressed	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::IsKeyPressed(ImGuiKey key, ImGuiID owner_id, ImGuiInputFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
IsKeyPressed	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::IsKeyPressed(ImGuiKey key, bool repeat)$/;"	f	class:ImGui	typeref:typename:bool
IsKeyPressedMap	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline bool     IsKeyPressedMap(ImGuiKey key, bool repeat = true)                   { IM_ASS/;"	f	namespace:ImGui	typeref:typename:bool
IsKeyReleased	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::IsKeyReleased(ImGuiKey key)$/;"	f	class:ImGui	typeref:typename:bool
IsKeyReleased	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::IsKeyReleased(ImGuiKey key, ImGuiID owner_id)$/;"	f	class:ImGui	typeref:typename:bool
IsKeyboardKey	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline bool             IsKeyboardKey(ImGuiKey key)                                 { return/;"	f	namespace:ImGui	typeref:typename:bool
IsLayoutLocked	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                        IsLayoutLocked;             \/\/ Set by TableUpdateLayout() whic/;"	m	struct:ImGuiTable	typeref:typename:bool
IsLeafNode	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    IsLeafNode() const      { return ChildNodes[0] == NULL; }$/;"	f	struct:ImGuiDockNode	typeref:typename:bool
IsLegacyKey	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline bool             IsLegacyKey(ImGuiKey key)                                   { return/;"	f	namespace:ImGui	typeref:typename:bool
IsLegacyNativeDupe	build/_deps/imgui-proj-src/imgui.cpp	/^            struct funcs { static bool IsLegacyNativeDupe(ImGuiKey key) { return key >= 0 && key/;"	f	struct:ImGui::ShowMetricsWindow::funcs	typeref:typename:bool	file:
IsLegacyNativeDupe	build/_deps/imgui-proj-src/imgui.cpp	/^            struct funcs { static bool IsLegacyNativeDupe(ImGuiKey) { return false; } };$/;"	f	struct:ImGui::ShowMetricsWindow::funcs	typeref:typename:bool	file:
IsLegacyNativeDupe	build/_deps/imgui-proj-src/imgui_demo.cpp	/^            struct funcs { static bool IsLegacyNativeDupe(ImGuiKey key) { return key >= 0 && key/;"	f	struct:ShowDemoWindowInputs::funcs	typeref:typename:bool	file:
IsLegacyNativeDupe	build/_deps/imgui-proj-src/imgui_demo.cpp	/^            struct funcs { static bool IsLegacyNativeDupe(ImGuiKey) { return false; } };$/;"	f	struct:ShowDemoWindowInputs::funcs	typeref:typename:bool	file:
IsLoaded	build/_deps/imgui-proj-src/imgui.h	/^    bool                        IsLoaded() const                    { return ContainerAtlas != N/;"	f	struct:ImFont	typeref:typename:bool
IsModKey	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline bool             IsModKey(ImGuiKey key)                                      { return/;"	f	namespace:ImGui	typeref:typename:bool
IsMouseClicked	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::IsMouseClicked(ImGuiMouseButton button, ImGuiID owner_id, ImGuiInputFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseClicked	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::IsMouseClicked(ImGuiMouseButton button, bool repeat)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseDoubleClicked	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::IsMouseDoubleClicked(ImGuiMouseButton button)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseDoubleClicked	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::IsMouseDoubleClicked(ImGuiMouseButton button, ImGuiID owner_id)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseDown	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::IsMouseDown(ImGuiMouseButton button)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseDown	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::IsMouseDown(ImGuiMouseButton button, ImGuiID owner_id)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseDragPastThreshold	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::IsMouseDragPastThreshold(ImGuiMouseButton button, float lock_threshold)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseDragging	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::IsMouseDragging(ImGuiMouseButton button, float lock_threshold)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseHoveringRect	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::IsMouseHoveringRect(const ImVec2& r_min, const ImVec2& r_max, bool clip)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseKey	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline bool             IsMouseKey(ImGuiKey key)                                    { return/;"	f	namespace:ImGui	typeref:typename:bool
IsMousePosValid	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::IsMousePosValid(const ImVec2* mouse_pos)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseReleased	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::IsMouseReleased(ImGuiMouseButton button)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseReleased	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::IsMouseReleased(ImGuiMouseButton button, ImGuiID owner_id)$/;"	f	class:ImGui	typeref:typename:bool
IsNamedKey	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline bool             IsNamedKey(ImGuiKey key)                                    { return/;"	f	namespace:ImGui	typeref:typename:bool
IsNamedKeyOrModKey	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline bool             IsNamedKeyOrModKey(ImGuiKey key)                            { return/;"	f	namespace:ImGui	typeref:typename:bool
IsNoTabBar	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    IsNoTabBar() const      { return (MergedFlags & ImGuiDockNodeFlags_N/;"	f	struct:ImGuiDockNode	typeref:typename:bool
IsPacked	build/_deps/imgui-proj-src/imgui.h	/^    bool IsPacked() const           { return X != 0xFFFF; }$/;"	f	struct:ImFontAtlasCustomRect	typeref:typename:bool
IsPopupOpen	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::IsPopupOpen(ImGuiID id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:bool
IsPopupOpen	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::IsPopupOpen(const char* str_id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:bool
IsPreserveWidthAuto	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    IsPreserveWidthAuto;$/;"	m	struct:ImGuiTableColumn	typeref:typename:bool
IsPreview	build/_deps/imgui-proj-src/imgui.h	/^    bool IsPreview() const                  { return Preview; }$/;"	f	struct:ImGuiPayload	typeref:typename:bool
IsProgram	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^        PFNGLISPROGRAMPROC                IsProgram;$/;"	m	struct:ImGL3WProcs::__anon6bce6ebe0108	typeref:typename:PFNGLISPROGRAMPROC
IsRectVisible	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::IsRectVisible(const ImVec2& rect_min, const ImVec2& rect_max)$/;"	f	class:ImGui	typeref:typename:bool
IsRectVisible	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::IsRectVisible(const ImVec2& size)$/;"	f	class:ImGui	typeref:typename:bool
IsRequestOutput	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    IsRequestOutput;                \/\/ Return value for TableSetColumn/;"	m	struct:ImGuiTableColumn	typeref:typename:bool
IsResetAllRequest	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                        IsResetAllRequest;$/;"	m	struct:ImGuiTable	typeref:typename:bool
IsResetDisplayOrderRequest	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                        IsResetDisplayOrderRequest;$/;"	m	struct:ImGuiTable	typeref:typename:bool
IsRootNode	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    IsRootNode() const      { return ParentNode == NULL; }$/;"	f	struct:ImGuiDockNode	typeref:typename:bool
IsRootOfOpenMenuSet	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static bool IsRootOfOpenMenuSet()$/;"	f	typeref:typename:bool	file:
IsSameLine	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    IsSameLine;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:bool
IsSetPos	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    IsSetPos;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:bool
IsSettingsDirty	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                        IsSettingsDirty;            \/\/ Set when table settings have ch/;"	m	struct:ImGuiTable	typeref:typename:bool
IsSettingsRequestLoad	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                        IsSettingsRequestLoad;$/;"	m	struct:ImGuiTable	typeref:typename:bool
IsSidesAvailable	build/_deps/imgui-proj-src/imgui.cpp	/^    bool            IsSidesAvailable;           \/\/ Hold your breath, grammar freaks..$/;"	m	struct:ImGuiDockPreviewData	typeref:typename:bool	file:
IsSkipItems	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    IsSkipItems;                    \/\/ Do we want item submissions to /;"	m	struct:ImGuiTableColumn	typeref:typename:bool
IsSortSpecsDirty	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                        IsSortSpecsDirty;$/;"	m	struct:ImGuiTable	typeref:typename:bool
IsSplitDirExplicit	build/_deps/imgui-proj-src/imgui.cpp	/^    bool            IsSplitDirExplicit;         \/\/ Set when hovered the drop rect (vs. implici/;"	m	struct:ImGuiDockPreviewData	typeref:typename:bool	file:
IsSplitNode	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    IsSplitNode() const     { return ChildNodes[0] != NULL; }$/;"	f	struct:ImGuiDockNode	typeref:typename:bool
IsStretch	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImU8                    IsStretch : 1;$/;"	m	struct:ImGuiTableColumnSettings	typeref:typename:ImU8:1
IsUnfrozenRows	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                        IsUnfrozenRows;             \/\/ Set when we got past the frozen/;"	m	struct:ImGuiTable	typeref:typename:bool
IsUserEnabled	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    IsUserEnabled;                  \/\/ Is the column not marked Hidden/;"	m	struct:ImGuiTableColumn	typeref:typename:bool
IsUserEnabledNextFrame	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    IsUserEnabledNextFrame;$/;"	m	struct:ImGuiTableColumn	typeref:typename:bool
IsUsingHeaders	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                        IsUsingHeaders;             \/\/ Set when the first row had the /;"	m	struct:ImGuiTable	typeref:typename:bool
IsVisible	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    IsVisible               :1; \/\/ Set to false when the node is hidde/;"	m	struct:ImGuiDockNode	typeref:typename:bool:1
IsVisibleX	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    IsVisibleX;                     \/\/ Is actually in view (e.g. overl/;"	m	struct:ImGuiTableColumn	typeref:typename:bool
IsVisibleY	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    IsVisibleY;$/;"	m	struct:ImGuiTableColumn	typeref:typename:bool
IsVkDown	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^static bool IsVkDown(int vk)$/;"	f	typeref:typename:bool	file:
IsWindowAbove	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::IsWindowAbove(ImGuiWindow* potential_above, ImGuiWindow* potential_below)$/;"	f	class:ImGui	typeref:typename:bool
IsWindowActiveAndVisible	build/_deps/imgui-proj-src/imgui.cpp	/^static bool IsWindowActiveAndVisible(ImGuiWindow* window)$/;"	f	typeref:typename:bool	file:
IsWindowAppearing	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::IsWindowAppearing()$/;"	f	class:ImGui	typeref:typename:bool
IsWindowChildOf	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::IsWindowChildOf(ImGuiWindow* window, ImGuiWindow* potential_parent, bool popup_hiera/;"	f	class:ImGui	typeref:typename:bool
IsWindowCollapsed	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::IsWindowCollapsed()$/;"	f	class:ImGui	typeref:typename:bool
IsWindowContentHoverable	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::IsWindowContentHoverable(ImGuiWindow* window, ImGuiHoveredFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
IsWindowDocked	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::IsWindowDocked()$/;"	f	class:ImGui	typeref:typename:bool
IsWindowFocused	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::IsWindowFocused(ImGuiFocusedFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
IsWindowHovered	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::IsWindowHovered(ImGuiHoveredFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
IsWindowNavFocusable	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::IsWindowNavFocusable(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:bool
IsWindowWithinBeginStackOf	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::IsWindowWithinBeginStackOf(ImGuiWindow* window, ImGuiWindow* potential_parent)$/;"	f	class:ImGui	typeref:typename:bool
ItemAdd	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::ItemAdd(const ImRect& bb, ImGuiID id, const ImRect* nav_bb_arg, ImGuiItemFlags extra/;"	f	class:ImGui	typeref:typename:bool
ItemFlags	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiItemFlags              ItemFlags;          \/\/ Currently only tested\/used for ImGuiIt/;"	m	struct:ImGuiNextItemData	typeref:typename:ImGuiItemFlags
ItemFlagsStack	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVector<ImGuiItemFlags>        ItemFlagsStack;             \/\/ Stack for PushItemFlag()\/P/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiItemFlags>
ItemHandleShortcut	build/_deps/imgui-proj-src/imgui.cpp	/^static void ItemHandleShortcut(ImGuiID id)$/;"	f	typeref:typename:void	file:
ItemHoverable	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::ItemHoverable(const ImRect& bb, ImGuiID id, ImGuiItemFlags item_flags)$/;"	f	class:ImGui	typeref:typename:bool
ItemInnerSpacing	build/_deps/imgui-proj-src/imgui.h	/^    ImVec2      ItemInnerSpacing;           \/\/ Horizontal and vertical spacing between within /;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
ItemSize	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::ItemSize(const ImVec2& size, float text_baseline_y)$/;"	f	class:ImGui	typeref:typename:void
ItemSize	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline void             ItemSize(const ImRect& bb, float text_baseline_y = -1.0f) { ItemSize/;"	f	namespace:ImGui	typeref:typename:void
ItemSpacing	build/_deps/imgui-proj-src/imgui.h	/^    ImVec2      ItemSpacing;                \/\/ Horizontal and vertical spacing between widgets/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
ItemSpacingY	build/_deps/imgui-proj-src/imgui_internal.h	/^    float               ItemSpacingY;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
ItemWidth	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   ItemWidth;                      \/\/ Current item width for the colu/;"	m	struct:ImGuiTableColumn	typeref:typename:float
ItemWidth	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   ItemWidth;              \/\/ Current item width (>0.0: width in pixe/;"	m	struct:ImGuiWindowTempData	typeref:typename:float
ItemWidthDefault	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   ItemWidthDefault;$/;"	m	struct:ImGuiWindow	typeref:typename:float
ItemWidthStack	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVector<float>         ItemWidthStack;         \/\/ Store item widths to restore (attention/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVector<float>
Items	build/_deps/imgui-proj-src/imgui_demo.cpp	/^    ImVector<char*>       Items;$/;"	m	struct:ExampleAppConsole	typeref:typename:ImVector<char * >	file:
ItemsCount	build/_deps/imgui-proj-src/imgui.h	/^    int             ItemsCount;         \/\/ [Internal] Number of items$/;"	m	struct:ImGuiListClipper	typeref:typename:int
ItemsFrozen	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                             ItemsFrozen;$/;"	m	struct:ImGuiListClipperData	typeref:typename:int
ItemsHeight	build/_deps/imgui-proj-src/imgui.h	/^    float           ItemsHeight;        \/\/ [Internal] Height of item after a first step and it/;"	m	struct:ImGuiListClipper	typeref:typename:float
Items_ArrayGetter	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static const char* Items_ArrayGetter(void* data, int idx)$/;"	f	typeref:typename:const char *	file:
Items_SingleStringGetter	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static const char* Items_SingleStringGetter(void* data, int idx)$/;"	f	typeref:typename:const char *	file:
KeepAliveID	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::KeepAliveID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
Key	build/_deps/imgui-proj-src/imgui.cpp	/^    struct KeyLayoutData { int Row, Col; const char* Label; ImGuiKey Key; };$/;"	m	struct:ImGui::DebugRenderKeyboardPreview::KeyLayoutData	typeref:typename:ImGuiKey	file:
Key	build/_deps/imgui-proj-src/imgui_internal.h	/^        ImGuiInputEventKey          Key;            \/\/ if Type == ImGuiInputEventType_Key$/;"	m	union:ImGuiInputEvent::__anonc52b7f12040a	typeref:typename:ImGuiInputEventKey
Key	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiLocKey     Key;$/;"	m	struct:ImGuiLocEntry	typeref:typename:ImGuiLocKey
Key	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiInputEventKey           { ImGuiKey Key; bool Down; float AnalogValue; };$/;"	m	struct:ImGuiInputEventKey	typeref:typename:ImGuiKey
KeyAlt	build/_deps/imgui-proj-src/imgui.h	/^    bool        KeyAlt;                             \/\/ Keyboard modifier down: Alt$/;"	m	struct:ImGuiIO	typeref:typename:bool
KeyCtrl	build/_deps/imgui-proj-src/imgui.h	/^    bool        KeyCtrl;                            \/\/ Keyboard modifier down: Control$/;"	m	struct:ImGuiIO	typeref:typename:bool
KeyEventResponder	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^    KeyEventResponder*          KeyEventResponder;$/;"	E	struct:ImGui_ImplOSX_Data
KeyEventResponder	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^@implementation KeyEventResponder$/;"	I
KeyEventResponder	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^@interface KeyEventResponder: NSView<NSTextInputClient>$/;"	i
KeyLayoutData	build/_deps/imgui-proj-src/imgui.cpp	/^    struct KeyLayoutData { int Row, Col; const char* Label; ImGuiKey Key; };$/;"	s	function:ImGui::DebugRenderKeyboardPreview	file:
KeyMap	build/_deps/imgui-proj-src/imgui.h	/^    int         KeyMap[ImGuiKey_COUNT];             \/\/ [LEGACY] Input: map of indices into the/;"	m	struct:ImGuiIO	typeref:typename:int[]
KeyMods	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKeyChord KeyMods;                          \/\/ Key mods flags (any of ImGuiMod_Ctrl\/I/;"	m	struct:ImGuiIO	typeref:typename:ImGuiKeyChord
KeyOwnerWindows	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^    GLFWwindow*             KeyOwnerWindows[GLFW_KEY_LAST];$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:GLFWwindow * []	file:
KeyRepeatDelay	build/_deps/imgui-proj-src/imgui.h	/^    float       KeyRepeatDelay;                 \/\/ = 0.275f         \/\/ When holding a key\/b/;"	m	struct:ImGuiIO	typeref:typename:float
KeyRepeatRate	build/_deps/imgui-proj-src/imgui.h	/^    float       KeyRepeatRate;                  \/\/ = 0.050f         \/\/ When holding a key\/b/;"	m	struct:ImGuiIO	typeref:typename:float
KeyShift	build/_deps/imgui-proj-src/imgui.h	/^    bool        KeyShift;                           \/\/ Keyboard modifier down: Shift$/;"	m	struct:ImGuiIO	typeref:typename:bool
KeySuper	build/_deps/imgui-proj-src/imgui.h	/^    bool        KeySuper;                           \/\/ Keyboard modifier down: Cmd\/Super\/Win/;"	m	struct:ImGuiIO	typeref:typename:bool
KeyboardCodePage	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^    UINT32                      KeyboardCodePage;$/;"	m	struct:ImGui_ImplWin32_Data	typeref:typename:UINT32	file:
KeysData	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiKeyData  KeysData[ImGuiKey_KeysData_SIZE]; \/\/ Key state for all known keys. Use IsKey/;"	m	struct:ImGuiIO	typeref:typename:ImGuiKeyData[]
KeysDown	build/_deps/imgui-proj-src/imgui.h	/^    bool        KeysDown[ImGuiKey_COUNT];           \/\/ [LEGACY] Input: Keyboard keys that are /;"	m	struct:ImGuiIO	typeref:typename:bool[]
KeysMayBeCharInput	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImBitArrayForNamedKeys  KeysMayBeCharInput;                 \/\/ Lookup to tell if a key can/;"	m	struct:ImGuiContext	typeref:typename:ImBitArrayForNamedKeys
KeysOwnerData	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiKeyOwnerData       KeysOwnerData[ImGuiKey_NamedKey_COUNT];$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiKeyOwnerData[]
KeysRoutingTable	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiKeyRoutingTable    KeysRoutingTable;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiKeyRoutingTable
Known issues	build/_deps/imgui-proj-src/misc/freetype/README.md	/^### Known issues$/;"	S
LIBRARIES	build/_deps/imgui-proj-src/examples/example_glfw_vulkan/CMakeLists.txt	/^set(LIBRARIES "glfw;Vulkan::Vulkan")$/;"	v
LIBS	build/_deps/imgui-proj-src/examples/example_glfw_metal/Makefile	/^LIBS = -framework Metal -framework MetalKit -framework Cocoa -framework IOKit -framework CoreVid/;"	m
LIBS	build/_deps/imgui-proj-src/examples/example_glfw_opengl2/Makefile	/^LIBS =$/;"	m
LIBS	build/_deps/imgui-proj-src/examples/example_glfw_opengl2/build_win32.bat	/^@set LIBS=\/LIBPATH:..\\libs\\glfw\\lib-vc2010-32 glfw3.lib opengl32.lib gdi32.lib shell32.lib$/;"	v
LIBS	build/_deps/imgui-proj-src/examples/example_glfw_opengl3/Makefile	/^LIBS =$/;"	m
LIBS	build/_deps/imgui-proj-src/examples/example_glfw_opengl3/build_win32.bat	/^@set LIBS=\/LIBPATH:..\\libs\\glfw\\lib-vc2010-32 glfw3.lib opengl32.lib gdi32.lib shell32.lib$/;"	v
LIBS	build/_deps/imgui-proj-src/examples/example_glfw_vulkan/build_win32.bat	/^@set LIBS=\/LIBPATH:..\\libs\\glfw\\lib-vc2010-32 \/libpath:%VULKAN_SDK%\\lib32 glfw3.lib opengl/;"	v
LIBS	build/_deps/imgui-proj-src/examples/example_glfw_vulkan/build_win64.bat	/^@set LIBS=\/LIBPATH:..\\libs\\glfw\\lib-vc2010-64 \/libpath:%VULKAN_SDK%\\lib glfw3.lib opengl32/;"	v
LIBS	build/_deps/imgui-proj-src/examples/example_glut_opengl2/Makefile	/^LIBS =$/;"	m
LIBS	build/_deps/imgui-proj-src/examples/example_null/Makefile	/^LIBS =$/;"	m
LIBS	build/_deps/imgui-proj-src/examples/example_sdl2_directx11/build_win32.bat	/^@set LIBS=\/LIBPATH:%SDL2_DIR%\\lib\\x86 SDL2.lib SDL2main.lib \/LIBPATH:"%DXSDK_DIR%\/Lib\/x86"/;"	v
LIBS	build/_deps/imgui-proj-src/examples/example_sdl2_metal/Makefile	/^LIBS = -framework Metal -framework MetalKit -framework Cocoa -framework IOKit -framework CoreVid/;"	m
LIBS	build/_deps/imgui-proj-src/examples/example_sdl2_opengl2/Makefile	/^LIBS =$/;"	m
LIBS	build/_deps/imgui-proj-src/examples/example_sdl2_opengl2/build_win32.bat	/^@set LIBS=\/LIBPATH:%SDL2_DIR%\\lib\\x86 SDL2.lib SDL2main.lib opengl32.lib shell32.lib$/;"	v
LIBS	build/_deps/imgui-proj-src/examples/example_sdl2_opengl3/Makefile	/^LIBS =$/;"	m
LIBS	build/_deps/imgui-proj-src/examples/example_sdl2_opengl3/build_win32.bat	/^@set LIBS=\/LIBPATH:%SDL2_DIR%\\lib\\x86 SDL2.lib SDL2main.lib opengl32.lib shell32.lib$/;"	v
LIBS	build/_deps/imgui-proj-src/examples/example_sdl2_sdlrenderer2/Makefile	/^LIBS =$/;"	m
LIBS	build/_deps/imgui-proj-src/examples/example_sdl2_sdlrenderer2/build_win32.bat	/^@set LIBS=\/LIBPATH:%SDL2_DIR%\\lib\\x86 SDL2.lib SDL2main.lib$/;"	v
LIBS	build/_deps/imgui-proj-src/examples/example_sdl2_vulkan/build_win32.bat	/^@set LIBS=\/LIBPATH:%SDL2_DIR%\\lib\\x86 \/libpath:%VULKAN_SDK%\\lib32 SDL2.lib SDL2main.lib she/;"	v
LIBS	build/_deps/imgui-proj-src/examples/example_sdl3_opengl3/Makefile	/^LIBS =$/;"	m
LIBS	build/_deps/imgui-proj-src/examples/example_sdl3_opengl3/build_win32.bat	/^@set LIBS=\/LIBPATH:%SDL3_DIR%\\lib\\x86 SDL3.lib opengl32.lib shell32.lib$/;"	v
LIBS	build/_deps/imgui-proj-src/examples/example_sdl3_sdlrenderer3/Makefile	/^LIBS =$/;"	m
LIBS	build/_deps/imgui-proj-src/examples/example_sdl3_sdlrenderer3/build_win32.bat	/^@set LIBS=\/LIBPATH:%SDL3_DIR%\\lib\\x86 SDL3.lib$/;"	v
LIBS	build/_deps/imgui-proj-src/examples/example_win32_directx10/build_win32.bat	/^@set LIBS=\/LIBPATH:"%DXSDK_DIR%\/Lib\/x86" d3d10.lib d3dcompiler.lib$/;"	v
LIBS	build/_deps/imgui-proj-src/examples/example_win32_directx11/build_win32.bat	/^@set LIBS=\/LIBPATH:"%DXSDK_DIR%\/Lib\/x86" d3d11.lib d3dcompiler.lib$/;"	v
LIBS	build/_deps/imgui-proj-src/examples/example_win32_directx12/build_win32.bat	/^@set LIBS=d3d12.lib d3dcompiler.lib dxgi.lib$/;"	v
LIBS	build/_deps/imgui-proj-src/examples/example_win32_directx9/build_win32.bat	/^@set LIBS=\/LIBPATH:"%DXSDK_DIR%\/Lib\/x86" d3d9.lib$/;"	v
LIBS	build/_deps/imgui-proj-src/examples/example_win32_opengl3/build_win32.bat	/^@set LIBS=opengl32.lib$/;"	v
LINUX_GL_LIBS	build/_deps/imgui-proj-src/examples/example_glfw_opengl3/Makefile	/^LINUX_GL_LIBS = -lGL$/;"	m
LINUX_GL_LIBS	build/_deps/imgui-proj-src/examples/example_sdl2_opengl3/Makefile	/^LINUX_GL_LIBS = -lGL$/;"	m
LINUX_GL_LIBS	build/_deps/imgui-proj-src/examples/example_sdl3_opengl3/Makefile	/^LINUX_GL_LIBS = -lGL$/;"	m
LINUX_GL_LIBS	build/_deps/imgui-proj-src/examples/example_sdl3_sdlrenderer3/Makefile	/^LINUX_GL_LIBS = -lGL$/;"	m
LSMinimumSystemVersion	build/_deps/imgui-proj-src/examples/example_apple_metal/macOS/Info-macOS.plist	/^	<key>LSMinimumSystemVersion<\/key>$/;"	k
LSRequiresIPhoneOS	build/_deps/imgui-proj-src/examples/example_apple_metal/iOS/Info-iOS.plist	/^	<key>LSRequiresIPhoneOS<\/key>$/;"	k
Label	build/_deps/imgui-proj-src/imgui.cpp	/^    struct KeyLayoutData { int Row, Col; const char* Label; ImGuiKey Key; };$/;"	m	struct:ImGui::DebugRenderKeyboardPreview::KeyLayoutData	typeref:typename:const char *	file:
LabelText	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::LabelText(const char* label, const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
LabelTextV	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::LabelTextV(const char* label, const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
LastActiveFrame	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                     LastActiveFrame;$/;"	m	struct:ImGuiIDStackTool	typeref:typename:int
LastActiveId	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                 LastActiveId;                       \/\/ Store the last non-zero Act/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
LastActiveIdTimer	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   LastActiveIdTimer;                  \/\/ Store the last non-zero Act/;"	m	struct:ImGuiContext	typeref:typename:float
LastAlpha	build/_deps/imgui-proj-src/imgui_internal.h	/^    float               LastAlpha;$/;"	m	struct:ImGuiViewportP	typeref:typename:float
LastBgColor	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImU32                   LastBgColor;$/;"	m	struct:ImGuiDockNode	typeref:typename:ImU32
LastEntriesBuf	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDebugAllocEntry LastEntriesBuf[6]; \/\/ Track last 6 frames that had allocations$/;"	m	struct:ImGuiDebugAllocInfo	typeref:typename:ImGuiDebugAllocEntry[6]
LastEntriesIdx	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImS16       LastEntriesIdx;             \/\/ Current index in buffer$/;"	m	struct:ImGuiDebugAllocInfo	typeref:typename:ImS16
LastFocusedHadNavWindow	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                LastFocusedHadNavWindow;\/\/ Instead of maintaining a LastFocusedWindow /;"	m	struct:ImGuiViewportP	typeref:typename:bool
LastFocusedNodeId	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                 LastFocusedNodeId;          \/\/ [Root node only] Which of our child/;"	m	struct:ImGuiDockNode	typeref:typename:ImGuiID
LastFocusedStampCount	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                 LastFocusedStampCount;  \/\/ Last stamp number from when a window hosted/;"	m	struct:ImGuiViewportP	typeref:typename:int
LastFrameActive	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                         LastFrameActive;$/;"	m	struct:ImGuiTable	typeref:typename:int
LastFrameActive	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                     LastFrameActive;                    \/\/ Last frame number the windo/;"	m	struct:ImGuiWindow	typeref:typename:int
LastFrameActive	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                     LastFrameActive;            \/\/ Last frame number the node was upda/;"	m	struct:ImGuiDockNode	typeref:typename:int
LastFrameActive	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                 LastFrameActive;        \/\/ Last frame number this viewport was activat/;"	m	struct:ImGuiViewportP	typeref:typename:int
LastFrameAlive	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                     LastFrameAlive;             \/\/ Last frame number the node was upda/;"	m	struct:ImGuiDockNode	typeref:typename:int
LastFrameFocused	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                     LastFrameFocused;           \/\/ Last frame number the node was focu/;"	m	struct:ImGuiDockNode	typeref:typename:int
LastFrameJustFocused	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                     LastFrameJustFocused;               \/\/ Last frame number the windo/;"	m	struct:ImGuiWindow	typeref:typename:int
LastFrameSelected	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                 LastFrameSelected;      \/\/ This allows us to infer an ordered list of /;"	m	struct:ImGuiTabItem	typeref:typename:int
LastFrameVisible	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                 LastFrameVisible;$/;"	m	struct:ImGuiTabItem	typeref:typename:int
LastFrozenHeight	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                       LastFrozenHeight;           \/\/ Height of frozen section from l/;"	m	struct:ImGuiTableInstanceData	typeref:typename:float
LastItemData	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiLastItemData       LastItemData;                       \/\/ Storage for last submitted /;"	m	struct:ImGuiContext	typeref:typename:ImGuiLastItemData
LastKeyModsChangeFromNoneTime	build/_deps/imgui-proj-src/imgui_internal.h	/^    double                  LastKeyModsChangeFromNoneTime;      \/\/ Record the last time key mo/;"	m	struct:ImGuiContext	typeref:typename:double
LastKeyModsChangeTime	build/_deps/imgui-proj-src/imgui_internal.h	/^    double                  LastKeyModsChangeTime;              \/\/ Record the last time key mo/;"	m	struct:ImGuiContext	typeref:typename:double
LastKeyboardKeyPressTime	build/_deps/imgui-proj-src/imgui_internal.h	/^    double                  LastKeyboardKeyPressTime;           \/\/ Record the last time a keyb/;"	m	struct:ImGuiContext	typeref:typename:double
LastMouseCursor	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^    ImGuiMouseCursor            LastMouseCursor;$/;"	m	struct:ImGui_ImplWin32_Data	typeref:typename:ImGuiMouseCursor	file:
LastNameHash	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID             LastNameHash;$/;"	m	struct:ImGuiViewportP	typeref:typename:ImGuiID
LastOuterHeight	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                       LastOuterHeight;            \/\/ Outer height from last frame$/;"	m	struct:ImGuiTableInstanceData	typeref:typename:float
LastPlatformPos	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2              LastPlatformPos;$/;"	m	struct:ImGuiViewportP	typeref:typename:ImVec2
LastPlatformSize	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2              LastPlatformSize;$/;"	m	struct:ImGuiViewportP	typeref:typename:ImVec2
LastPos	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2              LastPos;$/;"	m	struct:ImGuiViewportP	typeref:typename:ImVec2
LastRendererSize	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2              LastRendererSize;$/;"	m	struct:ImGuiViewportP	typeref:typename:ImVec2
LastRequestFrame	build/_deps/imgui-proj-src/imgui_internal.h	/^    int             LastRequestFrame = 0;$/;"	m	struct:ImGuiTypingSelectState	typeref:typename:int
LastRequestTime	build/_deps/imgui-proj-src/imgui_internal.h	/^    float           LastRequestTime = 0.0f;$/;"	m	struct:ImGuiTypingSelectState	typeref:typename:float
LastResizedColumn	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTableColumnIdx         LastResizedColumn;          \/\/ Index of column being resized f/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
LastRowFlags	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTableRowFlags          LastRowFlags : 16;$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableRowFlags:16
LastTabItemIdx	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImS16               LastTabItemIdx;         \/\/ Index of last BeginTabItem() tab for use by/;"	m	struct:ImGuiTabBar	typeref:typename:ImS16
LastTimeActive	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                       LastTimeActive;             \/\/ Last timestamp this structure w/;"	m	struct:ImGuiTableTempData	typeref:typename:float
LastTimeActive	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   LastTimeActive;                     \/\/ Last timestamp the window w/;"	m	struct:ImGuiWindow	typeref:typename:float
LastTopHeadersRowHeight	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                       LastTopHeadersRowHeight;    \/\/ Height of first consecutive hea/;"	m	struct:ImGuiTableInstanceData	typeref:typename:float
LastValidMousePos	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^    ImVec2                  LastValidMousePos;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:ImVec2	file:
LayerData1	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVector<ImDrawList*>   LayerData1;$/;"	m	struct:ImDrawDataBuilder	typeref:typename:ImVector<ImDrawList * >
Layers	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVector<ImDrawList*>*  Layers[2];      \/\/ Pointers to global layers for: regular, tooltip/;"	m	struct:ImDrawDataBuilder	typeref:typename:ImVector<ImDrawList * > * [2]
LayoutType	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiLayoutType         LayoutType;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiLayoutType
LeftMostEnabledColumn	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTableColumnIdx         LeftMostEnabledColumn;      \/\/ Index of left-most non-hidden c/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
LeftMostStretchedColumn	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTableColumnIdx         LeftMostStretchedColumn;    \/\/ Index of left-most stretched co/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
License	README.md	/^## License$/;"	s
License	build/_deps/imgui-proj-src/docs/README.md	/^License$/;"	s
LineGap	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^        float       LineGap;            \/\/ The spacing in pixels between one row's descent and/;"	m	struct:__anon9c8900c20110::FontInfo	typeref:typename:float	file:
LineMaxY	build/_deps/imgui-proj-src/imgui_internal.h	/^    float               LineMinY, LineMaxY;$/;"	m	struct:ImGuiOldColumns	typeref:typename:float
LineMinY	build/_deps/imgui-proj-src/imgui_internal.h	/^    float               LineMinY, LineMaxY;$/;"	m	struct:ImGuiOldColumns	typeref:typename:float
LineOffsets	build/_deps/imgui-proj-src/imgui_demo.cpp	/^    ImVector<int>       LineOffsets; \/\/ Index to lines offset. We maintain this with AddLog() /;"	m	struct:ExampleAppLog	typeref:typename:ImVector<int>	file:
LineOffsets	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVector<int>   LineOffsets;$/;"	m	struct:ImGuiTextIndex	typeref:typename:ImVector<int>
LineSpacing	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^        float       LineSpacing;        \/\/ The baseline-to-baseline distance. Note that it usu/;"	m	struct:__anon9c8900c20110::FontInfo	typeref:typename:float	file:
LinkProgram	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^        PFNGLLINKPROGRAMPROC              LinkProgram;$/;"	m	struct:ImGL3WProcs::__anon6bce6ebe0108	typeref:typename:PFNGLLINKPROGRAMPROC
Linux and similar Unixes	build/_deps/imgui-proj-src/examples/example_sdl2_opengl3/README.md	/^## Linux and similar Unixes$/;"	s
Linux and similar Unixes	build/_deps/imgui-proj-src/examples/example_sdl3_opengl3/README.md	/^## Linux and similar Unixes$/;"	s
List of backends	build/_deps/imgui-proj-src/docs/BACKENDS.md	/^### List of backends$/;"	S
ListBox	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::ListBox(const char* label, int* current_item, bool (*old_getter)(void*, int, const c/;"	f	class:ImGui	typeref:typename:bool
ListBox	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::ListBox(const char* label, int* current_item, const char* (*getter)(void* user_data,/;"	f	class:ImGui	typeref:typename:bool
ListBox	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::ListBox(const char* label, int* current_item, const char* const items[], int items_c/;"	f	class:ImGui	typeref:typename:bool
ListClipper	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiListClipper*               ListClipper;$/;"	m	struct:ImGuiListClipperData	typeref:typename:ImGuiListClipper *
LoadFlags	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^        FT_Int32        LoadFlags;$/;"	m	struct:__anon9c8900c20110::FreeTypeFont	typeref:typename:FT_Int32	file:
LoadGlyph	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^    const FT_Glyph_Metrics* FreeTypeFont::LoadGlyph(uint32_t codepoint)$/;"	f	class:__anon9c8900c20110::FreeTypeFont	typeref:typename:const FT_Glyph_Metrics *
LoadIniSettingsFromDisk	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::LoadIniSettingsFromDisk(const char* ini_filename)$/;"	f	class:ImGui	typeref:typename:void
LoadIniSettingsFromMemory	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::LoadIniSettingsFromMemory(const char* ini_data, size_t ini_size)$/;"	f	class:ImGui	typeref:typename:void
Loading Font Data Embedded In Source Code	build/_deps/imgui-proj-src/docs/FONTS.md	/^## Loading Font Data Embedded In Source Code$/;"	s
Loading Font Data from Memory	build/_deps/imgui-proj-src/docs/FONTS.md	/^## Loading Font Data from Memory$/;"	s
LocalFlags	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDockNodeFlags      LocalFlags;                 \/\/ (Write) Flags specific to this node$/;"	m	struct:ImGuiDockNode	typeref:typename:ImGuiDockNodeFlags
LocalFlagsInWindows	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDockNodeFlags      LocalFlagsInWindows;        \/\/ (Write) Flags specific to this node/;"	m	struct:ImGuiDockNode	typeref:typename:ImGuiDockNodeFlags
LocalizationTable	build/_deps/imgui-proj-src/imgui_internal.h	/^    const char*             LocalizationTable[ImGuiLocKey_COUNT];$/;"	m	struct:ImGuiContext	typeref:typename:const char * []
LocalizeGetMsg	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline const char*      LocalizeGetMsg(ImGuiLocKey key) { ImGuiContext& g = *GImGui; const c/;"	f	namespace:ImGui	typeref:typename:const char *
LocalizeRegisterEntries	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::LocalizeRegisterEntries(const ImGuiLocEntry* entries, int count)$/;"	f	class:ImGui	typeref:typename:void
LockMarkEdited	build/_deps/imgui-proj-src/imgui_internal.h	/^    short                   LockMarkEdited;$/;"	m	struct:ImGuiContext	typeref:typename:short
LockThisFrame	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool        LockThisFrame;      \/\/ Reading this key requires explicit owner id (until end /;"	m	struct:ImGuiKeyOwnerData	typeref:typename:bool
LockUntilRelease	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool        LockUntilRelease;   \/\/ Reading this key requires explicit owner id (until key /;"	m	struct:ImGuiKeyOwnerData	typeref:typename:bool
LockWheelingWindow	build/_deps/imgui-proj-src/imgui.cpp	/^static void LockWheelingWindow(ImGuiWindow* window, float wheel_amount)$/;"	f	typeref:typename:void	file:
Locked	build/_deps/imgui-proj-src/imgui.h	/^    bool                        Locked;             \/\/ Marked as Locked by ImGui::NewFrame() s/;"	m	struct:ImFontAtlas	typeref:typename:bool
LogBegin	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::LogBegin(ImGuiLogType type, int auto_open_depth)$/;"	f	class:ImGui	typeref:typename:void
LogBuffer	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTextBuffer         LogBuffer;                          \/\/ Accumulation buffer when lo/;"	m	struct:ImGuiContext	typeref:typename:ImGuiTextBuffer
LogButtons	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::LogButtons()$/;"	f	class:ImGui	typeref:typename:void
LogDepthRef	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                     LogDepthRef;$/;"	m	struct:ImGuiContext	typeref:typename:int
LogDepthToExpand	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                     LogDepthToExpand;$/;"	m	struct:ImGuiContext	typeref:typename:int
LogDepthToExpandDefault	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                     LogDepthToExpandDefault;            \/\/ Default\/stored value for L/;"	m	struct:ImGuiContext	typeref:typename:int
LogEnabled	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    LogEnabled;                         \/\/ Currently capturing$/;"	m	struct:ImGuiContext	typeref:typename:bool
LogFile	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImFileHandle            LogFile;                            \/\/ If != NULL log to stdout\/ /;"	m	struct:ImGuiContext	typeref:typename:ImFileHandle
LogFilename	build/_deps/imgui-proj-src/imgui.h	/^    const char* LogFilename;                    \/\/ = "imgui_log.txt"\/\/ Path to .log file (de/;"	m	struct:ImGuiIO	typeref:typename:const char *
LogFinish	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::LogFinish()$/;"	f	class:ImGui	typeref:typename:void
LogLineFirstItem	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    LogLineFirstItem;$/;"	m	struct:ImGuiContext	typeref:typename:bool
LogLinePosY	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   LogLinePosY;$/;"	m	struct:ImGuiContext	typeref:typename:float
LogNextPrefix	build/_deps/imgui-proj-src/imgui_internal.h	/^    const char*             LogNextPrefix;$/;"	m	struct:ImGuiContext	typeref:typename:const char *
LogNextSuffix	build/_deps/imgui-proj-src/imgui_internal.h	/^    const char*             LogNextSuffix;$/;"	m	struct:ImGuiContext	typeref:typename:const char *
LogRenderedText	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::LogRenderedText(const ImVec2* ref_pos, const char* text, const char* text_end)$/;"	f	class:ImGui	typeref:typename:void
LogSetNextTextDecoration	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::LogSetNextTextDecoration(const char* prefix, const char* suffix)$/;"	f	class:ImGui	typeref:typename:void
LogSliderDeadzone	build/_deps/imgui-proj-src/imgui.h	/^    float       LogSliderDeadzone;          \/\/ The size in pixels of the dead-zone around zero/;"	m	struct:ImGuiStyle	typeref:typename:float
LogText	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::LogText(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
LogTextV	build/_deps/imgui-proj-src/imgui.cpp	/^static inline void LogTextV(ImGuiContext& g, const char* fmt, va_list args)$/;"	f	typeref:typename:void	file:
LogTextV	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::LogTextV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
LogToBuffer	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::LogToBuffer(int auto_open_depth)$/;"	f	class:ImGui	typeref:typename:void
LogToClipboard	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::LogToClipboard(int auto_open_depth)$/;"	f	class:ImGui	typeref:typename:void
LogToFile	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::LogToFile(int auto_open_depth, const char* filename)$/;"	f	class:ImGui	typeref:typename:void
LogToTTY	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::LogToTTY(int auto_open_depth)$/;"	f	class:ImGui	typeref:typename:void
LogType	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiLogType            LogType;                            \/\/ Capture target$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiLogType
LossynessOffset	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                           LossynessOffset;$/;"	m	struct:ImGuiListClipperData	typeref:typename:float
LowerBound	build/_deps/imgui-proj-src/imgui.cpp	/^static ImGuiStorage::ImGuiStoragePair* LowerBound(ImVector<ImGuiStorage::ImGuiStoragePair>& data/;"	f	typeref:typename:ImGuiStorage::ImGuiStoragePair *	file:
LunasvgPortState	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^struct LunasvgPortState$/;"	s	file:
MAP_ANALOG	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^    #define MAP_ANALOG(/;"	d	file:
MAP_ANALOG	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^    #define MAP_ANALOG(/;"	d	file:
MAP_BUTTON	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^    #define MAP_BUTTON(/;"	d	file:
MAP_BUTTON	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^    #define MAP_BUTTON(/;"	d	file:
MAP_LEGACY_NAV_INPUT_TO_KEY1	build/_deps/imgui-proj-src/imgui.cpp	/^        #define MAP_LEGACY_NAV_INPUT_TO_KEY1(/;"	d	file:
MAP_LEGACY_NAV_INPUT_TO_KEY2	build/_deps/imgui-proj-src/imgui.cpp	/^        #define MAP_LEGACY_NAV_INPUT_TO_KEY2(/;"	d	file:
MDT_ANGULAR_DPI	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^typedef enum { MDT_EFFECTIVE_DPI = 0, MDT_ANGULAR_DPI = 1, MDT_RAW_DPI = 2, MDT_DEFAULT = MDT_EF/;"	e	enum:__anon03f3e07e0203	file:
MDT_DEFAULT	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^typedef enum { MDT_EFFECTIVE_DPI = 0, MDT_ANGULAR_DPI = 1, MDT_RAW_DPI = 2, MDT_DEFAULT = MDT_EF/;"	e	enum:__anon03f3e07e0203	file:
MDT_EFFECTIVE_DPI	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^typedef enum { MDT_EFFECTIVE_DPI = 0, MDT_ANGULAR_DPI = 1, MDT_RAW_DPI = 2, MDT_DEFAULT = MDT_EF/;"	e	enum:__anon03f3e07e0203	file:
MDT_RAW_DPI	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^typedef enum { MDT_EFFECTIVE_DPI = 0, MDT_ANGULAR_DPI = 1, MDT_RAW_DPI = 2, MDT_DEFAULT = MDT_EF/;"	e	enum:__anon03f3e07e0203	file:
MEMALIGN	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.cpp	/^#define MEMALIGN(/;"	d	file:
MONITOR_DPI_TYPE	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^typedef enum { MDT_EFFECTIVE_DPI = 0, MDT_ANGULAR_DPI = 1, MDT_RAW_DPI = 2, MDT_DEFAULT = MDT_EF/;"	t	typeref:enum:__anon03f3e07e0203	file:
MONOSPACE FONTS	build/_deps/imgui-proj-src/docs/FONTS.md	/^#### MONOSPACE FONTS$/;"	t
MSAASamples	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.h	/^    VkSampleCountFlagBits           MSAASamples;                  \/\/ 0 defaults to VK_SAMPLE_C/;"	m	struct:ImGui_ImplVulkan_InitInfo	typeref:typename:VkSampleCountFlagBits
MTLDevice	build/_deps/imgui-proj-src/backends/imgui_impl_metal.h	/^@protocol MTLDevice, MTLCommandBuffer, MTLRenderCommandEncoder;$/;"	P
MVP	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.cpp	/^    float MVP[4][4];$/;"	m	struct:Uniforms	typeref:typename:float[4][4]	file:
MainLoopForEmscripten	build/_deps/imgui-proj-src/examples/libs/emscripten/emscripten_mainloop_stub.h	/^static void MainLoopForEmscripten()     { MainLoopForEmscriptenP(); }$/;"	f	typeref:typename:void
MainLoopForEmscriptenP	build/_deps/imgui-proj-src/examples/libs/emscripten/emscripten_mainloop_stub.h	/^static std::function<void()>            MainLoopForEmscriptenP;$/;"	v	typeref:typename:std::function<void ()>
MainLoopStep	build/_deps/imgui-proj-src/examples/example_android_opengl3/main.cpp	/^void MainLoopStep()$/;"	f	typeref:typename:void
MainLoopStep	build/_deps/imgui-proj-src/examples/example_glut_opengl2/main.cpp	/^void MainLoopStep()$/;"	f	typeref:typename:void
MainPos	build/_deps/imgui-proj-src/imgui.h	/^    ImVec2  MainPos, MainSize;      \/\/ Coordinates of the area displayed on this monitor (Min /;"	m	struct:ImGuiPlatformMonitor	typeref:typename:ImVec2
MainSize	build/_deps/imgui-proj-src/imgui.h	/^    ImVec2  MainPos, MainSize;      \/\/ Coordinates of the area displayed on this monitor (Min /;"	m	struct:ImGuiPlatformMonitor	typeref:typename:ImVec2
MainWindowRenderBuffers	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^    ImGui_ImplVulkan_WindowRenderBuffers MainWindowRenderBuffers;$/;"	m	struct:ImGui_ImplVulkan_Data	typeref:typename:ImGui_ImplVulkan_WindowRenderBuffers	file:
MakeScaledSize	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^inline static CGSize MakeScaledSize(CGSize size, CGFloat scale)$/;"	f
MallocWrapper	build/_deps/imgui-proj-src/imgui.cpp	/^static void*   MallocWrapper(size_t size, void* user_data)    { IM_UNUSED(user_data); IM_UNUSED(/;"	f	typeref:typename:void *	file:
MallocWrapper	build/_deps/imgui-proj-src/imgui.cpp	/^static void*   MallocWrapper(size_t size, void* user_data)    { IM_UNUSED(user_data); return mal/;"	f	typeref:typename:void *	file:
Map	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiStorage    Map;        \/\/ ID->Index$/;"	m	struct:ImPool	typeref:typename:ImGuiStorage
MarkIniSettingsDirty	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::MarkIniSettingsDirty()$/;"	f	class:ImGui	typeref:typename:void
MarkIniSettingsDirty	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::MarkIniSettingsDirty(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
MarkItemEdited	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::MarkItemEdited(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
Max	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2      Max;    \/\/ Lower-right$/;"	m	struct:ImRect	typeref:typename:ImVec2
Max	build/_deps/imgui-proj-src/imgui_internal.h	/^    int     Max;$/;"	m	struct:ImGuiListClipperRange	typeref:typename:int
MaxAdvanceWidth	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^        float       MaxAdvanceWidth;    \/\/ This field gives the maximum horizontal cursor adva/;"	m	struct:__anon9c8900c20110::FontInfo	typeref:typename:float	file:
MaxX	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   MaxX;$/;"	m	struct:ImGuiTableColumn	typeref:typename:float
MemAlloc	build/_deps/imgui-proj-src/imgui.cpp	/^void* ImGui::MemAlloc(size_t size)$/;"	f	class:ImGui	typeref:typename:void *
MemFree	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::MemFree(void* ptr)$/;"	f	class:ImGui	typeref:typename:void
MemoryCompacted	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                        MemoryCompacted;$/;"	m	struct:ImGuiTable	typeref:typename:bool
MemoryCompacted	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    MemoryCompacted;                    \/\/ Set when window extraneous /;"	m	struct:ImGuiWindow	typeref:typename:bool
MemoryDrawListIdxCapacity	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                     MemoryDrawListIdxCapacity;          \/\/ Backup of last idx\/vtx cou/;"	m	struct:ImGuiWindow	typeref:typename:int
MemoryDrawListVtxCapacity	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                     MemoryDrawListVtxCapacity;$/;"	m	struct:ImGuiWindow	typeref:typename:int
MenuBarAppending	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    MenuBarAppending;       \/\/ FIXME: Remove this$/;"	m	struct:ImGuiWindowTempData	typeref:typename:bool
MenuBarHeight	build/_deps/imgui-proj-src/imgui_internal.h	/^    float       MenuBarHeight() const   { ImGuiContext& g = *Ctx; return (Flags & ImGuiWindowFla/;"	f	struct:ImGuiWindow	typeref:typename:float
MenuBarOffset	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2                  MenuBarOffset;          \/\/ MenuBarOffset.x is sort of equivalent o/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
MenuBarOffsetMinVal	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2                      MenuBarOffsetMinVal;    \/\/ (Always on) This is not exposed pub/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImVec2
MenuBarRect	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImRect      MenuBarRect() const     { float y1 = Pos.y + TitleBarHeight(); return ImRect(Pos/;"	f	struct:ImGuiWindow	typeref:typename:ImRect
MenuColumns	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiMenuColumns        MenuColumns;            \/\/ Simplified columns storage for menu ite/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiMenuColumns
MenuItem	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::MenuItem(const char* label, const char* shortcut, bool selected, bool enabled)$/;"	f	class:ImGui	typeref:typename:bool
MenuItem	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::MenuItem(const char* label, const char* shortcut, bool* p_selected, bool enabled)$/;"	f	class:ImGui	typeref:typename:bool
MenuItemEx	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::MenuItemEx(const char* label, const char* icon, const char* shortcut, bool selected,/;"	f	class:ImGui	typeref:typename:bool
MenusIdSubmittedThisFrame	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVector<ImGuiID>       MenusIdSubmittedThisFrame;          \/\/ A list of menu IDs that wer/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiID>
Merge	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImDrawListSplitter::Merge(ImDrawList* draw_list)$/;"	f	class:ImDrawListSplitter	typeref:typename:void
MergeGroup	build/_deps/imgui-proj-src/imgui_tables.cpp	/^    struct MergeGroup$/;"	s	function:ImGui::TableMergeDrawChannels	file:
MergeMode	build/_deps/imgui-proj-src/imgui.h	/^    bool            MergeMode;              \/\/ false    \/\/ Merge into previous ImFont, so yo/;"	m	struct:ImFontConfig	typeref:typename:bool
MergedFlags	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDockNodeFlags      MergedFlags;                \/\/ (Read)  Effective flags (== SharedF/;"	m	struct:ImGuiDockNode	typeref:typename:ImGuiDockNodeFlags
MetalBuffer	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^@implementation MetalBuffer$/;"	I
MetalBuffer	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^@interface MetalBuffer : NSObject$/;"	i
MetalContext	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^@implementation MetalContext$/;"	I
MetalContext	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^@interface MetalContext : NSObject$/;"	i
Metrics/Debugger->Fonts	build/_deps/imgui-proj-src/docs/FONTS.md	/^#### Metrics\/Debugger->Fonts$/;"	t
MetricsActiveWindows	build/_deps/imgui-proj-src/imgui.h	/^    int         MetricsActiveWindows;               \/\/ Number of active windows$/;"	m	struct:ImGuiIO	typeref:typename:int
MetricsHelpMarker	build/_deps/imgui-proj-src/imgui.cpp	/^static void MetricsHelpMarker(const char* desc)$/;"	f	typeref:typename:void	file:
MetricsRenderIndices	build/_deps/imgui-proj-src/imgui.h	/^    int         MetricsRenderIndices;               \/\/ Indices output during last call to Rend/;"	m	struct:ImGuiIO	typeref:typename:int
MetricsRenderVertices	build/_deps/imgui-proj-src/imgui.h	/^    int         MetricsRenderVertices;              \/\/ Vertices output during last call to Ren/;"	m	struct:ImGuiIO	typeref:typename:int
MetricsRenderWindows	build/_deps/imgui-proj-src/imgui.h	/^    int         MetricsRenderWindows;               \/\/ Number of visible windows$/;"	m	struct:ImGuiIO	typeref:typename:int
MetricsTotalSurface	build/_deps/imgui-proj-src/imgui.h	/^    int                         MetricsTotalSurface;\/\/ 4     \/\/ out \/\/            \/\/ Tot/;"	m	struct:ImFont	typeref:typename:int
Min	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2      Min;    \/\/ Upper-left$/;"	m	struct:ImRect	typeref:typename:ImVec2
Min	build/_deps/imgui-proj-src/imgui_internal.h	/^    int     Min;$/;"	m	struct:ImGuiListClipperRange	typeref:typename:int
MinAllocationSize	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.h	/^    VkDeviceSize                    MinAllocationSize;      \/\/ Minimum allocation size. Set to/;"	m	struct:ImGui_ImplVulkan_InitInfo	typeref:typename:VkDeviceSize
MinColumnWidth	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                       MinColumnWidth;$/;"	m	struct:ImGuiTable	typeref:typename:float
MinImageCount	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.h	/^    uint32_t                        MinImageCount;                \/\/ >= 2$/;"	m	struct:ImGui_ImplVulkan_InitInfo	typeref:typename:uint32_t
MinX	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   MinX;                           \/\/ Absolute positions$/;"	m	struct:ImGuiTableColumn	typeref:typename:float
Miscellaneous	build/_deps/imgui-proj-src/docs/EXAMPLES.md	/^### Miscellaneous$/;"	S
ModalDimBgColor	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImU32                   ModalDimBgColor;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImU32
Mode	build/_deps/imgui-proj-src/imgui_demo.cpp	/^            enum Mode$/;"	g	function:ShowDemoWindowWidgets	file:
Mode_Copy	build/_deps/imgui-proj-src/imgui_demo.cpp	/^                Mode_Copy,$/;"	e	enum:ShowDemoWindowWidgets::Mode	file:
Mode_Move	build/_deps/imgui-proj-src/imgui_demo.cpp	/^                Mode_Move,$/;"	e	enum:ShowDemoWindowWidgets::Mode	file:
Mode_Swap	build/_deps/imgui-proj-src/imgui_demo.cpp	/^                Mode_Swap$/;"	e	enum:ShowDemoWindowWidgets::Mode	file:
Mods	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImU16                           Mods;               \/\/ Technically we'd only need 4-bits b/;"	m	struct:ImGuiKeyRoutingData	typeref:typename:ImU16
Monitor	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^    id                          Monitor;$/;"	E	struct:ImGui_ImplOSX_Data
Monitors	build/_deps/imgui-proj-src/imgui.h	/^    ImVector<ImGuiPlatformMonitor>  Monitors;$/;"	m	struct:ImGuiPlatformIO	typeref:typename:ImVector<ImGuiPlatformMonitor>
MouseButton	build/_deps/imgui-proj-src/imgui_internal.h	/^        ImGuiInputEventMouseButton  MouseButton;    \/\/ if Type == ImGuiInputEventType_MouseBut/;"	m	union:ImGuiInputEvent::__anonc52b7f12040a	typeref:typename:ImGuiInputEventMouseButton
MouseButtonToKey	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline ImGuiKey         MouseButtonToKey(ImGuiMouseButton button)                   { IM_ASS/;"	f	namespace:ImGui	typeref:typename:ImGuiKey
MouseButtonsDown	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^    int                     MouseButtonsDown;$/;"	m	struct:ImGui_ImplSDL2_Data	typeref:typename:int	file:
MouseButtonsDown	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^    int                     MouseButtonsDown;$/;"	m	struct:ImGui_ImplSDL3_Data	typeref:typename:int	file:
MouseButtonsDown	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^    int                         MouseButtonsDown;$/;"	m	struct:ImGui_ImplWin32_Data	typeref:typename:int	file:
MouseCanReportHoveredViewport	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^    bool                    MouseCanReportHoveredViewport;  \/\/ This is hard to use\/unreliable/;"	m	struct:ImGui_ImplSDL2_Data	typeref:typename:bool	file:
MouseCanReportHoveredViewport	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^    bool                    MouseCanReportHoveredViewport;  \/\/ This is hard to use\/unreliable/;"	m	struct:ImGui_ImplSDL3_Data	typeref:typename:bool	file:
MouseCanUseGlobalState	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^    bool                    MouseCanUseGlobalState;$/;"	m	struct:ImGui_ImplSDL2_Data	typeref:typename:bool	file:
MouseCanUseGlobalState	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^    bool                    MouseCanUseGlobalState;$/;"	m	struct:ImGui_ImplSDL3_Data	typeref:typename:bool	file:
MouseClicked	build/_deps/imgui-proj-src/imgui.h	/^    bool        MouseClicked[5];                    \/\/ Mouse button went from !Down to Down (s/;"	m	struct:ImGuiIO	typeref:typename:bool[5]
MouseClickedCount	build/_deps/imgui-proj-src/imgui.h	/^    ImU16       MouseClickedCount[5];               \/\/ == 0 (not clicked), == 1 (same as Mouse/;"	m	struct:ImGuiIO	typeref:typename:ImU16[5]
MouseClickedLastCount	build/_deps/imgui-proj-src/imgui.h	/^    ImU16       MouseClickedLastCount[5];           \/\/ Count successive number of clicks. Stay/;"	m	struct:ImGuiIO	typeref:typename:ImU16[5]
MouseClickedPos	build/_deps/imgui-proj-src/imgui.h	/^    ImVec2      MouseClickedPos[5];                 \/\/ Position at time of clicking$/;"	m	struct:ImGuiIO	typeref:typename:ImVec2[5]
MouseClickedTime	build/_deps/imgui-proj-src/imgui.h	/^    double      MouseClickedTime[5];                \/\/ Time of last click (used to figure out /;"	m	struct:ImGuiIO	typeref:typename:double[5]
MouseCursor	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiMouseCursor        MouseCursor;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiMouseCursor
MouseCursorHidden	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^    bool                        MouseCursorHidden;$/;"	E	struct:ImGui_ImplOSX_Data
MouseCursorInvisible	build/_deps/imgui-proj-src/backends/imgui_impl_allegro5.cpp	/^    ALLEGRO_MOUSE_CURSOR*       MouseCursorInvisible;$/;"	m	struct:ImGui_ImplAllegro5_Data	typeref:typename:ALLEGRO_MOUSE_CURSOR *	file:
MouseCursorScale	build/_deps/imgui-proj-src/imgui.h	/^    float       MouseCursorScale;           \/\/ Scale software rendered mouse cursor (when io.M/;"	m	struct:ImGuiStyle	typeref:typename:float
MouseCursors	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^    GLFWcursor*             MouseCursors[ImGuiMouseCursor_COUNT];$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:GLFWcursor * []	file:
MouseCursors	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^    NSCursor*                   MouseCursors[ImGuiMouseCursor_COUNT];$/;"	E	struct:ImGui_ImplOSX_Data
MouseCursors	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^    SDL_Cursor*             MouseCursors[ImGuiMouseCursor_COUNT];$/;"	m	struct:ImGui_ImplSDL2_Data	typeref:typename:SDL_Cursor * []	file:
MouseCursors	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^    SDL_Cursor*             MouseCursors[ImGuiMouseCursor_COUNT];$/;"	m	struct:ImGui_ImplSDL3_Data	typeref:typename:SDL_Cursor * []	file:
MouseDelta	build/_deps/imgui-proj-src/imgui.h	/^    ImVec2      MouseDelta;                         \/\/ Mouse delta. Note that this is zero if /;"	m	struct:ImGuiIO	typeref:typename:ImVec2
MouseDoubleClickMaxDist	build/_deps/imgui-proj-src/imgui.h	/^    float       MouseDoubleClickMaxDist;        \/\/ = 6.0f           \/\/ Distance threshold to/;"	m	struct:ImGuiIO	typeref:typename:float
MouseDoubleClickTime	build/_deps/imgui-proj-src/imgui.h	/^    float       MouseDoubleClickTime;           \/\/ = 0.30f          \/\/ Time for a double-cli/;"	m	struct:ImGuiIO	typeref:typename:float
MouseDoubleClicked	build/_deps/imgui-proj-src/imgui.h	/^    bool        MouseDoubleClicked[5];              \/\/ Has mouse button been double-clicked? (/;"	m	struct:ImGuiIO	typeref:typename:bool[5]
MouseDown	build/_deps/imgui-proj-src/imgui.h	/^    bool        MouseDown[5];                       \/\/ Mouse buttons: 0=left, 1=right, 2=middl/;"	m	struct:ImGuiIO	typeref:typename:bool[5]
MouseDownDuration	build/_deps/imgui-proj-src/imgui.h	/^    float       MouseDownDuration[5];               \/\/ Duration the mouse button has been down/;"	m	struct:ImGuiIO	typeref:typename:float[5]
MouseDownDurationPrev	build/_deps/imgui-proj-src/imgui.h	/^    float       MouseDownDurationPrev[5];           \/\/ Previous time the mouse button has been/;"	m	struct:ImGuiIO	typeref:typename:float[5]
MouseDownOwned	build/_deps/imgui-proj-src/imgui.h	/^    bool        MouseDownOwned[5];                  \/\/ Track if button was clicked inside a de/;"	m	struct:ImGuiIO	typeref:typename:bool[5]
MouseDownOwnedUnlessPopupClose	build/_deps/imgui-proj-src/imgui.h	/^    bool        MouseDownOwnedUnlessPopupClose[5];  \/\/ Track if button was clicked inside a de/;"	m	struct:ImGuiIO	typeref:typename:bool[5]
MouseDragMaxDistanceAbs	build/_deps/imgui-proj-src/imgui.h	/^    ImVec2      MouseDragMaxDistanceAbs[5];         \/\/ Maximum distance, absolute, on each axi/;"	m	struct:ImGuiIO	typeref:typename:ImVec2[5]
MouseDragMaxDistanceSqr	build/_deps/imgui-proj-src/imgui.h	/^    float       MouseDragMaxDistanceSqr[5];         \/\/ Squared maximum distance of how much mo/;"	m	struct:ImGuiIO	typeref:typename:float[5]
MouseDragThreshold	build/_deps/imgui-proj-src/imgui.h	/^    float       MouseDragThreshold;             \/\/ = 6.0f           \/\/ Distance threshold be/;"	m	struct:ImGuiIO	typeref:typename:float
MouseDrawCursor	build/_deps/imgui-proj-src/imgui.h	/^    bool        MouseDrawCursor;                \/\/ = false          \/\/ Request ImGui to draw/;"	m	struct:ImGuiIO	typeref:typename:bool
MouseHoveredViewport	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiID     MouseHoveredViewport;               \/\/ (Optional) Modify using io.AddMouseView/;"	m	struct:ImGuiIO	typeref:typename:ImGuiID
MouseHwnd	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^    HWND                        MouseHwnd;$/;"	m	struct:ImGui_ImplWin32_Data	typeref:typename:HWND	file:
MouseLastCursor	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^    SDL_Cursor*             MouseLastCursor;$/;"	m	struct:ImGui_ImplSDL2_Data	typeref:typename:SDL_Cursor *	file:
MouseLastCursor	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^    SDL_Cursor*             MouseLastCursor;$/;"	m	struct:ImGui_ImplSDL3_Data	typeref:typename:SDL_Cursor *	file:
MouseLastHoveredViewport	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiViewportP*         MouseLastHoveredViewport;           \/\/ Last known viewport that wa/;"	m	struct:ImGuiContext	typeref:typename:ImGuiViewportP *
MouseLastLeaveFrame	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^    int                     MouseLastLeaveFrame;$/;"	m	struct:ImGui_ImplSDL2_Data	typeref:typename:int	file:
MouseLastValidPos	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2                  MouseLastValidPos;$/;"	m	struct:ImGuiContext	typeref:typename:ImVec2
MousePendingLeaveFrame	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^    int                     MousePendingLeaveFrame;$/;"	m	struct:ImGui_ImplSDL3_Data	typeref:typename:int	file:
MousePos	build/_deps/imgui-proj-src/imgui.h	/^    ImVec2      MousePos;                           \/\/ Mouse position, in pixels. Set to ImVec/;"	m	struct:ImGuiIO	typeref:typename:ImVec2
MousePos	build/_deps/imgui-proj-src/imgui_internal.h	/^        ImGuiInputEventMousePos     MousePos;       \/\/ if Type == ImGuiInputEventType_MousePos$/;"	m	union:ImGuiInputEvent::__anonc52b7f12040a	typeref:typename:ImGuiInputEventMousePos
MousePosPrev	build/_deps/imgui-proj-src/imgui.h	/^    ImVec2      MousePosPrev;                       \/\/ Previous mouse position (note that Mous/;"	m	struct:ImGuiIO	typeref:typename:ImVec2
MouseReleased	build/_deps/imgui-proj-src/imgui.h	/^    bool        MouseReleased[5];                   \/\/ Mouse button went from Down to !Down$/;"	m	struct:ImGuiIO	typeref:typename:bool[5]
MouseSource	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiMouseSource MouseSource;                   \/\/ Mouse actual input peripheral (Mouse\/T/;"	m	struct:ImGuiIO	typeref:typename:ImGuiMouseSource
MouseSource	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiInputEventMouseButton   { int Button; bool Down; ImGuiMouseSource MouseSource; };$/;"	m	struct:ImGuiInputEventMouseButton	typeref:typename:ImGuiMouseSource
MouseSource	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiInputEventMousePos      { float PosX, PosY; ImGuiMouseSource MouseSource; };$/;"	m	struct:ImGuiInputEventMousePos	typeref:typename:ImGuiMouseSource
MouseSource	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiInputEventMouseWheel    { float WheelX, WheelY; ImGuiMouseSource MouseSource; };$/;"	m	struct:ImGuiInputEventMouseWheel	typeref:typename:ImGuiMouseSource
MouseStationaryTimer	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   MouseStationaryTimer;               \/\/ Time the mouse has been sta/;"	m	struct:ImGuiContext	typeref:typename:float
MouseTrackedArea	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^    int                         MouseTrackedArea;   \/\/ 0: not tracked, 1: client are, 2: non-c/;"	m	struct:ImGui_ImplWin32_Data	typeref:typename:int	file:
MouseViewport	build/_deps/imgui-proj-src/imgui_internal.h	/^        ImGuiInputEventMouseViewport MouseViewport; \/\/ if Type == ImGuiInputEventType_MouseVie/;"	m	union:ImGuiInputEvent::__anonc52b7f12040a	typeref:typename:ImGuiInputEventMouseViewport
MouseViewport	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiViewportP*         MouseViewport;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiViewportP *
MouseWheel	build/_deps/imgui-proj-src/imgui.h	/^    float       MouseWheel;                         \/\/ Mouse wheel Vertical: 1 unit scrolls ab/;"	m	struct:ImGuiIO	typeref:typename:float
MouseWheel	build/_deps/imgui-proj-src/imgui_internal.h	/^        ImGuiInputEventMouseWheel   MouseWheel;     \/\/ if Type == ImGuiInputEventType_MouseWhe/;"	m	union:ImGuiInputEvent::__anonc52b7f12040a	typeref:typename:ImGuiInputEventMouseWheel
MouseWheelH	build/_deps/imgui-proj-src/imgui.h	/^    float       MouseWheelH;                        \/\/ Mouse wheel Horizontal. >0 scrolls Left/;"	m	struct:ImGuiIO	typeref:typename:float
MouseWheelRequestAxisSwap	build/_deps/imgui-proj-src/imgui.h	/^    bool        MouseWheelRequestAxisSwap;          \/\/ On a non-Mac system, holding SHIFT requ/;"	m	struct:ImGuiIO	typeref:typename:bool
MouseWindow	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^    GLFWwindow*             MouseWindow;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:GLFWwindow *	file:
MouseWindowID	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^    Uint32                  MouseWindowID;$/;"	m	struct:ImGui_ImplSDL2_Data	typeref:typename:Uint32	file:
MouseWindowID	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^    Uint32                  MouseWindowID;$/;"	m	struct:ImGui_ImplSDL3_Data	typeref:typename:Uint32	file:
MoveId	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                 MoveId;                             \/\/ == window->GetID("#MOVE")$/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiID
MovingWindow	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiWindow*            MovingWindow;                       \/\/ Track the window we clicked/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
MyCallback	build/_deps/imgui-proj-src/imgui_demo.cpp	/^                static int MyCallback(ImGuiInputTextCallbackData* data)$/;"	f	struct:ShowDemoWindowWidgets::Funcs	typeref:typename:int	file:
MyDocument	build/_deps/imgui-proj-src/imgui_demo.cpp	/^    MyDocument(const char* name, bool open = true, const ImVec4& color = ImVec4(1.0f, 1.0f, 1.0f/;"	f	struct:MyDocument	file:
MyDocument	build/_deps/imgui-proj-src/imgui_demo.cpp	/^struct MyDocument$/;"	s	file:
MyInputTextMultiline	build/_deps/imgui-proj-src/imgui_demo.cpp	/^                static bool MyInputTextMultiline(const char* label, ImVector<char>* my_str, cons/;"	f	struct:ShowDemoWindowWidgets::Funcs	typeref:typename:bool	file:
MyItem	build/_deps/imgui-proj-src/imgui_demo.cpp	/^struct MyItem$/;"	s	namespace:__anon1b6430950210	file:
MyItemColumnID	build/_deps/imgui-proj-src/imgui_demo.cpp	/^enum MyItemColumnID$/;"	g	namespace:__anon1b6430950210	file:
MyItemColumnID_Action	build/_deps/imgui-proj-src/imgui_demo.cpp	/^    MyItemColumnID_Action,$/;"	e	enum:__anon1b6430950210::MyItemColumnID	file:
MyItemColumnID_Description	build/_deps/imgui-proj-src/imgui_demo.cpp	/^    MyItemColumnID_Description$/;"	e	enum:__anon1b6430950210::MyItemColumnID	file:
MyItemColumnID_ID	build/_deps/imgui-proj-src/imgui_demo.cpp	/^    MyItemColumnID_ID,$/;"	e	enum:__anon1b6430950210::MyItemColumnID	file:
MyItemColumnID_Name	build/_deps/imgui-proj-src/imgui_demo.cpp	/^    MyItemColumnID_Name,$/;"	e	enum:__anon1b6430950210::MyItemColumnID	file:
MyItemColumnID_Quantity	build/_deps/imgui-proj-src/imgui_demo.cpp	/^    MyItemColumnID_Quantity,$/;"	e	enum:__anon1b6430950210::MyItemColumnID	file:
MyResizeCallback	build/_deps/imgui-proj-src/imgui_demo.cpp	/^                static int MyResizeCallback(ImGuiInputTextCallbackData* data)$/;"	f	struct:ShowDemoWindowWidgets::Funcs	typeref:typename:int	file:
MyTreeNode	build/_deps/imgui-proj-src/imgui_demo.cpp	/^            struct MyTreeNode$/;"	s	function:ShowDemoWindowTables	file:
NAV_ACTIVATE_HIGHLIGHT_TIMER	build/_deps/imgui-proj-src/imgui.cpp	/^static const float NAV_ACTIVATE_HIGHLIGHT_TIMER             = 0.10f;    \/\/ Time to highlight a/;"	v	typeref:typename:const float	file:
NAV_WINDOWING_HIGHLIGHT_DELAY	build/_deps/imgui-proj-src/imgui.cpp	/^static const float NAV_WINDOWING_HIGHLIGHT_DELAY            = 0.20f;    \/\/ Time before the hig/;"	v	typeref:typename:const float	file:
NAV_WINDOWING_LIST_APPEAR_DELAY	build/_deps/imgui-proj-src/imgui.cpp	/^static const float NAV_WINDOWING_LIST_APPEAR_DELAY          = 0.15f;    \/\/ Time before the win/;"	v	typeref:typename:const float	file:
NOMINMAX	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.h	/^#define NOMINMAX$/;"	d
NOMINMAX	build/_deps/imgui-proj-src/imgui.cpp	/^#define NOMINMAX$/;"	d	file:
NSCursor	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^@interface NSCursor()$/;"	i	struct:ImGui_ImplOSX_Data
NSMainStoryboardFile	build/_deps/imgui-proj-src/examples/example_apple_metal/macOS/Info-macOS.plist	/^	<key>NSMainStoryboardFile<\/key>$/;"	k
NSPrincipalClass	build/_deps/imgui-proj-src/examples/example_apple_metal/macOS/Info-macOS.plist	/^	<key>NSPrincipalClass<\/key>$/;"	k
NUM_BACK_BUFFERS	build/_deps/imgui-proj-src/examples/example_win32_directx12/main.cpp	/^static int const                    NUM_BACK_BUFFERS = 3;$/;"	v	typeref:typename:int const	file:
NUM_FRAMES_IN_FLIGHT	build/_deps/imgui-proj-src/examples/example_win32_directx12/main.cpp	/^static int const                    NUM_FRAMES_IN_FLIGHT = 3;$/;"	v	typeref:typename:int const	file:
Name	README.md	/^## Name$/;"	s
Name	build/_deps/imgui-proj-src/imgui.h	/^    char            Name[40];               \/\/ Name (strictly to ease debugging)$/;"	m	struct:ImFontConfig	typeref:typename:char[40]
Name	build/_deps/imgui-proj-src/imgui_demo.cpp	/^                const char*     Name;$/;"	m	struct:ShowDemoWindowTables::MyTreeNode	typeref:typename:const char *	file:
Name	build/_deps/imgui-proj-src/imgui_demo.cpp	/^    const char* Name;       \/\/ Document title$/;"	m	struct:MyDocument	typeref:typename:const char *	file:
Name	build/_deps/imgui-proj-src/imgui_demo.cpp	/^    const char* Name;$/;"	m	struct:__anon1b6430950210::MyItem	typeref:typename:const char *	file:
Name	build/_deps/imgui-proj-src/imgui_demo.cpp	/^    struct EnumDesc { ImGuiTableFlags Value; const char* Name; const char* Tooltip; };$/;"	m	struct:EditTableSizingFlags::EnumDesc	typeref:typename:const char *	file:
Name	build/_deps/imgui-proj-src/imgui_internal.h	/^    char*                   Name;                               \/\/ Window name, owned by the w/;"	m	struct:ImGuiWindow	typeref:typename:char *
Name	build/_deps/imgui-proj-src/imgui_internal.h	/^    const char* Name;           \/\/ Short descriptive name for the type, for debugging$/;"	m	struct:ImGuiDataTypeInfo	typeref:typename:const char *
NameBufLen	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                     NameBufLen;                         \/\/ Size of buffer storing Name/;"	m	struct:ImGuiWindow	typeref:typename:int
NameOffset	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImS16                   NameOffset;                     \/\/ Offset into parent ColumnsNames/;"	m	struct:ImGuiTableColumn	typeref:typename:ImS16
NameOffset	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImS32               NameOffset;             \/\/ When Window==NULL, offset to name within pa/;"	m	struct:ImGuiTabItem	typeref:typename:ImS32
NavActivateDownId	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                 NavActivateDownId;                  \/\/ ~~ IsKeyDown(ImGuiKey_Space/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavActivateFlags	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiActivateFlags      NavActivateFlags;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiActivateFlags
NavActivateId	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                 NavActivateId;                      \/\/ ~~ (g.ActiveId == 0) && (Is/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavActivatePressedId	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                 NavActivatePressedId;               \/\/ ~~ IsKeyPressed(ImGuiKey_Sp/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavActive	build/_deps/imgui-proj-src/imgui.h	/^    bool        NavActive;                          \/\/ Keyboard\/Gamepad navigation is current/;"	m	struct:ImGuiIO	typeref:typename:bool
NavAnyRequest	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    NavAnyRequest;                      \/\/ ~~ NavMoveRequest || NavIni/;"	m	struct:ImGuiContext	typeref:typename:bool
NavApplyItemToResult	build/_deps/imgui-proj-src/imgui.cpp	/^static void ImGui::NavApplyItemToResult(ImGuiNavItemData* result)$/;"	f	class:ImGui	typeref:typename:void	file:
NavBiasScoringRect	build/_deps/imgui-proj-src/imgui.cpp	/^static void NavBiasScoringRect(ImRect& r, ImVec2& preferred_pos_rel, ImGuiDir move_dir, ImGuiNav/;"	f	typeref:typename:void	file:
NavCalcPreferredRefPos	build/_deps/imgui-proj-src/imgui.cpp	/^static ImVec2 ImGui::NavCalcPreferredRefPos()$/;"	f	class:ImGui	typeref:typename:ImVec2	file:
NavClearPreferredPosForAxis	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::NavClearPreferredPosForAxis(ImGuiAxis axis)$/;"	f	class:ImGui	typeref:typename:void
NavDisableHighlight	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    NavDisableHighlight;                \/\/ When user starts using mous/;"	m	struct:ImGuiContext	typeref:typename:bool
NavDisableMouseHover	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    NavDisableMouseHover;               \/\/ When user starts using game/;"	m	struct:ImGuiContext	typeref:typename:bool
NavEndFrame	build/_deps/imgui-proj-src/imgui.cpp	/^static void ImGui::NavEndFrame()$/;"	f	class:ImGui	typeref:typename:void	file:
NavFocusRoute	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVector<ImGuiFocusScopeData> NavFocusRoute;                \/\/ Reversed copy focus scope s/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiFocusScopeData>
NavFocusScopeId	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                 NavFocusScopeId;                    \/\/ Focused focus scope (e.g. s/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavHideHighlightOneFrame	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    NavHideHighlightOneFrame;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:bool
NavHighlightActivated	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::NavHighlightActivated(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
NavHighlightActivatedId	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                 NavHighlightActivatedId;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavHighlightActivatedTimer	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   NavHighlightActivatedTimer;$/;"	m	struct:ImGuiContext	typeref:typename:float
NavId	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                 NavId;                              \/\/ Focused item for navigation$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavIdIsAlive	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    NavIdIsAlive;                       \/\/ Nav widget has been seen th/;"	m	struct:ImGuiContext	typeref:typename:bool
NavInitRequest	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    NavInitRequest;                     \/\/ Init request for appearing /;"	m	struct:ImGuiContext	typeref:typename:bool
NavInitRequestApplyResult	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::NavInitRequestApplyResult()$/;"	f	class:ImGui	typeref:typename:void
NavInitRequestFromMove	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    NavInitRequestFromMove;$/;"	m	struct:ImGuiContext	typeref:typename:bool
NavInitResult	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiNavItemData        NavInitResult;                      \/\/ Init request result (first /;"	m	struct:ImGuiContext	typeref:typename:ImGuiNavItemData
NavInitWindow	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::NavInitWindow(ImGuiWindow* window, bool force_reinit)$/;"	f	class:ImGui	typeref:typename:void
NavInputSource	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiInputSource        NavInputSource;                     \/\/ Keyboard or Gamepad mode? T/;"	m	struct:ImGuiContext	typeref:typename:ImGuiInputSource
NavInputs	build/_deps/imgui-proj-src/imgui.h	/^    float       NavInputs[ImGuiNavInput_COUNT];     \/\/ [LEGACY] Since 1.88, NavInputs[] was re/;"	m	struct:ImGuiIO	typeref:typename:float[]
NavIsScrollPushableX	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    NavIsScrollPushableX;   \/\/ Set when current work location may be s/;"	m	struct:ImGuiWindowTempData	typeref:typename:bool
NavJustMovedToFocusScopeId	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                 NavJustMovedToFocusScopeId;         \/\/ Just navigated to this focu/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavJustMovedToId	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                 NavJustMovedToId;                   \/\/ Just navigated to this id (/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavJustMovedToKeyMods	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiKeyChord           NavJustMovedToKeyMods;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiKeyChord
NavLastChildNavWindow	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiWindow*            NavLastChildNavWindow;              \/\/ When going to the menu bar,/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
NavLastIds	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                 NavLastIds[ImGuiNavLayer_COUNT];    \/\/ Last known NavId for this w/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiID[]
NavLastValidSelectionUserData	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiSelectionUserData  NavLastValidSelectionUserData;      \/\/ Last valid data passed to S/;"	m	struct:ImGuiContext	typeref:typename:ImGuiSelectionUserData
NavLayer	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiNavLayer           NavLayer;                           \/\/ Layer we are navigating on./;"	m	struct:ImGuiContext	typeref:typename:ImGuiNavLayer
NavLayerCurrent	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiNavLayer           NavLayerCurrent;        \/\/ Current layer, 0..31 (we currently only/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiNavLayer
NavLayerCurrent	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImS8                    NavLayerCurrent;                \/\/ ImGuiNavLayer in 1 byte$/;"	m	struct:ImGuiTableColumn	typeref:typename:ImS8
NavLayersActiveMask	build/_deps/imgui-proj-src/imgui_internal.h	/^    short                   NavLayersActiveMask;    \/\/ Which layers have been written to (resu/;"	m	struct:ImGuiWindowTempData	typeref:typename:short
NavLayersActiveMaskNext	build/_deps/imgui-proj-src/imgui_internal.h	/^    short                   NavLayersActiveMaskNext;\/\/ Which layers have been written to (accu/;"	m	struct:ImGuiWindowTempData	typeref:typename:short
NavMousePosDirty	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    NavMousePosDirty;                   \/\/ When set we will update mou/;"	m	struct:ImGuiContext	typeref:typename:bool
NavMoveClipDir	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDir                NavMoveClipDir;                     \/\/ FIXME-NAV: Describe the pur/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDir
NavMoveDir	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDir                NavMoveDir;                         \/\/ Direction of the move reque/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDir
NavMoveDirForDebug	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDir                NavMoveDirForDebug;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDir
NavMoveFlags	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiNavMoveFlags       NavMoveFlags;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNavMoveFlags
NavMoveForwardToNextFrame	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    NavMoveForwardToNextFrame;$/;"	m	struct:ImGuiContext	typeref:typename:bool
NavMoveKeyMods	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiKeyChord           NavMoveKeyMods;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiKeyChord
NavMoveRequestApplyResult	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::NavMoveRequestApplyResult()$/;"	f	class:ImGui	typeref:typename:void
NavMoveRequestButNoResultYet	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::NavMoveRequestButNoResultYet()$/;"	f	class:ImGui	typeref:typename:bool
NavMoveRequestCancel	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::NavMoveRequestCancel()$/;"	f	class:ImGui	typeref:typename:void
NavMoveRequestForward	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::NavMoveRequestForward(ImGuiDir move_dir, ImGuiDir clip_dir, ImGuiNavMoveFlags move_f/;"	f	class:ImGui	typeref:typename:void
NavMoveRequestResolveWithLastItem	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::NavMoveRequestResolveWithLastItem(ImGuiNavItemData* result)$/;"	f	class:ImGui	typeref:typename:void
NavMoveRequestResolveWithPastTreeNode	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::NavMoveRequestResolveWithPastTreeNode(ImGuiNavItemData* result, ImGuiNavTreeNodeData/;"	f	class:ImGui	typeref:typename:void
NavMoveRequestSubmit	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::NavMoveRequestSubmit(ImGuiDir move_dir, ImGuiDir clip_dir, ImGuiNavMoveFlags move_fl/;"	f	class:ImGui	typeref:typename:void
NavMoveRequestTryWrapping	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::NavMoveRequestTryWrapping(ImGuiWindow* window, ImGuiNavMoveFlags wrap_flags)$/;"	f	class:ImGui	typeref:typename:void
NavMoveResultLocal	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiNavItemData        NavMoveResultLocal;                 \/\/ Best move request candidate/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNavItemData
NavMoveResultLocalVisible	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiNavItemData        NavMoveResultLocalVisible;          \/\/ Best move request candidate/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNavItemData
NavMoveResultOther	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiNavItemData        NavMoveResultOther;                 \/\/ Best move request candidate/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNavItemData
NavMoveScoringItems	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    NavMoveScoringItems;                \/\/ Move request submitted, sti/;"	m	struct:ImGuiContext	typeref:typename:bool
NavMoveScrollFlags	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiScrollFlags        NavMoveScrollFlags;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiScrollFlags
NavMoveSubmitted	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    NavMoveSubmitted;                   \/\/ Move request submitted, wil/;"	m	struct:ImGuiContext	typeref:typename:bool
NavNextActivateFlags	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiActivateFlags      NavNextActivateFlags;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiActivateFlags
NavNextActivateId	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                 NavNextActivateId;                  \/\/ Set by ActivateItem(), queu/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavPreferredScoringPosRel	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2                  NavPreferredScoringPosRel[ImGuiNavLayer_COUNT]; \/\/ Preferred X\/Y /;"	m	struct:ImGuiWindow	typeref:typename:ImVec2[]
NavProcessItem	build/_deps/imgui-proj-src/imgui.cpp	/^static void ImGui::NavProcessItem()$/;"	f	class:ImGui	typeref:typename:void	file:
NavProcessItemForTabbingRequest	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::NavProcessItemForTabbingRequest(ImGuiID id, ImGuiItemFlags item_flags, ImGuiNavMoveF/;"	f	class:ImGui	typeref:typename:void
NavRect	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImRect                  NavRect;            \/\/ Navigation scoring rectangle (not displayed/;"	m	struct:ImGuiLastItemData	typeref:typename:ImRect
NavRect	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImRect                  NavRect;$/;"	m	struct:ImGuiNavTreeNodeData	typeref:typename:ImRect
NavRectRel	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImRect                  NavRectRel[ImGuiNavLayer_COUNT];    \/\/ Reference rectangle, in win/;"	m	struct:ImGuiWindow	typeref:typename:ImRect[]
NavRestoreHighlightAfterMove	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::NavRestoreHighlightAfterMove()$/;"	f	class:ImGui	typeref:typename:void
NavRestoreLastChildNavWindow	build/_deps/imgui-proj-src/imgui.cpp	/^static ImGuiWindow* ImGui::NavRestoreLastChildNavWindow(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:ImGuiWindow *	file:
NavRestoreLayer	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::NavRestoreLayer(ImGuiNavLayer layer)$/;"	f	class:ImGui	typeref:typename:void
NavRootFocusScopeId	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                 NavRootFocusScopeId;                \/\/ Focus Scope ID at the time /;"	m	struct:ImGuiWindow	typeref:typename:ImGuiID
NavSaveLastChildNavWindowIntoParent	build/_deps/imgui-proj-src/imgui.cpp	/^static void ImGui::NavSaveLastChildNavWindowIntoParent(ImGuiWindow* nav_window)$/;"	f	class:ImGui	typeref:typename:void	file:
NavScoreItem	build/_deps/imgui-proj-src/imgui.cpp	/^static bool ImGui::NavScoreItem(ImGuiNavItemData* result)$/;"	f	class:ImGui	typeref:typename:bool	file:
NavScoreItemDistInterval	build/_deps/imgui-proj-src/imgui.cpp	/^static float inline NavScoreItemDistInterval(float cand_min, float cand_max, float curr_min, flo/;"	f	typeref:typename:float	file:
NavScoringDebugCount	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                     NavScoringDebugCount;               \/\/ Metrics for debugging$/;"	m	struct:ImGuiContext	typeref:typename:int
NavScoringNoClipRect	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImRect                  NavScoringNoClipRect;               \/\/ Some nav operations (such a/;"	m	struct:ImGuiContext	typeref:typename:ImRect
NavScoringRect	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImRect                  NavScoringRect;                     \/\/ Rectangle used for scoring,/;"	m	struct:ImGuiContext	typeref:typename:ImRect
NavTabbingCounter	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                     NavTabbingCounter;                  \/\/ >0 when counting items for /;"	m	struct:ImGuiContext	typeref:typename:int
NavTabbingDir	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                     NavTabbingDir;                      \/\/ Generally -1 or +1, 0 when /;"	m	struct:ImGuiContext	typeref:typename:int
NavTabbingResultFirst	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiNavItemData        NavTabbingResultFirst;              \/\/ First tabbing request candi/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNavItemData
NavTreeNodeStack	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVector<ImGuiNavTreeNodeData>  NavTreeNodeStack;           \/\/ Stack for TreeNode() when a/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiNavTreeNodeData>
NavUpdate	build/_deps/imgui-proj-src/imgui.cpp	/^static void ImGui::NavUpdate()$/;"	f	class:ImGui	typeref:typename:void	file:
NavUpdateAnyRequestFlag	build/_deps/imgui-proj-src/imgui.cpp	/^static inline void ImGui::NavUpdateAnyRequestFlag()$/;"	f	class:ImGui	typeref:typename:void	file:
NavUpdateCancelRequest	build/_deps/imgui-proj-src/imgui.cpp	/^static void ImGui::NavUpdateCancelRequest()$/;"	f	class:ImGui	typeref:typename:void	file:
NavUpdateCreateMoveRequest	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::NavUpdateCreateMoveRequest()$/;"	f	class:ImGui	typeref:typename:void
NavUpdateCreateTabbingRequest	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::NavUpdateCreateTabbingRequest()$/;"	f	class:ImGui	typeref:typename:void
NavUpdateCreateWrappingRequest	build/_deps/imgui-proj-src/imgui.cpp	/^static void ImGui::NavUpdateCreateWrappingRequest()$/;"	f	class:ImGui	typeref:typename:void	file:
NavUpdateCurrentWindowIsScrollPushableX	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::NavUpdateCurrentWindowIsScrollPushableX()$/;"	f	class:ImGui	typeref:typename:void
NavUpdatePageUpPageDown	build/_deps/imgui-proj-src/imgui.cpp	/^static float ImGui::NavUpdatePageUpPageDown()$/;"	f	class:ImGui	typeref:typename:float	file:
NavUpdateWindowing	build/_deps/imgui-proj-src/imgui.cpp	/^static void ImGui::NavUpdateWindowing()$/;"	f	class:ImGui	typeref:typename:void	file:
NavUpdateWindowingHighlightWindow	build/_deps/imgui-proj-src/imgui.cpp	/^static void NavUpdateWindowingHighlightWindow(int focus_change_dir)$/;"	f	typeref:typename:void	file:
NavUpdateWindowingOverlay	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::NavUpdateWindowingOverlay()$/;"	f	class:ImGui	typeref:typename:void
NavVisible	build/_deps/imgui-proj-src/imgui.h	/^    bool        NavVisible;                         \/\/ Keyboard\/Gamepad navigation is visible/;"	m	struct:ImGuiIO	typeref:typename:bool
NavWindow	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiWindow*            NavWindow;                          \/\/ Focused window for navigati/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
NavWindowHasScrollY	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    NavWindowHasScrollY;    \/\/ Set per window when scrolling can be us/;"	m	struct:ImGuiWindowTempData	typeref:typename:bool
NavWindowingAccumDeltaPos	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2                  NavWindowingAccumDeltaPos;$/;"	m	struct:ImGuiContext	typeref:typename:ImVec2
NavWindowingAccumDeltaSize	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2                  NavWindowingAccumDeltaSize;$/;"	m	struct:ImGuiContext	typeref:typename:ImVec2
NavWindowingHighlightAlpha	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   NavWindowingHighlightAlpha;$/;"	m	struct:ImGuiContext	typeref:typename:float
NavWindowingListWindow	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiWindow*            NavWindowingListWindow;             \/\/ Internal window actually li/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
NavWindowingTarget	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiWindow*            NavWindowingTarget;                 \/\/ Target window when doing CT/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
NavWindowingTargetAnim	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiWindow*            NavWindowingTargetAnim;             \/\/ Record of last valid NavWin/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
NavWindowingTimer	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   NavWindowingTimer;$/;"	m	struct:ImGuiContext	typeref:typename:float
NavWindowingToggleKey	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiKey                NavWindowingToggleKey;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiKey
NavWindowingToggleLayer	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    NavWindowingToggleLayer;$/;"	m	struct:ImGuiContext	typeref:typename:bool
NewFrame	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::NewFrame()$/;"	f	class:ImGui	typeref:typename:void
NewLine	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::NewLine()$/;"	f	class:ImGui	typeref:typename:void
NextColumn	build/_deps/imgui-proj-src/imgui_tables.cpp	/^void ImGui::NextColumn()$/;"	f	class:ImGui	typeref:typename:void
NextEnabledColumn	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTableColumnIdx     NextEnabledColumn;              \/\/ Index of next enabled\/visible /;"	m	struct:ImGuiTableColumn	typeref:typename:ImGuiTableColumnIdx
NextEntryIndex	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiKeyRoutingIndex            NextEntryIndex;$/;"	m	struct:ImGuiKeyRoutingData	typeref:typename:ImGuiKeyRoutingIndex
NextItemData	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiNextItemData       NextItemData;                       \/\/ Storage for SetNextItem** f/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNextItemData
NextSelectedTabId	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID             NextSelectedTabId;      \/\/ Next selected tab\/window. Will also trigge/;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiID
NextTotalWidth	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImU32       NextTotalWidth;$/;"	m	struct:ImGuiMenuColumns	typeref:typename:ImU32
NextWindowData	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiNextWindowData     NextWindowData;                     \/\/ Storage for SetNextWindow**/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNextWindowData
NodeEditor	neditor/Editor.h	/^class NodeEditor {$/;"	c
Nodes	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiStorage                    Nodes;          \/\/ Map ID -> ImGuiDockNode*: Active nodes$/;"	m	struct:ImGuiDockContext	typeref:typename:ImGuiStorage
NodesSettings	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVector<ImGuiDockNodeSettings> NodesSettings;$/;"	m	struct:ImGuiDockContext	typeref:typename:ImVector<ImGuiDockNodeSettings>
Normalized	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp	/^    GLint   Enabled, Size, Type, Normalized, Stride;$/;"	m	struct:ImGui_ImplOpenGL3_VtxAttribState	typeref:typename:GLint	file:
NotifyOfDocumentsClosedElsewhere	build/_deps/imgui-proj-src/imgui_demo.cpp	/^static void NotifyOfDocumentsClosedElsewhere(ExampleAppDocuments& app)$/;"	f	typeref:typename:void	file:
NumFramesInFlight	build/_deps/imgui-proj-src/backends/imgui_impl_dx12.cpp	/^    UINT                            NumFramesInFlight;$/;"	m	struct:ImGui_ImplDX12_ViewportData	typeref:typename:UINT	file:
NumFramesInFlight	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.h	/^    int                     NumFramesInFlight = 3;$/;"	m	struct:ImGui_ImplWGPU_InitInfo	typeref:typename:int
OBJS	build/_deps/imgui-proj-src/examples/example_glfw_metal/Makefile	/^OBJS = $(addsuffix .o, $(basename $(notdir $(SOURCES))))$/;"	m
OBJS	build/_deps/imgui-proj-src/examples/example_glfw_opengl2/Makefile	/^OBJS = $(addsuffix .o, $(basename $(notdir $(SOURCES))))$/;"	m
OBJS	build/_deps/imgui-proj-src/examples/example_glfw_opengl3/Makefile	/^OBJS = $(addsuffix .o, $(basename $(notdir $(SOURCES))))$/;"	m
OBJS	build/_deps/imgui-proj-src/examples/example_glut_opengl2/Makefile	/^OBJS = $(addsuffix .o, $(basename $(notdir $(SOURCES))))$/;"	m
OBJS	build/_deps/imgui-proj-src/examples/example_null/Makefile	/^OBJS = $(addsuffix .o, $(basename $(notdir $(SOURCES))))$/;"	m
OBJS	build/_deps/imgui-proj-src/examples/example_sdl2_metal/Makefile	/^OBJS = $(addsuffix .o, $(basename $(notdir $(SOURCES))))$/;"	m
OBJS	build/_deps/imgui-proj-src/examples/example_sdl2_opengl2/Makefile	/^OBJS = $(addsuffix .o, $(basename $(notdir $(SOURCES))))$/;"	m
OBJS	build/_deps/imgui-proj-src/examples/example_sdl2_opengl3/Makefile	/^OBJS = $(addsuffix .o, $(basename $(notdir $(SOURCES))))$/;"	m
OBJS	build/_deps/imgui-proj-src/examples/example_sdl2_sdlrenderer2/Makefile	/^OBJS = $(addsuffix .o, $(basename $(notdir $(SOURCES))))$/;"	m
OBJS	build/_deps/imgui-proj-src/examples/example_sdl3_opengl3/Makefile	/^OBJS = $(addsuffix .o, $(basename $(notdir $(SOURCES))))$/;"	m
OBJS	build/_deps/imgui-proj-src/examples/example_sdl3_sdlrenderer3/Makefile	/^OBJS = $(addsuffix .o, $(basename $(notdir $(SOURCES))))$/;"	m
OUT_DIR	build/_deps/imgui-proj-src/examples/example_glfw_opengl2/build_win32.bat	/^@set OUT_DIR=Debug$/;"	v
OUT_DIR	build/_deps/imgui-proj-src/examples/example_glfw_opengl3/build_win32.bat	/^@set OUT_DIR=Debug$/;"	v
OUT_DIR	build/_deps/imgui-proj-src/examples/example_glfw_vulkan/build_win32.bat	/^@set OUT_DIR=Debug$/;"	v
OUT_DIR	build/_deps/imgui-proj-src/examples/example_glfw_vulkan/build_win32.bat	/^@set OUT_DIR=Release$/;"	v
OUT_DIR	build/_deps/imgui-proj-src/examples/example_glfw_vulkan/build_win64.bat	/^@set OUT_DIR=Debug$/;"	v
OUT_DIR	build/_deps/imgui-proj-src/examples/example_glfw_vulkan/build_win64.bat	/^@set OUT_DIR=Release$/;"	v
OUT_DIR	build/_deps/imgui-proj-src/examples/example_sdl2_directx11/build_win32.bat	/^@set OUT_DIR=Debug$/;"	v
OUT_DIR	build/_deps/imgui-proj-src/examples/example_sdl2_opengl2/build_win32.bat	/^@set OUT_DIR=Debug$/;"	v
OUT_DIR	build/_deps/imgui-proj-src/examples/example_sdl2_opengl3/build_win32.bat	/^@set OUT_DIR=Debug$/;"	v
OUT_DIR	build/_deps/imgui-proj-src/examples/example_sdl2_sdlrenderer2/build_win32.bat	/^@set OUT_DIR=Debug$/;"	v
OUT_DIR	build/_deps/imgui-proj-src/examples/example_sdl2_vulkan/build_win32.bat	/^@set OUT_DIR=Debug$/;"	v
OUT_DIR	build/_deps/imgui-proj-src/examples/example_sdl3_opengl3/build_win32.bat	/^@set OUT_DIR=Debug$/;"	v
OUT_DIR	build/_deps/imgui-proj-src/examples/example_sdl3_sdlrenderer3/build_win32.bat	/^@set OUT_DIR=Debug$/;"	v
OUT_DIR	build/_deps/imgui-proj-src/examples/example_win32_directx10/build_win32.bat	/^@set OUT_DIR=Debug$/;"	v
OUT_DIR	build/_deps/imgui-proj-src/examples/example_win32_directx11/build_win32.bat	/^@set OUT_DIR=Debug$/;"	v
OUT_DIR	build/_deps/imgui-proj-src/examples/example_win32_directx12/build_win32.bat	/^@set OUT_DIR=Debug$/;"	v
OUT_DIR	build/_deps/imgui-proj-src/examples/example_win32_directx9/build_win32.bat	/^@set OUT_DIR=Debug$/;"	v
OUT_DIR	build/_deps/imgui-proj-src/examples/example_win32_opengl3/build_win32.bat	/^@set OUT_DIR=Debug$/;"	v
OUT_EXE	build/_deps/imgui-proj-src/examples/example_glfw_opengl2/build_win32.bat	/^@set OUT_EXE=example_glfw_opengl2$/;"	v
OUT_EXE	build/_deps/imgui-proj-src/examples/example_glfw_opengl3/build_win32.bat	/^@set OUT_EXE=example_glfw_opengl3$/;"	v
OUT_EXE	build/_deps/imgui-proj-src/examples/example_glfw_vulkan/build_win32.bat	/^@set OUT_EXE=example_glfw_vulkan$/;"	v
OUT_EXE	build/_deps/imgui-proj-src/examples/example_sdl2_directx11/build_win32.bat	/^@set OUT_EXE=example_sdl2_directx11$/;"	v
OUT_EXE	build/_deps/imgui-proj-src/examples/example_sdl2_opengl2/build_win32.bat	/^@set OUT_EXE=example_sdl2_opengl2$/;"	v
OUT_EXE	build/_deps/imgui-proj-src/examples/example_sdl2_opengl3/build_win32.bat	/^@set OUT_EXE=example_sdl2_opengl3$/;"	v
OUT_EXE	build/_deps/imgui-proj-src/examples/example_sdl2_sdlrenderer2/build_win32.bat	/^@set OUT_EXE=example_sdl2_sdlrenderer_$/;"	v
OUT_EXE	build/_deps/imgui-proj-src/examples/example_sdl2_vulkan/build_win32.bat	/^@set OUT_EXE=example_sdl2_vulkan$/;"	v
OUT_EXE	build/_deps/imgui-proj-src/examples/example_sdl3_opengl3/build_win32.bat	/^@set OUT_EXE=example_sdl3_opengl3$/;"	v
OUT_EXE	build/_deps/imgui-proj-src/examples/example_sdl3_sdlrenderer3/build_win32.bat	/^@set OUT_EXE=example_sdl3_sdlrenderer3$/;"	v
OUT_EXE	build/_deps/imgui-proj-src/examples/example_win32_directx10/build_win32.bat	/^@set OUT_EXE=example_win32_directx10$/;"	v
OUT_EXE	build/_deps/imgui-proj-src/examples/example_win32_directx11/build_win32.bat	/^@set OUT_EXE=example_win32_directx11$/;"	v
OUT_EXE	build/_deps/imgui-proj-src/examples/example_win32_directx12/build_win32.bat	/^@set OUT_EXE=example_win32_directx12$/;"	v
OUT_EXE	build/_deps/imgui-proj-src/examples/example_win32_directx9/build_win32.bat	/^@set OUT_EXE=example_win32_directx9$/;"	v
OUT_EXE	build/_deps/imgui-proj-src/examples/example_win32_opengl3/build_win32.bat	/^@set OUT_EXE=example_win32_opengl3$/;"	v
Observer	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^    ImGuiObserver*              Observer;$/;"	E	struct:ImGui_ImplOSX_Data
OffMaxX	build/_deps/imgui-proj-src/imgui_internal.h	/^    float               OffMinX, OffMaxX;       \/\/ Offsets from HostWorkRect.Min.x$/;"	m	struct:ImGuiOldColumns	typeref:typename:float
OffMinX	build/_deps/imgui-proj-src/imgui_internal.h	/^    float               OffMinX, OffMaxX;       \/\/ Offsets from HostWorkRect.Min.x$/;"	m	struct:ImGuiOldColumns	typeref:typename:float
Offset	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImU32           Offset;     \/\/ Offset in parent structure$/;"	m	struct:ImGuiDataVarInfo	typeref:typename:ImU32
Offset	build/_deps/imgui-proj-src/imgui_internal.h	/^    float               Offset;                 \/\/ Position relative to beginning of tab$/;"	m	struct:ImGuiTabItem	typeref:typename:float
OffsetIcon	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImU16       OffsetIcon;         \/\/ Always zero for now$/;"	m	struct:ImGuiMenuColumns	typeref:typename:ImU16
OffsetLabel	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImU16       OffsetLabel;        \/\/ Offsets are locked in Update()$/;"	m	struct:ImGuiMenuColumns	typeref:typename:ImU16
OffsetMark	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImU16       OffsetMark;$/;"	m	struct:ImGuiMenuColumns	typeref:typename:ImU16
OffsetNorm	build/_deps/imgui-proj-src/imgui_internal.h	/^    float               OffsetNorm;             \/\/ Column start offset, normalized 0.0 (far le/;"	m	struct:ImGuiOldColumnData	typeref:typename:float
OffsetNormBeforeResize	build/_deps/imgui-proj-src/imgui_internal.h	/^    float               OffsetNormBeforeResize;$/;"	m	struct:ImGuiOldColumnData	typeref:typename:float
OffsetShortcut	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImU16       OffsetShortcut;$/;"	m	struct:ImGuiMenuColumns	typeref:typename:ImU16
OffsetX	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^        FT_Int      OffsetX;            \/\/ The distance from the origin ("pen position") to th/;"	m	struct:__anon9c8900c20110::GlyphInfo	typeref:typename:FT_Int	file:
OffsetY	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^        FT_Int      OffsetY;            \/\/ The distance from the origin to the top of the glyp/;"	m	struct:__anon9c8900c20110::GlyphInfo	typeref:typename:FT_Int	file:
Offsets	build/_deps/imgui-proj-src/imgui_internal.h	/^    int     Offsets[CHUNKS];$/;"	m	struct:ImSpanAllocator	typeref:typename:int[]
OldCallback	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^struct ImGuiGetNameFromIndexOldToNewCallbackData { void* UserData; bool (*OldCallback)(void*, in/;"	m	struct:ImGuiGetNameFromIndexOldToNewCallbackData	typeref:typename:bool (*)(void *,int,const char **)	file:
On Ubuntu 14.04+ and macOS	build/_deps/imgui-proj-src/examples/example_allegro5/README.md	/^### On Ubuntu 14.04+ and macOS$/;"	S
On Windows with Visual Studio's CLI	build/_deps/imgui-proj-src/examples/example_allegro5/README.md	/^### On Windows with Visual Studio's CLI$/;"	S
OnKeyPressed	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGuiInputTextState::OnKeyPressed(int key)$/;"	f	class:ImGuiInputTextState	typeref:typename:void
OnlyNodeWithWindows	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDockNode*          OnlyNodeWithWindows;        \/\/ [Root node only] Set when there is /;"	m	struct:ImGuiDockNode	typeref:typename:ImGuiDockNode *
Open	build/_deps/imgui-proj-src/imgui_demo.cpp	/^    bool        Open;       \/\/ Set when open (we keep an array of all available documents to s/;"	m	struct:MyDocument	typeref:typename:bool	file:
OpenCond	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiCond                   OpenCond : 8;$/;"	m	struct:ImGuiNextItemData	typeref:typename:ImGuiCond:8
OpenFrameCount	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                 OpenFrameCount; \/\/ Set on OpenPopup()$/;"	m	struct:ImGuiPopupData	typeref:typename:int
OpenMousePos	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2              OpenMousePos;   \/\/ Set on OpenPopup(), copy of mouse position at the t/;"	m	struct:ImGuiPopupData	typeref:typename:ImVec2
OpenParentId	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID             OpenParentId;   \/\/ Set on OpenPopup(), we need this to differentiate m/;"	m	struct:ImGuiPopupData	typeref:typename:ImGuiID
OpenPopup	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::OpenPopup(ImGuiID id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:void
OpenPopup	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::OpenPopup(const char* str_id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:void
OpenPopupEx	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::OpenPopupEx(ImGuiID id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:void
OpenPopupOnItemClick	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::OpenPopupOnItemClick(const char* str_id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:void
OpenPopupPos	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2              OpenPopupPos;   \/\/ Set on OpenPopup(), preferred popup position (typic/;"	m	struct:ImGuiPopupData	typeref:typename:ImVec2
OpenPopupStack	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVector<ImGuiPopupData>        OpenPopupStack;             \/\/ Which popups are open (pers/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiPopupData>
OpenPrev	build/_deps/imgui-proj-src/imgui_demo.cpp	/^    bool        OpenPrev;   \/\/ Copy of Open from last update.$/;"	m	struct:MyDocument	typeref:typename:bool	file:
OpenVal	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                        OpenVal;            \/\/ Set by SetNextItemOpen()$/;"	m	struct:ImGuiNextItemData	typeref:typename:bool
OuterAngle	build/_deps/imgui-proj-src/imgui.cpp	/^    float   OuterAngle;             \/\/ Angle toward outside$/;"	m	struct:ImGuiResizeBorderDef	typeref:typename:float	file:
OuterPaddingX	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                       OuterPaddingX;$/;"	m	struct:ImGuiTable	typeref:typename:float
OuterRect	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImRect                      OuterRect;                  \/\/ Note: for non-scrolling table, /;"	m	struct:ImGuiTable	typeref:typename:ImRect
OuterRectClipped	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImRect                  OuterRectClipped;                   \/\/ == Window->Rect() just afte/;"	m	struct:ImGuiWindow	typeref:typename:ImRect
OuterWindow	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiWindow*                OuterWindow;                \/\/ Parent window for the table$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiWindow *
Overlaps	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool        Overlaps(const ImRect& r) const     { return r.Min.y <  Max.y && r.Max.y >  Min./;"	f	struct:ImRect	typeref:typename:bool
OversampleH	build/_deps/imgui-proj-src/imgui.h	/^    int             OversampleH;            \/\/ 2        \/\/ Rasterize at higher quality for s/;"	m	struct:ImFontConfig	typeref:typename:int
OversampleV	build/_deps/imgui-proj-src/imgui.h	/^    int             OversampleV;            \/\/ 1        \/\/ Rasterize at higher quality for s/;"	m	struct:ImFontConfig	typeref:typename:int
Owner	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                     Owner;$/;"	m	struct:ImGuiContextHook	typeref:typename:ImGuiID
OwnerCurr	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID     OwnerCurr;$/;"	m	struct:ImGuiKeyOwnerData	typeref:typename:ImGuiID
OwnerNext	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID     OwnerNext;$/;"	m	struct:ImGuiKeyOwnerData	typeref:typename:ImGuiID
OwnerViewport	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiViewport*      OwnerViewport;      \/\/ Viewport carrying the ImDrawData instance, migh/;"	m	struct:ImDrawData	typeref:typename:ImGuiViewport *
PFNGLACTIVETEXTUREPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLACTIVETEXTUREPROC) (GLenum texture);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum texture)
PFNGLATTACHSHADERPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLATTACHSHADERPROC) (GLuint program, GLuint shader);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLuint shader)
PFNGLBINDBUFFERPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLBINDBUFFERPROC) (GLenum target, GLuint buffer);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLuint buffer)
PFNGLBINDSAMPLERPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLBINDSAMPLERPROC) (GLuint unit, GLuint sampler);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint unit,GLuint sampler)
PFNGLBINDTEXTUREPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLBINDTEXTUREPROC) (GLenum target, GLuint texture);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLuint texture)
PFNGLBINDVERTEXARRAYPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLBINDVERTEXARRAYPROC) (GLuint array);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint array)
PFNGLBLENDEQUATIONPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLBLENDEQUATIONPROC) (GLenum mode);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum mode)
PFNGLBLENDEQUATIONSEPARATEPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEPROC) (GLenum modeRGB, GLenum modeAlpha);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum modeRGB,GLenum modeAlpha)
PFNGLBLENDFUNCSEPARATEPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenu/;"	t	typeref:typename:void (APIENTRYP)(GLenum sfactorRGB,GLenum dfactorRGB,GLenum sfactorAlpha,GLenum dfactorAlpha)
PFNGLBUFFERDATAPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLBUFFERDATAPROC) (GLenum target, GLsizeiptr size, const void *data, /;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLsizeiptr size,const void * data,GLenum usage)
PFNGLBUFFERSUBDATAPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLBUFFERSUBDATAPROC) (GLenum target, GLintptr offset, GLsizeiptr size/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLintptr offset,GLsizeiptr size,const void * data)
PFNGLCLEARCOLORPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLCLEARCOLORPROC) (GLfloat red, GLfloat green, GLfloat blue, GLfloat /;"	t	typeref:typename:void (APIENTRYP)(GLfloat red,GLfloat green,GLfloat blue,GLfloat alpha)
PFNGLCLEARPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLCLEARPROC) (GLbitfield mask);$/;"	t	typeref:typename:void (APIENTRYP)(GLbitfield mask)
PFNGLCOMPILESHADERPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLCOMPILESHADERPROC) (GLuint shader);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint shader)
PFNGLCREATEPROGRAMPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef GLuint (APIENTRYP PFNGLCREATEPROGRAMPROC) (void);$/;"	t	typeref:typename:GLuint (APIENTRYP)(void)
PFNGLCREATESHADERPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef GLuint (APIENTRYP PFNGLCREATESHADERPROC) (GLenum type);$/;"	t	typeref:typename:GLuint (APIENTRYP)(GLenum type)
PFNGLDELETEBUFFERSPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLDELETEBUFFERSPROC) (GLsizei n, const GLuint *buffers);$/;"	t	typeref:typename:void (APIENTRYP)(GLsizei n,const GLuint * buffers)
PFNGLDELETEPROGRAMPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLDELETEPROGRAMPROC) (GLuint program);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint program)
PFNGLDELETESHADERPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLDELETESHADERPROC) (GLuint shader);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint shader)
PFNGLDELETETEXTURESPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLDELETETEXTURESPROC) (GLsizei n, const GLuint *textures);$/;"	t	typeref:typename:void (APIENTRYP)(GLsizei n,const GLuint * textures)
PFNGLDELETEVERTEXARRAYSPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLDELETEVERTEXARRAYSPROC) (GLsizei n, const GLuint *arrays);$/;"	t	typeref:typename:void (APIENTRYP)(GLsizei n,const GLuint * arrays)
PFNGLDETACHSHADERPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLDETACHSHADERPROC) (GLuint program, GLuint shader);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLuint shader)
PFNGLDISABLEPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLDISABLEPROC) (GLenum cap);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum cap)
PFNGLDISABLEVERTEXATTRIBARRAYPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLDISABLEVERTEXATTRIBARRAYPROC) (GLuint index);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index)
PFNGLDRAWELEMENTSBASEVERTEXPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLDRAWELEMENTSBASEVERTEXPROC) (GLenum mode, GLsizei count, GLenum typ/;"	t	typeref:typename:void (APIENTRYP)(GLenum mode,GLsizei count,GLenum type,const void * indices,GLint basevertex)
PFNGLDRAWELEMENTSPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLDRAWELEMENTSPROC) (GLenum mode, GLsizei count, GLenum type, const v/;"	t	typeref:typename:void (APIENTRYP)(GLenum mode,GLsizei count,GLenum type,const void * indices)
PFNGLENABLEPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLENABLEPROC) (GLenum cap);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum cap)
PFNGLENABLEVERTEXATTRIBARRAYPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLENABLEVERTEXATTRIBARRAYPROC) (GLuint index);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index)
PFNGLFLUSHPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLFLUSHPROC) (void);$/;"	t	typeref:typename:void (APIENTRYP)(void)
PFNGLGENBUFFERSPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGENBUFFERSPROC) (GLsizei n, GLuint *buffers);$/;"	t	typeref:typename:void (APIENTRYP)(GLsizei n,GLuint * buffers)
PFNGLGENTEXTURESPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGENTEXTURESPROC) (GLsizei n, GLuint *textures);$/;"	t	typeref:typename:void (APIENTRYP)(GLsizei n,GLuint * textures)
PFNGLGENVERTEXARRAYSPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGENVERTEXARRAYSPROC) (GLsizei n, GLuint *arrays);$/;"	t	typeref:typename:void (APIENTRYP)(GLsizei n,GLuint * arrays)
PFNGLGETATTRIBLOCATIONPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef GLint (APIENTRYP PFNGLGETATTRIBLOCATIONPROC) (GLuint program, const GLchar *name);$/;"	t	typeref:typename:GLint (APIENTRYP)(GLuint program,const GLchar * name)
PFNGLGETBOOLEANI_VPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETBOOLEANI_VPROC) (GLenum target, GLuint index, GLboolean *data);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLuint index,GLboolean * data)
PFNGLGETDOUBLEI_VEXTPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETDOUBLEI_VEXTPROC) (GLenum pname, GLuint index, GLdouble *params)/;"	t	typeref:typename:void (APIENTRYP)(GLenum pname,GLuint index,GLdouble * params)
PFNGLGETDOUBLEI_VPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETDOUBLEI_VPROC) (GLenum target, GLuint index, GLdouble *data);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLuint index,GLdouble * data)
PFNGLGETERRORPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef GLenum (APIENTRYP PFNGLGETERRORPROC) (void);$/;"	t	typeref:typename:GLenum (APIENTRYP)(void)
PFNGLGETFLOATI_VEXTPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETFLOATI_VEXTPROC) (GLenum pname, GLuint index, GLfloat *params);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum pname,GLuint index,GLfloat * params)
PFNGLGETFLOATI_VPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETFLOATI_VPROC) (GLenum target, GLuint index, GLfloat *data);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLuint index,GLfloat * data)
PFNGLGETINTEGER64I_VPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETINTEGER64I_VPROC) (GLenum target, GLuint index, GLint64 *data);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLuint index,GLint64 * data)
PFNGLGETINTEGERI_VPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETINTEGERI_VPROC) (GLenum target, GLuint index, GLint *data);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLuint index,GLint * data)
PFNGLGETINTEGERUI64I_VNVPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETINTEGERUI64I_VNVPROC) (GLenum value, GLuint index, GLuint64EXT */;"	t	typeref:typename:void (APIENTRYP)(GLenum value,GLuint index,GLuint64EXT * result)
PFNGLGETINTEGERVPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETINTEGERVPROC) (GLenum pname, GLint *data);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum pname,GLint * data)
PFNGLGETPOINTERI_VEXTPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETPOINTERI_VEXTPROC) (GLenum pname, GLuint index, void **params);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum pname,GLuint index,void ** params)
PFNGLGETPROGRAMINFOLOGPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETPROGRAMINFOLOGPROC) (GLuint program, GLsizei bufSize, GLsizei *l/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLsizei bufSize,GLsizei * length,GLchar * infoLog)
PFNGLGETPROGRAMIVPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETPROGRAMIVPROC) (GLuint program, GLenum pname, GLint *params);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLenum pname,GLint * params)
PFNGLGETSHADERINFOLOGPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETSHADERINFOLOGPROC) (GLuint shader, GLsizei bufSize, GLsizei *len/;"	t	typeref:typename:void (APIENTRYP)(GLuint shader,GLsizei bufSize,GLsizei * length,GLchar * infoLog)
PFNGLGETSHADERIVPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETSHADERIVPROC) (GLuint shader, GLenum pname, GLint *params);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint shader,GLenum pname,GLint * params)
PFNGLGETSTRINGIPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef const GLubyte *(APIENTRYP PFNGLGETSTRINGIPROC) (GLenum name, GLuint index);$/;"	t	typeref:typename:const GLubyte * (APIENTRYP)(GLenum name,GLuint index)
PFNGLGETSTRINGPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef const GLubyte *(APIENTRYP PFNGLGETSTRINGPROC) (GLenum name);$/;"	t	typeref:typename:const GLubyte * (APIENTRYP)(GLenum name)
PFNGLGETTRANSFORMFEEDBACKI64_VPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKI64_VPROC) (GLuint xfb, GLenum pname, GLuint in/;"	t	typeref:typename:void (APIENTRYP)(GLuint xfb,GLenum pname,GLuint index,GLint64 * param)
PFNGLGETTRANSFORMFEEDBACKI_VPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKI_VPROC) (GLuint xfb, GLenum pname, GLuint inde/;"	t	typeref:typename:void (APIENTRYP)(GLuint xfb,GLenum pname,GLuint index,GLint * param)
PFNGLGETUNIFORMLOCATIONPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef GLint (APIENTRYP PFNGLGETUNIFORMLOCATIONPROC) (GLuint program, const GLchar *name);$/;"	t	typeref:typename:GLint (APIENTRYP)(GLuint program,const GLchar * name)
PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC) (GLuint vaobj, GLuint index, GLenu/;"	t	typeref:typename:void (APIENTRYP)(GLuint vaobj,GLuint index,GLenum pname,GLint * param)
PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC) (GLuint vaobj, GLuint index, GLenu/;"	t	typeref:typename:void (APIENTRYP)(GLuint vaobj,GLuint index,GLenum pname,void ** param)
PFNGLGETVERTEXATTRIBIVPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIVPROC) (GLuint index, GLenum pname, GLint *params);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLenum pname,GLint * params)
PFNGLGETVERTEXATTRIBPOINTERVPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETVERTEXATTRIBPOINTERVPROC) (GLuint index, GLenum pname, void **po/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLenum pname,void ** pointer)
PFNGLISENABLEDPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef GLboolean (APIENTRYP PFNGLISENABLEDPROC) (GLenum cap);$/;"	t	typeref:typename:GLboolean (APIENTRYP)(GLenum cap)
PFNGLISPROGRAMPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef GLboolean (APIENTRYP PFNGLISPROGRAMPROC) (GLuint program);$/;"	t	typeref:typename:GLboolean (APIENTRYP)(GLuint program)
PFNGLLINKPROGRAMPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLLINKPROGRAMPROC) (GLuint program);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint program)
PFNGLPIXELSTOREIPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLPIXELSTOREIPROC) (GLenum pname, GLint param);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum pname,GLint param)
PFNGLPOLYGONMODEPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLPOLYGONMODEPROC) (GLenum face, GLenum mode);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum face,GLenum mode)
PFNGLREADPIXELSPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLREADPIXELSPROC) (GLint x, GLint y, GLsizei width, GLsizei height, G/;"	t	typeref:typename:void (APIENTRYP)(GLint x,GLint y,GLsizei width,GLsizei height,GLenum format,GLenum type,void * pixels)
PFNGLSCISSORPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLSCISSORPROC) (GLint x, GLint y, GLsizei width, GLsizei height);$/;"	t	typeref:typename:void (APIENTRYP)(GLint x,GLint y,GLsizei width,GLsizei height)
PFNGLSHADERSOURCEPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLSHADERSOURCEPROC) (GLuint shader, GLsizei count, const GLchar *cons/;"	t	typeref:typename:void (APIENTRYP)(GLuint shader,GLsizei count,const GLchar * const * string,const GLint * length)
PFNGLTEXIMAGE2DPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLTEXIMAGE2DPROC) (GLenum target, GLint level, GLint internalformat, /;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLint level,GLint internalformat,GLsizei width,GLsizei height,GLint border,GLenum format,GLenum type,const void * pixels)
PFNGLTEXPARAMETERIPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLTEXPARAMETERIPROC) (GLenum target, GLenum pname, GLint param);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum pname,GLint param)
PFNGLUNIFORM1IPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLUNIFORM1IPROC) (GLint location, GLint v0);$/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLint v0)
PFNGLUNIFORMMATRIX4FVPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX4FVPROC) (GLint location, GLsizei count, GLboolean tra/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)
PFNGLUSEPROGRAMPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLUSEPROGRAMPROC) (GLuint program);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint program)
PFNGLVERTEXATTRIBPOINTERPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBPOINTERPROC) (GLuint index, GLint size, GLenum type, GL/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLint size,GLenum type,GLboolean normalized,GLsizei stride,const void * pointer)
PFNGLVIEWPORTPROC	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLVIEWPORTPROC) (GLint x, GLint y, GLsizei width, GLsizei height);$/;"	t	typeref:typename:void (APIENTRYP)(GLint x,GLint y,GLsizei width,GLsizei height)
PFN_GetDpiForMonitor	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^typedef HRESULT(WINAPI* PFN_GetDpiForMonitor)(HMONITOR, MONITOR_DPI_TYPE, UINT*, UINT*);        /;"	t	typeref:typename:HRESULT (WINAPI *)(HMONITOR,MONITOR_DPI_TYPE,UINT *,UINT *)	file:
PFN_RtlVerifyVersionInfo	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^    typedef LONG(WINAPI* PFN_RtlVerifyVersionInfo)(OSVERSIONINFOEXW*, ULONG, ULONGLONG);$/;"	t	function:_IsWindowsVersionOrGreater	typeref:typename:LONG (WINAPI *)(OSVERSIONINFOEXW *,ULONG,ULONGLONG)	file:
PFN_SetProcessDpiAwareness	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^typedef HRESULT(WINAPI* PFN_SetProcessDpiAwareness)(PROCESS_DPI_AWARENESS);                     /;"	t	typeref:typename:HRESULT (WINAPI *)(PROCESS_DPI_AWARENESS)	file:
PFN_SetThreadDpiAwarenessContext	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^typedef DPI_AWARENESS_CONTEXT(WINAPI* PFN_SetThreadDpiAwarenessContext)(DPI_AWARENESS_CONTEXT); /;"	t	typeref:typename:DPI_AWARENESS_CONTEXT (WINAPI *)(DPI_AWARENESS_CONTEXT)	file:
PFN_XInputGetCapabilities	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^typedef DWORD (WINAPI *PFN_XInputGetCapabilities)(DWORD, DWORD, XINPUT_CAPABILITIES*);$/;"	t	typeref:typename:DWORD (WINAPI *)(DWORD,DWORD,XINPUT_CAPABILITIES *)	file:
PFN_XInputGetState	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^typedef DWORD (WINAPI *PFN_XInputGetState)(DWORD, XINPUT_STATE*);$/;"	t	typeref:typename:DWORD (WINAPI *)(DWORD,XINPUT_STATE *)	file:
PLATFORM_ID	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^#  define PLATFORM_ID /;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^#  define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^# define PLATFORM_ID /;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^# define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.26.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define PLATFORM_ID /;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.26.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.26.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID /;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.26.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID$/;"	d	file:
PRId64	build/_deps/imgui-proj-src/imgui_demo.cpp	/^#define PRId64 /;"	d	file:
PRIu64	build/_deps/imgui-proj-src/imgui_demo.cpp	/^#define PRIu64 /;"	d	file:
PROCESS_DPI_AWARENESS	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^typedef enum { PROCESS_DPI_UNAWARE = 0, PROCESS_SYSTEM_DPI_AWARE = 1, PROCESS_PER_MONITOR_DPI_AW/;"	t	typeref:enum:__anon03f3e07e0103	file:
PROCESS_DPI_UNAWARE	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^typedef enum { PROCESS_DPI_UNAWARE = 0, PROCESS_SYSTEM_DPI_AWARE = 1, PROCESS_PER_MONITOR_DPI_AW/;"	e	enum:__anon03f3e07e0103	file:
PROCESS_PER_MONITOR_DPI_AWARE	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^typedef enum { PROCESS_DPI_UNAWARE = 0, PROCESS_SYSTEM_DPI_AWARE = 1, PROCESS_PER_MONITOR_DPI_AW/;"	e	enum:__anon03f3e07e0103	file:
PROCESS_SYSTEM_DPI_AWARE	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^typedef enum { PROCESS_DPI_UNAWARE = 0, PROCESS_SYSTEM_DPI_AWARE = 1, PROCESS_PER_MONITOR_DPI_AW/;"	e	enum:__anon03f3e07e0103	file:
PS	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^        ID3D10PixelShader*          PS;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:ID3D10PixelShader *	file:
PS	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^        ID3D11PixelShader*          PS;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:ID3D11PixelShader *	file:
PSInstances	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^        ID3D11ClassInstance         *PSInstances[256], *VSInstances[256], *GSInstances[256];   \//;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:ID3D11ClassInstance * [256]	file:
PSInstancesCount	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^        UINT                        PSInstancesCount, VSInstancesCount, GSInstancesCount;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:UINT	file:
PSSampler	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^        ID3D10SamplerState*         PSSampler;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:ID3D10SamplerState *	file:
PSSampler	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^        ID3D11SamplerState*         PSSampler;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:ID3D11SamplerState *	file:
PSShaderResource	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^        ID3D10ShaderResourceView*   PSShaderResource;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:ID3D10ShaderResourceView *	file:
PSShaderResource	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^        ID3D11ShaderResourceView*   PSShaderResource;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:ID3D11ShaderResourceView *	file:
PackIdLines	build/_deps/imgui-proj-src/imgui.h	/^    int                         PackIdLines;        \/\/ Custom texture rectangle ID for baked a/;"	m	struct:ImFontAtlas	typeref:typename:int
PackIdMouseCursors	build/_deps/imgui-proj-src/imgui.h	/^    int                         PackIdMouseCursors; \/\/ Custom texture rectangle ID for white p/;"	m	struct:ImFontAtlas	typeref:typename:int
PackRange	build/_deps/imgui-proj-src/imgui_draw.cpp	/^    stbtt_pack_range    PackRange;          \/\/ Hold the list of codepoints to pack (essentiall/;"	m	struct:ImFontBuildSrcData	typeref:typename:stbtt_pack_range	file:
PackedChars	build/_deps/imgui-proj-src/imgui_draw.cpp	/^    stbtt_packedchar*   PackedChars;        \/\/ Output glyphs$/;"	m	struct:ImFontBuildSrcData	typeref:typename:stbtt_packedchar *	file:
PairComparerByID	build/_deps/imgui-proj-src/imgui.cpp	/^        static int IMGUI_CDECL PairComparerByID(const void* lhs, const void* rhs)$/;"	f	struct:ImGuiStorage::BuildSortByKey::StaticFunc	typeref:typename:int IMGUI_CDECL	file:
ParentLastItemDataBackup	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiLastItemData   ParentLastItemDataBackup;$/;"	m	struct:ImGuiWindowStackData	typeref:typename:ImGuiLastItemData
ParentLayoutType	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiLayoutType         ParentLayoutType;       \/\/ Layout type of parent window at the tim/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiLayoutType
ParentNavLayer	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                 ParentNavLayer; \/\/ Resolved on BeginPopup(). Actually a ImGuiNavLayer /;"	m	struct:ImGuiPopupData	typeref:typename:int
ParentNode	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDockNode*          ParentNode;$/;"	m	struct:ImGuiDockNode	typeref:typename:ImGuiDockNode *
ParentNodeId	build/_deps/imgui-proj-src/imgui.cpp	/^    ImGuiID             ParentNodeId;$/;"	m	struct:ImGuiDockNodeSettings	typeref:typename:ImGuiID	file:
ParentViewportId	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiID             ParentViewportId;           \/\/ Hint for the platform backend. -1: use /;"	m	struct:ImGuiWindowClass	typeref:typename:ImGuiID
ParentViewportId	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiID             ParentViewportId;       \/\/ (Advanced) 0: no parent. Instruct the platf/;"	m	struct:ImGuiViewport	typeref:typename:ImGuiID
ParentWindow	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiWindow*            ParentWindow;                       \/\/ If we are a child _or_ popu/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
ParentWindowForFocusRoute	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiWindow*            ParentWindowForFocusRoute;          \/\/ Set to manual link a window/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
ParentWindowId	build/_deps/imgui-proj-src/imgui.cpp	/^    ImGuiID             ParentWindowId;$/;"	m	struct:ImGuiDockNodeSettings	typeref:typename:ImGuiID	file:
ParentWindowInBeginStack	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiWindow*            ParentWindowInBeginStack;$/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
ParentWorkRect	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImRect                  ParentWorkRect;                     \/\/ Backup of WorkRect before e/;"	m	struct:ImGuiWindow	typeref:typename:ImRect
PassFilter	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGuiTextFilter::PassFilter(const char* text, const char* text_end) const$/;"	f	class:ImGuiTextFilter	typeref:typename:bool
PathArcTo	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImDrawList::PathArcTo(const ImVec2& center, float radius, float a_min, float a_max, int num/;"	f	class:ImDrawList	typeref:typename:void
PathArcToFast	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImDrawList::PathArcToFast(const ImVec2& center, float radius, int a_min_of_12, int a_max_of/;"	f	class:ImDrawList	typeref:typename:void
PathBezierCubicCurveTo	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImDrawList::PathBezierCubicCurveTo(const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, in/;"	f	class:ImDrawList	typeref:typename:void
PathBezierCubicCurveToCasteljau	build/_deps/imgui-proj-src/imgui_draw.cpp	/^static void PathBezierCubicCurveToCasteljau(ImVector<ImVec2>* path, float x1, float y1, float x2/;"	f	typeref:typename:void	file:
PathBezierQuadraticCurveTo	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImDrawList::PathBezierQuadraticCurveTo(const ImVec2& p2, const ImVec2& p3, int num_segments/;"	f	class:ImDrawList	typeref:typename:void
PathBezierQuadraticCurveToCasteljau	build/_deps/imgui-proj-src/imgui_draw.cpp	/^static void PathBezierQuadraticCurveToCasteljau(ImVector<ImVec2>* path, float x1, float y1, floa/;"	f	typeref:typename:void	file:
PathClear	build/_deps/imgui-proj-src/imgui.h	/^    inline    void  PathClear()                                                 { _Path.Size = 0/;"	f	struct:ImDrawList	typeref:typename:void
PathEllipticalArcTo	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImDrawList::PathEllipticalArcTo(const ImVec2& center, float radius_x, float radius_y, float/;"	f	class:ImDrawList	typeref:typename:void
PathFillConvex	build/_deps/imgui-proj-src/imgui.h	/^    inline    void  PathFillConvex(ImU32 col)                                   { AddConvexPolyF/;"	f	struct:ImDrawList	typeref:typename:void
PathLineTo	build/_deps/imgui-proj-src/imgui.h	/^    inline    void  PathLineTo(const ImVec2& pos)                               { _Path.push_bac/;"	f	struct:ImDrawList	typeref:typename:void
PathLineToMergeDuplicate	build/_deps/imgui-proj-src/imgui.h	/^    inline    void  PathLineToMergeDuplicate(const ImVec2& pos)                 { if (_Path.Size/;"	f	struct:ImDrawList	typeref:typename:void
PathRect	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImDrawList::PathRect(const ImVec2& a, const ImVec2& b, float rounding, ImDrawFlags flags)$/;"	f	class:ImDrawList	typeref:typename:void
PathStroke	build/_deps/imgui-proj-src/imgui.h	/^    inline    void  PathStroke(ImU32 col, ImDrawFlags flags = 0, float thickness = 1.0f) { AddPo/;"	f	struct:ImDrawList	typeref:typename:void
PenPressure	build/_deps/imgui-proj-src/imgui.h	/^    float       PenPressure;                        \/\/ Touch\/Pen pressure (0.0f to 1.0f, shou/;"	m	struct:ImGuiIO	typeref:typename:float
PhysicalDevice	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.h	/^    VkPhysicalDevice                PhysicalDevice;$/;"	m	struct:ImGui_ImplVulkan_InitInfo	typeref:typename:VkPhysicalDevice
Pipeline	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^    VkPipeline                  Pipeline;$/;"	m	struct:ImGui_ImplVulkan_Data	typeref:typename:VkPipeline	file:
Pipeline	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.h	/^    VkPipeline          Pipeline;               \/\/ The window pipeline may uses a different Vk/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:VkPipeline
PipelineCache	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.h	/^    VkPipelineCache                 PipelineCache;$/;"	m	struct:ImGui_ImplVulkan_InitInfo	typeref:typename:VkPipelineCache
PipelineCreateFlags	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^    VkPipelineCreateFlags       PipelineCreateFlags;$/;"	m	struct:ImGui_ImplVulkan_Data	typeref:typename:VkPipelineCreateFlags	file:
PipelineLayout	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^    VkPipelineLayout            PipelineLayout;$/;"	m	struct:ImGui_ImplVulkan_Data	typeref:typename:VkPipelineLayout	file:
PipelineRenderingCreateInfo	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.h	/^    VkPipelineRenderingCreateInfoKHR PipelineRenderingCreateInfo;$/;"	m	struct:ImGui_ImplVulkan_InitInfo	typeref:typename:VkPipelineRenderingCreateInfoKHR
PixelHeight	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^        uint32_t    PixelHeight;        \/\/ Size this font was generated with.$/;"	m	struct:__anon9c8900c20110::FontInfo	typeref:typename:uint32_t	file:
PixelSnapH	build/_deps/imgui-proj-src/imgui.h	/^    bool            PixelSnapH;             \/\/ false    \/\/ Align every glyph to pixel bounda/;"	m	struct:ImFontConfig	typeref:typename:bool
PixelStorei	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^        PFNGLPIXELSTOREIPROC              PixelStorei;$/;"	m	struct:ImGL3WProcs::__anon6bce6ebe0108	typeref:typename:PFNGLPIXELSTOREIPROC
PlatformHandle	build/_deps/imgui-proj-src/imgui.h	/^    void*               PlatformHandle;         \/\/ void* for FindViewportByPlatformHandle(). (/;"	m	struct:ImGuiViewport	typeref:typename:void *
PlatformHandle	build/_deps/imgui-proj-src/imgui.h	/^    void*   PlatformHandle;         \/\/ Backend dependant data (e.g. HMONITOR, GLFWmonitor*, SD/;"	m	struct:ImGuiPlatformMonitor	typeref:typename:void *
PlatformHandleRaw	build/_deps/imgui-proj-src/imgui.h	/^    void*               PlatformHandleRaw;      \/\/ void* to hold lower-level, platform-native /;"	m	struct:ImGuiViewport	typeref:typename:void *
PlatformIO	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiPlatformIO         PlatformIO;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiPlatformIO
PlatformImeData	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiPlatformImeData    PlatformImeData;                    \/\/ Data updated by current fra/;"	m	struct:ImGuiContext	typeref:typename:ImGuiPlatformImeData
PlatformImeDataPrev	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiPlatformImeData    PlatformImeDataPrev;                \/\/ Previous frame data (when c/;"	m	struct:ImGuiContext	typeref:typename:ImGuiPlatformImeData
PlatformImeViewport	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                 PlatformImeViewport;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
PlatformLastFocusedViewportId	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                 PlatformLastFocusedViewportId;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
PlatformLocaleDecimalPoint	build/_deps/imgui-proj-src/imgui.h	/^    ImWchar     PlatformLocaleDecimalPoint;     \/\/ '.'              \/\/ [Experimental] Config/;"	m	struct:ImGuiIO	typeref:typename:ImWchar
PlatformMonitor	build/_deps/imgui-proj-src/imgui_internal.h	/^    short               PlatformMonitor;$/;"	m	struct:ImGuiViewportP	typeref:typename:short
PlatformMonitorsFullWorkRect	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImRect                  PlatformMonitorsFullWorkRect;       \/\/ Bounding box of all platfor/;"	m	struct:ImGuiContext	typeref:typename:ImRect
PlatformRequestClose	build/_deps/imgui-proj-src/imgui.h	/^    bool                PlatformRequestClose;   \/\/ Platform window requested closure (e.g. win/;"	m	struct:ImGuiViewport	typeref:typename:bool
PlatformRequestMove	build/_deps/imgui-proj-src/imgui.h	/^    bool                PlatformRequestMove;    \/\/ Platform window requested move (e.g. window/;"	m	struct:ImGuiViewport	typeref:typename:bool
PlatformRequestResize	build/_deps/imgui-proj-src/imgui.h	/^    bool                PlatformRequestResize;  \/\/ Platform window requested resize (e.g. wind/;"	m	struct:ImGuiViewport	typeref:typename:bool
PlatformUserData	build/_deps/imgui-proj-src/imgui.h	/^    void*               PlatformUserData;       \/\/ void* to hold custom data structure for the/;"	m	struct:ImGuiViewport	typeref:typename:void *
PlatformWindowCreated	build/_deps/imgui-proj-src/imgui.h	/^    bool                PlatformWindowCreated;  \/\/ Platform window has been created (Platform_/;"	m	struct:ImGuiViewport	typeref:typename:bool
PlatformWindowsCreatedCount	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                     PlatformWindowsCreatedCount;        \/\/ Unique sequential creation /;"	m	struct:ImGuiContext	typeref:typename:int
Platform_CreateVkSurface	build/_deps/imgui-proj-src/imgui.h	/^    int     (*Platform_CreateVkSurface)(ImGuiViewport* vp, ImU64 vk_inst, const void* vk_allocat/;"	m	struct:ImGuiPlatformIO	typeref:typename:int (*)(ImGuiViewport * vp,ImU64 vk_inst,const void * vk_allocators,ImU64 * out_vk_surface)
Platform_CreateWindow	build/_deps/imgui-proj-src/imgui.h	/^    void    (*Platform_CreateWindow)(ImGuiViewport* vp);                    \/\/ . . U . .  \/\//;"	m	struct:ImGuiPlatformIO	typeref:typename:void (*)(ImGuiViewport * vp)
Platform_DestroyWindow	build/_deps/imgui-proj-src/imgui.h	/^    void    (*Platform_DestroyWindow)(ImGuiViewport* vp);                   \/\/ N . U . D  \/\/$/;"	m	struct:ImGuiPlatformIO	typeref:typename:void (*)(ImGuiViewport * vp)
Platform_GetWindowDpiScale	build/_deps/imgui-proj-src/imgui.h	/^    float   (*Platform_GetWindowDpiScale)(ImGuiViewport* vp);               \/\/ N . . . .  \/\//;"	m	struct:ImGuiPlatformIO	typeref:typename:float (*)(ImGuiViewport * vp)
Platform_GetWindowFocus	build/_deps/imgui-proj-src/imgui.h	/^    bool    (*Platform_GetWindowFocus)(ImGuiViewport* vp);                  \/\/ . . U . .  \/\/$/;"	m	struct:ImGuiPlatformIO	typeref:typename:bool (*)(ImGuiViewport * vp)
Platform_GetWindowMinimized	build/_deps/imgui-proj-src/imgui.h	/^    bool    (*Platform_GetWindowMinimized)(ImGuiViewport* vp);              \/\/ N . . . .  \/\//;"	m	struct:ImGuiPlatformIO	typeref:typename:bool (*)(ImGuiViewport * vp)
Platform_GetWindowPos	build/_deps/imgui-proj-src/imgui.h	/^    ImVec2  (*Platform_GetWindowPos)(ImGuiViewport* vp);                    \/\/ N . . . .  \/\/$/;"	m	struct:ImGuiPlatformIO	typeref:typename:ImVec2 (*)(ImGuiViewport * vp)
Platform_GetWindowSize	build/_deps/imgui-proj-src/imgui.h	/^    ImVec2  (*Platform_GetWindowSize)(ImGuiViewport* vp);                   \/\/ N . . . .  \/\//;"	m	struct:ImGuiPlatformIO	typeref:typename:ImVec2 (*)(ImGuiViewport * vp)
Platform_OnChangedViewport	build/_deps/imgui-proj-src/imgui.h	/^    void    (*Platform_OnChangedViewport)(ImGuiViewport* vp);               \/\/ . F . . .  \/\//;"	m	struct:ImGuiPlatformIO	typeref:typename:void (*)(ImGuiViewport * vp)
Platform_RenderWindow	build/_deps/imgui-proj-src/imgui.h	/^    void    (*Platform_RenderWindow)(ImGuiViewport* vp, void* render_arg);  \/\/ . . . R .  \/\//;"	m	struct:ImGuiPlatformIO	typeref:typename:void (*)(ImGuiViewport * vp,void * render_arg)
Platform_SetWindowAlpha	build/_deps/imgui-proj-src/imgui.h	/^    void    (*Platform_SetWindowAlpha)(ImGuiViewport* vp, float alpha);     \/\/ . . U . .  \/\//;"	m	struct:ImGuiPlatformIO	typeref:typename:void (*)(ImGuiViewport * vp,float alpha)
Platform_SetWindowFocus	build/_deps/imgui-proj-src/imgui.h	/^    void    (*Platform_SetWindowFocus)(ImGuiViewport* vp);                  \/\/ N . . . .  \/\//;"	m	struct:ImGuiPlatformIO	typeref:typename:void (*)(ImGuiViewport * vp)
Platform_SetWindowPos	build/_deps/imgui-proj-src/imgui.h	/^    void    (*Platform_SetWindowPos)(ImGuiViewport* vp, ImVec2 pos);        \/\/ . . U . .  \/\//;"	m	struct:ImGuiPlatformIO	typeref:typename:void (*)(ImGuiViewport * vp,ImVec2 pos)
Platform_SetWindowSize	build/_deps/imgui-proj-src/imgui.h	/^    void    (*Platform_SetWindowSize)(ImGuiViewport* vp, ImVec2 size);      \/\/ . . U . .  \/\//;"	m	struct:ImGuiPlatformIO	typeref:typename:void (*)(ImGuiViewport * vp,ImVec2 size)
Platform_SetWindowTitle	build/_deps/imgui-proj-src/imgui.h	/^    void    (*Platform_SetWindowTitle)(ImGuiViewport* vp, const char* str); \/\/ . . U . .  \/\//;"	m	struct:ImGuiPlatformIO	typeref:typename:void (*)(ImGuiViewport * vp,const char * str)
Platform_ShowWindow	build/_deps/imgui-proj-src/imgui.h	/^    void    (*Platform_ShowWindow)(ImGuiViewport* vp);                      \/\/ . . U . .  \/\//;"	m	struct:ImGuiPlatformIO	typeref:typename:void (*)(ImGuiViewport * vp)
Platform_SwapBuffers	build/_deps/imgui-proj-src/imgui.h	/^    void    (*Platform_SwapBuffers)(ImGuiViewport* vp, void* render_arg);   \/\/ . . . R .  \/\//;"	m	struct:ImGuiPlatformIO	typeref:typename:void (*)(ImGuiViewport * vp,void * render_arg)
Platform_UpdateWindow	build/_deps/imgui-proj-src/imgui.h	/^    void    (*Platform_UpdateWindow)(ImGuiViewport* vp);                    \/\/ . . U . .  \/\//;"	m	struct:ImGuiPlatformIO	typeref:typename:void (*)(ImGuiViewport * vp)
PlotEx	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^int ImGui::PlotEx(ImGuiPlotType plot_type, const char* label, float (*values_getter)(void* data,/;"	f	class:ImGui	typeref:typename:int
PlotHistogram	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::PlotHistogram(const char* label, const float* values, int values_count, int values_o/;"	f	class:ImGui	typeref:typename:void
PlotHistogram	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::PlotHistogram(const char* label, float (*values_getter)(void* data, int idx), void* /;"	f	class:ImGui	typeref:typename:void
PlotLines	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::PlotLines(const char* label, const float* values, int values_count, int values_offse/;"	f	class:ImGui	typeref:typename:void
PlotLines	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::PlotLines(const char* label, float (*values_getter)(void* data, int idx), void* data/;"	f	class:ImGui	typeref:typename:void
Plot_ArrayGetter	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static float Plot_ArrayGetter(void* data, int idx)$/;"	f	typeref:typename:float	file:
PollUnicodeChars	build/_deps/imgui-proj-src/examples/example_android_opengl3/main.cpp	/^static int PollUnicodeChars()$/;"	f	typeref:typename:int	file:
PolygonMode	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^        PFNGLPOLYGONMODEPROC              PolygonMode;$/;"	m	struct:ImGL3WProcs::__anon6bce6ebe0108	typeref:typename:PFNGLPOLYGONMODEPROC
PopAllowKeyboardFocus	build/_deps/imgui-proj-src/imgui.h	/^    static inline void  PopAllowKeyboardFocus()                                             { Po/;"	f	namespace:ImGui	typeref:typename:void
PopButtonRepeat	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::PopButtonRepeat()$/;"	f	class:ImGui	typeref:typename:void
PopClipRect	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::PopClipRect()$/;"	f	class:ImGui	typeref:typename:void
PopClipRect	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImDrawList::PopClipRect()$/;"	f	class:ImDrawList	typeref:typename:void
PopColumnsBackground	build/_deps/imgui-proj-src/imgui_tables.cpp	/^void ImGui::PopColumnsBackground()$/;"	f	class:ImGui	typeref:typename:void
PopFocusScope	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::PopFocusScope()$/;"	f	class:ImGui	typeref:typename:void
PopFont	build/_deps/imgui-proj-src/imgui.cpp	/^void  ImGui::PopFont()$/;"	f	class:ImGui	typeref:typename:void
PopID	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::PopID()$/;"	f	class:ImGui	typeref:typename:void
PopItemFlag	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::PopItemFlag()$/;"	f	class:ImGui	typeref:typename:void
PopItemWidth	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::PopItemWidth()$/;"	f	class:ImGui	typeref:typename:void
PopStyleColor	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::PopStyleColor(int count)$/;"	f	class:ImGui	typeref:typename:void
PopStyleCompact	build/_deps/imgui-proj-src/imgui_demo.cpp	/^static void PopStyleCompact()$/;"	f	typeref:typename:void	file:
PopStyleVar	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::PopStyleVar(int count)$/;"	f	class:ImGui	typeref:typename:void
PopTabStop	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::PopTabStop()$/;"	f	class:ImGui	typeref:typename:void
PopTextWrapPos	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::PopTextWrapPos()$/;"	f	class:ImGui	typeref:typename:void
PopTextureID	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImDrawList::PopTextureID()$/;"	f	class:ImDrawList	typeref:typename:void
PopupBorderSize	build/_deps/imgui-proj-src/imgui.h	/^    float       PopupBorderSize;            \/\/ Thickness of border around popup\/tooltip windo/;"	m	struct:ImGuiStyle	typeref:typename:float
PopupId	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                 PopupId;                            \/\/ ID in the popup stack when /;"	m	struct:ImGuiWindow	typeref:typename:ImGuiID
PopupId	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID             PopupId;        \/\/ Set on OpenPopup()$/;"	m	struct:ImGuiPopupData	typeref:typename:ImGuiID
PopupRounding	build/_deps/imgui-proj-src/imgui.h	/^    float       PopupRounding;              \/\/ Radius of popup window corners rounding. (Note /;"	m	struct:ImGuiStyle	typeref:typename:float
Pos	build/_deps/imgui-proj-src/imgui.cpp	/^    ImVec2ih            Pos;$/;"	m	struct:ImGuiDockNodeSettings	typeref:typename:ImVec2ih	file:
Pos	build/_deps/imgui-proj-src/imgui.h	/^    ImVec2              Pos;                    \/\/ Main Area: Position of the viewport (Dear I/;"	m	struct:ImGuiViewport	typeref:typename:ImVec2
Pos	build/_deps/imgui-proj-src/imgui.h	/^    ImVec2  Pos;            \/\/ Read-only.   Window position, for reference.$/;"	m	struct:ImGuiSizeCallbackData	typeref:typename:ImVec2
Pos	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2                  Pos;                                \/\/ Position (always rounded-up/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
Pos	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2                  Pos;                        \/\/ Current position$/;"	m	struct:ImGuiDockNode	typeref:typename:ImVec2
Pos	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2ih    Pos;            \/\/ NB: Settings position are stored RELATIVE to the viewport! /;"	m	struct:ImGuiWindowSettings	typeref:typename:ImVec2ih
Pos	imgui.ini	/^Pos=0,0$/;"	k	section:Window
Pos	imgui.ini	/^Pos=477,264$/;"	k	section:Window
Pos	imgui.ini	/^Pos=60,60$/;"	k	section:Window
Pos	imgui.ini	/^Pos=650,20$/;"	k	section:Window
PosCond	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiCond                   PosCond;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImGuiCond
PosPivotVal	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2                      PosPivotVal;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImVec2
PosToIndexConvert	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool    PosToIndexConvert;      \/\/ Begin\/End are absolute position (will be converted to /;"	m	struct:ImGuiListClipperRange	typeref:typename:bool
PosToIndexOffsetMax	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImS8    PosToIndexOffsetMax;    \/\/ Add to Min after converting to indices$/;"	m	struct:ImGuiListClipperRange	typeref:typename:ImS8
PosToIndexOffsetMin	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImS8    PosToIndexOffsetMin;    \/\/ Add to Min after converting to indices$/;"	m	struct:ImGuiListClipperRange	typeref:typename:ImS8
PosUndock	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                        PosUndock;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:bool
PosVal	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2                      PosVal;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImVec2
PosX	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiInputEventMousePos      { float PosX, PosY; ImGuiMouseSource MouseSource; };$/;"	m	struct:ImGuiInputEventMousePos	typeref:typename:float
PosY	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiInputEventMousePos      { float PosX, PosY; ImGuiMouseSource MouseSource; };$/;"	m	struct:ImGuiInputEventMousePos	typeref:typename:float
PresentMode	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.h	/^    VkPresentModeKHR    PresentMode;$/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:VkPresentModeKHR
PrevEnabledColumn	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTableColumnIdx     PrevEnabledColumn;              \/\/ Index of prev enabled\/visible /;"	m	struct:ImGuiTableColumn	typeref:typename:ImGuiTableColumnIdx
PrevFrameVisible	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                 PrevFrameVisible;$/;"	m	struct:ImGuiTabBar	typeref:typename:int
PrevLineSize	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2                  PrevLineSize;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
PrevLineTextBaseOffset	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   PrevLineTextBaseOffset;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:float
PrevTabsContentsHeight	build/_deps/imgui-proj-src/imgui_internal.h	/^    float               PrevTabsContentsHeight; \/\/ Record the height of contents submitted bel/;"	m	struct:ImGuiTabBar	typeref:typename:float
PrevUserCallbackChar	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^    GLFWcharfun             PrevUserCallbackChar;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:GLFWcharfun	file:
PrevUserCallbackCursorEnter	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^    GLFWcursorenterfun      PrevUserCallbackCursorEnter;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:GLFWcursorenterfun	file:
PrevUserCallbackCursorPos	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^    GLFWcursorposfun        PrevUserCallbackCursorPos;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:GLFWcursorposfun	file:
PrevUserCallbackKey	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^    GLFWkeyfun              PrevUserCallbackKey;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:GLFWkeyfun	file:
PrevUserCallbackMonitor	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^    GLFWmonitorfun          PrevUserCallbackMonitor;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:GLFWmonitorfun	file:
PrevUserCallbackMousebutton	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^    GLFWmousebuttonfun      PrevUserCallbackMousebutton;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:GLFWmousebuttonfun	file:
PrevUserCallbackScroll	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^    GLFWscrollfun           PrevUserCallbackScroll;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:GLFWscrollfun	file:
PrevUserCallbackWindowFocus	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^    GLFWwindowfocusfun      PrevUserCallbackWindowFocus;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:GLFWwindowfocusfun	file:
PrevWndProc	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^    WNDPROC                 PrevWndProc;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:WNDPROC	file:
PrevWndProc	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^    WNDPROC     PrevWndProc;$/;"	m	struct:ImGui_ImplGlfw_ViewportData	typeref:typename:WNDPROC	file:
Preview	build/_deps/imgui-proj-src/imgui.h	/^    bool            Preview;            \/\/ Set when AcceptDragDropPayload() was called and mou/;"	m	struct:ImGuiPayload	typeref:typename:bool
PreviewRect	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImRect          PreviewRect;$/;"	m	struct:ImGuiComboPreviewData	typeref:typename:ImRect
PrimQuadUV	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImDrawList::PrimQuadUV(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& d, /;"	f	class:ImDrawList	typeref:typename:void
PrimRect	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImDrawList::PrimRect(const ImVec2& a, const ImVec2& c, ImU32 col)$/;"	f	class:ImDrawList	typeref:typename:void
PrimRectUV	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImDrawList::PrimRectUV(const ImVec2& a, const ImVec2& c, const ImVec2& uv_a, const ImVec2& /;"	f	class:ImDrawList	typeref:typename:void
PrimReserve	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImDrawList::PrimReserve(int idx_count, int vtx_count)$/;"	f	class:ImDrawList	typeref:typename:void
PrimUnreserve	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImDrawList::PrimUnreserve(int idx_count, int vtx_count)$/;"	f	class:ImDrawList	typeref:typename:void
PrimVtx	build/_deps/imgui-proj-src/imgui.h	/^    inline    void  PrimVtx(const ImVec2& pos, const ImVec2& uv, ImU32 col)         { PrimWriteI/;"	f	struct:ImDrawList	typeref:typename:void
PrimWriteIdx	build/_deps/imgui-proj-src/imgui.h	/^    inline    void  PrimWriteIdx(ImDrawIdx idx)                                     { *_IdxWrite/;"	f	struct:ImDrawList	typeref:typename:void
PrimWriteVtx	build/_deps/imgui-proj-src/imgui.h	/^    inline    void  PrimWriteVtx(const ImVec2& pos, const ImVec2& uv, ImU32 col)    { _VtxWriteP/;"	f	struct:ImDrawList	typeref:typename:void
PrimitiveTopology	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^        D3D10_PRIMITIVE_TOPOLOGY    PrimitiveTopology;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:D3D10_PRIMITIVE_TOPOLOGY	file:
PrimitiveTopology	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^        D3D11_PRIMITIVE_TOPOLOGY    PrimitiveTopology;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:D3D11_PRIMITIVE_TOPOLOGY	file:
PrintFmt	build/_deps/imgui-proj-src/imgui_internal.h	/^    const char* PrintFmt;       \/\/ Default printf format for the type$/;"	m	struct:ImGuiDataTypeInfo	typeref:typename:const char *
ProgressBar	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::ProgressBar(float fraction, const ImVec2& size_arg, const char* overlay)$/;"	f	class:ImGui	typeref:typename:void
Project status	README.md	/^## Project status$/;"	s
Pseudo-code:	build/_deps/imgui-proj-src/docs/FONTS.md	/^#### Pseudo-code:$/;"	t
Ptr	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp	/^    GLvoid* Ptr;$/;"	m	struct:ImGui_ImplOpenGL3_VtxAttribState	typeref:typename:GLvoid *	file:
Ptr	build/_deps/imgui-proj-src/imgui_internal.h	/^    void*       Ptr;            \/\/ Either field can be set, not both. e.g. Dock node tab bars /;"	m	struct:ImGuiPtrOrIndex	typeref:typename:void *
PushAllowKeyboardFocus	build/_deps/imgui-proj-src/imgui.h	/^    static inline void  PushAllowKeyboardFocus(bool tab_stop)                               { Pu/;"	f	namespace:ImGui	typeref:typename:void
PushButtonRepeat	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::PushButtonRepeat(bool repeat)$/;"	f	class:ImGui	typeref:typename:void
PushClipRect	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::PushClipRect(const ImVec2& clip_rect_min, const ImVec2& clip_rect_max, bool intersec/;"	f	class:ImGui	typeref:typename:void
PushClipRect	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImDrawList::PushClipRect(const ImVec2& cr_min, const ImVec2& cr_max, bool intersect_with_cu/;"	f	class:ImDrawList	typeref:typename:void
PushClipRectFullScreen	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImDrawList::PushClipRectFullScreen()$/;"	f	class:ImDrawList	typeref:typename:void
PushColumnClipRect	build/_deps/imgui-proj-src/imgui_tables.cpp	/^void ImGui::PushColumnClipRect(int column_index)$/;"	f	class:ImGui	typeref:typename:void
PushColumnsBackground	build/_deps/imgui-proj-src/imgui_tables.cpp	/^void ImGui::PushColumnsBackground()$/;"	f	class:ImGui	typeref:typename:void
PushFocusScope	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::PushFocusScope(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
PushFont	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::PushFont(ImFont* font)$/;"	f	class:ImGui	typeref:typename:void
PushID	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::PushID(const char* str_id)$/;"	f	class:ImGui	typeref:typename:void
PushID	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::PushID(const char* str_id_begin, const char* str_id_end)$/;"	f	class:ImGui	typeref:typename:void
PushID	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::PushID(const void* ptr_id)$/;"	f	class:ImGui	typeref:typename:void
PushID	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::PushID(int int_id)$/;"	f	class:ImGui	typeref:typename:void
PushItemFlag	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::PushItemFlag(ImGuiItemFlags option, bool enabled)$/;"	f	class:ImGui	typeref:typename:void
PushItemWidth	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::PushItemWidth(float item_width)$/;"	f	class:ImGui	typeref:typename:void
PushMultiItemsWidths	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::PushMultiItemsWidths(int components, float w_full)$/;"	f	class:ImGui	typeref:typename:void
PushOverrideID	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::PushOverrideID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
PushStyleColor	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::PushStyleColor(ImGuiCol idx, ImU32 col)$/;"	f	class:ImGui	typeref:typename:void
PushStyleColor	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::PushStyleColor(ImGuiCol idx, const ImVec4& col)$/;"	f	class:ImGui	typeref:typename:void
PushStyleCompact	build/_deps/imgui-proj-src/imgui_demo.cpp	/^static void PushStyleCompact()$/;"	f	typeref:typename:void	file:
PushStyleVar	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::PushStyleVar(ImGuiStyleVar idx, const ImVec2& val)$/;"	f	class:ImGui	typeref:typename:void
PushStyleVar	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::PushStyleVar(ImGuiStyleVar idx, float val)$/;"	f	class:ImGui	typeref:typename:void
PushTabStop	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::PushTabStop(bool tab_stop)$/;"	f	class:ImGui	typeref:typename:void
PushTextWrapPos	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::PushTextWrapPos(float wrap_pos_x)$/;"	f	class:ImGui	typeref:typename:void
PushTextureID	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImDrawList::PushTextureID(ImTextureID texture_id)$/;"	f	class:ImDrawList	typeref:typename:void
Q&A: Basics	build/_deps/imgui-proj-src/docs/FAQ.md	/^# Q&A: Basics$/;"	c
Q&A: Community	build/_deps/imgui-proj-src/docs/FAQ.md	/^# Q&A: Community$/;"	c
Q&A: Concerns	build/_deps/imgui-proj-src/docs/FAQ.md	/^# Q&A: Concerns$/;"	c
Q&A: Fonts, Text	build/_deps/imgui-proj-src/docs/FAQ.md	/^# Q&A: Fonts, Text$/;"	c
Q&A: Integration	build/_deps/imgui-proj-src/docs/FAQ.md	/^# Q&A: Integration$/;"	c
Q&A: Usage	build/_deps/imgui-proj-src/docs/FAQ.md	/^# Q&A: Usage$/;"	c
Q. What is this library called?	build/_deps/imgui-proj-src/docs/FAQ.md	/^### Q. What is this library called?$/;"	S
Q: About the ID Stack system...	build/_deps/imgui-proj-src/docs/FAQ.md	/^### Q: About the ID Stack system...$/;"	S
Q: Can you create elaborate/serious tools with Dear ImGui?	build/_deps/imgui-proj-src/docs/FAQ.md	/^### Q: Can you create elaborate\/serious tools with Dear ImGui?$/;"	S
Q: Can you reskin the look of Dear ImGui?	build/_deps/imgui-proj-src/docs/FAQ.md	/^### Q: Can you reskin the look of Dear ImGui?$/;"	S
Q: How can I display an image? What is ImTextureID, how does it work?	build/_deps/imgui-proj-src/docs/FAQ.md	/^### Q: How can I display an image? What is ImTextureID, how does it work?$/;"	S
Q: How can I display and input non-Latin characters such as Chinese, Japanese, Korean, Cyrillic?	build/_deps/imgui-proj-src/docs/FAQ.md	/^### Q: How can I display and input non-Latin characters such as Chinese, Japanese, Korean, Cyril/;"	S
Q: How can I display custom shapes? (using low-level ImDrawList API)	build/_deps/imgui-proj-src/docs/FAQ.md	/^### Q: How can I display custom shapes? (using low-level ImDrawList API)$/;"	S
Q: How can I easily use icons in my application?	build/_deps/imgui-proj-src/docs/FAQ.md	/^### Q: How can I easily use icons in my application?$/;"	S
Q: How can I enable keyboard or gamepad controls?	build/_deps/imgui-proj-src/docs/FAQ.md	/^### Q: How can I enable keyboard or gamepad controls?$/;"	S
Q: How can I have multiple widgets with the same label?	build/_deps/imgui-proj-src/docs/FAQ.md	/^### Q: How can I have multiple widgets with the same label?$/;"	S
Q: How can I have multiple windows with the same label?	build/_deps/imgui-proj-src/docs/FAQ.md	/^### Q: How can I have multiple windows with the same label?$/;"	S
Q: How can I have widgets with an empty label?	build/_deps/imgui-proj-src/docs/FAQ.md	/^### Q: How can I have widgets with an empty label?$/;"	S
Q: How can I help?	build/_deps/imgui-proj-src/docs/FAQ.md	/^### Q: How can I help?$/;"	S
Q: How can I interact with standard C++ types (such as std::string and std::vector)?	build/_deps/imgui-proj-src/docs/FAQ.md	/^### Q: How can I interact with standard C++ types (such as std::string and std::vector)?$/;"	S
Q: How can I load a different font than the default?	build/_deps/imgui-proj-src/docs/FAQ.md	/^### Q: How can I load a different font than the default?$/;"	S
Q: How can I load multiple fonts?	build/_deps/imgui-proj-src/docs/FAQ.md	/^### Q: How can I load multiple fonts?$/;"	S
Q: How can I tell whether to dispatch mouse/keyboard to Dear ImGui or my application?	build/_deps/imgui-proj-src/docs/FAQ.md	/^### Q: How can I tell whether to dispatch mouse\/keyboard to Dear ImGui or my application?$/;"	S
Q: How can I use maths operators with ImVec2?	build/_deps/imgui-proj-src/docs/FAQ.md	/^### Q: How can I use maths operators with ImVec2?$/;"	S
Q: How can I use my own maths types instead of ImVec2/ImVec4?	build/_deps/imgui-proj-src/docs/FAQ.md	/^### Q: How can I use my own maths types instead of ImVec2\/ImVec4?$/;"	S
Q: How can I use this on a machine without mouse, keyboard or screen? (input share, remote display)	build/_deps/imgui-proj-src/docs/FAQ.md	/^### Q: How can I use this on a machine without mouse, keyboard or screen? (input share, remote d/;"	S
Q: How should I handle DPI in my application?	build/_deps/imgui-proj-src/docs/FAQ.md	/^### Q: How should I handle DPI in my application?$/;"	S
Q: How to get started?	build/_deps/imgui-proj-src/docs/FAQ.md	/^### Q: How to get started?$/;"	S
Q: I integrated Dear ImGui in my engine and little squares are showing instead of text...	build/_deps/imgui-proj-src/docs/FAQ.md	/^### Q: I integrated Dear ImGui in my engine and little squares are showing instead of text...$/;"	S
Q: I integrated Dear ImGui in my engine and some elements are clipping or disappearing when I move windows around...	build/_deps/imgui-proj-src/docs/FAQ.md	/^### Q: I integrated Dear ImGui in my engine and some elements are clipping or disappearing when /;"	S
Q: I integrated Dear ImGui in my engine and some elements are displaying outside their expected windows boundaries...	build/_deps/imgui-proj-src/docs/FAQ.md	/^### Q: I integrated Dear ImGui in my engine and some elements are displaying outside their expec/;"	S
Q: Where is the documentation?	build/_deps/imgui-proj-src/docs/FAQ.md	/^### Q: Where is the documentation?$/;"	S
Q: Which version should I get?	build/_deps/imgui-proj-src/docs/FAQ.md	/^### Q: Which version should I get?$/;"	S
Q: Who uses Dear ImGui?	build/_deps/imgui-proj-src/docs/FAQ.md	/^### Q: Who uses Dear ImGui?$/;"	S
Q: Why is my widget not reacting when I click on it?	build/_deps/imgui-proj-src/docs/FAQ.md	/^### Q: Why is my widget not reacting when I click on it?$/;"	S
Q: Why using C++ (as opposed to C)?	build/_deps/imgui-proj-src/docs/FAQ.md	/^### Q: Why using C++ (as opposed to C)?$/;"	S
Quantity	build/_deps/imgui-proj-src/imgui_demo.cpp	/^    int         Quantity;$/;"	m	struct:__anon1b6430950210::MyItem	typeref:typename:int	file:
QueryFrameCount	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImS8                    QueryFrameCount;            \/\/ >= 1: Query in progress$/;"	m	struct:ImGuiStackLevelInfo	typeref:typename:ImS8
QueryId	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                 QueryId;                    \/\/ ID to query details for$/;"	m	struct:ImGuiIDStackTool	typeref:typename:ImGuiID
QuerySuccess	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    QuerySuccess;               \/\/ Obtained result from DebugHookIdInf/;"	m	struct:ImGuiStackLevelInfo	typeref:typename:bool
Queue	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.h	/^    VkQueue                         Queue;$/;"	m	struct:ImGui_ImplVulkan_InitInfo	typeref:typename:VkQueue
QueueFamily	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.h	/^    uint32_t                        QueueFamily;$/;"	m	struct:ImGui_ImplVulkan_InitInfo	typeref:typename:uint32_t
REGULAR FONTS	build/_deps/imgui-proj-src/docs/FONTS.md	/^#### REGULAR FONTS$/;"	t
RM	build/Makefile	/^RM = \/home\/xundaoxd\/.software\/cmake-3.26.5-linux-x86_64\/bin\/cmake -E rm -f$/;"	m
RM	build/_deps/imgui-proj-subbuild/Makefile	/^RM = \/home\/xundaoxd\/.software\/cmake-3.26.5-linux-x86_64\/bin\/cmake -E rm -f$/;"	m
RS	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^        ID3D10RasterizerState*      RS;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:ID3D10RasterizerState *	file:
RS	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^        ID3D11RasterizerState*      RS;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:ID3D11RasterizerState *	file:
RTVFormat	build/_deps/imgui-proj-src/backends/imgui_impl_dx12.cpp	/^    DXGI_FORMAT                 RTVFormat;$/;"	m	struct:ImGui_ImplDX12_Data	typeref:typename:DXGI_FORMAT	file:
RTView	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^    ID3D10RenderTargetView* RTView;$/;"	m	struct:ImGui_ImplDX10_ViewportData	typeref:typename:ID3D10RenderTargetView *	file:
RTView	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^    ID3D11RenderTargetView*         RTView;$/;"	m	struct:ImGui_ImplDX11_ViewportData	typeref:typename:ID3D11RenderTargetView *	file:
RadioButton	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::RadioButton(const char* label, bool active)$/;"	f	class:ImGui	typeref:typename:bool
RadioButton	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::RadioButton(const char* label, int* v, int v_button)$/;"	f	class:ImGui	typeref:typename:bool
Ranges	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVector<ImGuiListClipperRange> Ranges;$/;"	m	struct:ImGuiListClipperData	typeref:typename:ImVector<ImGuiListClipperRange>
RasterizationDensity	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^        float           RasterizationDensity;$/;"	m	struct:__anon9c8900c20110::FreeTypeFont	typeref:typename:float	file:
RasterizerDensity	build/_deps/imgui-proj-src/imgui.h	/^    float           RasterizerDensity;      \/\/ 1.0f     \/\/ DPI scale for rasterization, not /;"	m	struct:ImFontConfig	typeref:typename:float
RasterizerMultiply	build/_deps/imgui-proj-src/imgui.h	/^    float           RasterizerMultiply;     \/\/ 1.0f     \/\/ Linearly brighten (>1.0f) or dark/;"	m	struct:ImFontConfig	typeref:typename:float
RawData	build/_deps/imgui-proj-src/imgui_internal.h	/^    void*                       RawData;                    \/\/ Single allocation to hold Colum/;"	m	struct:ImGuiTable	typeref:typename:void *
ReadInitFn	build/_deps/imgui-proj-src/imgui_internal.h	/^    void        (*ReadInitFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler);                /;"	m	struct:ImGuiSettingsHandler	typeref:typename:void (*)(ImGuiContext * ctx,ImGuiSettingsHandler * handler)
ReadLineFn	build/_deps/imgui-proj-src/imgui_internal.h	/^    void        (*ReadLineFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler, void* entry, con/;"	m	struct:ImGuiSettingsHandler	typeref:typename:void (*)(ImGuiContext * ctx,ImGuiSettingsHandler * handler,void * entry,const char * line)
ReadOpenFn	build/_deps/imgui-proj-src/imgui_internal.h	/^    void*       (*ReadOpenFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler, const char* name/;"	m	struct:ImGuiSettingsHandler	typeref:typename:void * (*)(ImGuiContext * ctx,ImGuiSettingsHandler * handler,const char * name)
ReadPixels	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^        PFNGLREADPIXELSPROC               ReadPixels;$/;"	m	struct:ImGL3WProcs::__anon6bce6ebe0108	typeref:typename:PFNGLREADPIXELSPROC
Recommended Backends	build/_deps/imgui-proj-src/docs/BACKENDS.md	/^### Recommended Backends$/;"	S
Rect	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImRect                  Rect() const            { return ImRect(Pos.x, Pos.y, Pos.x + Size.x/;"	f	struct:ImGuiDockNode	typeref:typename:ImRect
Rect	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImRect                  Rect;               \/\/ Full rectangle$/;"	m	struct:ImGuiLastItemData	typeref:typename:ImRect
Rect	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImRect      Rect() const            { return ImRect(Pos.x, Pos.y, Pos.x + Size.x, Pos.y + Si/;"	f	struct:ImGuiWindow	typeref:typename:ImRect
RectRel	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImRect              RectRel;        \/\/ Init,Move    \/\/ Best candidate bounding box in wi/;"	m	struct:ImGuiNavItemData	typeref:typename:ImRect
Rects	build/_deps/imgui-proj-src/imgui_draw.cpp	/^    stbrp_rect*         Rects;              \/\/ Rectangle to pack. We first fill in their size /;"	m	struct:ImFontBuildSrcData	typeref:typename:stbrp_rect *	file:
Rects	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^    stbrp_rect*         Rects;              \/\/ Rectangle to pack. We first fill in their size /;"	m	struct:ImFontBuildSrcDataFT	typeref:typename:stbrp_rect *	file:
RefFrame	build/_deps/imgui-proj-src/imgui.h	/^    mutable int RefFrame;$/;"	m	struct:ImGuiOnceUponAFrame	typeref:typename:int
RefScale	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                       RefScale;                   \/\/ Reference scale to be able to r/;"	m	struct:ImGuiTable	typeref:typename:float
RefScale	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                       RefScale;               \/\/ Reference scale to be able to resca/;"	m	struct:ImGuiTableSettings	typeref:typename:float
RefViewportId	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                 RefViewportId;              \/\/ Reference viewport ID from visible /;"	m	struct:ImGuiDockNode	typeref:typename:ImGuiID
Releases & Changelogs	build/_deps/imgui-proj-src/docs/README.md	/^### Releases & Changelogs$/;"	S
ReloadSelectionEnd	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                     ReloadSelectionEnd;$/;"	m	struct:ImGuiInputTextState	typeref:typename:int
ReloadSelectionStart	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                     ReloadSelectionStart;   \/\/ POSITIONS ARE IN IMWCHAR units *NOT* UT/;"	m	struct:ImGuiInputTextState	typeref:typename:int
ReloadUserBuf	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    ReloadUserBuf;          \/\/ force a reload of user buf so it may be/;"	m	struct:ImGuiInputTextState	typeref:typename:bool
ReloadUserBufAndKeepSelection	build/_deps/imgui-proj-src/imgui_internal.h	/^    void        ReloadUserBufAndKeepSelection() { ReloadUserBuf = true; ReloadSelectionStart = S/;"	f	struct:ImGuiInputTextState	typeref:typename:void
ReloadUserBufAndMoveToEnd	build/_deps/imgui-proj-src/imgui_internal.h	/^    void        ReloadUserBufAndMoveToEnd()     { ReloadUserBuf = true; ReloadSelectionStart = R/;"	f	struct:ImGuiInputTextState	typeref:typename:void
ReloadUserBufAndSelectAll	build/_deps/imgui-proj-src/imgui_internal.h	/^    void        ReloadUserBufAndSelectAll()     { ReloadUserBuf = true; ReloadSelectionStart = 0/;"	f	struct:ImGuiInputTextState	typeref:typename:void
Remove	build/_deps/imgui-proj-src/imgui_internal.h	/^    void        Remove(ImGuiID key, ImPoolIdx idx)  { Buf[idx].~T(); *(int*)&Buf[idx] = FreeIdx;/;"	f	struct:ImPool	typeref:typename:void
Remove	build/_deps/imgui-proj-src/imgui_internal.h	/^    void        Remove(ImGuiID key, const T* p)     { Remove(key, GetIndex(p)); }$/;"	f	struct:ImPool	typeref:typename:void
RemoveContextHook	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::RemoveContextHook(ImGuiContext* ctx, ImGuiID hook_id)$/;"	f	class:ImGui	typeref:typename:void
RemoveSettingsHandler	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::RemoveSettingsHandler(const char* type_name)$/;"	f	class:ImGui	typeref:typename:void
Render	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::Render()$/;"	f	class:ImGui	typeref:typename:void
RenderArrow	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImGui::RenderArrow(ImDrawList* draw_list, ImVec2 pos, ImU32 col, ImGuiDir dir, float scale)$/;"	f	class:ImGui	typeref:typename:void
RenderArrowDockMenu	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImGui::RenderArrowDockMenu(ImDrawList* draw_list, ImVec2 p_min, float sz, ImU32 col)$/;"	f	class:ImGui	typeref:typename:void
RenderArrowPointingAt	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImGui::RenderArrowPointingAt(ImDrawList* draw_list, ImVec2 pos, ImVec2 half_sz, ImGuiDir di/;"	f	class:ImGui	typeref:typename:void
RenderArrowsForVerticalBar	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static void RenderArrowsForVerticalBar(ImDrawList* draw_list, ImVec2 pos, ImVec2 half_sz, float /;"	f	typeref:typename:void	file:
RenderBuffers	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^    ImGui_ImplVulkan_WindowRenderBuffers    RenderBuffers;      \/\/ Used by all viewports$/;"	m	struct:ImGui_ImplVulkan_ViewportData	typeref:typename:ImGui_ImplVulkan_WindowRenderBuffers	file:
RenderBullet	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImGui::RenderBullet(ImDrawList* draw_list, ImVec2 pos, ImU32 col)$/;"	f	class:ImGui	typeref:typename:void
RenderChar	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImFont::RenderChar(ImDrawList* draw_list, float size, const ImVec2& pos, ImU32 col, ImWchar/;"	f	class:ImFont	typeref:typename:void
RenderCheckMark	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImGui::RenderCheckMark(ImDrawList* draw_list, ImVec2 pos, ImU32 col, float sz)$/;"	f	class:ImGui	typeref:typename:void
RenderColorRectWithAlphaCheckerboard	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImGui::RenderColorRectWithAlphaCheckerboard(ImDrawList* draw_list, ImVec2 p_min, ImVec2 p_m/;"	f	class:ImGui	typeref:typename:void
RenderCompleteSemaphore	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.h	/^    VkSemaphore         RenderCompleteSemaphore;$/;"	m	struct:ImGui_ImplVulkanH_FrameSemaphores	typeref:typename:VkSemaphore
RenderDimmedBackgroundBehindWindow	build/_deps/imgui-proj-src/imgui.cpp	/^static void ImGui::RenderDimmedBackgroundBehindWindow(ImGuiWindow* window, ImU32 col)$/;"	f	class:ImGui	typeref:typename:void	file:
RenderDimmedBackgrounds	build/_deps/imgui-proj-src/imgui.cpp	/^static void ImGui::RenderDimmedBackgrounds()$/;"	f	class:ImGui	typeref:typename:void	file:
RenderDragDropTargetRect	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::RenderDragDropTargetRect(const ImRect& bb, const ImRect& item_clip_rect)$/;"	f	class:ImGui	typeref:typename:void
RenderFrame	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::RenderFrame(ImVec2 p_min, ImVec2 p_max, ImU32 fill_col, bool border, float rounding)$/;"	f	class:ImGui	typeref:typename:void
RenderFrameBorder	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::RenderFrameBorder(ImVec2 p_min, ImVec2 p_max, float rounding)$/;"	f	class:ImGui	typeref:typename:void
RenderGlyphAndGetInfo	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^    const FT_Bitmap* FreeTypeFont::RenderGlyphAndGetInfo(GlyphInfo* out_glyph_info)$/;"	f	class:__anon9c8900c20110::FreeTypeFont	typeref:typename:const FT_Bitmap *
RenderMode	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^        FT_Render_Mode  RenderMode;$/;"	m	struct:__anon9c8900c20110::FreeTypeFont	typeref:typename:FT_Render_Mode	file:
RenderMouseCursor	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::RenderMouseCursor(ImVec2 base_pos, float base_scale, ImGuiMouseCursor mouse_cursor, /;"	f	class:ImGui	typeref:typename:void
RenderNavHighlight	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::RenderNavHighlight(const ImRect& bb, ImGuiID id, ImGuiNavHighlightFlags flags)$/;"	f	class:ImGui	typeref:typename:void
RenderPass	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.h	/^    VkRenderPass                    RenderPass;                   \/\/ Ignored if using dynamic /;"	m	struct:ImGui_ImplVulkan_InitInfo	typeref:typename:VkRenderPass
RenderPass	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.h	/^    VkRenderPass        RenderPass;$/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:VkRenderPass
RenderPlatformWindowsDefault	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::RenderPlatformWindowsDefault(void* platform_render_arg, void* renderer_render_arg)$/;"	f	class:ImGui	typeref:typename:void
RenderRectFilledRangeH	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImGui::RenderRectFilledRangeH(ImDrawList* draw_list, const ImRect& rect, ImU32 col, float x/;"	f	class:ImGui	typeref:typename:void
RenderRectFilledWithHole	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImGui::RenderRectFilledWithHole(ImDrawList* draw_list, const ImRect& outer, const ImRect& i/;"	f	class:ImGui	typeref:typename:void
RenderResources	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.cpp	/^struct RenderResources$/;"	s	file:
RenderTarget	build/_deps/imgui-proj-src/backends/imgui_impl_dx12.cpp	/^    ID3D12Resource*                 RenderTarget;$/;"	m	struct:ImGui_ImplDX12_FrameContext	typeref:typename:ID3D12Resource *	file:
RenderTargetCpuDescriptors	build/_deps/imgui-proj-src/backends/imgui_impl_dx12.cpp	/^    D3D12_CPU_DESCRIPTOR_HANDLE     RenderTargetCpuDescriptors;$/;"	m	struct:ImGui_ImplDX12_FrameContext	typeref:typename:D3D12_CPU_DESCRIPTOR_HANDLE	file:
RenderTargetFormat	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.h	/^    WGPUTextureFormat       RenderTargetFormat = WGPUTextureFormat_Undefined;$/;"	m	struct:ImGui_ImplWGPU_InitInfo	typeref:typename:WGPUTextureFormat
RenderText	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::RenderText(ImVec2 pos, const char* text, const char* text_end, bool hide_text_after_/;"	f	class:ImGui	typeref:typename:void
RenderText	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImFont::RenderText(ImDrawList* draw_list, float size, const ImVec2& pos, ImU32 col, const I/;"	f	class:ImFont	typeref:typename:void
RenderTextClipped	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::RenderTextClipped(const ImVec2& pos_min, const ImVec2& pos_max, const char* text, co/;"	f	class:ImGui	typeref:typename:void
RenderTextClippedEx	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::RenderTextClippedEx(ImDrawList* draw_list, const ImVec2& pos_min, const ImVec2& pos_/;"	f	class:ImGui	typeref:typename:void
RenderTextEllipsis	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::RenderTextEllipsis(ImDrawList* draw_list, const ImVec2& pos_min, const ImVec2& pos_m/;"	f	class:ImGui	typeref:typename:void
RenderTextWrapped	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::RenderTextWrapped(ImVec2 pos, const char* text, const char* text_end, float wrap_wid/;"	f	class:ImGui	typeref:typename:void
RenderViewportsThumbnails	build/_deps/imgui-proj-src/imgui.cpp	/^static void RenderViewportsThumbnails()$/;"	f	typeref:typename:void	file:
RenderWindowDecorations	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::RenderWindowDecorations(ImGuiWindow* window, const ImRect& title_bar_rect, bool titl/;"	f	class:ImGui	typeref:typename:void
RenderWindowOuterBorders	build/_deps/imgui-proj-src/imgui.cpp	/^static void ImGui::RenderWindowOuterBorders(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void	file:
RenderWindowOuterSingleBorder	build/_deps/imgui-proj-src/imgui.cpp	/^static void RenderWindowOuterSingleBorder(ImGuiWindow* window, int border_n, ImU32 border_col, f/;"	f	typeref:typename:void	file:
RenderWindowTitleBarContents	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::RenderWindowTitleBarContents(ImGuiWindow* window, const ImRect& title_bar_rect, cons/;"	f	class:ImGui	typeref:typename:void
Renderer	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^    SDL_Renderer*           Renderer;$/;"	m	struct:ImGui_ImplSDL2_Data	typeref:typename:SDL_Renderer *	file:
Renderer	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^    SDL_Renderer*           Renderer;$/;"	m	struct:ImGui_ImplSDL3_Data	typeref:typename:SDL_Renderer *	file:
RendererUserData	build/_deps/imgui-proj-src/imgui.h	/^    void*               RendererUserData;       \/\/ void* to hold custom data structure for the/;"	m	struct:ImGuiViewport	typeref:typename:void *
Renderer_CreateWindow	build/_deps/imgui-proj-src/imgui.h	/^    void    (*Renderer_CreateWindow)(ImGuiViewport* vp);                    \/\/ . . U . .  \/\//;"	m	struct:ImGuiPlatformIO	typeref:typename:void (*)(ImGuiViewport * vp)
Renderer_DestroyWindow	build/_deps/imgui-proj-src/imgui.h	/^    void    (*Renderer_DestroyWindow)(ImGuiViewport* vp);                   \/\/ N . U . D  \/\//;"	m	struct:ImGuiPlatformIO	typeref:typename:void (*)(ImGuiViewport * vp)
Renderer_RenderWindow	build/_deps/imgui-proj-src/imgui.h	/^    void    (*Renderer_RenderWindow)(ImGuiViewport* vp, void* render_arg);  \/\/ . . . R .  \/\//;"	m	struct:ImGuiPlatformIO	typeref:typename:void (*)(ImGuiViewport * vp,void * render_arg)
Renderer_SetWindowSize	build/_deps/imgui-proj-src/imgui.h	/^    void    (*Renderer_SetWindowSize)(ImGuiViewport* vp, ImVec2 size);      \/\/ . . U . .  \/\//;"	m	struct:ImGuiPlatformIO	typeref:typename:void (*)(ImGuiViewport * vp,ImVec2 size)
Renderer_SwapBuffers	build/_deps/imgui-proj-src/imgui.h	/^    void    (*Renderer_SwapBuffers)(ImGuiViewport* vp, void* render_arg);   \/\/ . . . R .  \/\//;"	m	struct:ImGuiPlatformIO	typeref:typename:void (*)(ImGuiViewport * vp,void * render_arg)
ReorderColumn	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTableColumnIdx         ReorderColumn;              \/\/ Index of column being reordered/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
ReorderColumnDir	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTableColumnIdx         ReorderColumnDir;           \/\/ -1 or +1$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
ReorderRequestOffset	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImS16               ReorderRequestOffset;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImS16
ReorderRequestTabId	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID             ReorderRequestTabId;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiID
Request	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTypingSelectRequest Request;           \/\/ User-facing data$/;"	m	struct:ImGuiTypingSelectState	typeref:typename:ImGuiTypingSelectRequest
RequestedWidth	build/_deps/imgui-proj-src/imgui_internal.h	/^    float               RequestedWidth;         \/\/ Width optionally requested by caller, -1.0f/;"	m	struct:ImGuiTabItem	typeref:typename:float
Requests	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVector<ImGuiDockRequest>      Requests;$/;"	m	struct:ImGuiDockContext	typeref:typename:ImVector<ImGuiDockRequest>
Reserve	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline void  Reserve(int n, size_t sz, int a=4) { IM_ASSERT(n == CurrIdx && n < CHUNKS); Cur/;"	f	struct:ImSpanAllocator	typeref:typename:void
Reserve	build/_deps/imgui-proj-src/imgui_internal.h	/^    void        Reserve(int capacity)               { Buf.reserve(capacity); Map.Data.reserve(ca/;"	f	struct:ImPool	typeref:typename:void
Reset	build/_deps/imgui-proj-src/imgui_internal.h	/^    void                            Reset(ImGuiListClipper* clipper) { ListClipper = clipper; St/;"	f	struct:ImGuiListClipperData	typeref:typename:void
ResetDevice	build/_deps/imgui-proj-src/examples/example_win32_directx9/main.cpp	/^void ResetDevice()$/;"	f	typeref:typename:void
ResetMouseDragDelta	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::ResetMouseDragDelta(ImGuiMouseButton button)$/;"	f	class:ImGui	typeref:typename:void
ResizeBorderHeld	build/_deps/imgui-proj-src/imgui_internal.h	/^    signed char             ResizeBorderHeld;                   \/\/ Current border being held f/;"	m	struct:ImGuiWindow	typeref:typename:signed char
ResizeBorderHovered	build/_deps/imgui-proj-src/imgui_internal.h	/^    signed char             ResizeBorderHovered;                \/\/ Current border being hovere/;"	m	struct:ImGuiWindow	typeref:typename:signed char
ResizeLockMinContentsX2	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                       ResizeLockMinContentsX2;    \/\/ Lock minimum contents width whi/;"	m	struct:ImGuiTable	typeref:typename:float
ResizedColumn	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTableColumnIdx         ResizedColumn;              \/\/ Index of column being resized. /;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
ResizedColumnNextWidth	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                       ResizedColumnNextWidth;$/;"	m	struct:ImGuiTable	typeref:typename:float
Results	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVector<ImGuiStackLevelInfo> Results;$/;"	m	struct:ImGuiIDStackTool	typeref:typename:ImVector<ImGuiStackLevelInfo>
RightMostEnabledColumn	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTableColumnIdx         RightMostEnabledColumn;     \/\/ Index of right-most non-hidden /;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
RightMostStretchedColumn	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTableColumnIdx         RightMostStretchedColumn;   \/\/ Index of right-most stretched c/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
Roadmap	README.md	/^## Roadmap$/;"	s
RootId	build/_deps/imgui-proj-src/imgui.cpp	/^    ImGuiID     RootId;$/;"	m	struct:ImGuiDockContextPruneNodeData	typeref:typename:ImGuiID	file:
RootWindow	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiWindow*            RootWindow;                         \/\/ Point to ourself or first a/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
RootWindowDockTree	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiWindow*            RootWindowDockTree;                 \/\/ Point to ourself or first a/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
RootWindowForNav	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiWindow*            RootWindowForNav;                   \/\/ Point to ourself or first a/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
RootWindowForTitleBarHighlight	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiWindow*            RootWindowForTitleBarHighlight;     \/\/ Point to ourself or first a/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
RootWindowPopupTree	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiWindow*            RootWindowPopupTree;                \/\/ Point to ourself or first a/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
RoundScalarWithFormatT	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^TYPE ImGui::RoundScalarWithFormatT(const char* format, ImGuiDataType data_type, TYPE v)$/;"	f	class:ImGui	typeref:typename:TYPE
RoutingCurr	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                         RoutingCurr;$/;"	m	struct:ImGuiKeyRoutingData	typeref:typename:ImGuiID
RoutingCurrScore	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImU8                            RoutingCurrScore;   \/\/ [DEBUG] For debug display$/;"	m	struct:ImGuiKeyRoutingData	typeref:typename:ImU8
RoutingNext	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                         RoutingNext;$/;"	m	struct:ImGuiKeyRoutingData	typeref:typename:ImGuiID
RoutingNextScore	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImU8                            RoutingNextScore;   \/\/ Lower is better (0: perfect score)$/;"	m	struct:ImGuiKeyRoutingData	typeref:typename:ImU8
Row	build/_deps/imgui-proj-src/imgui.cpp	/^    struct KeyLayoutData { int Row, Col; const char* Label; ImGuiKey Key; };$/;"	m	struct:ImGui::DebugRenderKeyboardPreview::KeyLayoutData	typeref:typename:int	file:
RowBgColor	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImU32                       RowBgColor[2];              \/\/ Background color override for c/;"	m	struct:ImGuiTable	typeref:typename:ImU32[2]
RowBgColorCounter	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                         RowBgColorCounter;          \/\/ Counter for alternating backgro/;"	m	struct:ImGuiTable	typeref:typename:int
RowCellData	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImSpan<ImGuiTableCellData>  RowCellData;                \/\/ Point within RawData[]. Store c/;"	m	struct:ImGuiTable	typeref:typename:ImSpan<ImGuiTableCellData>
RowCellDataCurrent	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTableColumnIdx         RowCellDataCurrent;         \/\/ Index of current RowCellData[] /;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
RowCellPaddingY	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                       RowCellPaddingY;            \/\/ Top and bottom padding. Reloade/;"	m	struct:ImGuiTable	typeref:typename:float
RowFlags	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTableRowFlags          RowFlags : 16;              \/\/ Current row flags, see ImGuiTab/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableRowFlags:16
RowIndentOffsetX	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                       RowIndentOffsetX;$/;"	m	struct:ImGuiTable	typeref:typename:float
RowMinHeight	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                       RowMinHeight;               \/\/ Height submitted to TableNextRo/;"	m	struct:ImGuiTable	typeref:typename:float
RowPosY1	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                       RowPosY1;$/;"	m	struct:ImGuiTable	typeref:typename:float
RowPosY2	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                       RowPosY2;$/;"	m	struct:ImGuiTable	typeref:typename:float
RowTextBaseline	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                       RowTextBaseline;$/;"	m	struct:ImGuiTable	typeref:typename:float
RtvDescHeap	build/_deps/imgui-proj-src/backends/imgui_impl_dx12.cpp	/^    ID3D12DescriptorHeap*           RtvDescHeap;$/;"	m	struct:ImGui_ImplDX12_ViewportData	typeref:typename:ID3D12DescriptorHeap *	file:
SDLRenderer	build/_deps/imgui-proj-src/backends/imgui_impl_sdlrenderer2.cpp	/^    SDL_Renderer*   SDLRenderer;$/;"	m	struct:ImGui_ImplSDLRenderer2_Data	typeref:typename:SDL_Renderer *	file:
SDLRenderer	build/_deps/imgui-proj-src/backends/imgui_impl_sdlrenderer3.cpp	/^    SDL_Renderer*   SDLRenderer;$/;"	m	struct:ImGui_ImplSDLRenderer3_Data	typeref:typename:SDL_Renderer *	file:
SDL_Event	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.h	/^typedef union SDL_Event SDL_Event;$/;"	t	typeref:union:SDL_Event
SDL_Event	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.h	/^typedef union SDL_Event SDL_Event;$/;"	t	typeref:union:SDL_Event
SDL_HAS_ALWAYS_ON_TOP	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^#define SDL_HAS_ALWAYS_ON_TOP /;"	d	file:
SDL_HAS_CAPTURE_AND_GLOBAL_MOUSE	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^#define SDL_HAS_CAPTURE_AND_GLOBAL_MOUSE /;"	d	file:
SDL_HAS_CAPTURE_AND_GLOBAL_MOUSE	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^#define SDL_HAS_CAPTURE_AND_GLOBAL_MOUSE /;"	d	file:
SDL_HAS_DISPLAY_EVENT	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^#define SDL_HAS_DISPLAY_EVENT /;"	d	file:
SDL_HAS_PER_MONITOR_DPI	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^#define SDL_HAS_PER_MONITOR_DPI /;"	d	file:
SDL_HAS_USABLE_DISPLAY_BOUNDS	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^#define SDL_HAS_USABLE_DISPLAY_BOUNDS /;"	d	file:
SDL_HAS_VULKAN	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^#define SDL_HAS_VULKAN /;"	d	file:
SDL_HAS_WINDOW_ALPHA	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^#define SDL_HAS_WINDOW_ALPHA /;"	d	file:
SDL_WINDOW_VULKAN	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^static const Uint32 SDL_WINDOW_VULKAN = 0x10000000;$/;"	v	typeref:typename:const Uint32	file:
SHELL	build/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/_deps/imgui-proj-subbuild/Makefile	/^SHELL = \/bin\/sh$/;"	m
SIMULATE_ID	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_ID /;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^# define SIMULATE_ID /;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.26.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_ID /;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.26.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define SIMULATE_ID /;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^# define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.26.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.26.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_MINOR /;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^# define SIMULATE_VERSION_MINOR /;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.26.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_MINOR /;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.26.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define SIMULATE_VERSION_MINOR /;"	d	file:
SIMULATE_VERSION_PATCH	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^#   define SIMULATE_VERSION_PATCH /;"	d	file:
SIMULATE_VERSION_PATCH	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_PATCH /;"	d	file:
SIMULATE_VERSION_PATCH	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^# define SIMULATE_VERSION_PATCH /;"	d	file:
SIMULATE_VERSION_PATCH	build/CMakeFiles/3.26.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define SIMULATE_VERSION_PATCH /;"	d	file:
SIMULATE_VERSION_PATCH	build/CMakeFiles/3.26.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_PATCH /;"	d	file:
SIMULATE_VERSION_PATCH	build/CMakeFiles/3.26.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define SIMULATE_VERSION_PATCH /;"	d	file:
SOURCES	build/_deps/imgui-proj-src/examples/example_glfw_metal/Makefile	/^SOURCES = main.mm$/;"	m
SOURCES	build/_deps/imgui-proj-src/examples/example_glfw_opengl2/Makefile	/^SOURCES = main.cpp$/;"	m
SOURCES	build/_deps/imgui-proj-src/examples/example_glfw_opengl2/build_win32.bat	/^@set SOURCES=main.cpp ..\\..\\backends\\imgui_impl_opengl2.cpp ..\\..\\backends\\imgui_impl_glfw/;"	v
SOURCES	build/_deps/imgui-proj-src/examples/example_glfw_opengl3/Makefile	/^SOURCES = main.cpp$/;"	m
SOURCES	build/_deps/imgui-proj-src/examples/example_glfw_opengl3/build_win32.bat	/^@set SOURCES=main.cpp ..\\..\\backends\\imgui_impl_glfw.cpp ..\\..\\backends\\imgui_impl_opengl3/;"	v
SOURCES	build/_deps/imgui-proj-src/examples/example_glfw_vulkan/build_win32.bat	/^@set SOURCES=main.cpp ..\\..\\backends\\imgui_impl_vulkan.cpp ..\\..\\backends\\imgui_impl_glfw./;"	v
SOURCES	build/_deps/imgui-proj-src/examples/example_glfw_vulkan/build_win64.bat	/^@set SOURCES=main.cpp ..\\..\\backends\\imgui_impl_vulkan.cpp ..\\..\\backends\\imgui_impl_glfw./;"	v
SOURCES	build/_deps/imgui-proj-src/examples/example_glut_opengl2/Makefile	/^SOURCES = main.cpp$/;"	m
SOURCES	build/_deps/imgui-proj-src/examples/example_null/Makefile	/^SOURCES = main.cpp$/;"	m
SOURCES	build/_deps/imgui-proj-src/examples/example_sdl2_directx11/build_win32.bat	/^@set SOURCES=main.cpp ..\\..\\backends\\imgui_impl_sdl2.cpp ..\\..\\backends\\imgui_impl_dx11.cp/;"	v
SOURCES	build/_deps/imgui-proj-src/examples/example_sdl2_metal/Makefile	/^SOURCES = main.mm$/;"	m
SOURCES	build/_deps/imgui-proj-src/examples/example_sdl2_opengl2/Makefile	/^SOURCES = main.cpp$/;"	m
SOURCES	build/_deps/imgui-proj-src/examples/example_sdl2_opengl2/build_win32.bat	/^@set SOURCES=main.cpp ..\\..\\backends\\imgui_impl_sdl2.cpp ..\\..\\backends\\imgui_impl_opengl2/;"	v
SOURCES	build/_deps/imgui-proj-src/examples/example_sdl2_opengl3/Makefile	/^SOURCES = main.cpp$/;"	m
SOURCES	build/_deps/imgui-proj-src/examples/example_sdl2_opengl3/build_win32.bat	/^@set SOURCES=main.cpp ..\\..\\backends\\imgui_impl_sdl2.cpp ..\\..\\backends\\imgui_impl_opengl3/;"	v
SOURCES	build/_deps/imgui-proj-src/examples/example_sdl2_sdlrenderer2/Makefile	/^SOURCES = main.cpp$/;"	m
SOURCES	build/_deps/imgui-proj-src/examples/example_sdl2_sdlrenderer2/build_win32.bat	/^@set SOURCES=main.cpp ..\\..\\backends\\imgui_impl_sdl2.cpp ..\\..\\backends\\imgui_impl_sdlrend/;"	v
SOURCES	build/_deps/imgui-proj-src/examples/example_sdl2_vulkan/build_win32.bat	/^@set SOURCES=main.cpp ..\\..\\backends\\imgui_impl_sdl2.cpp ..\\..\\backends\\imgui_impl_vulkan./;"	v
SOURCES	build/_deps/imgui-proj-src/examples/example_sdl3_opengl3/Makefile	/^SOURCES = main.cpp$/;"	m
SOURCES	build/_deps/imgui-proj-src/examples/example_sdl3_opengl3/build_win32.bat	/^@set SOURCES=main.cpp ..\\..\\backends\\imgui_impl_sdl3.cpp ..\\..\\backends\\imgui_impl_opengl3/;"	v
SOURCES	build/_deps/imgui-proj-src/examples/example_sdl3_sdlrenderer3/Makefile	/^SOURCES = main.cpp$/;"	m
SOURCES	build/_deps/imgui-proj-src/examples/example_sdl3_sdlrenderer3/build_win32.bat	/^@set SOURCES=main.cpp ..\\..\\backends\\imgui_impl_sdl3.cpp ..\\..\\backends\\imgui_impl_sdlrend/;"	v
SOURCES	build/_deps/imgui-proj-src/examples/example_win32_directx10/build_win32.bat	/^@set SOURCES=main.cpp ..\\..\\backends\\imgui_impl_win32.cpp ..\\..\\backends\\imgui_impl_dx10.c/;"	v
SOURCES	build/_deps/imgui-proj-src/examples/example_win32_directx11/build_win32.bat	/^@set SOURCES=main.cpp ..\\..\\backends\\imgui_impl_dx11.cpp ..\\..\\backends\\imgui_impl_win32.c/;"	v
SOURCES	build/_deps/imgui-proj-src/examples/example_win32_directx12/build_win32.bat	/^@set SOURCES=main.cpp ..\\..\\backends\\imgui_impl_dx12.cpp ..\\..\\backends\\imgui_impl_win32.c/;"	v
SOURCES	build/_deps/imgui-proj-src/examples/example_win32_directx9/build_win32.bat	/^@set SOURCES=main.cpp ..\\..\\backends\\imgui_impl_dx9.cpp ..\\..\\backends\\imgui_impl_win32.cp/;"	v
SOURCES	build/_deps/imgui-proj-src/examples/example_win32_opengl3/build_win32.bat	/^@set SOURCES=main.cpp ..\\..\\backends\\imgui_impl_opengl3.cpp ..\\..\\backends\\imgui_impl_win3/;"	v
STBRP_ASSERT	build/_deps/imgui-proj-src/imgui_draw.cpp	/^#define STBRP_ASSERT(/;"	d	file:
STBRP_ASSERT	build/_deps/imgui-proj-src/imstb_rectpack.h	/^#define STBRP_ASSERT /;"	d
STBRP_ASSERT	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^#define STBRP_ASSERT(/;"	d	file:
STBRP_DEF	build/_deps/imgui-proj-src/imstb_rectpack.h	/^#define STBRP_DEF /;"	d
STBRP_HEURISTIC_Skyline_BF_sortHeight	build/_deps/imgui-proj-src/imstb_rectpack.h	/^   STBRP_HEURISTIC_Skyline_BF_sortHeight$/;"	e	enum:__anonbedcada60103
STBRP_HEURISTIC_Skyline_BL_sortHeight	build/_deps/imgui-proj-src/imstb_rectpack.h	/^   STBRP_HEURISTIC_Skyline_BL_sortHeight = STBRP_HEURISTIC_Skyline_default,$/;"	e	enum:__anonbedcada60103
STBRP_HEURISTIC_Skyline_default	build/_deps/imgui-proj-src/imstb_rectpack.h	/^   STBRP_HEURISTIC_Skyline_default=0,$/;"	e	enum:__anonbedcada60103
STBRP_SORT	build/_deps/imgui-proj-src/imgui_draw.cpp	/^#define STBRP_SORT /;"	d	file:
STBRP_SORT	build/_deps/imgui-proj-src/imstb_rectpack.h	/^#define STBRP_SORT /;"	d
STBRP_STATIC	build/_deps/imgui-proj-src/imgui_draw.cpp	/^#define STBRP_STATIC$/;"	d	file:
STBRP_STATIC	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^#define STBRP_STATIC$/;"	d	file:
STBRP__CDECL	build/_deps/imgui-proj-src/imstb_rectpack.h	/^#define STBRP__CDECL /;"	d
STBRP__CDECL	build/_deps/imgui-proj-src/imstb_rectpack.h	/^#define STBRP__CDECL$/;"	d
STBRP__INIT_skyline	build/_deps/imgui-proj-src/imstb_rectpack.h	/^   STBRP__INIT_skyline = 1$/;"	e	enum:__anonbedcada60203
STBRP__MAXVAL	build/_deps/imgui-proj-src/imstb_rectpack.h	/^#define STBRP__MAXVAL /;"	d
STBRP__NOTUSED	build/_deps/imgui-proj-src/imstb_rectpack.h	/^#define STBRP__NOTUSED(/;"	d
STBTT_DEF	build/_deps/imgui-proj-src/imstb_truetype.h	/^#define STBTT_DEF /;"	d
STBTT_FIX	build/_deps/imgui-proj-src/imstb_truetype.h	/^#define STBTT_FIX /;"	d
STBTT_FIXMASK	build/_deps/imgui-proj-src/imstb_truetype.h	/^#define STBTT_FIXMASK /;"	d
STBTT_FIXSHIFT	build/_deps/imgui-proj-src/imstb_truetype.h	/^#define STBTT_FIXSHIFT /;"	d
STBTT_GPOS_TODO_assert	build/_deps/imgui-proj-src/imstb_truetype.h	/^#define STBTT_GPOS_TODO_assert(/;"	d
STBTT_MACSTYLE_BOLD	build/_deps/imgui-proj-src/imstb_truetype.h	/^#define STBTT_MACSTYLE_BOLD /;"	d
STBTT_MACSTYLE_DONTCARE	build/_deps/imgui-proj-src/imstb_truetype.h	/^#define STBTT_MACSTYLE_DONTCARE /;"	d
STBTT_MACSTYLE_ITALIC	build/_deps/imgui-proj-src/imstb_truetype.h	/^#define STBTT_MACSTYLE_ITALIC /;"	d
STBTT_MACSTYLE_NONE	build/_deps/imgui-proj-src/imstb_truetype.h	/^#define STBTT_MACSTYLE_NONE /;"	d
STBTT_MACSTYLE_UNDERSCORE	build/_deps/imgui-proj-src/imstb_truetype.h	/^#define STBTT_MACSTYLE_UNDERSCORE /;"	d
STBTT_MAC_EID_ARABIC	build/_deps/imgui-proj-src/imstb_truetype.h	/^   STBTT_MAC_EID_ROMAN        =0,   STBTT_MAC_EID_ARABIC       =4,$/;"	e	enum:__anond648eb7b0c03
STBTT_MAC_EID_CHINESE_TRAD	build/_deps/imgui-proj-src/imstb_truetype.h	/^   STBTT_MAC_EID_CHINESE_TRAD =2,   STBTT_MAC_EID_GREEK        =6,$/;"	e	enum:__anond648eb7b0c03
STBTT_MAC_EID_GREEK	build/_deps/imgui-proj-src/imstb_truetype.h	/^   STBTT_MAC_EID_CHINESE_TRAD =2,   STBTT_MAC_EID_GREEK        =6,$/;"	e	enum:__anond648eb7b0c03
STBTT_MAC_EID_HEBREW	build/_deps/imgui-proj-src/imstb_truetype.h	/^   STBTT_MAC_EID_JAPANESE     =1,   STBTT_MAC_EID_HEBREW       =5,$/;"	e	enum:__anond648eb7b0c03
STBTT_MAC_EID_JAPANESE	build/_deps/imgui-proj-src/imstb_truetype.h	/^   STBTT_MAC_EID_JAPANESE     =1,   STBTT_MAC_EID_HEBREW       =5,$/;"	e	enum:__anond648eb7b0c03
STBTT_MAC_EID_KOREAN	build/_deps/imgui-proj-src/imstb_truetype.h	/^   STBTT_MAC_EID_KOREAN       =3,   STBTT_MAC_EID_RUSSIAN      =7$/;"	e	enum:__anond648eb7b0c03
STBTT_MAC_EID_ROMAN	build/_deps/imgui-proj-src/imstb_truetype.h	/^   STBTT_MAC_EID_ROMAN        =0,   STBTT_MAC_EID_ARABIC       =4,$/;"	e	enum:__anond648eb7b0c03
STBTT_MAC_EID_RUSSIAN	build/_deps/imgui-proj-src/imstb_truetype.h	/^   STBTT_MAC_EID_KOREAN       =3,   STBTT_MAC_EID_RUSSIAN      =7$/;"	e	enum:__anond648eb7b0c03
STBTT_MAC_LANG_ARABIC	build/_deps/imgui-proj-src/imstb_truetype.h	/^   STBTT_MAC_LANG_ARABIC       =12,   STBTT_MAC_LANG_KOREAN       =23,$/;"	e	enum:__anond648eb7b0e03
STBTT_MAC_LANG_CHINESE_SIMPLIFIED	build/_deps/imgui-proj-src/imstb_truetype.h	/^   STBTT_MAC_LANG_HEBREW       =10,   STBTT_MAC_LANG_CHINESE_SIMPLIFIED =33,$/;"	e	enum:__anond648eb7b0e03
STBTT_MAC_LANG_CHINESE_TRAD	build/_deps/imgui-proj-src/imstb_truetype.h	/^   STBTT_MAC_LANG_ITALIAN      =3 ,   STBTT_MAC_LANG_CHINESE_TRAD =19$/;"	e	enum:__anond648eb7b0e03
STBTT_MAC_LANG_DUTCH	build/_deps/imgui-proj-src/imstb_truetype.h	/^   STBTT_MAC_LANG_DUTCH        =4 ,   STBTT_MAC_LANG_RUSSIAN      =32,$/;"	e	enum:__anond648eb7b0e03
STBTT_MAC_LANG_ENGLISH	build/_deps/imgui-proj-src/imstb_truetype.h	/^   STBTT_MAC_LANG_ENGLISH      =0 ,   STBTT_MAC_LANG_JAPANESE     =11,$/;"	e	enum:__anond648eb7b0e03
STBTT_MAC_LANG_FRENCH	build/_deps/imgui-proj-src/imstb_truetype.h	/^   STBTT_MAC_LANG_FRENCH       =1 ,   STBTT_MAC_LANG_SPANISH      =6 ,$/;"	e	enum:__anond648eb7b0e03
STBTT_MAC_LANG_GERMAN	build/_deps/imgui-proj-src/imstb_truetype.h	/^   STBTT_MAC_LANG_GERMAN       =2 ,   STBTT_MAC_LANG_SWEDISH      =5 ,$/;"	e	enum:__anond648eb7b0e03
STBTT_MAC_LANG_HEBREW	build/_deps/imgui-proj-src/imstb_truetype.h	/^   STBTT_MAC_LANG_HEBREW       =10,   STBTT_MAC_LANG_CHINESE_SIMPLIFIED =33,$/;"	e	enum:__anond648eb7b0e03
STBTT_MAC_LANG_ITALIAN	build/_deps/imgui-proj-src/imstb_truetype.h	/^   STBTT_MAC_LANG_ITALIAN      =3 ,   STBTT_MAC_LANG_CHINESE_TRAD =19$/;"	e	enum:__anond648eb7b0e03
STBTT_MAC_LANG_JAPANESE	build/_deps/imgui-proj-src/imstb_truetype.h	/^   STBTT_MAC_LANG_ENGLISH      =0 ,   STBTT_MAC_LANG_JAPANESE     =11,$/;"	e	enum:__anond648eb7b0e03
STBTT_MAC_LANG_KOREAN	build/_deps/imgui-proj-src/imstb_truetype.h	/^   STBTT_MAC_LANG_ARABIC       =12,   STBTT_MAC_LANG_KOREAN       =23,$/;"	e	enum:__anond648eb7b0e03
STBTT_MAC_LANG_RUSSIAN	build/_deps/imgui-proj-src/imstb_truetype.h	/^   STBTT_MAC_LANG_DUTCH        =4 ,   STBTT_MAC_LANG_RUSSIAN      =32,$/;"	e	enum:__anond648eb7b0e03
STBTT_MAC_LANG_SPANISH	build/_deps/imgui-proj-src/imstb_truetype.h	/^   STBTT_MAC_LANG_FRENCH       =1 ,   STBTT_MAC_LANG_SPANISH      =6 ,$/;"	e	enum:__anond648eb7b0e03
STBTT_MAC_LANG_SWEDISH	build/_deps/imgui-proj-src/imstb_truetype.h	/^   STBTT_MAC_LANG_GERMAN       =2 ,   STBTT_MAC_LANG_SWEDISH      =5 ,$/;"	e	enum:__anond648eb7b0e03
STBTT_MAX_OVERSAMPLE	build/_deps/imgui-proj-src/imstb_truetype.h	/^#define STBTT_MAX_OVERSAMPLE /;"	d
STBTT_MS_EID_SHIFTJIS	build/_deps/imgui-proj-src/imstb_truetype.h	/^   STBTT_MS_EID_SHIFTJIS      =2,$/;"	e	enum:__anond648eb7b0b03
STBTT_MS_EID_SYMBOL	build/_deps/imgui-proj-src/imstb_truetype.h	/^   STBTT_MS_EID_SYMBOL        =0,$/;"	e	enum:__anond648eb7b0b03
STBTT_MS_EID_UNICODE_BMP	build/_deps/imgui-proj-src/imstb_truetype.h	/^   STBTT_MS_EID_UNICODE_BMP   =1,$/;"	e	enum:__anond648eb7b0b03
STBTT_MS_EID_UNICODE_FULL	build/_deps/imgui-proj-src/imstb_truetype.h	/^   STBTT_MS_EID_UNICODE_FULL  =10$/;"	e	enum:__anond648eb7b0b03
STBTT_MS_LANG_CHINESE	build/_deps/imgui-proj-src/imstb_truetype.h	/^   STBTT_MS_LANG_CHINESE     =0x0804,   STBTT_MS_LANG_JAPANESE    =0x0411,$/;"	e	enum:__anond648eb7b0d03
STBTT_MS_LANG_DUTCH	build/_deps/imgui-proj-src/imstb_truetype.h	/^   STBTT_MS_LANG_DUTCH       =0x0413,   STBTT_MS_LANG_KOREAN      =0x0412,$/;"	e	enum:__anond648eb7b0d03
STBTT_MS_LANG_ENGLISH	build/_deps/imgui-proj-src/imstb_truetype.h	/^   STBTT_MS_LANG_ENGLISH     =0x0409,   STBTT_MS_LANG_ITALIAN     =0x0410,$/;"	e	enum:__anond648eb7b0d03
STBTT_MS_LANG_FRENCH	build/_deps/imgui-proj-src/imstb_truetype.h	/^   STBTT_MS_LANG_FRENCH      =0x040c,   STBTT_MS_LANG_RUSSIAN     =0x0419,$/;"	e	enum:__anond648eb7b0d03
STBTT_MS_LANG_GERMAN	build/_deps/imgui-proj-src/imstb_truetype.h	/^   STBTT_MS_LANG_GERMAN      =0x0407,   STBTT_MS_LANG_SPANISH     =0x0409,$/;"	e	enum:__anond648eb7b0d03
STBTT_MS_LANG_HEBREW	build/_deps/imgui-proj-src/imstb_truetype.h	/^   STBTT_MS_LANG_HEBREW      =0x040d,   STBTT_MS_LANG_SWEDISH     =0x041D$/;"	e	enum:__anond648eb7b0d03
STBTT_MS_LANG_ITALIAN	build/_deps/imgui-proj-src/imstb_truetype.h	/^   STBTT_MS_LANG_ENGLISH     =0x0409,   STBTT_MS_LANG_ITALIAN     =0x0410,$/;"	e	enum:__anond648eb7b0d03
STBTT_MS_LANG_JAPANESE	build/_deps/imgui-proj-src/imstb_truetype.h	/^   STBTT_MS_LANG_CHINESE     =0x0804,   STBTT_MS_LANG_JAPANESE    =0x0411,$/;"	e	enum:__anond648eb7b0d03
STBTT_MS_LANG_KOREAN	build/_deps/imgui-proj-src/imstb_truetype.h	/^   STBTT_MS_LANG_DUTCH       =0x0413,   STBTT_MS_LANG_KOREAN      =0x0412,$/;"	e	enum:__anond648eb7b0d03
STBTT_MS_LANG_RUSSIAN	build/_deps/imgui-proj-src/imstb_truetype.h	/^   STBTT_MS_LANG_FRENCH      =0x040c,   STBTT_MS_LANG_RUSSIAN     =0x0419,$/;"	e	enum:__anond648eb7b0d03
STBTT_MS_LANG_SPANISH	build/_deps/imgui-proj-src/imstb_truetype.h	/^   STBTT_MS_LANG_GERMAN      =0x0407,   STBTT_MS_LANG_SPANISH     =0x0409,$/;"	e	enum:__anond648eb7b0d03
STBTT_MS_LANG_SWEDISH	build/_deps/imgui-proj-src/imstb_truetype.h	/^   STBTT_MS_LANG_HEBREW      =0x040d,   STBTT_MS_LANG_SWEDISH     =0x041D$/;"	e	enum:__anond648eb7b0d03
STBTT_PLATFORM_ID_ISO	build/_deps/imgui-proj-src/imstb_truetype.h	/^   STBTT_PLATFORM_ID_ISO       =2,$/;"	e	enum:__anond648eb7b0903
STBTT_PLATFORM_ID_MAC	build/_deps/imgui-proj-src/imstb_truetype.h	/^   STBTT_PLATFORM_ID_MAC       =1,$/;"	e	enum:__anond648eb7b0903
STBTT_PLATFORM_ID_MICROSOFT	build/_deps/imgui-proj-src/imstb_truetype.h	/^   STBTT_PLATFORM_ID_MICROSOFT =3$/;"	e	enum:__anond648eb7b0903
STBTT_PLATFORM_ID_UNICODE	build/_deps/imgui-proj-src/imstb_truetype.h	/^   STBTT_PLATFORM_ID_UNICODE   =0,$/;"	e	enum:__anond648eb7b0903
STBTT_POINT_SIZE	build/_deps/imgui-proj-src/imstb_truetype.h	/^#define STBTT_POINT_SIZE(/;"	d
STBTT_RASTERIZER_VERSION	build/_deps/imgui-proj-src/imstb_truetype.h	/^#define STBTT_RASTERIZER_VERSION /;"	d
STBTT_STATIC	build/_deps/imgui-proj-src/imgui_draw.cpp	/^#define STBTT_STATIC$/;"	d	file:
STBTT_UNICODE_EID_ISO_10646	build/_deps/imgui-proj-src/imstb_truetype.h	/^   STBTT_UNICODE_EID_ISO_10646      =2,$/;"	e	enum:__anond648eb7b0a03
STBTT_UNICODE_EID_UNICODE_1_0	build/_deps/imgui-proj-src/imstb_truetype.h	/^   STBTT_UNICODE_EID_UNICODE_1_0    =0,$/;"	e	enum:__anond648eb7b0a03
STBTT_UNICODE_EID_UNICODE_1_1	build/_deps/imgui-proj-src/imstb_truetype.h	/^   STBTT_UNICODE_EID_UNICODE_1_1    =1,$/;"	e	enum:__anond648eb7b0a03
STBTT_UNICODE_EID_UNICODE_2_0_BMP	build/_deps/imgui-proj-src/imstb_truetype.h	/^   STBTT_UNICODE_EID_UNICODE_2_0_BMP=3,$/;"	e	enum:__anond648eb7b0a03
STBTT_UNICODE_EID_UNICODE_2_0_FULL	build/_deps/imgui-proj-src/imstb_truetype.h	/^   STBTT_UNICODE_EID_UNICODE_2_0_FULL=4$/;"	e	enum:__anond648eb7b0a03
STBTT__COMPARE	build/_deps/imgui-proj-src/imstb_truetype.h	/^#define STBTT__COMPARE(/;"	d
STBTT__CSCTX_INIT	build/_deps/imgui-proj-src/imstb_truetype.h	/^#define STBTT__CSCTX_INIT(/;"	d
STBTT__CSERR	build/_deps/imgui-proj-src/imstb_truetype.h	/^#define STBTT__CSERR(/;"	d
STBTT__NOTUSED	build/_deps/imgui-proj-src/imstb_truetype.h	/^#define STBTT__NOTUSED(/;"	d
STBTT__OVER_MASK	build/_deps/imgui-proj-src/imstb_truetype.h	/^#define STBTT__OVER_MASK /;"	d
STBTT_acos	build/_deps/imgui-proj-src/imstb_truetype.h	/^   #define STBTT_acos(/;"	d
STBTT_assert	build/_deps/imgui-proj-src/imgui_draw.cpp	/^#define STBTT_assert(/;"	d	file:
STBTT_assert	build/_deps/imgui-proj-src/imstb_truetype.h	/^   #define STBTT_assert(/;"	d
STBTT_cos	build/_deps/imgui-proj-src/imstb_truetype.h	/^   #define STBTT_cos(/;"	d
STBTT_fabs	build/_deps/imgui-proj-src/imgui_draw.cpp	/^#define STBTT_fabs(/;"	d	file:
STBTT_fabs	build/_deps/imgui-proj-src/imstb_truetype.h	/^   #define STBTT_fabs(/;"	d
STBTT_fmod	build/_deps/imgui-proj-src/imgui_draw.cpp	/^#define STBTT_fmod(/;"	d	file:
STBTT_fmod	build/_deps/imgui-proj-src/imstb_truetype.h	/^   #define STBTT_fmod(/;"	d
STBTT_free	build/_deps/imgui-proj-src/imgui_draw.cpp	/^#define STBTT_free(/;"	d	file:
STBTT_free	build/_deps/imgui-proj-src/imstb_truetype.h	/^   #define STBTT_free(/;"	d
STBTT_iceil	build/_deps/imgui-proj-src/imgui_draw.cpp	/^#define STBTT_iceil(/;"	d	file:
STBTT_iceil	build/_deps/imgui-proj-src/imstb_truetype.h	/^   #define STBTT_iceil(/;"	d
STBTT_ifloor	build/_deps/imgui-proj-src/imgui_draw.cpp	/^#define STBTT_ifloor(/;"	d	file:
STBTT_ifloor	build/_deps/imgui-proj-src/imstb_truetype.h	/^   #define STBTT_ifloor(/;"	d
STBTT_malloc	build/_deps/imgui-proj-src/imgui_draw.cpp	/^#define STBTT_malloc(/;"	d	file:
STBTT_malloc	build/_deps/imgui-proj-src/imstb_truetype.h	/^   #define STBTT_malloc(/;"	d
STBTT_max	build/_deps/imgui-proj-src/imstb_truetype.h	/^#define STBTT_max(/;"	d
STBTT_memcpy	build/_deps/imgui-proj-src/imstb_truetype.h	/^   #define STBTT_memcpy /;"	d
STBTT_memset	build/_deps/imgui-proj-src/imstb_truetype.h	/^   #define STBTT_memset /;"	d
STBTT_min	build/_deps/imgui-proj-src/imstb_truetype.h	/^#define STBTT_min(/;"	d
STBTT_pow	build/_deps/imgui-proj-src/imgui_draw.cpp	/^#define STBTT_pow(/;"	d	file:
STBTT_pow	build/_deps/imgui-proj-src/imstb_truetype.h	/^   #define STBTT_pow(/;"	d
STBTT_sqrt	build/_deps/imgui-proj-src/imgui_draw.cpp	/^#define STBTT_sqrt(/;"	d	file:
STBTT_sqrt	build/_deps/imgui-proj-src/imstb_truetype.h	/^   #define STBTT_sqrt(/;"	d
STBTT_strlen	build/_deps/imgui-proj-src/imstb_truetype.h	/^   #define STBTT_strlen(/;"	d
STBTT_vcubic	build/_deps/imgui-proj-src/imstb_truetype.h	/^      STBTT_vcubic$/;"	e	enum:__anond648eb7b0603
STBTT_vcurve	build/_deps/imgui-proj-src/imstb_truetype.h	/^      STBTT_vcurve,$/;"	e	enum:__anond648eb7b0603
STBTT_vline	build/_deps/imgui-proj-src/imstb_truetype.h	/^      STBTT_vline,$/;"	e	enum:__anond648eb7b0603
STBTT_vmove	build/_deps/imgui-proj-src/imstb_truetype.h	/^      STBTT_vmove=1,$/;"	e	enum:__anond648eb7b0603
STB_INCLUDE_STB_RECT_PACK_H	build/_deps/imgui-proj-src/imstb_rectpack.h	/^#define STB_INCLUDE_STB_RECT_PACK_H$/;"	d
STB_RECT_PACK_IMPLEMENTATION	build/_deps/imgui-proj-src/imgui_draw.cpp	/^#define STB_RECT_PACK_IMPLEMENTATION$/;"	d	file:
STB_RECT_PACK_IMPLEMENTATION	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^#define STB_RECT_PACK_IMPLEMENTATION$/;"	d	file:
STB_RECT_PACK_VERSION	build/_deps/imgui-proj-src/imstb_rectpack.h	/^#define STB_RECT_PACK_VERSION /;"	d
STB_SPRINTF_IMPLEMENTATION	build/_deps/imgui-proj-src/imgui.cpp	/^#define STB_SPRINTF_IMPLEMENTATION$/;"	d	file:
STB_TEXTEDIT_DELETECHARS	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static void STB_TEXTEDIT_DELETECHARS(ImGuiInputTextState* obj, int pos, int n)$/;"	f	namespace:ImStb	typeref:typename:void	file:
STB_TEXTEDIT_GETCHAR	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static ImWchar STB_TEXTEDIT_GETCHAR(const ImGuiInputTextState* obj, int idx)                    /;"	f	namespace:ImStb	typeref:typename:ImWchar	file:
STB_TEXTEDIT_GETWIDTH	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static float   STB_TEXTEDIT_GETWIDTH(ImGuiInputTextState* obj, int line_start_idx, int char_idx)/;"	f	namespace:ImStb	typeref:typename:float	file:
STB_TEXTEDIT_INSERTCHARS	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static bool STB_TEXTEDIT_INSERTCHARS(ImGuiInputTextState* obj, int pos, const ImWchar* new_text,/;"	f	namespace:ImStb	typeref:typename:bool	file:
STB_TEXTEDIT_KEYTOTEXT	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static int     STB_TEXTEDIT_KEYTOTEXT(int key)                                                  /;"	f	namespace:ImStb	typeref:typename:int	file:
STB_TEXTEDIT_KEYTYPE	build/_deps/imgui-proj-src/imstb_textedit.h	/^#define STB_TEXTEDIT_KEYTYPE /;"	d
STB_TEXTEDIT_K_BACKSPACE	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_BACKSPACE /;"	d	file:
STB_TEXTEDIT_K_DELETE	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_DELETE /;"	d	file:
STB_TEXTEDIT_K_DOWN	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_DOWN /;"	d	file:
STB_TEXTEDIT_K_LEFT	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_LEFT /;"	d	file:
STB_TEXTEDIT_K_LINEEND	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_LINEEND /;"	d	file:
STB_TEXTEDIT_K_LINESTART	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_LINESTART /;"	d	file:
STB_TEXTEDIT_K_PGDOWN	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_PGDOWN /;"	d	file:
STB_TEXTEDIT_K_PGUP	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_PGUP /;"	d	file:
STB_TEXTEDIT_K_REDO	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_REDO /;"	d	file:
STB_TEXTEDIT_K_RIGHT	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_RIGHT /;"	d	file:
STB_TEXTEDIT_K_SHIFT	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_SHIFT /;"	d	file:
STB_TEXTEDIT_K_TEXTEND	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_TEXTEND /;"	d	file:
STB_TEXTEDIT_K_TEXTSTART	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_TEXTSTART /;"	d	file:
STB_TEXTEDIT_K_UNDO	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_UNDO /;"	d	file:
STB_TEXTEDIT_K_UP	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_UP /;"	d	file:
STB_TEXTEDIT_K_WORDLEFT	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_WORDLEFT /;"	d	file:
STB_TEXTEDIT_K_WORDRIGHT	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_WORDRIGHT /;"	d	file:
STB_TEXTEDIT_LAYOUTROW	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static void    STB_TEXTEDIT_LAYOUTROW(StbTexteditRow* r, ImGuiInputTextState* obj, int line_star/;"	f	namespace:ImStb	typeref:typename:void	file:
STB_TEXTEDIT_MOVEWORDLEFT	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^#define STB_TEXTEDIT_MOVEWORDLEFT /;"	d	file:
STB_TEXTEDIT_MOVEWORDLEFT	build/_deps/imgui-proj-src/imstb_textedit.h	/^#define STB_TEXTEDIT_MOVEWORDLEFT /;"	d
STB_TEXTEDIT_MOVEWORDLEFT_IMPL	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static int  STB_TEXTEDIT_MOVEWORDLEFT_IMPL(ImGuiInputTextState* obj, int idx)   { idx--; while (/;"	f	namespace:ImStb	typeref:typename:int	file:
STB_TEXTEDIT_MOVEWORDRIGHT	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^#define STB_TEXTEDIT_MOVEWORDRIGHT /;"	d	file:
STB_TEXTEDIT_MOVEWORDRIGHT	build/_deps/imgui-proj-src/imstb_textedit.h	/^#define STB_TEXTEDIT_MOVEWORDRIGHT /;"	d
STB_TEXTEDIT_MOVEWORDRIGHT_IMPL	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static int  STB_TEXTEDIT_MOVEWORDRIGHT_IMPL(ImGuiInputTextState* obj, int idx)  { ImGuiContext& /;"	f	namespace:ImStb	typeref:typename:int	file:
STB_TEXTEDIT_MOVEWORDRIGHT_MAC	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static int  STB_TEXTEDIT_MOVEWORDRIGHT_MAC(ImGuiInputTextState* obj, int idx)   { idx++; int len/;"	f	namespace:ImStb	typeref:typename:int	file:
STB_TEXTEDIT_MOVEWORDRIGHT_WIN	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static int  STB_TEXTEDIT_MOVEWORDRIGHT_WIN(ImGuiInputTextState* obj, int idx)   { idx++; int len/;"	f	namespace:ImStb	typeref:typename:int	file:
STB_TEXTEDIT_NEWLINE	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static ImWchar STB_TEXTEDIT_NEWLINE = '\\n';$/;"	v	namespace:ImStb	typeref:typename:ImWchar	file:
STB_TEXTEDIT_STRINGLEN	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static int     STB_TEXTEDIT_STRINGLEN(const ImGuiInputTextState* obj)                           /;"	f	namespace:ImStb	typeref:typename:int	file:
STB_TEXT_HAS_SELECTION	build/_deps/imgui-proj-src/imstb_textedit.h	/^#define STB_TEXT_HAS_SELECTION(/;"	d
STB_TRUETYPE_IMPLEMENTATION	build/_deps/imgui-proj-src/imgui_draw.cpp	/^#define STB_TRUETYPE_IMPLEMENTATION$/;"	d	file:
STB_TexteditState	build/_deps/imgui-proj-src/imstb_textedit.h	/^} STB_TexteditState;$/;"	t	typeref:struct:__anon0ee941840308
STB__SCRAMBLE	build/_deps/imgui-proj-src/misc/fonts/binary_to_compressed_c.cpp	/^#define STB__SCRAMBLE(/;"	d	file:
STB__TRY	build/_deps/imgui-proj-src/misc/fonts/binary_to_compressed_c.cpp	/^#define STB__TRY(/;"	d	file:
STRINGIFY	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^#define STRINGIFY(/;"	d	file:
STRINGIFY	build/CMakeFiles/3.26.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define STRINGIFY(/;"	d	file:
STRINGIFY_HELPER	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^#define STRINGIFY_HELPER(/;"	d	file:
STRINGIFY_HELPER	build/CMakeFiles/3.26.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define STRINGIFY_HELPER(/;"	d	file:
SafeRelease	build/_deps/imgui-proj-src/backends/imgui_impl_dx12.cpp	/^static inline void SafeRelease(T*& res)$/;"	f	typeref:typename:void	file:
SafeRelease	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.cpp	/^static void SafeRelease(FrameResources& res)$/;"	f	typeref:typename:void	file:
SafeRelease	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.cpp	/^static void SafeRelease(ImDrawIdx*& res)$/;"	f	typeref:typename:void	file:
SafeRelease	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.cpp	/^static void SafeRelease(ImDrawVert*& res)$/;"	f	typeref:typename:void	file:
SafeRelease	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.cpp	/^static void SafeRelease(RenderResources& res)$/;"	f	typeref:typename:void	file:
SafeRelease	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.cpp	/^static void SafeRelease(WGPUBindGroup& res)$/;"	f	typeref:typename:void	file:
SafeRelease	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.cpp	/^static void SafeRelease(WGPUBindGroupLayout& res)$/;"	f	typeref:typename:void	file:
SafeRelease	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.cpp	/^static void SafeRelease(WGPUBuffer& res)$/;"	f	typeref:typename:void	file:
SafeRelease	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.cpp	/^static void SafeRelease(WGPUPipelineLayout& res)$/;"	f	typeref:typename:void	file:
SafeRelease	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.cpp	/^static void SafeRelease(WGPURenderPipeline& res)$/;"	f	typeref:typename:void	file:
SafeRelease	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.cpp	/^static void SafeRelease(WGPUSampler& res)$/;"	f	typeref:typename:void	file:
SafeRelease	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.cpp	/^static void SafeRelease(WGPUShaderModule& res)$/;"	f	typeref:typename:void	file:
SafeRelease	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.cpp	/^static void SafeRelease(WGPUTexture& res)$/;"	f	typeref:typename:void	file:
SafeRelease	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.cpp	/^static void SafeRelease(WGPUTextureView& res)$/;"	f	typeref:typename:void	file:
SameLine	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SameLine(float offset_from_start_x, float spacing_w)$/;"	f	class:ImGui	typeref:typename:void
SameLineOrWrap	build/_deps/imgui-proj-src/imgui.cpp	/^static void SameLineOrWrap(const ImVec2& size)$/;"	f	typeref:typename:void	file:
SampleMask	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^        UINT                        SampleMask;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:UINT	file:
SampleMask	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^        UINT                        SampleMask;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:UINT	file:
Sampler	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.cpp	/^    WGPUSampler         Sampler = nullptr;              \/\/ Sampler for the font texture$/;"	m	struct:RenderResources	typeref:typename:WGPUSampler	file:
Saturate	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^static inline float Saturate(float v) { return v < 0.0f ? 0.0f : v  > 1.0f ? 1.0f : v; }$/;"	f	typeref:typename:float	file:
Saturate	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^static inline float Saturate(float v) { return v < 0.0f ? 0.0f : v  > 1.0f ? 1.0f : v; }$/;"	f	typeref:typename:float	file:
Saturate	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^static inline float Saturate(float v) { return v < 0.0f ? 0.0f : v  > 1.0f ? 1.0f : v; }$/;"	f	typeref:typename:float	file:
SaveFlags	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTableFlags             SaveFlags;              \/\/ Indicate data we want to save using/;"	m	struct:ImGuiTableSettings	typeref:typename:ImGuiTableFlags
SaveIniSettingsToDisk	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SaveIniSettingsToDisk(const char* ini_filename)$/;"	f	class:ImGui	typeref:typename:void
SaveIniSettingsToMemory	build/_deps/imgui-proj-src/imgui.cpp	/^const char* ImGui::SaveIniSettingsToMemory(size_t* out_size)$/;"	f	class:ImGui	typeref:typename:const char *
Saw	build/_deps/imgui-proj-src/imgui_demo.cpp	/^            static float Saw(void*, int i) { return (i & 1) ? 1.0f : -1.0f; }$/;"	f	struct:ShowDemoWindowWidgets::Funcs	typeref:typename:float	file:
Scale	build/_deps/imgui-proj-src/imgui.h	/^    float                       Scale;              \/\/ 4     \/\/ in  \/\/ = 1.f      \/\/ Bas/;"	m	struct:ImFont	typeref:typename:float
ScaleAllSizes	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGuiStyle::ScaleAllSizes(float scale_factor)$/;"	f	class:ImGuiStyle	typeref:typename:void
ScaleClipRects	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImDrawData::ScaleClipRects(const ImVec2& fb_scale)$/;"	f	class:ImDrawData	typeref:typename:void
ScaleRatioFromValueT	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^float ImGui::ScaleRatioFromValueT(ImGuiDataType data_type, TYPE v, TYPE v_min, TYPE v_max, bool /;"	f	class:ImGui	typeref:typename:float
ScaleValueFromRatioT	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^TYPE ImGui::ScaleValueFromRatioT(ImGuiDataType data_type, float t, TYPE v_min, TYPE v_max, bool /;"	f	class:ImGui	typeref:typename:TYPE
ScaleWindow	build/_deps/imgui-proj-src/imgui.cpp	/^static void ScaleWindow(ImGuiWindow* window, float scale)$/;"	f	typeref:typename:void	file:
ScaleWindowsInViewport	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::ScaleWindowsInViewport(ImGuiViewportP* viewport, float scale)$/;"	f	class:ImGui	typeref:typename:void
ScanFmt	build/_deps/imgui-proj-src/imgui_internal.h	/^    const char* ScanFmt;        \/\/ Default scanf format for the type$/;"	m	struct:ImGuiDataTypeInfo	typeref:typename:const char *
Scissor	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^        PFNGLSCISSORPROC                  Scissor;$/;"	m	struct:ImGL3WProcs::__anon6bce6ebe0108	typeref:typename:PFNGLSCISSORPROC
ScissorRects	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^        D3D10_RECT                  ScissorRects[D3D10_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:D3D10_RECT[]	file:
ScissorRects	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^        D3D11_RECT                  ScissorRects[D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:D3D11_RECT[]	file:
ScissorRectsCount	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^        UINT                        ScissorRectsCount, ViewportsCount;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:UINT	file:
ScissorRectsCount	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^        UINT                        ScissorRectsCount, ViewportsCount;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:UINT	file:
Scroll	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2                  Scroll;$/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ScrollMax	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2                  ScrollMax;$/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ScrollTarget	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2                  ScrollTarget;                       \/\/ target scroll position. sto/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ScrollTargetCenterRatio	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2                  ScrollTargetCenterRatio;            \/\/ 0.0f = scroll so that targe/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ScrollTargetEdgeSnapDist	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2                  ScrollTargetEdgeSnapDist;           \/\/ 0.0f = no snapping, >0.0f s/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ScrollToBottom	build/_deps/imgui-proj-src/imgui_demo.cpp	/^    bool                  ScrollToBottom;$/;"	m	struct:ExampleAppConsole	typeref:typename:bool	file:
ScrollToBringRectIntoView	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline void             ScrollToBringRectIntoView(ImGuiWindow* window, const ImRect& rect) {/;"	f	namespace:ImGui	typeref:typename:void
ScrollToItem	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::ScrollToItem(ImGuiScrollFlags flags)$/;"	f	class:ImGui	typeref:typename:void
ScrollToRect	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::ScrollToRect(ImGuiWindow* window, const ImRect& item_rect, ImGuiScrollFlags flags)$/;"	f	class:ImGui	typeref:typename:void
ScrollToRectEx	build/_deps/imgui-proj-src/imgui.cpp	/^ImVec2 ImGui::ScrollToRectEx(ImGuiWindow* window, const ImRect& item_rect, ImGuiScrollFlags flag/;"	f	class:ImGui	typeref:typename:ImVec2
ScrollVal	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2                      ScrollVal;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImVec2
ScrollX	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   ScrollX;                \/\/ horizontal scrolling\/offset$/;"	m	struct:ImGuiInputTextState	typeref:typename:float
Scrollbar	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::Scrollbar(ImGuiAxis axis)$/;"	f	class:ImGui	typeref:typename:void
ScrollbarClickDeltaToGrabCenter	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   ScrollbarClickDeltaToGrabCenter;    \/\/ Distance between mouse and /;"	m	struct:ImGuiContext	typeref:typename:float
ScrollbarEx	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::ScrollbarEx(const ImRect& bb_frame, ImGuiID id, ImGuiAxis axis, ImS64* p_scroll_v, I/;"	f	class:ImGui	typeref:typename:bool
ScrollbarRounding	build/_deps/imgui-proj-src/imgui.h	/^    float       ScrollbarRounding;          \/\/ Radius of grab corners for scrollbar.$/;"	m	struct:ImGuiStyle	typeref:typename:float
ScrollbarSize	build/_deps/imgui-proj-src/imgui.h	/^    float       ScrollbarSize;              \/\/ Width of the vertical scrollbar, Height of the /;"	m	struct:ImGuiStyle	typeref:typename:float
ScrollbarSizes	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2                  ScrollbarSizes;                     \/\/ Size taken by each scrollba/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ScrollbarX	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    ScrollbarX, ScrollbarY;             \/\/ Are scrollbars visible?$/;"	m	struct:ImGuiWindow	typeref:typename:bool
ScrollbarY	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    ScrollbarX, ScrollbarY;             \/\/ Are scrollbars visible?$/;"	m	struct:ImGuiWindow	typeref:typename:bool
ScrollingAnim	build/_deps/imgui-proj-src/imgui_internal.h	/^    float               ScrollingAnim;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
ScrollingRectMaxX	build/_deps/imgui-proj-src/imgui_internal.h	/^    float               ScrollingRectMaxX;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
ScrollingRectMinX	build/_deps/imgui-proj-src/imgui_internal.h	/^    float               ScrollingRectMinX;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
ScrollingSpeed	build/_deps/imgui-proj-src/imgui_internal.h	/^    float               ScrollingSpeed;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
ScrollingTarget	build/_deps/imgui-proj-src/imgui_internal.h	/^    float               ScrollingTarget;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
ScrollingTargetDistToVisibility	build/_deps/imgui-proj-src/imgui_internal.h	/^    float               ScrollingTargetDistToVisibility;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
SearchBuffer	build/_deps/imgui-proj-src/imgui_internal.h	/^    char            SearchBuffer[64];           \/\/ Search buffer: no need to make dynamic as t/;"	m	struct:ImGuiTypingSelectState	typeref:typename:char[64]
SearchBuffer	build/_deps/imgui-proj-src/imgui_internal.h	/^    const char*             SearchBuffer;       \/\/ Search buffer contents (use full string. un/;"	m	struct:ImGuiTypingSelectRequest	typeref:typename:const char *
SearchBufferLen	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                     SearchBufferLen;$/;"	m	struct:ImGuiTypingSelectRequest	typeref:typename:int
SegmentN1	build/_deps/imgui-proj-src/imgui.cpp	/^    ImVec2  SegmentN1, SegmentN2;   \/\/ End positions, normalized (0,0: upper left)$/;"	m	struct:ImGuiResizeBorderDef	typeref:typename:ImVec2	file:
SegmentN2	build/_deps/imgui-proj-src/imgui.cpp	/^    ImVec2  SegmentN1, SegmentN2;   \/\/ End positions, normalized (0,0: upper left)$/;"	m	struct:ImGuiResizeBorderDef	typeref:typename:ImVec2	file:
SelectAll	build/_deps/imgui-proj-src/imgui.h	/^    void                SelectAll()             { SelectionStart = 0; SelectionEnd = BufTextLen;/;"	f	struct:ImGuiInputTextCallbackData	typeref:typename:void
SelectAll	build/_deps/imgui-proj-src/imgui_internal.h	/^    void        SelectAll()                 { Stb.select_start = 0; Stb.cursor = Stb.select_end /;"	f	struct:ImGuiInputTextState	typeref:typename:void
SelectRequest	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    SelectRequest;      \/\/ Set when buffer was modified this frame, re/;"	m	struct:ImGuiTypingSelectRequest	typeref:typename:bool
Selectable	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::Selectable(const char* label, bool selected, ImGuiSelectableFlags flags, const ImVec/;"	f	class:ImGui	typeref:typename:bool
Selectable	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::Selectable(const char* label, bool* p_selected, ImGuiSelectableFlags flags, const Im/;"	f	class:ImGui	typeref:typename:bool
SelectableTextAlign	build/_deps/imgui-proj-src/imgui.h	/^    ImVec2      SelectableTextAlign;        \/\/ Alignment of selectable text. Defaults to (0.0f/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
SelectedAllMouseLock	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    SelectedAllMouseLock;   \/\/ after a double-click to select all, we /;"	m	struct:ImGuiInputTextState	typeref:typename:bool
SelectedTabId	build/_deps/imgui-proj-src/imgui.cpp	/^    ImGuiID             SelectedTabId;$/;"	m	struct:ImGuiDockNodeSettings	typeref:typename:ImGuiID	file:
SelectedTabId	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                 SelectedTabId;              \/\/ [Leaf node only] Which of our tab\//;"	m	struct:ImGuiDockNode	typeref:typename:ImGuiID
SelectedTabId	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID             SelectedTabId;          \/\/ Selected tab\/window$/;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiID
SelectionEnd	build/_deps/imgui-proj-src/imgui.h	/^    int                 SelectionEnd;   \/\/                                      \/\/ Read-writ/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:int
SelectionStart	build/_deps/imgui-proj-src/imgui.h	/^    int                 SelectionStart; \/\/                                      \/\/ Read-writ/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:int
SelectionUserData	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiSelectionUserData      SelectionUserData;  \/\/ Set by SetNextItemSelectionUserData() (/;"	m	struct:ImGuiNextItemData	typeref:typename:ImGuiSelectionUserData
SelectionUserData	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiSelectionUserData SelectionUserData;\/\/I+Mov    \/\/ Best candidate SetNextItemSelecti/;"	m	struct:ImGuiNavItemData	typeref:typename:ImGuiSelectionUserData
SemaphoreCount	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.h	/^    uint32_t            SemaphoreCount;         \/\/ Number of simultaneous in-flight frames + 1/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:uint32_t
SemaphoreIndex	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.h	/^    uint32_t            SemaphoreIndex;         \/\/ Current set of swapchain wait semaphores we/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:uint32_t
Separator	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::Separator()$/;"	f	class:ImGui	typeref:typename:void
SeparatorEx	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::SeparatorEx(ImGuiSeparatorFlags flags, float thickness)$/;"	f	class:ImGui	typeref:typename:void
SeparatorMaxX	build/_deps/imgui-proj-src/imgui_internal.h	/^    float               SeparatorMaxX;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
SeparatorMinX	build/_deps/imgui-proj-src/imgui_internal.h	/^    float               SeparatorMinX;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
SeparatorText	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::SeparatorText(const char* label)$/;"	f	class:ImGui	typeref:typename:void
SeparatorTextAlign	build/_deps/imgui-proj-src/imgui.h	/^    ImVec2      SeparatorTextAlign;         \/\/ Alignment of text within the separator. Default/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
SeparatorTextBorderSize	build/_deps/imgui-proj-src/imgui.h	/^    float       SeparatorTextBorderSize;    \/\/ Thickkness of border in SeparatorText()$/;"	m	struct:ImGuiStyle	typeref:typename:float
SeparatorTextEx	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::SeparatorTextEx(ImGuiID id, const char* label, const char* label_end, float extra_w)$/;"	f	class:ImGui	typeref:typename:void
SeparatorTextPadding	build/_deps/imgui-proj-src/imgui.h	/^    ImVec2      SeparatorTextPadding;       \/\/ Horizontal offset of text from each edge of the/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
SetActiveID	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetActiveID(ImGuiID id, ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
SetActiveIdUsingAllKeyboardKeys	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetActiveIdUsingAllKeyboardKeys()$/;"	f	class:ImGui	typeref:typename:void
SetAllBits	build/_deps/imgui-proj-src/imgui_internal.h	/^    void            SetAllBits()                { memset(Storage, 255, sizeof(Storage)); }$/;"	f	struct:ImBitArray	typeref:typename:void
SetAllInt	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGuiStorage::SetAllInt(int v)$/;"	f	class:ImGuiStorage	typeref:typename:void
SetAllocatorFunctions	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetAllocatorFunctions(ImGuiMemAllocFunc alloc_func, ImGuiMemFreeFunc free_func, void/;"	f	class:ImGui	typeref:typename:void
SetAllocatorFunctions	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^void ImGuiFreeType::SetAllocatorFunctions(void* (*alloc_func)(size_t sz, void* user_data), void /;"	f	class:ImGuiFreeType	typeref:typename:void
SetAppAcceptingEvents	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGuiIO::SetAppAcceptingEvents(bool accepting_events)$/;"	f	class:ImGuiIO	typeref:typename:void
SetArenaBasePtr	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline void  SetArenaBasePtr(void* base_ptr)    { BasePtr = (char*)base_ptr; }$/;"	f	struct:ImSpanAllocator	typeref:typename:void
SetBit	build/_deps/imgui-proj-src/imgui.h	/^    inline void     SetBit(size_t n)        { int off = (int)(n >> 5); ImU32 mask = 1u << (n & 3/;"	f	struct:ImFontGlyphRangesBuilder	typeref:typename:void
SetBit	build/_deps/imgui-proj-src/imgui_internal.h	/^    void            SetBit(int n)               { IM_ASSERT(n < (Storage.Size << 5)); ImBitArray/;"	f	struct:ImBitVector	typeref:typename:void
SetBit	build/_deps/imgui-proj-src/imgui_internal.h	/^    void            SetBit(int n)               { n += OFFSET; IM_ASSERT(n >= 0 && n < BITCOUNT)/;"	f	struct:ImBitArray	typeref:typename:void
SetBitRange	build/_deps/imgui-proj-src/imgui_internal.h	/^    void            SetBitRange(int n, int n2)  { n += OFFSET; n2 += OFFSET; IM_ASSERT(n >= 0 &&/;"	f	struct:ImBitArray	typeref:typename:void
SetBool	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGuiStorage::SetBool(ImGuiID key, bool val)$/;"	f	class:ImGuiStorage	typeref:typename:void
SetCircleTessellationMaxError	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImDrawListSharedData::SetCircleTessellationMaxError(float max_error)$/;"	f	class:ImDrawListSharedData	typeref:typename:void
SetClipboardText	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetClipboardText(const char* text)$/;"	f	class:ImGui	typeref:typename:void
SetClipboardTextFn	build/_deps/imgui-proj-src/imgui.h	/^    void        (*SetClipboardTextFn)(void* user_data, const char* text);$/;"	m	struct:ImGuiIO	typeref:typename:void (*)(void * user_data,const char * text)
SetClipboardTextFn_DefaultImpl	build/_deps/imgui-proj-src/imgui.cpp	/^static void SetClipboardTextFn_DefaultImpl(void* user_data_ctx, const char* text)$/;"	f	typeref:typename:void	file:
SetClipboardTextFn_DefaultImpl	build/_deps/imgui-proj-src/imgui.cpp	/^static void SetClipboardTextFn_DefaultImpl(void*, const char* text)$/;"	f	typeref:typename:void	file:
SetColorEditOptions	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::SetColorEditOptions(ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:void
SetColumnOffset	build/_deps/imgui-proj-src/imgui_tables.cpp	/^void ImGui::SetColumnOffset(int column_index, float offset)$/;"	f	class:ImGui	typeref:typename:void
SetColumnWidth	build/_deps/imgui-proj-src/imgui_tables.cpp	/^void ImGui::SetColumnWidth(int column_index, float width)$/;"	f	class:ImGui	typeref:typename:void
SetCurrentChannel	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImDrawListSplitter::SetCurrentChannel(ImDrawList* draw_list, int idx)$/;"	f	class:ImDrawListSplitter	typeref:typename:void
SetCurrentContext	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetCurrentContext(ImGuiContext* ctx)$/;"	f	class:ImGui	typeref:typename:void
SetCurrentFont	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetCurrentFont(ImFont* font)$/;"	f	class:ImGui	typeref:typename:void
SetCurrentViewport	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetCurrentViewport(ImGuiWindow* current_window, ImGuiViewportP* viewport)$/;"	f	class:ImGui	typeref:typename:void
SetCurrentWindow	build/_deps/imgui-proj-src/imgui.cpp	/^static void SetCurrentWindow(ImGuiWindow* window)$/;"	f	typeref:typename:void	file:
SetCursorPos	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetCursorPos(const ImVec2& local_pos)$/;"	f	class:ImGui	typeref:typename:void
SetCursorPosX	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetCursorPosX(float x)$/;"	f	class:ImGui	typeref:typename:void
SetCursorPosY	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetCursorPosY(float y)$/;"	f	class:ImGui	typeref:typename:void
SetCursorScreenPos	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetCursorScreenPos(const ImVec2& pos)$/;"	f	class:ImGui	typeref:typename:void
SetDragDropPayload	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::SetDragDropPayload(const char* type, const void* data, size_t data_size, ImGuiCond c/;"	f	class:ImGui	typeref:typename:bool
SetFloat	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGuiStorage::SetFloat(ImGuiID key, float val)$/;"	f	class:ImGuiStorage	typeref:typename:void
SetFocusID	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetFocusID(ImGuiID id, ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
SetGlyphVisible	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImFont::SetGlyphVisible(ImWchar c, bool visible)$/;"	f	class:ImFont	typeref:typename:void
SetHSV	build/_deps/imgui-proj-src/imgui.h	/^    inline void    SetHSV(float h, float s, float v, float a = 1.0f){ ImGui::ColorConvertHSVtoRG/;"	f	struct:ImColor	typeref:typename:void
SetHoveredID	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetHoveredID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
SetInt	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGuiStorage::SetInt(ImGuiID key, int val)$/;"	f	class:ImGuiStorage	typeref:typename:void
SetItemAllowOverlap	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetItemAllowOverlap()$/;"	f	class:ImGui	typeref:typename:void
SetItemDefaultFocus	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetItemDefaultFocus()$/;"	f	class:ImGui	typeref:typename:void
SetItemKeyOwner	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetItemKeyOwner(ImGuiKey key, ImGuiInputFlags flags)$/;"	f	class:ImGui	typeref:typename:void
SetItemTooltip	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetItemTooltip(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
SetItemTooltipV	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetItemTooltipV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
SetItemUsingMouseWheel	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline void     SetItemUsingMouseWheel()                                            { SetIte/;"	f	namespace:ImGui	typeref:typename:void
SetKeyEventNativeData	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGuiIO::SetKeyEventNativeData(ImGuiKey key, int native_keycode, int native_scancode, int n/;"	f	class:ImGuiIO	typeref:typename:void
SetKeyOwner	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetKeyOwner(ImGuiKey key, ImGuiID owner_id, ImGuiInputFlags flags)$/;"	f	class:ImGui	typeref:typename:void
SetKeyOwnersForKeyChord	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetKeyOwnersForKeyChord(ImGuiKeyChord key_chord, ImGuiID owner_id, ImGuiInputFlags f/;"	f	class:ImGui	typeref:typename:void
SetKeyboardFocusHere	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetKeyboardFocusHere(int offset)$/;"	f	class:ImGui	typeref:typename:void
SetLastItemData	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetLastItemData(ImGuiID item_id, ImGuiItemFlags in_flags, ImGuiItemStatusFlags item_/;"	f	class:ImGui	typeref:typename:void
SetLocalFlags	build/_deps/imgui-proj-src/imgui_internal.h	/^    void                    SetLocalFlags(ImGuiDockNodeFlags flags) { LocalFlags = flags; Update/;"	f	struct:ImGuiDockNode	typeref:typename:void
SetMouseCursor	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetMouseCursor(ImGuiMouseCursor cursor_type)$/;"	f	class:ImGui	typeref:typename:void
SetNavFocusScope	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetNavFocusScope(ImGuiID focus_scope_id)$/;"	f	class:ImGui	typeref:typename:void
SetNavID	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetNavID(ImGuiID id, ImGuiNavLayer nav_layer, ImGuiID focus_scope_id, const ImRect& /;"	f	class:ImGui	typeref:typename:void
SetNavWindow	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetNavWindow(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
SetNextFrameWantCaptureKeyboard	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetNextFrameWantCaptureKeyboard(bool want_capture_keyboard)$/;"	f	class:ImGui	typeref:typename:void
SetNextFrameWantCaptureMouse	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetNextFrameWantCaptureMouse(bool want_capture_mouse)$/;"	f	class:ImGui	typeref:typename:void
SetNextItemAllowOverlap	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetNextItemAllowOverlap()$/;"	f	class:ImGui	typeref:typename:void
SetNextItemOpen	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::SetNextItemOpen(bool is_open, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetNextItemSelectionUserData	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::SetNextItemSelectionUserData(ImGuiSelectionUserData selection_user_data)$/;"	f	class:ImGui	typeref:typename:void
SetNextItemShortcut	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetNextItemShortcut(ImGuiKeyChord key_chord)$/;"	f	class:ImGui	typeref:typename:void
SetNextItemWidth	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetNextItemWidth(float item_width)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowBgAlpha	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetNextWindowBgAlpha(float alpha)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowClass	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetNextWindowClass(const ImGuiWindowClass* window_class)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowCollapsed	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetNextWindowCollapsed(bool collapsed, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowContentSize	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetNextWindowContentSize(const ImVec2& size)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowDockID	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetNextWindowDockID(ImGuiID id, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowFocus	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetNextWindowFocus()$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowPos	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetNextWindowPos(const ImVec2& pos, ImGuiCond cond, const ImVec2& pivot)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowScroll	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetNextWindowScroll(const ImVec2& scroll)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowSize	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetNextWindowSize(const ImVec2& size, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowSizeConstraints	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetNextWindowSizeConstraints(const ImVec2& size_min, const ImVec2& size_max, ImGuiSi/;"	f	class:ImGui	typeref:typename:void
SetNextWindowViewport	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetNextWindowViewport(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
SetPixelHeight	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^    void FreeTypeFont::SetPixelHeight(int pixel_height)$/;"	f	class:__anon9c8900c20110::FreeTypeFont	typeref:typename:void
SetPlatformImeDataFn	build/_deps/imgui-proj-src/imgui.h	/^    void        (*SetPlatformImeDataFn)(ImGuiViewport* viewport, ImGuiPlatformImeData* data);$/;"	m	struct:ImGuiIO	typeref:typename:void (*)(ImGuiViewport * viewport,ImGuiPlatformImeData * data)
SetPlatformImeDataFn_DefaultImpl	build/_deps/imgui-proj-src/imgui.cpp	/^static void SetPlatformImeDataFn_DefaultImpl(ImGuiViewport* viewport, ImGuiPlatformImeData* data/;"	f	typeref:typename:void	file:
SetPlatformImeDataFn_DefaultImpl	build/_deps/imgui-proj-src/imgui.cpp	/^static void SetPlatformImeDataFn_DefaultImpl(ImGuiViewport*, ImGuiPlatformImeData*) {}$/;"	f	typeref:typename:void	file:
SetScrollFromPosX	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetScrollFromPosX(ImGuiWindow* window, float local_x, float center_x_ratio)$/;"	f	class:ImGui	typeref:typename:void
SetScrollFromPosX	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetScrollFromPosX(float local_x, float center_x_ratio)$/;"	f	class:ImGui	typeref:typename:void
SetScrollFromPosY	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetScrollFromPosY(ImGuiWindow* window, float local_y, float center_y_ratio)$/;"	f	class:ImGui	typeref:typename:void
SetScrollFromPosY	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetScrollFromPosY(float local_y, float center_y_ratio)$/;"	f	class:ImGui	typeref:typename:void
SetScrollHereX	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetScrollHereX(float center_x_ratio)$/;"	f	class:ImGui	typeref:typename:void
SetScrollHereY	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetScrollHereY(float center_y_ratio)$/;"	f	class:ImGui	typeref:typename:void
SetScrollX	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetScrollX(ImGuiWindow* window, float scroll_x)$/;"	f	class:ImGui	typeref:typename:void
SetScrollX	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetScrollX(float scroll_x)$/;"	f	class:ImGui	typeref:typename:void
SetScrollY	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetScrollY(ImGuiWindow* window, float scroll_y)$/;"	f	class:ImGui	typeref:typename:void
SetScrollY	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetScrollY(float scroll_y)$/;"	f	class:ImGui	typeref:typename:void
SetShortcutRouting	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::SetShortcutRouting(ImGuiKeyChord key_chord, ImGuiID owner_id, ImGuiInputFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
SetState	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp	/^    void SetState(GLint index)$/;"	f	struct:ImGui_ImplOpenGL3_VtxAttribState	typeref:typename:void	file:
SetStateStorage	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetStateStorage(ImGuiStorage* tree)$/;"	f	class:ImGui	typeref:typename:void
SetTabItemClosed	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void    ImGui::SetTabItemClosed(const char* label)$/;"	f	class:ImGui	typeref:typename:void
SetTexID	build/_deps/imgui-proj-src/imgui.h	/^    void                        SetTexID(ImTextureID id)    { TexID = id; }$/;"	f	struct:ImFontAtlas	typeref:typename:void
SetToContextState	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGuiStackSizes::SetToContextState(ImGuiContext* ctx)$/;"	f	class:ImGuiStackSizes	typeref:typename:void
SetTooltip	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetTooltip(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
SetTooltipV	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetTooltipV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
SetVoidPtr	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGuiStorage::SetVoidPtr(ImGuiID key, void* val)$/;"	f	class:ImGuiStorage	typeref:typename:void
SetWindowClipRectBeforeSetChannel	build/_deps/imgui-proj-src/imgui_tables.cpp	/^void ImGui::SetWindowClipRectBeforeSetChannel(ImGuiWindow* window, const ImRect& clip_rect)$/;"	f	class:ImGui	typeref:typename:void
SetWindowCollapsed	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetWindowCollapsed(ImGuiWindow* window, bool collapsed, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowCollapsed	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetWindowCollapsed(bool collapsed, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowCollapsed	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetWindowCollapsed(const char* name, bool collapsed, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowCollapsedAllowFlags	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiCond               SetWindowCollapsedAllowFlags : 8;   \/\/ store acceptable condition /;"	m	struct:ImGuiWindow	typeref:typename:ImGuiCond:8
SetWindowConditionAllowFlags	build/_deps/imgui-proj-src/imgui.cpp	/^static void SetWindowConditionAllowFlags(ImGuiWindow* window, ImGuiCond flags, bool enabled)$/;"	f	typeref:typename:void	file:
SetWindowDock	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetWindowDock(ImGuiWindow* window, ImGuiID dock_id, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowDockAllowFlags	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiCond               SetWindowDockAllowFlags : 8;        \/\/ store acceptable condition /;"	m	struct:ImGuiWindow	typeref:typename:ImGuiCond:8
SetWindowFocus	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetWindowFocus()$/;"	f	class:ImGui	typeref:typename:void
SetWindowFocus	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetWindowFocus(const char* name)$/;"	f	class:ImGui	typeref:typename:void
SetWindowFontScale	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetWindowFontScale(float scale)$/;"	f	class:ImGui	typeref:typename:void
SetWindowHiddenAndSkipItemsForCurrentFrame	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetWindowHiddenAndSkipItemsForCurrentFrame(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
SetWindowHitTestHole	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetWindowHitTestHole(ImGuiWindow* window, const ImVec2& pos, const ImVec2& size)$/;"	f	class:ImGui	typeref:typename:void
SetWindowParentWindowForFocusRoute	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline void             SetWindowParentWindowForFocusRoute(ImGuiWindow* window, ImGuiWindow*/;"	f	namespace:ImGui	typeref:typename:void
SetWindowPos	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetWindowPos(ImGuiWindow* window, const ImVec2& pos, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowPos	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetWindowPos(const ImVec2& pos, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowPos	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetWindowPos(const char* name, const ImVec2& pos, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowPosAllowFlags	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiCond               SetWindowPosAllowFlags : 8;         \/\/ store acceptable condition /;"	m	struct:ImGuiWindow	typeref:typename:ImGuiCond:8
SetWindowPosPivot	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2                  SetWindowPosPivot;                  \/\/ store window pivot for posi/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
SetWindowPosVal	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2                  SetWindowPosVal;                    \/\/ store window position when /;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
SetWindowSize	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetWindowSize(ImGuiWindow* window, const ImVec2& size, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowSize	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetWindowSize(const ImVec2& size, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowSize	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetWindowSize(const char* name, const ImVec2& size, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowSizeAllowFlags	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiCond               SetWindowSizeAllowFlags : 8;        \/\/ store acceptable condition /;"	m	struct:ImGuiWindow	typeref:typename:ImGuiCond:8
SetWindowViewport	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::SetWindowViewport(ImGuiWindow* window, ImGuiViewportP* viewport)$/;"	f	class:ImGui	typeref:typename:void
SettingsDirtyTimer	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   SettingsDirtyTimer;                 \/\/ Save .ini Settings to memor/;"	m	struct:ImGuiContext	typeref:typename:float
SettingsHandlers	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVector<ImGuiSettingsHandler>      SettingsHandlers;       \/\/ List of .ini settings handl/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiSettingsHandler>
SettingsIniData	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTextBuffer         SettingsIniData;                    \/\/ In memory .ini settings$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiTextBuffer
SettingsLoaded	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    SettingsLoaded;$/;"	m	struct:ImGuiContext	typeref:typename:bool
SettingsLoadedFlags	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTableFlags             SettingsLoadedFlags;        \/\/ Which data were loaded from the/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableFlags
SettingsOffset	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                         SettingsOffset;             \/\/ Offset in g.SettingsTables$/;"	m	struct:ImGuiTable	typeref:typename:int
SettingsOffset	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                     SettingsOffset;                     \/\/ Offset into SettingsWindows/;"	m	struct:ImGuiWindow	typeref:typename:int
SettingsTables	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImChunkStream<ImGuiTableSettings>   SettingsTables;         \/\/ ImGuiTable .ini settings en/;"	m	struct:ImGuiContext	typeref:typename:ImChunkStream<ImGuiTableSettings>
SettingsWindows	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImChunkStream<ImGuiWindowSettings>  SettingsWindows;        \/\/ ImGuiWindow .ini settings e/;"	m	struct:ImGuiContext	typeref:typename:ImChunkStream<ImGuiWindowSettings>
SetupVulkan	build/_deps/imgui-proj-src/examples/example_glfw_vulkan/main.cpp	/^static void SetupVulkan(ImVector<const char*> instance_extensions)$/;"	f	typeref:typename:void	file:
SetupVulkan	build/_deps/imgui-proj-src/examples/example_sdl2_vulkan/main.cpp	/^static void SetupVulkan(ImVector<const char*> instance_extensions)$/;"	f	typeref:typename:void	file:
SetupVulkanWindow	build/_deps/imgui-proj-src/examples/example_glfw_vulkan/main.cpp	/^static void SetupVulkanWindow(ImGui_ImplVulkanH_Window* wd, VkSurfaceKHR surface, int width, int/;"	f	typeref:typename:void	file:
SetupVulkanWindow	build/_deps/imgui-proj-src/examples/example_sdl2_vulkan/main.cpp	/^static void SetupVulkanWindow(ImGui_ImplVulkanH_Window* wd, VkSurfaceKHR surface, int width, int/;"	f	typeref:typename:void	file:
SetupVulkan_SelectPhysicalDevice	build/_deps/imgui-proj-src/examples/example_glfw_vulkan/main.cpp	/^static VkPhysicalDevice SetupVulkan_SelectPhysicalDevice()$/;"	f	typeref:typename:VkPhysicalDevice	file:
SetupVulkan_SelectPhysicalDevice	build/_deps/imgui-proj-src/examples/example_sdl2_vulkan/main.cpp	/^static VkPhysicalDevice SetupVulkan_SelectPhysicalDevice()$/;"	f	typeref:typename:VkPhysicalDevice	file:
ShadeVertsLinearColorGradientKeepAlpha	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImGui::ShadeVertsLinearColorGradientKeepAlpha(ImDrawList* draw_list, int vert_start_idx, in/;"	f	class:ImGui	typeref:typename:void
ShadeVertsLinearUV	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImGui::ShadeVertsLinearUV(ImDrawList* draw_list, int vert_start_idx, int vert_end_idx, cons/;"	f	class:ImGui	typeref:typename:void
ShadeVertsTransformPos	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImGui::ShadeVertsTransformPos(ImDrawList* draw_list, int vert_start_idx, int vert_end_idx, /;"	f	class:ImGui	typeref:typename:void
ShaderHandle	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp	/^    GLuint          ShaderHandle;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:GLuint	file:
ShaderModuleFrag	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^    VkShaderModule              ShaderModuleFrag;$/;"	m	struct:ImGui_ImplVulkan_Data	typeref:typename:VkShaderModule	file:
ShaderModuleVert	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^    VkShaderModule              ShaderModuleVert;$/;"	m	struct:ImGui_ImplVulkan_Data	typeref:typename:VkShaderModule	file:
ShaderSource	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^        PFNGLSHADERSOURCEPROC             ShaderSource;$/;"	m	struct:ImGL3WProcs::__anon6bce6ebe0108	typeref:typename:PFNGLSHADERSOURCEPROC
SharedFlags	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDockNodeFlags      SharedFlags;                \/\/ (Write) Flags shared by all nodes o/;"	m	struct:ImGuiDockNode	typeref:typename:ImGuiDockNodeFlags
SharedMetalContext	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^    MetalContext*               SharedMetalContext;$/;"	E	struct:ImGui_ImplMetal_Data
Shortcut	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::Shortcut(ImGuiKeyChord key_chord, ImGuiID owner_id, ImGuiInputFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
Shortcut	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiKeyChord               Shortcut;           \/\/ Set by SetNextItemShortcut()$/;"	m	struct:ImGuiNextItemData	typeref:typename:ImGuiKeyChord
ShowAboutWindow	build/_deps/imgui-proj-src/imgui_demo.cpp	/^void ImGui::ShowAboutWindow(bool* p_open)$/;"	f	class:ImGui	typeref:typename:void
ShowAboutWindow	build/_deps/imgui-proj-src/imgui_demo.cpp	/^void ImGui::ShowAboutWindow(bool*) {}$/;"	f	class:ImGui	typeref:typename:void
ShowAtlasTintedWithTextColor	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool        ShowAtlasTintedWithTextColor = false;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:bool
ShowDebugLog	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool        ShowDebugLog = false;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:bool
ShowDebugLogFlag	build/_deps/imgui-proj-src/imgui.cpp	/^static void ShowDebugLogFlag(const char* name, ImGuiDebugLogFlags flags)$/;"	f	typeref:typename:void	file:
ShowDebugLogWindow	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::ShowDebugLogWindow(bool* p_open)$/;"	f	class:ImGui	typeref:typename:void
ShowDebugLogWindow	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::ShowDebugLogWindow(bool*) {}$/;"	f	class:ImGui	typeref:typename:void
ShowDemoWindow	build/_deps/imgui-proj-src/imgui_demo.cpp	/^void ImGui::ShowDemoWindow(bool* p_open)$/;"	f	class:ImGui	typeref:typename:void
ShowDemoWindow	build/_deps/imgui-proj-src/imgui_demo.cpp	/^void ImGui::ShowDemoWindow(bool*) {}$/;"	f	class:ImGui	typeref:typename:void
ShowDemoWindowColumns	build/_deps/imgui-proj-src/imgui_demo.cpp	/^static void ShowDemoWindowColumns()$/;"	f	typeref:typename:void	file:
ShowDemoWindowInputs	build/_deps/imgui-proj-src/imgui_demo.cpp	/^static void ShowDemoWindowInputs()$/;"	f	typeref:typename:void	file:
ShowDemoWindowLayout	build/_deps/imgui-proj-src/imgui_demo.cpp	/^static void ShowDemoWindowLayout()$/;"	f	typeref:typename:void	file:
ShowDemoWindowPopups	build/_deps/imgui-proj-src/imgui_demo.cpp	/^static void ShowDemoWindowPopups()$/;"	f	typeref:typename:void	file:
ShowDemoWindowTables	build/_deps/imgui-proj-src/imgui_demo.cpp	/^static void ShowDemoWindowTables()$/;"	f	typeref:typename:void	file:
ShowDemoWindowWidgets	build/_deps/imgui-proj-src/imgui_demo.cpp	/^static void ShowDemoWindowWidgets()$/;"	f	typeref:typename:void	file:
ShowDockingDisabledMessage	build/_deps/imgui-proj-src/imgui_demo.cpp	/^static void ShowDockingDisabledMessage()$/;"	f	typeref:typename:void	file:
ShowDockingNodes	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool        ShowDockingNodes = false;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:bool
ShowDrawCmdBoundingBoxes	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool        ShowDrawCmdBoundingBoxes = true;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:bool
ShowDrawCmdMesh	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool        ShowDrawCmdMesh = true;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:bool
ShowExampleAppAutoResize	build/_deps/imgui-proj-src/imgui_demo.cpp	/^static void ShowExampleAppAutoResize(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppConsole	build/_deps/imgui-proj-src/imgui_demo.cpp	/^static void ShowExampleAppConsole(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppConstrainedResize	build/_deps/imgui-proj-src/imgui_demo.cpp	/^static void ShowExampleAppConstrainedResize(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppCustomRendering	build/_deps/imgui-proj-src/imgui_demo.cpp	/^static void ShowExampleAppCustomRendering(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppDockSpace	build/_deps/imgui-proj-src/imgui_demo.cpp	/^void ShowExampleAppDockSpace(bool* p_open)$/;"	f	typeref:typename:void
ShowExampleAppDocuments	build/_deps/imgui-proj-src/imgui_demo.cpp	/^void ShowExampleAppDocuments(bool* p_open)$/;"	f	typeref:typename:void
ShowExampleAppFullscreen	build/_deps/imgui-proj-src/imgui_demo.cpp	/^static void ShowExampleAppFullscreen(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppLayout	build/_deps/imgui-proj-src/imgui_demo.cpp	/^static void ShowExampleAppLayout(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppLog	build/_deps/imgui-proj-src/imgui_demo.cpp	/^static void ShowExampleAppLog(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppLongText	build/_deps/imgui-proj-src/imgui_demo.cpp	/^static void ShowExampleAppLongText(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppMainMenuBar	build/_deps/imgui-proj-src/imgui_demo.cpp	/^static void ShowExampleAppMainMenuBar()$/;"	f	typeref:typename:void	file:
ShowExampleAppPropertyEditor	build/_deps/imgui-proj-src/imgui_demo.cpp	/^static void ShowExampleAppPropertyEditor(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppSimpleOverlay	build/_deps/imgui-proj-src/imgui_demo.cpp	/^static void ShowExampleAppSimpleOverlay(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppWindowTitles	build/_deps/imgui-proj-src/imgui_demo.cpp	/^static void ShowExampleAppWindowTitles(bool*)$/;"	f	typeref:typename:void	file:
ShowExampleMenuFile	build/_deps/imgui-proj-src/imgui_demo.cpp	/^static void ShowExampleMenuFile()$/;"	f	typeref:typename:void	file:
ShowFontAtlas	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::ShowFontAtlas(ImFontAtlas* atlas)$/;"	f	class:ImGui	typeref:typename:void
ShowFontAtlas	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::ShowFontAtlas(ImFontAtlas*) {}$/;"	f	class:ImGui	typeref:typename:void
ShowFontSelector	build/_deps/imgui-proj-src/imgui_demo.cpp	/^void ImGui::ShowFontSelector(const char* label)$/;"	f	class:ImGui	typeref:typename:void
ShowIDStackTool	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool        ShowIDStackTool = false;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:bool
ShowIDStackToolWindow	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::ShowIDStackToolWindow(bool* p_open)$/;"	f	class:ImGui	typeref:typename:void
ShowIDStackToolWindow	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::ShowIDStackToolWindow(bool*) {}$/;"	f	class:ImGui	typeref:typename:void
ShowMetricsWindow	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::ShowMetricsWindow(bool* p_open)$/;"	f	class:ImGui	typeref:typename:void
ShowMetricsWindow	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::ShowMetricsWindow(bool*) {}$/;"	f	class:ImGui	typeref:typename:void
ShowPlaceholderObject	build/_deps/imgui-proj-src/imgui_demo.cpp	/^static void ShowPlaceholderObject(const char* prefix, int uid)$/;"	f	typeref:typename:void	file:
ShowSoftKeyboardInput	build/_deps/imgui-proj-src/examples/example_android_opengl3/main.cpp	/^static int ShowSoftKeyboardInput()$/;"	f	typeref:typename:int	file:
ShowStackToolWindow	build/_deps/imgui-proj-src/imgui.h	/^    static inline void  ShowStackToolWindow(bool* p_open = NULL)                            { Sh/;"	f	namespace:ImGui	typeref:typename:void
ShowStyleEditor	build/_deps/imgui-proj-src/imgui_demo.cpp	/^void ImGui::ShowStyleEditor(ImGuiStyle* ref)$/;"	f	class:ImGui	typeref:typename:void
ShowStyleEditor	build/_deps/imgui-proj-src/imgui_demo.cpp	/^void ImGui::ShowStyleEditor(ImGuiStyle*) {}$/;"	f	class:ImGui	typeref:typename:void
ShowStyleSelector	build/_deps/imgui-proj-src/imgui_demo.cpp	/^bool ImGui::ShowStyleSelector(const char* label)$/;"	f	class:ImGui	typeref:typename:bool
ShowTableColumnsStatusFlags	build/_deps/imgui-proj-src/imgui_demo.cpp	/^static void ShowTableColumnsStatusFlags(ImGuiTableColumnFlags flags)$/;"	f	typeref:typename:void	file:
ShowTablesRects	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool        ShowTablesRects = false;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:bool
ShowTablesRectsType	build/_deps/imgui-proj-src/imgui_internal.h	/^    int         ShowTablesRectsType = -1;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:int
ShowTextEncodingViewer	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool        ShowTextEncodingViewer = false;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:bool
ShowUserGuide	build/_deps/imgui-proj-src/imgui_demo.cpp	/^void ImGui::ShowUserGuide() {}$/;"	f	class:ImGui	typeref:typename:void
ShowUserGuide	build/_deps/imgui-proj-src/imgui_demo.cpp	/^void ImGui::ShowUserGuide()$/;"	f	class:ImGui	typeref:typename:void
ShowWindowsBeginOrder	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool        ShowWindowsBeginOrder = false;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:bool
ShowWindowsRects	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool        ShowWindowsRects = false;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:bool
ShowWindowsRectsType	build/_deps/imgui-proj-src/imgui_internal.h	/^    int         ShowWindowsRectsType = -1;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:int
ShrinkWidthBuffer	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVector<ImGuiShrinkWidthItem>  ShrinkWidthBuffer;$/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiShrinkWidthItem>
ShrinkWidthItemComparer	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static int IMGUI_CDECL ShrinkWidthItemComparer(const void* lhs, const void* rhs)$/;"	f	typeref:typename:int IMGUI_CDECL	file:
ShrinkWidths	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::ShrinkWidths(ImGuiShrinkWidthItem* items, int count, float width_excess)$/;"	f	class:ImGui	typeref:typename:void
Shutdown	build/_deps/imgui-proj-src/examples/example_android_opengl3/main.cpp	/^void Shutdown()$/;"	f	typeref:typename:void
Shutdown	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::Shutdown()$/;"	f	class:ImGui	typeref:typename:void
Sin	build/_deps/imgui-proj-src/imgui_demo.cpp	/^            static float Sin(void*, int i) { return sinf(i * 0.1f); }$/;"	f	struct:ShowDemoWindowWidgets::Funcs	typeref:typename:float	file:
SingleCharMode	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    SingleCharMode;     \/\/ Notify when buffer contains same character /;"	m	struct:ImGuiTypingSelectRequest	typeref:typename:bool
SingleCharModeLock	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool            SingleCharModeLock = false; \/\/ After a certain single char repeat count we/;"	m	struct:ImGuiTypingSelectState	typeref:typename:bool
SingleCharSize	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImS8                    SingleCharSize;     \/\/ Length in bytes of first letter codepoint (/;"	m	struct:ImGuiTypingSelectRequest	typeref:typename:ImS8
Size	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp	/^    GLint   Enabled, Size, Type, Normalized, Stride;$/;"	m	struct:ImGui_ImplOpenGL3_VtxAttribState	typeref:typename:GLint	file:
Size	build/_deps/imgui-proj-src/imgui.cpp	/^    ImVec2ih            Size;$/;"	m	struct:ImGuiDockNodeSettings	typeref:typename:ImVec2ih	file:
Size	build/_deps/imgui-proj-src/imgui.h	/^    ImVec2              Size;                   \/\/ Main Area: Size of the viewport.$/;"	m	struct:ImGuiViewport	typeref:typename:ImVec2
Size	build/_deps/imgui-proj-src/imgui.h	/^    int                 Size;$/;"	m	struct:ImVector	typeref:typename:int
Size	build/_deps/imgui-proj-src/imgui_demo.cpp	/^                int             Size;$/;"	m	struct:ShowDemoWindowTables::MyTreeNode	typeref:typename:int	file:
Size	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2                  Size;                               \/\/ Current size (==SizeFull or/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
Size	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2                  Size;                       \/\/ Current size$/;"	m	struct:ImGuiDockNode	typeref:typename:ImVec2
Size	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2ih    Size;$/;"	m	struct:ImGuiWindowSettings	typeref:typename:ImVec2ih
Size	build/_deps/imgui-proj-src/imgui_internal.h	/^    size_t      Size;           \/\/ Size in bytes$/;"	m	struct:ImGuiDataTypeInfo	typeref:typename:size_t
Size	imgui.ini	/^Size=1280,720$/;"	k	section:Window
Size	imgui.ini	/^Size=191,48$/;"	k	section:Window
Size	imgui.ini	/^Size=400,400$/;"	k	section:Window
Size	imgui.ini	/^Size=550,680$/;"	k	section:Window
SizeCallback	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiSizeCallback           SizeCallback;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImGuiSizeCallback
SizeCallbackUserData	build/_deps/imgui-proj-src/imgui_internal.h	/^    void*                       SizeCallbackUserData;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:void *
SizeCond	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiCond                   SizeCond;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImGuiCond
SizeConstraintRect	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImRect                      SizeConstraintRect;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImRect
SizeFull	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2                  SizeFull;                           \/\/ Size when non collapsed$/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
SizeOfBeginPopupStack	build/_deps/imgui-proj-src/imgui_internal.h	/^    short   SizeOfBeginPopupStack;$/;"	m	struct:ImGuiStackSizes	typeref:typename:short
SizeOfColorStack	build/_deps/imgui-proj-src/imgui_internal.h	/^    short   SizeOfColorStack;$/;"	m	struct:ImGuiStackSizes	typeref:typename:short
SizeOfDisabledStack	build/_deps/imgui-proj-src/imgui_internal.h	/^    short   SizeOfDisabledStack;$/;"	m	struct:ImGuiStackSizes	typeref:typename:short
SizeOfFocusScopeStack	build/_deps/imgui-proj-src/imgui_internal.h	/^    short   SizeOfFocusScopeStack;$/;"	m	struct:ImGuiStackSizes	typeref:typename:short
SizeOfFontStack	build/_deps/imgui-proj-src/imgui_internal.h	/^    short   SizeOfFontStack;$/;"	m	struct:ImGuiStackSizes	typeref:typename:short
SizeOfGroupStack	build/_deps/imgui-proj-src/imgui_internal.h	/^    short   SizeOfGroupStack;$/;"	m	struct:ImGuiStackSizes	typeref:typename:short
SizeOfIDStack	build/_deps/imgui-proj-src/imgui_internal.h	/^    short   SizeOfIDStack;$/;"	m	struct:ImGuiStackSizes	typeref:typename:short
SizeOfItemFlagsStack	build/_deps/imgui-proj-src/imgui_internal.h	/^    short   SizeOfItemFlagsStack;$/;"	m	struct:ImGuiStackSizes	typeref:typename:short
SizeOfStyleVarStack	build/_deps/imgui-proj-src/imgui_internal.h	/^    short   SizeOfStyleVarStack;$/;"	m	struct:ImGuiStackSizes	typeref:typename:short
SizePixels	build/_deps/imgui-proj-src/imgui.h	/^    float           SizePixels;             \/\/          \/\/ Size in pixels for rasterizer (mo/;"	m	struct:ImFontConfig	typeref:typename:float
SizeRef	build/_deps/imgui-proj-src/imgui.cpp	/^    ImVec2ih            SizeRef;$/;"	m	struct:ImGuiDockNodeSettings	typeref:typename:ImVec2ih	file:
SizeRef	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2                  SizeRef;                    \/\/ [Split node only] Last explicitly w/;"	m	struct:ImGuiDockNode	typeref:typename:ImVec2
SizeVal	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2                      SizeVal;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImVec2
Sizes	build/_deps/imgui-proj-src/imgui_internal.h	/^    int     Sizes[CHUNKS];$/;"	m	struct:ImSpanAllocator	typeref:typename:int[]
SkipItems	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    SkipItems;                          \/\/ Set when items can safely b/;"	m	struct:ImGuiWindow	typeref:typename:bool
SliderAngle	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::SliderAngle(const char* label, float* v_rad, float v_degrees_min, float v_degrees_ma/;"	f	class:ImGui	typeref:typename:bool
SliderBehavior	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::SliderBehavior(const ImRect& bb, ImGuiID id, ImGuiDataType data_type, void* p_v, con/;"	f	class:ImGui	typeref:typename:bool
SliderBehaviorT	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::SliderBehaviorT(const ImRect& bb, ImGuiID id, ImGuiDataType data_type, TYPE* v, cons/;"	f	class:ImGui	typeref:typename:bool
SliderCurrentAccum	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   SliderCurrentAccum;                 \/\/ Accumulated slider delta wh/;"	m	struct:ImGuiContext	typeref:typename:float
SliderCurrentAccumDirty	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    SliderCurrentAccumDirty;            \/\/ Has the accumulated slider /;"	m	struct:ImGuiContext	typeref:typename:bool
SliderFloat	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::SliderFloat(const char* label, float* v, float v_min, float v_max, const char* forma/;"	f	class:ImGui	typeref:typename:bool
SliderFloat2	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::SliderFloat2(const char* label, float v[2], float v_min, float v_max, const char* fo/;"	f	class:ImGui	typeref:typename:bool
SliderFloat3	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::SliderFloat3(const char* label, float v[3], float v_min, float v_max, const char* fo/;"	f	class:ImGui	typeref:typename:bool
SliderFloat4	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::SliderFloat4(const char* label, float v[4], float v_min, float v_max, const char* fo/;"	f	class:ImGui	typeref:typename:bool
SliderGrabClickOffset	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   SliderGrabClickOffset;$/;"	m	struct:ImGuiContext	typeref:typename:float
SliderInt	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::SliderInt(const char* label, int* v, int v_min, int v_max, const char* format, ImGui/;"	f	class:ImGui	typeref:typename:bool
SliderInt2	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::SliderInt2(const char* label, int v[2], int v_min, int v_max, const char* format, Im/;"	f	class:ImGui	typeref:typename:bool
SliderInt3	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::SliderInt3(const char* label, int v[3], int v_min, int v_max, const char* format, Im/;"	f	class:ImGui	typeref:typename:bool
SliderInt4	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::SliderInt4(const char* label, int v[4], int v_min, int v_max, const char* format, Im/;"	f	class:ImGui	typeref:typename:bool
SliderScalar	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::SliderScalar(const char* label, ImGuiDataType data_type, void* p_data, const void* p/;"	f	class:ImGui	typeref:typename:bool
SliderScalarN	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::SliderScalarN(const char* label, ImGuiDataType data_type, void* v, int components, c/;"	f	class:ImGui	typeref:typename:bool
SmallButton	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::SmallButton(const char* label)$/;"	f	class:ImGui	typeref:typename:bool
SortDirection	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiSortDirection          SortDirection : 8;  \/\/ ImGuiSortDirection_Ascending or ImGuiSo/;"	m	struct:ImGuiTableColumnSortSpecs	typeref:typename:ImGuiSortDirection:8
SortDirection	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImU8                    SortDirection : 2;              \/\/ ImGuiSortDirection_Ascending or/;"	m	struct:ImGuiTableColumn	typeref:typename:ImU8:2
SortDirection	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImU8                    SortDirection : 2;$/;"	m	struct:ImGuiTableColumnSettings	typeref:typename:ImU8:2
SortDirectionsAvailCount	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImU8                    SortDirectionsAvailCount : 2;   \/\/ Number of available sort direct/;"	m	struct:ImGuiTableColumn	typeref:typename:ImU8:2
SortDirectionsAvailList	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImU8                    SortDirectionsAvailList;        \/\/ Ordered list of available sort /;"	m	struct:ImGuiTableColumn	typeref:typename:ImU8
SortDirectionsAvailMask	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImU8                    SortDirectionsAvailMask : 4;    \/\/ Mask of available sort directio/;"	m	struct:ImGuiTableColumn	typeref:typename:ImU8:4
SortOrder	build/_deps/imgui-proj-src/imgui.h	/^    ImS16                       SortOrder;          \/\/ Index within parent ImGuiTableSortSpecs/;"	m	struct:ImGuiTableColumnSortSpecs	typeref:typename:ImS16
SortOrder	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTableColumnIdx     SortOrder;                      \/\/ Index of this column within sor/;"	m	struct:ImGuiTableColumn	typeref:typename:ImGuiTableColumnIdx
SortOrder	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTableColumnIdx     SortOrder;$/;"	m	struct:ImGuiTableColumnSettings	typeref:typename:ImGuiTableColumnIdx
SortSpecs	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTableSortSpecs         SortSpecs;                  \/\/ Public facing sorts specs, this/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableSortSpecs
SortSpecsCount	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTableColumnIdx         SortSpecsCount;$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
SortSpecsMulti	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVector<ImGuiTableColumnSortSpecs> SortSpecsMulti;     \/\/ FIXME-OPT: Using a small-vector/;"	m	struct:ImGuiTable	typeref:typename:ImVector<ImGuiTableColumnSortSpecs>
SortSpecsSingle	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTableColumnSortSpecs   SortSpecsSingle;$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnSortSpecs
SortWithSortSpecs	build/_deps/imgui-proj-src/imgui_demo.cpp	/^    static void SortWithSortSpecs(ImGuiTableSortSpecs* sort_specs, MyItem* items, int items_coun/;"	f	struct:__anon1b6430950210::MyItem	typeref:typename:void	file:
Source	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiInputSource                Source;$/;"	m	struct:ImGuiInputEvent	typeref:typename:ImGuiInputSource
SourceId	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiID         SourceId;           \/\/ Source item id$/;"	m	struct:ImGuiPayload	typeref:typename:ImGuiID
SourceParentId	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiID         SourceParentId;     \/\/ Source parent id (if available)$/;"	m	struct:ImGuiPayload	typeref:typename:ImGuiID
Spacing	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImU16       Spacing;$/;"	m	struct:ImGuiMenuColumns	typeref:typename:ImU16
Spacing	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^    float               Spacing;                \/\/ Horizontal spacing at the end of the sectio/;"	m	struct:ImGuiTabBarSection	typeref:typename:float	file:
Spacing	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::Spacing()$/;"	f	class:ImGui	typeref:typename:void
Specs	build/_deps/imgui-proj-src/imgui.h	/^    const ImGuiTableColumnSortSpecs* Specs;     \/\/ Pointer to sort spec array.$/;"	m	struct:ImGuiTableSortSpecs	typeref:typename:const ImGuiTableColumnSortSpecs *
SpecsCount	build/_deps/imgui-proj-src/imgui.h	/^    int                         SpecsCount;     \/\/ Sort spec count. Most often 1. May be > 1 w/;"	m	struct:ImGuiTableSortSpecs	typeref:typename:int
SpecsDirty	build/_deps/imgui-proj-src/imgui.h	/^    bool                        SpecsDirty;     \/\/ Set to true when specs have changed since l/;"	m	struct:ImGuiTableSortSpecs	typeref:typename:bool
Split	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImDrawListSplitter::Split(ImDrawList* draw_list, int channels_count)$/;"	f	class:ImDrawListSplitter	typeref:typename:void
SplitAxis	build/_deps/imgui-proj-src/imgui.cpp	/^    signed char         SplitAxis;$/;"	m	struct:ImGuiDockNodeSettings	typeref:typename:signed char	file:
SplitAxis	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiAxis               SplitAxis;                  \/\/ [Split node only] Split axis (X or /;"	m	struct:ImGuiDockNode	typeref:typename:ImGuiAxis
SplitDir	build/_deps/imgui-proj-src/imgui.cpp	/^    ImGuiDir        SplitDir;$/;"	m	struct:ImGuiDockPreviewData	typeref:typename:ImGuiDir	file:
SplitNode	build/_deps/imgui-proj-src/imgui.cpp	/^    ImGuiDockNode*  SplitNode;$/;"	m	struct:ImGuiDockPreviewData	typeref:typename:ImGuiDockNode *	file:
SplitRatio	build/_deps/imgui-proj-src/imgui.cpp	/^    float           SplitRatio;$/;"	m	struct:ImGuiDockPreviewData	typeref:typename:float	file:
Splitter	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImDrawListSplitter  Splitter;$/;"	m	struct:ImGuiOldColumns	typeref:typename:ImDrawListSplitter
SplitterBehavior	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::SplitterBehavior(const ImRect& bb, ImGuiID id, ImGuiAxis axis, float* size1, float* /;"	f	class:ImGui	typeref:typename:bool
Sponsors	build/_deps/imgui-proj-src/docs/README.md	/^Sponsors$/;"	s
Square	build/_deps/imgui-proj-src/imgui_demo.cpp	/^        static void Square(ImGuiSizeCallbackData* data)$/;"	f	struct:ShowExampleAppConstrainedResize::CustomConstraints	typeref:typename:void	file:
SrcCount	build/_deps/imgui-proj-src/imgui_draw.cpp	/^    int                 SrcCount;           \/\/ Number of source fonts targeting this destinati/;"	m	struct:ImFontBuildDstData	typeref:typename:int	file:
SrcCount	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^    int                 SrcCount;           \/\/ Number of source fonts targeting this destinati/;"	m	struct:ImFontBuildDstDataFT	typeref:typename:int	file:
SrcRanges	build/_deps/imgui-proj-src/imgui_draw.cpp	/^    const ImWchar*      SrcRanges;          \/\/ Ranges as requested by user (user is allowed to/;"	m	struct:ImFontBuildSrcData	typeref:typename:const ImWchar *	file:
SrcRanges	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^    const ImWchar*      SrcRanges;          \/\/ Ranges as requested by user (user is allowed to/;"	m	struct:ImFontBuildSrcDataFT	typeref:typename:const ImWchar *	file:
StackLevel	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                     StackLevel;                 \/\/ -1: query stack and resize Results,/;"	m	struct:ImGuiIDStackTool	typeref:typename:int
StackSizesOnBegin	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiStackSizes     StackSizesOnBegin;      \/\/ Store size of various stacks for asserting$/;"	m	struct:ImGuiWindowStackData	typeref:typename:ImGuiStackSizes
StackToolFormatLevelInfo	build/_deps/imgui-proj-src/imgui.cpp	/^static int StackToolFormatLevelInfo(ImGuiIDStackTool* tool, int n, bool format_for_ui, char* buf/;"	f	typeref:typename:int	file:
StartMouseMovingWindow	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::StartMouseMovingWindow(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
StartMouseMovingWindowOrNode	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::StartMouseMovingWindowOrNode(ImGuiWindow* window, ImGuiDockNode* node, bool undock)$/;"	f	class:ImGui	typeref:typename:void
StartPosY	build/_deps/imgui-proj-src/imgui.h	/^    float           StartPosY;          \/\/ [Internal] Cursor position at the time of Begin() o/;"	m	struct:ImGuiListClipper	typeref:typename:float
State	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDockNodeState      State;$/;"	m	struct:ImGuiDockNode	typeref:typename:ImGuiDockNodeState
StateStorage	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiStorage            StateStorage;$/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiStorage
StateStorage	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiStorage*           StateStorage;           \/\/ Current persistent per-window storage (/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiStorage *
StaticFunc	build/_deps/imgui-proj-src/imgui.cpp	/^    struct StaticFunc$/;"	s	function:ImGuiStorage::BuildSortByKey	file:
StatusFlags	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiItemStatusFlags    StatusFlags;        \/\/ See ImGuiItemStatusFlags_$/;"	m	struct:ImGuiLastItemData	typeref:typename:ImGuiItemStatusFlags
Stb	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImStb::STB_TexteditState Stb;                   \/\/ state for stb_textedit.h$/;"	m	struct:ImGuiInputTextState	typeref:typename:ImStb::STB_TexteditState
StbFindState	build/_deps/imgui-proj-src/imstb_textedit.h	/^} StbFindState;$/;"	t	typeref:struct:__anon0ee941840508
StbTexteditRow	build/_deps/imgui-proj-src/imstb_textedit.h	/^} StbTexteditRow;$/;"	t	typeref:struct:__anon0ee941840408
StbUndoRecord	build/_deps/imgui-proj-src/imstb_textedit.h	/^} StbUndoRecord;$/;"	t	typeref:struct:__anon0ee941840108
StbUndoState	build/_deps/imgui-proj-src/imstb_textedit.h	/^} StbUndoState;$/;"	t	typeref:struct:__anon0ee941840208
StencilRef	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^        UINT                        StencilRef;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:UINT	file:
StencilRef	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^        UINT                        StencilRef;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:UINT	file:
Step	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGuiListClipper::Step()$/;"	f	class:ImGuiListClipper	typeref:typename:bool
Step	build/_deps/imgui-proj-src/imgui_demo.cpp	/^        static void Step(ImGuiSizeCallbackData* data)$/;"	f	struct:ShowExampleAppConstrainedResize::CustomConstraints	typeref:typename:void	file:
StepNo	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                             StepNo;$/;"	m	struct:ImGuiListClipperData	typeref:typename:int
Storage	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImU32           Storage[(BITCOUNT + 31) >> 5];$/;"	m	struct:ImBitArray	typeref:typename:ImU32[]
Storage	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVector<ImU32> Storage;$/;"	m	struct:ImBitVector	typeref:typename:ImVector<ImU32>
Str	build/_deps/imgui-proj-src/misc/cpp/imgui_stdlib.cpp	/^    std::string*            Str;$/;"	m	struct:InputTextCallback_UserData	typeref:typename:std::string *	file:
Strdup	build/_deps/imgui-proj-src/imgui_demo.cpp	/^    static char* Strdup(const char* s)                           { IM_ASSERT(s); size_t len = st/;"	f	struct:ExampleAppConsole	typeref:typename:char *	file:
StretchWeight	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   StretchWeight;                  \/\/ Master width weight when (Flags/;"	m	struct:ImGuiTableColumn	typeref:typename:float
Stricmp	build/_deps/imgui-proj-src/imgui_demo.cpp	/^    static int   Stricmp(const char* s1, const char* s2)         { int d; while ((d = toupper(*s/;"	f	struct:ExampleAppConsole	typeref:typename:int	file:
Stride	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp	/^    GLint   Enabled, Size, Type, Normalized, Stride;$/;"	m	struct:ImGui_ImplOpenGL3_VtxAttribState	typeref:typename:GLint	file:
Stride	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^    int Stride;$/;"	m	struct:ImGuiPlotArrayGetterData	typeref:typename:int	file:
Strnicmp	build/_deps/imgui-proj-src/imgui_demo.cpp	/^    static int   Strnicmp(const char* s1, const char* s2, int n) { int d = 0; while (n > 0 && (d/;"	f	struct:ExampleAppConsole	typeref:typename:int	file:
Strtrim	build/_deps/imgui-proj-src/imgui_demo.cpp	/^    static void  Strtrim(char* s)                                { char* str_end = s + strlen(s)/;"	f	struct:ExampleAppConsole	typeref:typename:void	file:
Style	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiStyle              Style;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiStyle
StyleColorsClassic	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImGui::StyleColorsClassic(ImGuiStyle* dst)$/;"	f	class:ImGui	typeref:typename:void
StyleColorsDark	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImGui::StyleColorsDark(ImGuiStyle* dst)$/;"	f	class:ImGui	typeref:typename:void
StyleColorsLight	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImGui::StyleColorsLight(ImGuiStyle* dst)$/;"	f	class:ImGui	typeref:typename:void
StyleVarStack	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVector<ImGuiStyleMod>         StyleVarStack;              \/\/ Stack for PushStyleVar()\/P/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiStyleMod>
Subpass	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.h	/^    uint32_t                        Subpass;$/;"	m	struct:ImGui_ImplVulkan_InitInfo	typeref:typename:uint32_t
Suggestions for a good README	README.md	/^## Suggestions for a good README$/;"	s
Support	README.md	/^## Support$/;"	s
Support, Frequently Asked Questions (FAQ)	build/_deps/imgui-proj-src/docs/README.md	/^### Support, Frequently Asked Questions (FAQ)$/;"	S
Surface	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.h	/^    VkSurfaceKHR        Surface;$/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:VkSurfaceKHR
SurfaceFormat	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.h	/^    VkSurfaceFormatKHR  SurfaceFormat;$/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:VkSurfaceFormatKHR
SwapChain	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^    IDXGISwapChain*         SwapChain;$/;"	m	struct:ImGui_ImplDX10_ViewportData	typeref:typename:IDXGISwapChain *	file:
SwapChain	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^    IDXGISwapChain*                 SwapChain;$/;"	m	struct:ImGui_ImplDX11_ViewportData	typeref:typename:IDXGISwapChain *	file:
SwapChain	build/_deps/imgui-proj-src/backends/imgui_impl_dx12.cpp	/^    IDXGISwapChain3*                SwapChain;$/;"	m	struct:ImGui_ImplDX12_ViewportData	typeref:typename:IDXGISwapChain3 *	file:
SwapChain	build/_deps/imgui-proj-src/backends/imgui_impl_dx9.cpp	/^    IDirect3DSwapChain9*    SwapChain;$/;"	m	struct:ImGui_ImplDX9_ViewportData	typeref:typename:IDirect3DSwapChain9 *	file:
Swapchain	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.h	/^    VkSwapchainKHR      Swapchain;$/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:VkSwapchainKHR
TABLE_BORDER_SIZE	build/_deps/imgui-proj-src/imgui_tables.cpp	/^static const float TABLE_BORDER_SIZE                     = 1.0f;    \/\/ FIXME-TABLE: Currently /;"	v	typeref:typename:const float	file:
TABLE_DRAW_CHANNEL_BG0	build/_deps/imgui-proj-src/imgui_tables.cpp	/^static const int TABLE_DRAW_CHANNEL_BG0 = 0;$/;"	v	typeref:typename:const int	file:
TABLE_DRAW_CHANNEL_BG2_FROZEN	build/_deps/imgui-proj-src/imgui_tables.cpp	/^static const int TABLE_DRAW_CHANNEL_BG2_FROZEN = 1;$/;"	v	typeref:typename:const int	file:
TABLE_DRAW_CHANNEL_NOCLIP	build/_deps/imgui-proj-src/imgui_tables.cpp	/^static const int TABLE_DRAW_CHANNEL_NOCLIP = 2;                     \/\/ When using ImGuiTableFl/;"	v	typeref:typename:const int	file:
TABLE_RESIZE_SEPARATOR_FEEDBACK_TIMER	build/_deps/imgui-proj-src/imgui_tables.cpp	/^static const float TABLE_RESIZE_SEPARATOR_FEEDBACK_TIMER = 0.06f;   \/\/ Delay\/timer before mak/;"	v	typeref:typename:const float	file:
TABLE_RESIZE_SEPARATOR_HALF_THICKNESS	build/_deps/imgui-proj-src/imgui_tables.cpp	/^static const float TABLE_RESIZE_SEPARATOR_HALF_THICKNESS = 4.0f;    \/\/ Extend outside inner bo/;"	v	typeref:typename:const float	file:
TOOLTIP_DEFAULT_OFFSET	build/_deps/imgui-proj-src/imgui.cpp	/^static const ImVec2 TOOLTIP_DEFAULT_OFFSET = ImVec2(16, 10);            \/\/ Multiplied by g.Sty/;"	v	typeref:typename:const ImVec2	file:
TRT_BackgroundClipRect	build/_deps/imgui-proj-src/imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon86f0acb10203	file:
TRT_ColumnsClipRect	build/_deps/imgui-proj-src/imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon86f0acb10203	file:
TRT_ColumnsContentFrozen	build/_deps/imgui-proj-src/imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon86f0acb10203	file:
TRT_ColumnsContentHeadersIdeal	build/_deps/imgui-proj-src/imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon86f0acb10203	file:
TRT_ColumnsContentHeadersUsed	build/_deps/imgui-proj-src/imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon86f0acb10203	file:
TRT_ColumnsContentUnfrozen	build/_deps/imgui-proj-src/imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon86f0acb10203	file:
TRT_ColumnsRect	build/_deps/imgui-proj-src/imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon86f0acb10203	file:
TRT_ColumnsWorkRect	build/_deps/imgui-proj-src/imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon86f0acb10203	file:
TRT_Count	build/_deps/imgui-proj-src/imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon86f0acb10203	file:
TRT_HostClipRect	build/_deps/imgui-proj-src/imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon86f0acb10203	file:
TRT_InnerClipRect	build/_deps/imgui-proj-src/imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon86f0acb10203	file:
TRT_InnerRect	build/_deps/imgui-proj-src/imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon86f0acb10203	file:
TRT_OuterRect	build/_deps/imgui-proj-src/imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon86f0acb10203	file:
TRT_WorkRect	build/_deps/imgui-proj-src/imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon86f0acb10203	file:
TabBar	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTabBar*            TabBar;$/;"	m	struct:ImGuiDockNode	typeref:typename:ImGuiTabBar *
TabBarAddTab	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::TabBarAddTab(ImGuiTabBar* tab_bar, ImGuiTabItemFlags tab_flags, ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
TabBarBorderSize	build/_deps/imgui-proj-src/imgui.h	/^    float       TabBarBorderSize;           \/\/ Thickness of tab-bar separator, which takes on /;"	m	struct:ImGuiStyle	typeref:typename:float
TabBarCalcMaxTabWidth	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static float ImGui::TabBarCalcMaxTabWidth()$/;"	f	class:ImGui	typeref:typename:float	file:
TabBarCalcScrollableWidth	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static float TabBarCalcScrollableWidth(ImGuiTabBar* tab_bar, ImGuiTabBarSection* sections)$/;"	f	typeref:typename:float	file:
TabBarCalcTabID	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static ImU32   ImGui::TabBarCalcTabID(ImGuiTabBar* tab_bar, const char* label, ImGuiWindow* dock/;"	f	class:ImGui	typeref:typename:ImU32	file:
TabBarCloseTab	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::TabBarCloseTab(ImGuiTabBar* tab_bar, ImGuiTabItem* tab)$/;"	f	class:ImGui	typeref:typename:void
TabBarFindMostRecentlySelectedTabForActiveWindow	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^ImGuiTabItem* ImGui::TabBarFindMostRecentlySelectedTabForActiveWindow(ImGuiTabBar* tab_bar)$/;"	f	class:ImGui	typeref:typename:ImGuiTabItem *
TabBarFindTabByID	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^ImGuiTabItem* ImGui::TabBarFindTabByID(ImGuiTabBar* tab_bar, ImGuiID tab_id)$/;"	f	class:ImGui	typeref:typename:ImGuiTabItem *
TabBarFindTabByOrder	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^ImGuiTabItem* ImGui::TabBarFindTabByOrder(ImGuiTabBar* tab_bar, int order)$/;"	f	class:ImGui	typeref:typename:ImGuiTabItem *
TabBarGetCurrentTab	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^ImGuiTabItem* ImGui::TabBarGetCurrentTab(ImGuiTabBar* tab_bar)$/;"	f	class:ImGui	typeref:typename:ImGuiTabItem *
TabBarGetTabName	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^const char* ImGui::TabBarGetTabName(ImGuiTabBar* tab_bar, ImGuiTabItem* tab)$/;"	f	class:ImGui	typeref:typename:const char *
TabBarGetTabOrder	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline int              TabBarGetTabOrder(ImGuiTabBar* tab_bar, ImGuiTabItem* tab) { return /;"	f	namespace:ImGui	typeref:typename:int
TabBarLayout	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static void ImGui::TabBarLayout(ImGuiTabBar* tab_bar)$/;"	f	class:ImGui	typeref:typename:void	file:
TabBarProcessReorder	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::TabBarProcessReorder(ImGuiTabBar* tab_bar)$/;"	f	class:ImGui	typeref:typename:bool
TabBarQueueFocus	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::TabBarQueueFocus(ImGuiTabBar* tab_bar, ImGuiTabItem* tab)$/;"	f	class:ImGui	typeref:typename:void
TabBarQueueReorder	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::TabBarQueueReorder(ImGuiTabBar* tab_bar, ImGuiTabItem* tab, int offset)$/;"	f	class:ImGui	typeref:typename:void
TabBarQueueReorderFromMousePos	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::TabBarQueueReorderFromMousePos(ImGuiTabBar* tab_bar, ImGuiTabItem* src_tab, ImVec2 m/;"	f	class:ImGui	typeref:typename:void
TabBarRemoveTab	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::TabBarRemoveTab(ImGuiTabBar* tab_bar, ImGuiID tab_id)$/;"	f	class:ImGui	typeref:typename:void
TabBarScrollClamp	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static float ImGui::TabBarScrollClamp(ImGuiTabBar* tab_bar, float scrolling)$/;"	f	class:ImGui	typeref:typename:float	file:
TabBarScrollToTab	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static void ImGui::TabBarScrollToTab(ImGuiTabBar* tab_bar, ImGuiID tab_id, ImGuiTabBarSection* s/;"	f	class:ImGui	typeref:typename:void	file:
TabBarScrollingButtons	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static ImGuiTabItem* ImGui::TabBarScrollingButtons(ImGuiTabBar* tab_bar)$/;"	f	class:ImGui	typeref:typename:ImGuiTabItem *	file:
TabBarTabListPopupButton	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static ImGuiTabItem* ImGui::TabBarTabListPopupButton(ImGuiTabBar* tab_bar)$/;"	f	class:ImGui	typeref:typename:ImGuiTabItem *	file:
TabBars	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImPool<ImGuiTabBar>             TabBars;$/;"	m	struct:ImGuiContext	typeref:typename:ImPool<ImGuiTabBar>
TabBorderSize	build/_deps/imgui-proj-src/imgui.h	/^    float       TabBorderSize;              \/\/ Thickness of border around tabs.$/;"	m	struct:ImGuiStyle	typeref:typename:float
TabCount	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^    int                 TabCount;               \/\/ Number of tabs in this section.$/;"	m	struct:ImGuiTabBarSection	typeref:typename:int	file:
TabId	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                 TabId;                              \/\/ == window->GetID("#TAB")$/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiID
TabItemBackground	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::TabItemBackground(ImDrawList* draw_list, const ImRect& bb, ImGuiTabItemFlags flags, /;"	f	class:ImGui	typeref:typename:void
TabItemButton	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool    ImGui::TabItemButton(const char* label, ImGuiTabItemFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
TabItemCalcSize	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^ImVec2 ImGui::TabItemCalcSize(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:ImVec2
TabItemCalcSize	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^ImVec2 ImGui::TabItemCalcSize(const char* label, bool has_close_button_or_unsaved_marker)$/;"	f	class:ImGui	typeref:typename:ImVec2
TabItemComparerByBeginOrder	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static int IMGUI_CDECL TabItemComparerByBeginOrder(const void* lhs, const void* rhs)$/;"	f	typeref:typename:int IMGUI_CDECL	file:
TabItemComparerByDockOrder	build/_deps/imgui-proj-src/imgui.cpp	/^static int IMGUI_CDECL TabItemComparerByDockOrder(const void* lhs, const void* rhs)$/;"	f	typeref:typename:int IMGUI_CDECL	file:
TabItemComparerBySection	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static int IMGUI_CDECL TabItemComparerBySection(const void* lhs, const void* rhs)$/;"	f	typeref:typename:int IMGUI_CDECL	file:
TabItemEx	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool    ImGui::TabItemEx(ImGuiTabBar* tab_bar, const char* label, bool* p_open, ImGuiTabItemFlag/;"	f	class:ImGui	typeref:typename:bool
TabItemFlagsOverrideSet	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiTabItemFlags   TabItemFlagsOverrideSet;    \/\/ [EXPERIMENTAL] TabItem flags to set whe/;"	m	struct:ImGuiWindowClass	typeref:typename:ImGuiTabItemFlags
TabItemGetSectionIdx	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static inline int TabItemGetSectionIdx(const ImGuiTabItem* tab)$/;"	f	typeref:typename:int	file:
TabItemLabelAndCloseButton	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::TabItemLabelAndCloseButton(ImDrawList* draw_list, const ImRect& bb, ImGuiTabItemFlag/;"	f	class:ImGui	typeref:typename:void
TabMinWidthForCloseButton	build/_deps/imgui-proj-src/imgui.h	/^    float       TabMinWidthForCloseButton;  \/\/ Minimum width for close button to appear on an /;"	m	struct:ImGuiStyle	typeref:typename:float
TabRounding	build/_deps/imgui-proj-src/imgui.h	/^    float       TabRounding;                \/\/ Radius of upper corners of a tab. Set to 0.0f t/;"	m	struct:ImGuiStyle	typeref:typename:float
TableAngledHeadersAngle	build/_deps/imgui-proj-src/imgui.h	/^    float       TableAngledHeadersAngle;    \/\/ Angle of angled headers (supported values range/;"	m	struct:ImGuiStyle	typeref:typename:float
TableAngledHeadersRow	build/_deps/imgui-proj-src/imgui_tables.cpp	/^void ImGui::TableAngledHeadersRow()$/;"	f	class:ImGui	typeref:typename:void
TableAngledHeadersRowEx	build/_deps/imgui-proj-src/imgui_tables.cpp	/^void ImGui::TableAngledHeadersRowEx(float angle, float max_label_width)$/;"	f	class:ImGui	typeref:typename:void
TableBeginApplyRequests	build/_deps/imgui-proj-src/imgui_tables.cpp	/^void ImGui::TableBeginApplyRequests(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableBeginCell	build/_deps/imgui-proj-src/imgui_tables.cpp	/^void ImGui::TableBeginCell(ImGuiTable* table, int column_n)$/;"	f	class:ImGui	typeref:typename:void
TableBeginContextMenuPopup	build/_deps/imgui-proj-src/imgui_tables.cpp	/^bool ImGui::TableBeginContextMenuPopup(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:bool
TableBeginInitMemory	build/_deps/imgui-proj-src/imgui_tables.cpp	/^void ImGui::TableBeginInitMemory(ImGuiTable* table, int columns_count)$/;"	f	class:ImGui	typeref:typename:void
TableBeginRow	build/_deps/imgui-proj-src/imgui_tables.cpp	/^void ImGui::TableBeginRow(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableDrawBorders	build/_deps/imgui-proj-src/imgui_tables.cpp	/^void ImGui::TableDrawBorders(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableDrawDefaultContextMenu	build/_deps/imgui-proj-src/imgui_tables.cpp	/^void ImGui::TableDrawDefaultContextMenu(ImGuiTable* table, ImGuiTableFlags flags_for_section_to_/;"	f	class:ImGui	typeref:typename:void
TableEndCell	build/_deps/imgui-proj-src/imgui_tables.cpp	/^void ImGui::TableEndCell(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableEndRow	build/_deps/imgui-proj-src/imgui_tables.cpp	/^void ImGui::TableEndRow(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableFindByID	build/_deps/imgui-proj-src/imgui_tables.cpp	/^ImGuiTable* ImGui::TableFindByID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:ImGuiTable *
TableFixColumnSortDirection	build/_deps/imgui-proj-src/imgui_tables.cpp	/^void ImGui::TableFixColumnSortDirection(ImGuiTable* table, ImGuiTableColumn* column)$/;"	f	class:ImGui	typeref:typename:void
TableFixFlags	build/_deps/imgui-proj-src/imgui_tables.cpp	/^inline ImGuiTableFlags TableFixFlags(ImGuiTableFlags flags, ImGuiWindow* outer_window)$/;"	f	typeref:typename:ImGuiTableFlags
TableGcCompactSettings	build/_deps/imgui-proj-src/imgui_tables.cpp	/^void ImGui::TableGcCompactSettings()$/;"	f	class:ImGui	typeref:typename:void
TableGcCompactTransientBuffers	build/_deps/imgui-proj-src/imgui_tables.cpp	/^void ImGui::TableGcCompactTransientBuffers(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableGcCompactTransientBuffers	build/_deps/imgui-proj-src/imgui_tables.cpp	/^void ImGui::TableGcCompactTransientBuffers(ImGuiTableTempData* temp_data)$/;"	f	class:ImGui	typeref:typename:void
TableGetBoundSettings	build/_deps/imgui-proj-src/imgui_tables.cpp	/^ImGuiTableSettings* ImGui::TableGetBoundSettings(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:ImGuiTableSettings *
TableGetCellBgRect	build/_deps/imgui-proj-src/imgui_tables.cpp	/^ImRect ImGui::TableGetCellBgRect(const ImGuiTable* table, int column_n)$/;"	f	class:ImGui	typeref:typename:ImRect
TableGetColumnAvailSortDirection	build/_deps/imgui-proj-src/imgui_tables.cpp	/^static inline ImGuiSortDirection TableGetColumnAvailSortDirection(ImGuiTableColumn* column, int /;"	f	typeref:typename:ImGuiSortDirection	file:
TableGetColumnBorderCol	build/_deps/imgui-proj-src/imgui_tables.cpp	/^static ImU32 TableGetColumnBorderCol(ImGuiTable* table, int order_n, int column_n)$/;"	f	typeref:typename:ImU32	file:
TableGetColumnCount	build/_deps/imgui-proj-src/imgui_tables.cpp	/^int ImGui::TableGetColumnCount()$/;"	f	class:ImGui	typeref:typename:int
TableGetColumnFlags	build/_deps/imgui-proj-src/imgui_tables.cpp	/^ImGuiTableColumnFlags ImGui::TableGetColumnFlags(int column_n)$/;"	f	class:ImGui	typeref:typename:ImGuiTableColumnFlags
TableGetColumnIndex	build/_deps/imgui-proj-src/imgui_tables.cpp	/^int ImGui::TableGetColumnIndex()$/;"	f	class:ImGui	typeref:typename:int
TableGetColumnName	build/_deps/imgui-proj-src/imgui_tables.cpp	/^const char* ImGui::TableGetColumnName(const ImGuiTable* table, int column_n)$/;"	f	class:ImGui	typeref:typename:const char *
TableGetColumnName	build/_deps/imgui-proj-src/imgui_tables.cpp	/^const char* ImGui::TableGetColumnName(int column_n)$/;"	f	class:ImGui	typeref:typename:const char *
TableGetColumnNextSortDirection	build/_deps/imgui-proj-src/imgui_tables.cpp	/^ImGuiSortDirection ImGui::TableGetColumnNextSortDirection(ImGuiTableColumn* column)$/;"	f	class:ImGui	typeref:typename:ImGuiSortDirection
TableGetColumnResizeID	build/_deps/imgui-proj-src/imgui_tables.cpp	/^ImGuiID ImGui::TableGetColumnResizeID(ImGuiTable* table, int column_n, int instance_no)$/;"	f	class:ImGui	typeref:typename:ImGuiID
TableGetColumnWidthAuto	build/_deps/imgui-proj-src/imgui_tables.cpp	/^float ImGui::TableGetColumnWidthAuto(ImGuiTable* table, ImGuiTableColumn* column)$/;"	f	class:ImGui	typeref:typename:float
TableGetHeaderAngledMaxLabelWidth	build/_deps/imgui-proj-src/imgui_tables.cpp	/^float ImGui::TableGetHeaderAngledMaxLabelWidth()$/;"	f	class:ImGui	typeref:typename:float
TableGetHeaderRowHeight	build/_deps/imgui-proj-src/imgui_tables.cpp	/^float ImGui::TableGetHeaderRowHeight()$/;"	f	class:ImGui	typeref:typename:float
TableGetHoveredColumn	build/_deps/imgui-proj-src/imgui_tables.cpp	/^int ImGui::TableGetHoveredColumn()$/;"	f	class:ImGui	typeref:typename:int
TableGetHoveredRow	build/_deps/imgui-proj-src/imgui_tables.cpp	/^int ImGui::TableGetHoveredRow()$/;"	f	class:ImGui	typeref:typename:int
TableGetInstanceData	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline ImGuiTableInstanceData*  TableGetInstanceData(ImGuiTable* table, int instance_no) { i/;"	f	namespace:ImGui	typeref:typename:ImGuiTableInstanceData *
TableGetInstanceID	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline ImGuiID                  TableGetInstanceID(ImGuiTable* table, int instance_no)   { r/;"	f	namespace:ImGui	typeref:typename:ImGuiID
TableGetMaxColumnWidth	build/_deps/imgui-proj-src/imgui_tables.cpp	/^float ImGui::TableGetMaxColumnWidth(const ImGuiTable* table, int column_n)$/;"	f	class:ImGui	typeref:typename:float
TableGetRowIndex	build/_deps/imgui-proj-src/imgui_tables.cpp	/^int ImGui::TableGetRowIndex()$/;"	f	class:ImGui	typeref:typename:int
TableGetSortSpecs	build/_deps/imgui-proj-src/imgui_tables.cpp	/^ImGuiTableSortSpecs* ImGui::TableGetSortSpecs()$/;"	f	class:ImGui	typeref:typename:ImGuiTableSortSpecs *
TableHeader	build/_deps/imgui-proj-src/imgui_tables.cpp	/^void ImGui::TableHeader(const char* label)$/;"	f	class:ImGui	typeref:typename:void
TableHeadersRow	build/_deps/imgui-proj-src/imgui_tables.cpp	/^void ImGui::TableHeadersRow()$/;"	f	class:ImGui	typeref:typename:void
TableIndex	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                         TableIndex;                 \/\/ Index in g.Tables.Buf[] pool$/;"	m	struct:ImGuiTableTempData	typeref:typename:int
TableInstanceID	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                     TableInstanceID;$/;"	m	struct:ImGuiTableInstanceData	typeref:typename:ImGuiID
TableLoadSettings	build/_deps/imgui-proj-src/imgui_tables.cpp	/^void ImGui::TableLoadSettings(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableMergeDrawChannels	build/_deps/imgui-proj-src/imgui_tables.cpp	/^void ImGui::TableMergeDrawChannels(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableNextColumn	build/_deps/imgui-proj-src/imgui_tables.cpp	/^bool ImGui::TableNextColumn()$/;"	f	class:ImGui	typeref:typename:bool
TableNextRow	build/_deps/imgui-proj-src/imgui_tables.cpp	/^void ImGui::TableNextRow(ImGuiTableRowFlags row_flags, float row_min_height)$/;"	f	class:ImGui	typeref:typename:void
TableOpenContextMenu	build/_deps/imgui-proj-src/imgui_tables.cpp	/^void ImGui::TableOpenContextMenu(int column_n)$/;"	f	class:ImGui	typeref:typename:void
TablePopBackgroundChannel	build/_deps/imgui-proj-src/imgui_tables.cpp	/^void ImGui::TablePopBackgroundChannel()$/;"	f	class:ImGui	typeref:typename:void
TablePushBackgroundChannel	build/_deps/imgui-proj-src/imgui_tables.cpp	/^void ImGui::TablePushBackgroundChannel()$/;"	f	class:ImGui	typeref:typename:void
TableRemove	build/_deps/imgui-proj-src/imgui_tables.cpp	/^void ImGui::TableRemove(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableResetSettings	build/_deps/imgui-proj-src/imgui_tables.cpp	/^void ImGui::TableResetSettings(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableSaveSettings	build/_deps/imgui-proj-src/imgui_tables.cpp	/^void ImGui::TableSaveSettings(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableSetBgColor	build/_deps/imgui-proj-src/imgui_tables.cpp	/^void ImGui::TableSetBgColor(ImGuiTableBgTarget target, ImU32 color, int column_n)$/;"	f	class:ImGui	typeref:typename:void
TableSetColumnEnabled	build/_deps/imgui-proj-src/imgui_tables.cpp	/^void ImGui::TableSetColumnEnabled(int column_n, bool enabled)$/;"	f	class:ImGui	typeref:typename:void
TableSetColumnIndex	build/_deps/imgui-proj-src/imgui_tables.cpp	/^bool ImGui::TableSetColumnIndex(int column_n)$/;"	f	class:ImGui	typeref:typename:bool
TableSetColumnSortDirection	build/_deps/imgui-proj-src/imgui_tables.cpp	/^void ImGui::TableSetColumnSortDirection(int column_n, ImGuiSortDirection sort_direction, bool ap/;"	f	class:ImGui	typeref:typename:void
TableSetColumnWidth	build/_deps/imgui-proj-src/imgui_tables.cpp	/^void ImGui::TableSetColumnWidth(int column_n, float width)$/;"	f	class:ImGui	typeref:typename:void
TableSetColumnWidthAutoAll	build/_deps/imgui-proj-src/imgui_tables.cpp	/^void ImGui::TableSetColumnWidthAutoAll(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableSetColumnWidthAutoSingle	build/_deps/imgui-proj-src/imgui_tables.cpp	/^void ImGui::TableSetColumnWidthAutoSingle(ImGuiTable* table, int column_n)$/;"	f	class:ImGui	typeref:typename:void
TableSettingsAddSettingsHandler	build/_deps/imgui-proj-src/imgui_tables.cpp	/^void ImGui::TableSettingsAddSettingsHandler()$/;"	f	class:ImGui	typeref:typename:void
TableSettingsCalcChunkSize	build/_deps/imgui-proj-src/imgui_tables.cpp	/^static size_t TableSettingsCalcChunkSize(int columns_count)$/;"	f	typeref:typename:size_t	file:
TableSettingsCreate	build/_deps/imgui-proj-src/imgui_tables.cpp	/^ImGuiTableSettings* ImGui::TableSettingsCreate(ImGuiID id, int columns_count)$/;"	f	class:ImGui	typeref:typename:ImGuiTableSettings *
TableSettingsFindByID	build/_deps/imgui-proj-src/imgui_tables.cpp	/^ImGuiTableSettings* ImGui::TableSettingsFindByID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:ImGuiTableSettings *
TableSettingsHandler_ApplyAll	build/_deps/imgui-proj-src/imgui_tables.cpp	/^static void TableSettingsHandler_ApplyAll(ImGuiContext* ctx, ImGuiSettingsHandler*)$/;"	f	typeref:typename:void	file:
TableSettingsHandler_ClearAll	build/_deps/imgui-proj-src/imgui_tables.cpp	/^static void TableSettingsHandler_ClearAll(ImGuiContext* ctx, ImGuiSettingsHandler*)$/;"	f	typeref:typename:void	file:
TableSettingsHandler_ReadLine	build/_deps/imgui-proj-src/imgui_tables.cpp	/^static void TableSettingsHandler_ReadLine(ImGuiContext*, ImGuiSettingsHandler*, void* entry, con/;"	f	typeref:typename:void	file:
TableSettingsHandler_ReadOpen	build/_deps/imgui-proj-src/imgui_tables.cpp	/^static void* TableSettingsHandler_ReadOpen(ImGuiContext*, ImGuiSettingsHandler*, const char* nam/;"	f	typeref:typename:void *	file:
TableSettingsHandler_WriteAll	build/_deps/imgui-proj-src/imgui_tables.cpp	/^static void TableSettingsHandler_WriteAll(ImGuiContext* ctx, ImGuiSettingsHandler* handler, ImGu/;"	f	typeref:typename:void	file:
TableSettingsInit	build/_deps/imgui-proj-src/imgui_tables.cpp	/^static void TableSettingsInit(ImGuiTableSettings* settings, ImGuiID id, int columns_count, int c/;"	f	typeref:typename:void	file:
TableSetupColumn	build/_deps/imgui-proj-src/imgui_tables.cpp	/^void ImGui::TableSetupColumn(const char* label, ImGuiTableColumnFlags flags, float init_width_or/;"	f	class:ImGui	typeref:typename:void
TableSetupColumnFlags	build/_deps/imgui-proj-src/imgui_tables.cpp	/^static void TableSetupColumnFlags(ImGuiTable* table, ImGuiTableColumn* column, ImGuiTableColumnF/;"	f	typeref:typename:void	file:
TableSetupDrawChannels	build/_deps/imgui-proj-src/imgui_tables.cpp	/^void ImGui::TableSetupDrawChannels(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableSetupScrollFreeze	build/_deps/imgui-proj-src/imgui_tables.cpp	/^void ImGui::TableSetupScrollFreeze(int columns, int rows)$/;"	f	class:ImGui	typeref:typename:void
TableSortSpecsBuild	build/_deps/imgui-proj-src/imgui_tables.cpp	/^void ImGui::TableSortSpecsBuild(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableSortSpecsSanitize	build/_deps/imgui-proj-src/imgui_tables.cpp	/^void ImGui::TableSortSpecsSanitize(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableUpdateBorders	build/_deps/imgui-proj-src/imgui_tables.cpp	/^void ImGui::TableUpdateBorders(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableUpdateColumnsWeightFromWidth	build/_deps/imgui-proj-src/imgui_tables.cpp	/^void ImGui::TableUpdateColumnsWeightFromWidth(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableUpdateLayout	build/_deps/imgui-proj-src/imgui_tables.cpp	/^void ImGui::TableUpdateLayout(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
Tables	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImPool<ImGuiTable>              Tables;                     \/\/ Persistent table data$/;"	m	struct:ImGuiContext	typeref:typename:ImPool<ImGuiTable>
TablesLastTimeActive	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVector<float>                 TablesLastTimeActive;       \/\/ Last used timestamp of each/;"	m	struct:ImGuiContext	typeref:typename:ImVector<float>
TablesTempData	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVector<ImGuiTableTempData>    TablesTempData;             \/\/ Temporary table data (buffe/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiTableTempData>
TablesTempDataStacked	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                             TablesTempDataStacked;      \/\/ Temporary table data size (/;"	m	struct:ImGuiContext	typeref:typename:int
Tabs	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVector<ImGuiTabItem> Tabs;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImVector<ImGuiTabItem>
TabsActiveCount	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImS16               TabsActiveCount;        \/\/ Number of tabs submitted this frame.$/;"	m	struct:ImGuiTabBar	typeref:typename:ImS16
TabsAddedNew	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                TabsAddedNew;           \/\/ Set to true when a new tab item or button h/;"	m	struct:ImGuiTabBar	typeref:typename:bool
TabsNames	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTextBuffer     TabsNames;              \/\/ For non-docking tab bar we re-append names /;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiTextBuffer
Target	build/_deps/imgui-proj-src/imgui_demo.cpp	/^    enum Target$/;"	g	function:ShowExampleAppDocuments	file:
Target_DockSpaceAndWindow	build/_deps/imgui-proj-src/imgui_demo.cpp	/^        Target_DockSpaceAndWindow   \/\/ Create documents as regular windows, and create an embe/;"	e	enum:ShowExampleAppDocuments::Target	file:
Target_None	build/_deps/imgui-proj-src/imgui_demo.cpp	/^        Target_None,$/;"	e	enum:ShowExampleAppDocuments::Target	file:
Target_Tab	build/_deps/imgui-proj-src/imgui_demo.cpp	/^        Target_Tab,                 \/\/ Create documents as local tab into a local tab bar$/;"	e	enum:ShowExampleAppDocuments::Target	file:
TeleportMousePos	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::TeleportMousePos(const ImVec2& pos)$/;"	f	class:ImGui	typeref:typename:void
TempBuffer	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVector<ImVec2> TempBuffer;$/;"	m	struct:ImDrawListSharedData	typeref:typename:ImVector<ImVec2>
TempBuffer	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVector<char>          TempBuffer;                         \/\/ Temporary text buffer$/;"	m	struct:ImGuiContext	typeref:typename:ImVector<char>
TempData	build/_deps/imgui-proj-src/imgui.h	/^    void*           TempData;           \/\/ [Internal] Internal data$/;"	m	struct:ImGuiListClipper	typeref:typename:void *
TempData	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTableTempData*         TempData;                   \/\/ Transient data while table is a/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableTempData *
TempInputId	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                 TempInputId;                        \/\/ Temporary text input when C/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
TempInputIsActive	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline bool             TempInputIsActive(ImGuiID id)       { ImGuiContext& g = *GImGui; ret/;"	f	namespace:ImGui	typeref:typename:bool
TempInputScalar	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::TempInputScalar(const ImRect& bb, ImGuiID id, const char* label, ImGuiDataType data_/;"	f	class:ImGui	typeref:typename:bool
TempInputText	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::TempInputText(const ImRect& bb, ImGuiID id, const char* label, char* buf, int buf_si/;"	f	class:ImGui	typeref:typename:bool
TempKeychordName	build/_deps/imgui-proj-src/imgui_internal.h	/^    char                    TempKeychordName[64];$/;"	m	struct:ImGuiContext	typeref:typename:char[64]
Test and Deploy	README.md	/^## Test and Deploy$/;"	s
TestBit	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool            TestBit(int n) const        { IM_ASSERT(n < (Storage.Size << 5)); return IM_/;"	f	struct:ImBitVector	typeref:typename:bool
TestBit	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool            TestBit(int n) const        { n += OFFSET; IM_ASSERT(n >= 0 && n < BITCOUNT)/;"	f	struct:ImBitArray	typeref:typename:bool
TestEngine	build/_deps/imgui-proj-src/imgui_internal.h	/^    void*                   TestEngine;                         \/\/ Test engine user data$/;"	m	struct:ImGuiContext	typeref:typename:void *
TestEngineHookItems	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    TestEngineHookItems;                \/\/ Will call test engine hooks/;"	m	struct:ImGuiContext	typeref:typename:bool
TestKeyOwner	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::TestKeyOwner(ImGuiKey key, ImGuiID owner_id)$/;"	f	class:ImGui	typeref:typename:bool
TestShortcutRouting	build/_deps/imgui-proj-src/imgui.cpp	/^bool ImGui::TestShortcutRouting(ImGuiKeyChord key_chord, ImGuiID owner_id)$/;"	f	class:ImGui	typeref:typename:bool
Testbed for toying with settings (for developers)	build/_deps/imgui-proj-src/misc/freetype/README.md	/^### Testbed for toying with settings (for developers)$/;"	S
TexDesiredWidth	build/_deps/imgui-proj-src/imgui.h	/^    int                         TexDesiredWidth;    \/\/ Texture width desired by user before Bu/;"	m	struct:ImFontAtlas	typeref:typename:int
TexGlyphPadding	build/_deps/imgui-proj-src/imgui.h	/^    int                         TexGlyphPadding;    \/\/ Padding between glyphs within texture i/;"	m	struct:ImFontAtlas	typeref:typename:int
TexHeight	build/_deps/imgui-proj-src/imgui.h	/^    int                         TexHeight;          \/\/ Texture height calculated during Build(/;"	m	struct:ImFontAtlas	typeref:typename:int
TexID	build/_deps/imgui-proj-src/imgui.h	/^    ImTextureID                 TexID;              \/\/ User data to refer to the texture once /;"	m	struct:ImFontAtlas	typeref:typename:ImTextureID
TexImage2D	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^        PFNGLTEXIMAGE2DPROC               TexImage2D;$/;"	m	struct:ImGL3WProcs::__anon6bce6ebe0108	typeref:typename:PFNGLTEXIMAGE2DPROC
TexParameteri	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^        PFNGLTEXPARAMETERIPROC            TexParameteri;$/;"	m	struct:ImGL3WProcs::__anon6bce6ebe0108	typeref:typename:PFNGLTEXPARAMETERIPROC
TexPixelsAlpha8	build/_deps/imgui-proj-src/imgui.h	/^    unsigned char*              TexPixelsAlpha8;    \/\/ 1 component per pixel, each component i/;"	m	struct:ImFontAtlas	typeref:typename:unsigned char *
TexPixelsRGBA32	build/_deps/imgui-proj-src/imgui.h	/^    unsigned int*               TexPixelsRGBA32;    \/\/ 4 component per pixel, each component i/;"	m	struct:ImFontAtlas	typeref:typename:unsigned int *
TexPixelsUseColors	build/_deps/imgui-proj-src/imgui.h	/^    bool                        TexPixelsUseColors; \/\/ Tell whether our texture data is known /;"	m	struct:ImFontAtlas	typeref:typename:bool
TexReady	build/_deps/imgui-proj-src/imgui.h	/^    bool                        TexReady;           \/\/ Set when texture was built matching cur/;"	m	struct:ImFontAtlas	typeref:typename:bool
TexUvLines	build/_deps/imgui-proj-src/imgui.h	/^    ImVec4                      TexUvLines[IM_DRAWLIST_TEX_LINES_WIDTH_MAX + 1];  \/\/ UVs for b/;"	m	struct:ImFontAtlas	typeref:typename:ImVec4[]
TexUvLines	build/_deps/imgui-proj-src/imgui_internal.h	/^    const ImVec4*   TexUvLines;                 \/\/ UV of anti-aliased lines in the atlas$/;"	m	struct:ImDrawListSharedData	typeref:typename:const ImVec4 *
TexUvScale	build/_deps/imgui-proj-src/imgui.h	/^    ImVec2                      TexUvScale;         \/\/ = (1.0f\/TexWidth, 1.0f\/TexHeight)$/;"	m	struct:ImFontAtlas	typeref:typename:ImVec2
TexUvWhitePixel	build/_deps/imgui-proj-src/imgui.h	/^    ImVec2                      TexUvWhitePixel;    \/\/ Texture coordinates to a white pixel$/;"	m	struct:ImFontAtlas	typeref:typename:ImVec2
TexUvWhitePixel	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2          TexUvWhitePixel;            \/\/ UV of white pixel in the atlas$/;"	m	struct:ImDrawListSharedData	typeref:typename:ImVec2
TexWidth	build/_deps/imgui-proj-src/imgui.h	/^    int                         TexWidth;           \/\/ Texture width calculated during Build()/;"	m	struct:ImFontAtlas	typeref:typename:int
Text	build/_deps/imgui-proj-src/imgui_internal.h	/^        ImGuiInputEventText         Text;           \/\/ if Type == ImGuiInputEventType_Text$/;"	m	union:ImGuiInputEvent::__anonc52b7f12040a	typeref:typename:ImGuiInputEventText
Text	build/_deps/imgui-proj-src/imgui_internal.h	/^    const char*     Text;$/;"	m	struct:ImGuiLocEntry	typeref:typename:const char *
Text	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::Text(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
TextA	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVector<char>          TextA;                  \/\/ temporary UTF8 buffer for callbacks and/;"	m	struct:ImGuiInputTextState	typeref:typename:ImVector<char>
TextA	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVector<char>     TextA;           \/\/ text buffer$/;"	m	struct:ImGuiInputTextDeactivatedState	typeref:typename:ImVector<char>
TextAIsValid	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    TextAIsValid;           \/\/ temporary UTF8 buffer is not initially /;"	m	struct:ImGuiInputTextState	typeref:typename:bool
TextColored	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::TextColored(const ImVec4& col, const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
TextColoredV	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::TextColoredV(const ImVec4& col, const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
TextDisabled	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::TextDisabled(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
TextDisabledV	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::TextDisabledV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
TextEditCallback	build/_deps/imgui-proj-src/imgui_demo.cpp	/^    int     TextEditCallback(ImGuiInputTextCallbackData* data)$/;"	f	struct:ExampleAppConsole	typeref:typename:int	file:
TextEditCallbackStub	build/_deps/imgui-proj-src/imgui_demo.cpp	/^    static int TextEditCallbackStub(ImGuiInputTextCallbackData* data)$/;"	f	struct:ExampleAppConsole	typeref:typename:int	file:
TextEx	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::TextEx(const char* text, const char* text_end, ImGuiTextFlags flags)$/;"	f	class:ImGui	typeref:typename:void
TextFilters	build/_deps/imgui-proj-src/imgui_demo.cpp	/^            struct TextFilters$/;"	s	function:ShowDemoWindowWidgets	file:
TextUnformatted	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::TextUnformatted(const char* text, const char* text_end)$/;"	f	class:ImGui	typeref:typename:void
TextV	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::TextV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
TextW	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVector<ImWchar>       TextW;                  \/\/ edit buffer, we need to persist but can/;"	m	struct:ImGuiInputTextState	typeref:typename:ImVector<ImWchar>
TextWrapPos	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   TextWrapPos;            \/\/ Current text wrap pos.$/;"	m	struct:ImGuiWindowTempData	typeref:typename:float
TextWrapPosStack	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVector<float>         TextWrapPosStack;       \/\/ Store text wrap pos to restore (attenti/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVector<float>
TextWrapped	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::TextWrapped(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
TextWrappedV	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::TextWrappedV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
Texture	build/_deps/imgui-proj-src/backends/imgui_impl_allegro5.cpp	/^    ALLEGRO_BITMAP*             Texture;$/;"	m	struct:ImGui_ImplAllegro5_Data	typeref:typename:ALLEGRO_BITMAP *	file:
TextureId	build/_deps/imgui-proj-src/imgui.h	/^    ImTextureID     TextureId;          \/\/ 4-8  \/\/ User-provided texture ID. Set by user in /;"	m	struct:ImDrawCmd	typeref:typename:ImTextureID
TextureId	build/_deps/imgui-proj-src/imgui.h	/^    ImTextureID     TextureId;$/;"	m	struct:ImDrawCmdHeader	typeref:typename:ImTextureID
The Pitch	build/_deps/imgui-proj-src/docs/README.md	/^### The Pitch$/;"	S
TicksPerSecond	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^    INT64                       TicksPerSecond;$/;"	m	struct:ImGui_ImplWin32_Data	typeref:typename:INT64	file:
Time	build/_deps/imgui-proj-src/backends/imgui_impl_allegro5.cpp	/^    double                      Time;$/;"	m	struct:ImGui_ImplAllegro5_Data	typeref:typename:double	file:
Time	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^    double                  Time;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:double	file:
Time	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^    CFTimeInterval              Time;$/;"	E	struct:ImGui_ImplOSX_Data
Time	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^    Uint64                  Time;$/;"	m	struct:ImGui_ImplSDL2_Data	typeref:typename:Uint64	file:
Time	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^    Uint64                  Time;$/;"	m	struct:ImGui_ImplSDL3_Data	typeref:typename:Uint64	file:
Time	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^    INT64                       Time;$/;"	m	struct:ImGui_ImplWin32_Data	typeref:typename:INT64	file:
Time	build/_deps/imgui-proj-src/imgui_internal.h	/^    double                  Time;$/;"	m	struct:ImGuiContext	typeref:typename:double
TitleBarHeight	build/_deps/imgui-proj-src/imgui_internal.h	/^    float       TitleBarHeight() const  { ImGuiContext& g = *Ctx; return (Flags & ImGuiWindowFla/;"	f	struct:ImGuiWindow	typeref:typename:float
TitleBarRect	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImRect      TitleBarRect() const    { return ImRect(Pos, ImVec2(Pos.x + SizeFull.x, Pos.y + /;"	f	struct:ImGuiWindow	typeref:typename:ImRect
ToVec4	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec4      ToVec4() const                      { return ImVec4(Min.x, Min.y, Max.x, Max.y);/;"	f	struct:ImRect	typeref:typename:ImVec4
Tooltip	build/_deps/imgui-proj-src/imgui_demo.cpp	/^    struct EnumDesc { ImGuiTableFlags Value; const char* Name; const char* Tooltip; };$/;"	m	struct:EditTableSizingFlags::EnumDesc	typeref:typename:const char *	file:
TooltipOverrideCount	build/_deps/imgui-proj-src/imgui_internal.h	/^    short                   TooltipOverrideCount;$/;"	m	struct:ImGuiContext	typeref:typename:short
TotalAllocCount	build/_deps/imgui-proj-src/imgui_internal.h	/^    int         TotalAllocCount;            \/\/ Number of call to MemAlloc().$/;"	m	struct:ImGuiDebugAllocInfo	typeref:typename:int
TotalFreeCount	build/_deps/imgui-proj-src/imgui_internal.h	/^    int         TotalFreeCount;$/;"	m	struct:ImGuiDebugAllocInfo	typeref:typename:int
TotalIdxCount	build/_deps/imgui-proj-src/imgui.h	/^    int                 TotalIdxCount;      \/\/ For convenience, sum of all ImDrawList's IdxBuf/;"	m	struct:ImDrawData	typeref:typename:int
TotalVtxCount	build/_deps/imgui-proj-src/imgui.h	/^    int                 TotalVtxCount;      \/\/ For convenience, sum of all ImDrawList's VtxBuf/;"	m	struct:ImDrawData	typeref:typename:int
TotalWidth	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImU32       TotalWidth;$/;"	m	struct:ImGuiMenuColumns	typeref:typename:ImU32
TouchExtraPadding	build/_deps/imgui-proj-src/imgui.h	/^    ImVec2      TouchExtraPadding;          \/\/ Expand reactive bounding box for touch-based sy/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
Translate	build/_deps/imgui-proj-src/imgui_internal.h	/^    void        Translate(const ImVec2& d)          { Min.x += d.x; Min.y += d.y; Max.x += d.x; /;"	f	struct:ImRect	typeref:typename:void
TranslateWindow	build/_deps/imgui-proj-src/imgui.cpp	/^static void TranslateWindow(ImGuiWindow* window, const ImVec2& delta)$/;"	f	typeref:typename:void	file:
TranslateWindowsInViewport	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::TranslateWindowsInViewport(ImGuiViewportP* viewport, const ImVec2& old_pos, const Im/;"	f	class:ImGui	typeref:typename:void
TranslateX	build/_deps/imgui-proj-src/imgui_internal.h	/^    void        TranslateX(float dx)                { Min.x += dx; Max.x += dx; }$/;"	f	struct:ImRect	typeref:typename:void
TranslateY	build/_deps/imgui-proj-src/imgui_internal.h	/^    void        TranslateY(float dy)                { Min.y += dy; Max.y += dy; }$/;"	f	struct:ImRect	typeref:typename:void
TreeDepth	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                     TreeDepth;              \/\/ Current tree depth.$/;"	m	struct:ImGuiWindowTempData	typeref:typename:int
TreeJumpToParentOnPopMask	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImU32                   TreeJumpToParentOnPopMask; \/\/ Store a copy of !g.NavIdIsAlive for /;"	m	struct:ImGuiWindowTempData	typeref:typename:ImU32
TreeNode	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::TreeNode(const char* label)$/;"	f	class:ImGui	typeref:typename:bool
TreeNode	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::TreeNode(const char* str_id, const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:bool
TreeNode	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::TreeNode(const void* ptr_id, const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:bool
TreeNodeBehavior	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::TreeNodeBehavior(ImGuiID id, ImGuiTreeNodeFlags flags, const char* label, const char/;"	f	class:ImGui	typeref:typename:bool
TreeNodeBehaviorIsOpen	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline bool     TreeNodeBehaviorIsOpen(ImGuiID id, ImGuiTreeNodeFlags flags = 0)    { return/;"	f	namespace:ImGui	typeref:typename:bool
TreeNodeEx	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::TreeNodeEx(const char* label, ImGuiTreeNodeFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
TreeNodeEx	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::TreeNodeEx(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:bool
TreeNodeEx	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::TreeNodeEx(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:bool
TreeNodeExV	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::TreeNodeExV(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list a/;"	f	class:ImGui	typeref:typename:bool
TreeNodeExV	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::TreeNodeExV(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list a/;"	f	class:ImGui	typeref:typename:bool
TreeNodeSetOpen	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::TreeNodeSetOpen(ImGuiID id, bool open)$/;"	f	class:ImGui	typeref:typename:void
TreeNodeUpdateNextOpen	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::TreeNodeUpdateNextOpen(ImGuiID id, ImGuiTreeNodeFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
TreeNodeV	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::TreeNodeV(const char* str_id, const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:bool
TreeNodeV	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::TreeNodeV(const void* ptr_id, const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:bool
TreePop	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::TreePop()$/;"	f	class:ImGui	typeref:typename:void
TreePush	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::TreePush(const char* str_id)$/;"	f	class:ImGui	typeref:typename:void
TreePush	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::TreePush(const void* ptr_id)$/;"	f	class:ImGui	typeref:typename:void
TreePushOverrideID	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::TreePushOverrideID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
Troubleshooting	build/_deps/imgui-proj-src/docs/FONTS.md	/^## Troubleshooting$/;"	s
TryGetMapData	build/_deps/imgui-proj-src/imgui_internal.h	/^    T*          TryGetMapData(ImPoolIdx n)          { int idx = Map.Data[n].val_i; if (idx == -1/;"	f	struct:ImPool	typeref:typename:T *
Type	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp	/^    GLint   Enabled, Size, Type, Normalized, Stride;$/;"	m	struct:ImGui_ImplOpenGL3_VtxAttribState	typeref:typename:GLint	file:
Type	build/_deps/imgui-proj-src/imgui.cpp	/^    ImGuiDockRequestType    Type;$/;"	m	struct:ImGuiDockRequest	typeref:typename:ImGuiDockRequestType	file:
Type	build/_deps/imgui-proj-src/imgui_demo.cpp	/^                const char*     Type;$/;"	m	struct:ShowDemoWindowTables::MyTreeNode	typeref:typename:const char *	file:
Type	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiContextHookType        Type;$/;"	m	struct:ImGuiContextHook	typeref:typename:ImGuiContextHookType
Type	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiDataType   Type;$/;"	m	struct:ImGuiDataVarInfo	typeref:typename:ImGuiDataType
Type	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiInputEventType             Type;$/;"	m	struct:ImGuiInputEvent	typeref:typename:ImGuiInputEventType
TypeHash	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID     TypeHash;       \/\/ == ImHashStr(TypeName)$/;"	m	struct:ImGuiSettingsHandler	typeref:typename:ImGuiID
TypeName	build/_deps/imgui-proj-src/imgui_internal.h	/^    const char* TypeName;       \/\/ Short description stored in .ini file. Disallowed character/;"	m	struct:ImGuiSettingsHandler	typeref:typename:const char *
TypingSelectFindBestLeadingMatch	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^int ImGui::TypingSelectFindBestLeadingMatch(ImGuiTypingSelectRequest* req, int items_count, cons/;"	f	class:ImGui	typeref:typename:int
TypingSelectFindMatch	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^int ImGui::TypingSelectFindMatch(ImGuiTypingSelectRequest* req, int items_count, const char* (*g/;"	f	class:ImGui	typeref:typename:int
TypingSelectFindNextSingleCharMatch	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^int ImGui::TypingSelectFindNextSingleCharMatch(ImGuiTypingSelectRequest* req, int items_count, c/;"	f	class:ImGui	typeref:typename:int
TypingSelectState	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiTypingSelectState  TypingSelectState;                  \/\/ State for GetTypingSelectRe/;"	m	struct:ImGuiContext	typeref:typename:ImGuiTypingSelectState
U0	build/_deps/imgui-proj-src/imgui.h	/^    float           U0, V0, U1, V1;     \/\/ Texture coordinates$/;"	m	struct:ImFontGlyph	typeref:typename:float
U1	build/_deps/imgui-proj-src/imgui.h	/^    float           U0, V0, U1, V1;     \/\/ Texture coordinates$/;"	m	struct:ImFontGlyph	typeref:typename:float
UILaunchStoryboardName	build/_deps/imgui-proj-src/examples/example_apple_metal/iOS/Info-iOS.plist	/^	<key>UILaunchStoryboardName<\/key>$/;"	k
UIRequiredDeviceCapabilities	build/_deps/imgui-proj-src/examples/example_apple_metal/iOS/Info-iOS.plist	/^	<key>UIRequiredDeviceCapabilities<\/key>$/;"	k
UIRequiresFullScreen	build/_deps/imgui-proj-src/examples/example_apple_metal/iOS/Info-iOS.plist	/^	<key>UIRequiresFullScreen<\/key>$/;"	k
UIStatusBarHidden	build/_deps/imgui-proj-src/examples/example_apple_metal/iOS/Info-iOS.plist	/^	<key>UIStatusBarHidden<\/key>$/;"	k
UISupportedInterfaceOrientations	build/_deps/imgui-proj-src/examples/example_apple_metal/iOS/Info-iOS.plist	/^	<key>UISupportedInterfaceOrientations<\/key>$/;"	k
UISupportedInterfaceOrientations~ipad	build/_deps/imgui-proj-src/examples/example_apple_metal/iOS/Info-iOS.plist	/^	<key>UISupportedInterfaceOrientations~ipad<\/key>$/;"	k
UNAME_S	build/_deps/imgui-proj-src/examples/example_glfw_opengl2/Makefile	/^UNAME_S := $(shell uname -s)$/;"	m
UNAME_S	build/_deps/imgui-proj-src/examples/example_glfw_opengl3/Makefile	/^UNAME_S := $(shell uname -s)$/;"	m
UNAME_S	build/_deps/imgui-proj-src/examples/example_glut_opengl2/Makefile	/^UNAME_S := $(shell uname -s)$/;"	m
UNAME_S	build/_deps/imgui-proj-src/examples/example_null/Makefile	/^UNAME_S := $(shell uname -s)$/;"	m
UNAME_S	build/_deps/imgui-proj-src/examples/example_sdl2_opengl2/Makefile	/^UNAME_S := $(shell uname -s)$/;"	m
UNAME_S	build/_deps/imgui-proj-src/examples/example_sdl2_opengl3/Makefile	/^UNAME_S := $(shell uname -s)$/;"	m
UNAME_S	build/_deps/imgui-proj-src/examples/example_sdl2_sdlrenderer2/Makefile	/^UNAME_S := $(shell uname -s)$/;"	m
UNAME_S	build/_deps/imgui-proj-src/examples/example_sdl3_opengl3/Makefile	/^UNAME_S := $(shell uname -s)$/;"	m
UNAME_S	build/_deps/imgui-proj-src/examples/example_sdl3_sdlrenderer3/Makefile	/^UNAME_S := $(shell uname -s)$/;"	m
USYNERGY_CLIPBOARD_FORMAT_BITMAP	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^	USYNERGY_CLIPBOARD_FORMAT_BITMAP				= 1,			\/* Bitmap format, BMP 24\/32bpp, BI_RGB *\/$/;"	e	enum:uSynergyClipboardFormat
USYNERGY_CLIPBOARD_FORMAT_HTML	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^	USYNERGY_CLIPBOARD_FORMAT_HTML					= 2,			\/* HTML format, HTML fragment, UTF-8, newline is LF /;"	e	enum:uSynergyClipboardFormat
USYNERGY_CLIPBOARD_FORMAT_TEXT	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^	USYNERGY_CLIPBOARD_FORMAT_TEXT					= 0,			\/* Text format, UTF-8, newline is LF *\/$/;"	e	enum:uSynergyClipboardFormat
USYNERGY_FALSE	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_FALSE	/;"	d
USYNERGY_IDLE_TIMEOUT	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_IDLE_TIMEOUT	/;"	d
USYNERGY_IS_PACKET	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.c	/^#define USYNERGY_IS_PACKET(/;"	d	file:
USYNERGY_MODIFIER_ALT	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_MODIFIER_ALT	/;"	d
USYNERGY_MODIFIER_ALT_GR	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_MODIFIER_ALT_GR	/;"	d
USYNERGY_MODIFIER_CAPSLOCK	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_MODIFIER_CAPSLOCK	/;"	d
USYNERGY_MODIFIER_CTRL	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_MODIFIER_CTRL	/;"	d
USYNERGY_MODIFIER_LEVEL5LOCK	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_MODIFIER_LEVEL5LOCK	/;"	d
USYNERGY_MODIFIER_META	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_MODIFIER_META	/;"	d
USYNERGY_MODIFIER_NUMLOCK	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_MODIFIER_NUMLOCK	/;"	d
USYNERGY_MODIFIER_SCROLLOCK	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_MODIFIER_SCROLLOCK	/;"	d
USYNERGY_MODIFIER_SHIFT	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_MODIFIER_SHIFT	/;"	d
USYNERGY_MODIFIER_WIN	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_MODIFIER_WIN	/;"	d
USYNERGY_NUM_JOYSTICKS	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_NUM_JOYSTICKS	/;"	d
USYNERGY_PROTOCOL_MAJOR	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_PROTOCOL_MAJOR	/;"	d
USYNERGY_PROTOCOL_MINOR	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_PROTOCOL_MINOR	/;"	d
USYNERGY_RECEIVE_BUFFER_SIZE	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_RECEIVE_BUFFER_SIZE	/;"	d
USYNERGY_REPLY_BUFFER_SIZE	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_REPLY_BUFFER_SIZE	/;"	d
USYNERGY_TRACE_BUFFER_SIZE	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_TRACE_BUFFER_SIZE	/;"	d
USYNERGY_TRUE	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_TRUE	/;"	d
UTF-8 Encoding Viewer**	build/_deps/imgui-proj-src/docs/FONTS.md	/^#### UTF-8 Encoding Viewer**$/;"	t
UndockTargetNode	build/_deps/imgui-proj-src/imgui.cpp	/^    ImGuiDockNode*          UndockTargetNode;$/;"	m	struct:ImGuiDockRequest	typeref:typename:ImGuiDockNode *	file:
UndockTargetWindow	build/_deps/imgui-proj-src/imgui.cpp	/^    ImGuiWindow*            UndockTargetWindow;$/;"	m	struct:ImGuiDockRequest	typeref:typename:ImGuiWindow *	file:
Uniform1i	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^        PFNGLUNIFORM1IPROC                Uniform1i;$/;"	m	struct:ImGL3WProcs::__anon6bce6ebe0108	typeref:typename:PFNGLUNIFORM1IPROC
UniformMatrix4fv	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^        PFNGLUNIFORMMATRIX4FVPROC         UniformMatrix4fv;$/;"	m	struct:ImGL3WProcs::__anon6bce6ebe0108	typeref:typename:PFNGLUNIFORMMATRIX4FVPROC
Uniforms	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.cpp	/^    WGPUBuffer          Uniforms = nullptr;             \/\/ Shader uniforms$/;"	m	struct:RenderResources	typeref:typename:WGPUBuffer	file:
Uniforms	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.cpp	/^struct Uniforms$/;"	s	file:
Unindent	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::Unindent(float indent_w)$/;"	f	class:ImGui	typeref:typename:void
UnpackAccumulativeOffsetsIntoRanges	build/_deps/imgui-proj-src/imgui_draw.cpp	/^static void UnpackAccumulativeOffsetsIntoRanges(int base_codepoint, const short* accumulative_of/;"	f	typeref:typename:void	file:
UnpackBitVectorToFlatIndexList	build/_deps/imgui-proj-src/imgui_draw.cpp	/^static void UnpackBitVectorToFlatIndexList(const ImBitVector* in, ImVector<int>* out)$/;"	f	typeref:typename:void	file:
Update	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGuiMenuColumns::Update(float spacing, bool window_reappearing)$/;"	f	class:ImGuiMenuColumns	typeref:typename:void
UpdateAliasKey	build/_deps/imgui-proj-src/imgui.cpp	/^static void UpdateAliasKey(ImGuiKey key, bool v, float analog_value)$/;"	f	typeref:typename:void	file:
UpdateDebugToolFlashStyleColor	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::UpdateDebugToolFlashStyleColor()$/;"	f	class:ImGui	typeref:typename:void
UpdateDebugToolItemPicker	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::UpdateDebugToolItemPicker()$/;"	f	class:ImGui	typeref:typename:void
UpdateDebugToolStackQueries	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::UpdateDebugToolStackQueries()$/;"	f	class:ImGui	typeref:typename:void
UpdateHoveredWindowAndCaptureFlags	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::UpdateHoveredWindowAndCaptureFlags()$/;"	f	class:ImGui	typeref:typename:void
UpdateInputEvents	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::UpdateInputEvents(bool trickle_fast_inputs)$/;"	f	class:ImGui	typeref:typename:void
UpdateKeyRoutingTable	build/_deps/imgui-proj-src/imgui.cpp	/^static void ImGui::UpdateKeyRoutingTable(ImGuiKeyRoutingTable* rt)$/;"	f	class:ImGui	typeref:typename:void	file:
UpdateKeyboardInputs	build/_deps/imgui-proj-src/imgui.cpp	/^static void ImGui::UpdateKeyboardInputs()$/;"	f	class:ImGui	typeref:typename:void	file:
UpdateMergedFlags	build/_deps/imgui-proj-src/imgui_internal.h	/^    void                    UpdateMergedFlags()     { MergedFlags = SharedFlags | LocalFlags | L/;"	f	struct:ImGuiDockNode	typeref:typename:void
UpdateMouseInputs	build/_deps/imgui-proj-src/imgui.cpp	/^static void ImGui::UpdateMouseInputs()$/;"	f	class:ImGui	typeref:typename:void	file:
UpdateMouseMovingWindowEndFrame	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::UpdateMouseMovingWindowEndFrame()$/;"	f	class:ImGui	typeref:typename:void
UpdateMouseMovingWindowNewFrame	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::UpdateMouseMovingWindowNewFrame()$/;"	f	class:ImGui	typeref:typename:void
UpdateMouseWheel	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::UpdateMouseWheel()$/;"	f	class:ImGui	typeref:typename:void
UpdatePlatformWindows	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::UpdatePlatformWindows()$/;"	f	class:ImGui	typeref:typename:void
UpdateSettings	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::UpdateSettings()$/;"	f	class:ImGui	typeref:typename:void
UpdateTryMergeWindowIntoHostViewport	build/_deps/imgui-proj-src/imgui.cpp	/^static bool ImGui::UpdateTryMergeWindowIntoHostViewport(ImGuiWindow* window, ImGuiViewportP* vie/;"	f	class:ImGui	typeref:typename:bool	file:
UpdateTryMergeWindowIntoHostViewports	build/_deps/imgui-proj-src/imgui.cpp	/^static bool ImGui::UpdateTryMergeWindowIntoHostViewports(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:bool	file:
UpdateViewportPlatformMonitor	build/_deps/imgui-proj-src/imgui.cpp	/^static void ImGui::UpdateViewportPlatformMonitor(ImGuiViewportP* viewport)$/;"	f	class:ImGui	typeref:typename:void	file:
UpdateViewportsEndFrame	build/_deps/imgui-proj-src/imgui.cpp	/^static void ImGui::UpdateViewportsEndFrame()$/;"	f	class:ImGui	typeref:typename:void	file:
UpdateViewportsNewFrame	build/_deps/imgui-proj-src/imgui.cpp	/^static void ImGui::UpdateViewportsNewFrame()$/;"	f	class:ImGui	typeref:typename:void	file:
UpdateWindowInFocusOrderList	build/_deps/imgui-proj-src/imgui.cpp	/^static void UpdateWindowInFocusOrderList(ImGuiWindow* window, bool just_created, ImGuiWindowFlag/;"	f	typeref:typename:void	file:
UpdateWindowManualResize	build/_deps/imgui-proj-src/imgui.cpp	/^static int ImGui::UpdateWindowManualResize(ImGuiWindow* window, const ImVec2& size_auto_fit, int/;"	f	class:ImGui	typeref:typename:int	file:
UpdateWindowParentAndRootLinks	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::UpdateWindowParentAndRootLinks(ImGuiWindow* window, ImGuiWindowFlags flags, ImGuiWin/;"	f	class:ImGui	typeref:typename:void
UpdateWorkRect	build/_deps/imgui-proj-src/imgui_internal.h	/^    void    UpdateWorkRect()            { WorkPos = CalcWorkRectPos(WorkOffsetMin); WorkSize = C/;"	f	struct:ImGuiViewportP	typeref:typename:void
Usage	README.md	/^## Usage$/;"	s
Usage	build/_deps/imgui-proj-src/docs/README.md	/^### Usage$/;"	S
Usage	build/_deps/imgui-proj-src/misc/freetype/README.md	/^### Usage$/;"	S
UseBufferSubData	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp	/^    bool            UseBufferSubData;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:bool	file:
UseDynamicRendering	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.h	/^    bool                            UseDynamicRendering;$/;"	m	struct:ImGui_ImplVulkan_InitInfo	typeref:typename:bool
UseDynamicRendering	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.h	/^    bool                UseDynamicRendering;$/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:bool
UseProgram	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^        PFNGLUSEPROGRAMPROC               UseProgram;$/;"	m	struct:ImGL3WProcs::__anon6bce6ebe0108	typeref:typename:PFNGLUSEPROGRAMPROC
UseVulkan	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^    bool                    UseVulkan;$/;"	m	struct:ImGui_ImplSDL2_Data	typeref:typename:bool	file:
UseVulkan	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^    bool                    UseVulkan;$/;"	m	struct:ImGui_ImplSDL3_Data	typeref:typename:bool	file:
Used4kPagesMap	build/_deps/imgui-proj-src/imgui.h	/^    ImU8                        Used4kPagesMap[(IM_UNICODE_CODEPOINT_MAX+1)\/4096\/8]; \/\/ 2 by/;"	m	struct:ImFont	typeref:typename:ImU8[]
UsedChars	build/_deps/imgui-proj-src/imgui.h	/^    ImVector<ImU32> UsedChars;            \/\/ Store 1-bit per Unicode code point (0=unused, 1=u/;"	m	struct:ImFontGlyphRangesBuilder	typeref:typename:ImVector<ImU32>
UserCallback	build/_deps/imgui-proj-src/imgui.h	/^    ImDrawCallback  UserCallback;       \/\/ 4-8  \/\/ If != NULL, call the function instead of /;"	m	struct:ImDrawCmd	typeref:typename:ImDrawCallback
UserCallbackData	build/_deps/imgui-proj-src/imgui.h	/^    void*           UserCallbackData;   \/\/ 4-8  \/\/ The draw callback code can access this.$/;"	m	struct:ImDrawCmd	typeref:typename:void *
UserData	build/_deps/imgui-proj-src/imgui.h	/^    void*                       UserData;           \/\/ Store your own atlas related user-data /;"	m	struct:ImFontAtlas	typeref:typename:void *
UserData	build/_deps/imgui-proj-src/imgui.h	/^    void*               UserData;       \/\/ What user passed to InputText()      \/\/ Read-only$/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:void *
UserData	build/_deps/imgui-proj-src/imgui.h	/^    void*       UserData;                       \/\/ = NULL           \/\/ Store your own data.$/;"	m	struct:ImGuiIO	typeref:typename:void *
UserData	build/_deps/imgui-proj-src/imgui.h	/^    void*   UserData;       \/\/ Read-only.   What user passed to SetNextWindowSizeConstraints()/;"	m	struct:ImGuiSizeCallbackData	typeref:typename:void *
UserData	build/_deps/imgui-proj-src/imgui_internal.h	/^    void*                       UserData;$/;"	m	struct:ImGuiContextHook	typeref:typename:void *
UserData	build/_deps/imgui-proj-src/imgui_internal.h	/^    void*       UserData;$/;"	m	struct:ImGuiSettingsHandler	typeref:typename:void *
UserData	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^struct ImGuiGetNameFromIndexOldToNewCallbackData { void* UserData; bool (*OldCallback)(void*, in/;"	m	struct:ImGuiGetNameFromIndexOldToNewCallbackData	typeref:typename:void *	file:
UserFlags	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^        unsigned int    UserFlags;          \/\/ = ImFontConfig::RasterizerFlags$/;"	m	struct:__anon9c8900c20110::FreeTypeFont	typeref:typename:unsigned int	file:
UserID	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                 UserID;                         \/\/ Optional, value passed to Table/;"	m	struct:ImGuiTableColumn	typeref:typename:ImGuiID
UserID	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                 UserID;$/;"	m	struct:ImGuiTableColumnSettings	typeref:typename:ImGuiID
UserOuterSize	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2                      UserOuterSize;              \/\/ outer_size.x passed to BeginTab/;"	m	struct:ImGuiTableTempData	typeref:typename:ImVec2
Using Colorful Glyphs/Emojis	build/_deps/imgui-proj-src/docs/FONTS.md	/^## Using Colorful Glyphs\/Emojis$/;"	s
Using Custom Colorful Icons	build/_deps/imgui-proj-src/docs/FONTS.md	/^## Using Custom Colorful Icons$/;"	s
Using Custom Glyph Ranges	build/_deps/imgui-proj-src/docs/FONTS.md	/^## Using Custom Glyph Ranges$/;"	s
Using FreeType Rasterizer (imgui_freetype)	build/_deps/imgui-proj-src/docs/FONTS.md	/^## Using FreeType Rasterizer (imgui_freetype)$/;"	s
Using Icon Fonts	build/_deps/imgui-proj-src/docs/FONTS.md	/^## Using Icon Fonts$/;"	s
Using OpenType SVG fonts (SVGinOT)	build/_deps/imgui-proj-src/misc/freetype/README.md	/^### Using OpenType SVG fonts (SVGinOT)$/;"	S
Using a custom engine?	build/_deps/imgui-proj-src/docs/BACKENDS.md	/^### Using a custom engine?$/;"	S
V0	build/_deps/imgui-proj-src/imgui.h	/^    float           U0, V0, U1, V1;     \/\/ Texture coordinates$/;"	m	struct:ImFontGlyph	typeref:typename:float
V1	build/_deps/imgui-proj-src/imgui.h	/^    float           U0, V0, U1, V1;     \/\/ Texture coordinates$/;"	m	struct:ImFontGlyph	typeref:typename:float
VERTEX_CONSTANT_BUFFER_DX10	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^struct VERTEX_CONSTANT_BUFFER_DX10$/;"	s	file:
VERTEX_CONSTANT_BUFFER_DX11	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^struct VERTEX_CONSTANT_BUFFER_DX11$/;"	s	file:
VERTEX_CONSTANT_BUFFER_DX12	build/_deps/imgui-proj-src/backends/imgui_impl_dx12.cpp	/^struct VERTEX_CONSTANT_BUFFER_DX12$/;"	s	file:
VK_DEFINE_HANDLE	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^#define VK_DEFINE_HANDLE(/;"	d	file:
VK_DEFINE_NON_DISPATCHABLE_HANDLE	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^#define VK_DEFINE_NON_DISPATCHABLE_HANDLE(/;"	d	file:
VK_NO_PROTOTYPES	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.h	/^#define VK_NO_PROTOTYPES$/;"	d
VK_RESULT_MAX_ENUM	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^enum VkResult { VK_RESULT_MAX_ENUM = 0x7FFFFFFF };$/;"	e	enum:VkResult	file:
VS	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^        ID3D10VertexShader*         VS;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:ID3D10VertexShader *	file:
VS	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^        ID3D11VertexShader*         VS;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:ID3D11VertexShader *	file:
VSConstantBuffer	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^        ID3D10Buffer*               IndexBuffer, *VertexBuffer, *VSConstantBuffer;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:ID3D10Buffer ***	file:
VSConstantBuffer	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^        ID3D11Buffer*               IndexBuffer, *VertexBuffer, *VSConstantBuffer;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:ID3D11Buffer ***	file:
VSInstances	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^        ID3D11ClassInstance         *PSInstances[256], *VSInstances[256], *GSInstances[256];   \//;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:ID3D11ClassInstance * [256]* [256]	file:
VSInstancesCount	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^        UINT                        PSInstancesCount, VSInstancesCount, GSInstancesCount;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:UINT	file:
VSliderFloat	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::VSliderFloat(const char* label, const ImVec2& size, float* v, float v_min, float v_m/;"	f	class:ImGui	typeref:typename:bool
VSliderInt	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::VSliderInt(const char* label, const ImVec2& size, int* v, int v_min, int v_max, cons/;"	f	class:ImGui	typeref:typename:bool
VSliderScalar	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^bool ImGui::VSliderScalar(const char* label, const ImVec2& size, ImGuiDataType data_type, void* /;"	f	class:ImGui	typeref:typename:bool
Valid	build/_deps/imgui-proj-src/imgui.h	/^    bool                Valid;              \/\/ Only valid after Render() is called and before /;"	m	struct:ImDrawData	typeref:typename:bool
Value	build/_deps/imgui-proj-src/imgui.h	/^    ImVec4          Value;$/;"	m	struct:ImColor	typeref:typename:ImVec4
Value	build/_deps/imgui-proj-src/imgui_demo.cpp	/^    struct EnumDesc { ImGuiTableFlags Value; const char* Name; const char* Tooltip; };$/;"	m	struct:EditTableSizingFlags::EnumDesc	typeref:typename:ImGuiTableFlags	file:
Value	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::Value(const char* prefix, bool b)$/;"	f	class:ImGui	typeref:typename:void
Value	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::Value(const char* prefix, float v, const char* float_format)$/;"	f	class:ImGui	typeref:typename:void
Value	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::Value(const char* prefix, int v)$/;"	f	class:ImGui	typeref:typename:void
Value	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^void ImGui::Value(const char* prefix, unsigned int v)$/;"	f	class:ImGui	typeref:typename:void
Values	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^    const float* Values;$/;"	m	struct:ImGuiPlotArrayGetterData	typeref:typename:const float *	file:
VarIdx	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiStyleVar   VarIdx;$/;"	m	struct:ImGuiStyleMod	typeref:typename:ImGuiStyleVar
VboHandle	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp	/^    unsigned int    VboHandle, ElementsHandle;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:unsigned int	file:
VertexAttribPointer	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^        PFNGLVERTEXATTRIBPOINTERPROC      VertexAttribPointer;$/;"	m	struct:ImGL3WProcs::__anon6bce6ebe0108	typeref:typename:PFNGLVERTEXATTRIBPOINTERPROC
VertexBuffer	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^        ID3D10Buffer*               IndexBuffer, *VertexBuffer, *VSConstantBuffer;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:ID3D10Buffer **	file:
VertexBuffer	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^        ID3D11Buffer*               IndexBuffer, *VertexBuffer, *VSConstantBuffer;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:ID3D11Buffer **	file:
VertexBuffer	build/_deps/imgui-proj-src/backends/imgui_impl_dx12.cpp	/^    ID3D12Resource*     VertexBuffer;$/;"	m	struct:ImGui_ImplDX12_RenderBuffers	typeref:typename:ID3D12Resource *	file:
VertexBuffer	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^    VkBuffer            VertexBuffer;$/;"	m	struct:ImGui_ImplVulkan_FrameRenderBuffers	typeref:typename:VkBuffer	file:
VertexBuffer	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.cpp	/^    WGPUBuffer  VertexBuffer;$/;"	m	struct:FrameResources	typeref:typename:WGPUBuffer	file:
VertexBufferHost	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.cpp	/^    ImDrawVert* VertexBufferHost;$/;"	m	struct:FrameResources	typeref:typename:ImDrawVert *	file:
VertexBufferMemory	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^    VkDeviceMemory      VertexBufferMemory;$/;"	m	struct:ImGui_ImplVulkan_FrameRenderBuffers	typeref:typename:VkDeviceMemory	file:
VertexBufferOffset	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^        UINT                        IndexBufferOffset, VertexBufferStride, VertexBufferOffset;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:UINT	file:
VertexBufferOffset	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^        UINT                        IndexBufferOffset, VertexBufferStride, VertexBufferOffset;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:UINT	file:
VertexBufferSize	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^    int                         VertexBufferSize;$/;"	m	struct:ImGui_ImplDX10_Data	typeref:typename:int	file:
VertexBufferSize	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^    int                         VertexBufferSize;$/;"	m	struct:ImGui_ImplDX11_Data	typeref:typename:int	file:
VertexBufferSize	build/_deps/imgui-proj-src/backends/imgui_impl_dx12.cpp	/^    int                 VertexBufferSize;$/;"	m	struct:ImGui_ImplDX12_RenderBuffers	typeref:typename:int	file:
VertexBufferSize	build/_deps/imgui-proj-src/backends/imgui_impl_dx9.cpp	/^    int                         VertexBufferSize;$/;"	m	struct:ImGui_ImplDX9_Data	typeref:typename:int	file:
VertexBufferSize	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp	/^    GLsizeiptr      VertexBufferSize;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:GLsizeiptr	file:
VertexBufferSize	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^    VkDeviceSize        VertexBufferSize;$/;"	m	struct:ImGui_ImplVulkan_FrameRenderBuffers	typeref:typename:VkDeviceSize	file:
VertexBufferSize	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.cpp	/^    int         VertexBufferSize;$/;"	m	struct:FrameResources	typeref:typename:int	file:
VertexBufferStride	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^        UINT                        IndexBufferOffset, VertexBufferStride, VertexBufferOffset;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:UINT	file:
VertexBufferStride	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^        UINT                        IndexBufferOffset, VertexBufferStride, VertexBufferOffset;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:UINT	file:
VertexDecl	build/_deps/imgui-proj-src/backends/imgui_impl_allegro5.cpp	/^    ALLEGRO_VERTEX_DECL*        VertexDecl;$/;"	m	struct:ImGui_ImplAllegro5_Data	typeref:typename:ALLEGRO_VERTEX_DECL *	file:
Viewport	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^        PFNGLVIEWPORTPROC                 Viewport;$/;"	m	struct:ImGL3WProcs::__anon6bce6ebe0108	typeref:typename:PFNGLVIEWPORTPROC
Viewport	build/_deps/imgui-proj-src/backends/imgui_impl_sdlrenderer2.cpp	/^        SDL_Rect    Viewport;$/;"	m	struct:ImGui_ImplSDLRenderer2_RenderDrawData::BackupSDLRendererState	typeref:typename:SDL_Rect	file:
Viewport	build/_deps/imgui-proj-src/backends/imgui_impl_sdlrenderer3.cpp	/^        SDL_Rect    Viewport;$/;"	m	struct:ImGui_ImplSDLRenderer3_RenderDrawData::BackupSDLRendererState	typeref:typename:SDL_Rect	file:
Viewport	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiViewportP*         Viewport;                           \/\/ Always set in Begin(). Inac/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiViewportP *
ViewportAllowPlatformMonitorExtend	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                     ViewportAllowPlatformMonitorExtend; \/\/ Reset to -1 every frame (in/;"	m	struct:ImGuiWindow	typeref:typename:int
ViewportComparerByLastFocusedStampCount	build/_deps/imgui-proj-src/imgui.cpp	/^static int IMGUI_CDECL ViewportComparerByLastFocusedStampCount(const void* lhs, const void* rhs)$/;"	f	typeref:typename:int IMGUI_CDECL	file:
ViewportCreatedCount	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                     ViewportCreatedCount;               \/\/ Unique sequential creation /;"	m	struct:ImGuiContext	typeref:typename:int
ViewportEnabled	build/_deps/imgui-proj-src/backends/imgui_impl_sdlrenderer3.cpp	/^        bool        ViewportEnabled;$/;"	m	struct:ImGui_ImplSDLRenderer3_RenderDrawData::BackupSDLRendererState	typeref:typename:bool	file:
ViewportFlagsOverrideClear	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiViewportFlags  ViewportFlagsOverrideClear; \/\/ Viewport flags to clear when a window o/;"	m	struct:ImGuiWindowClass	typeref:typename:ImGuiViewportFlags
ViewportFlagsOverrideSet	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiViewportFlags  ViewportFlagsOverrideSet;   \/\/ Viewport flags to set when a window of /;"	m	struct:ImGuiWindowClass	typeref:typename:ImGuiViewportFlags
ViewportFocusedStampCount	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                     ViewportFocusedStampCount;          \/\/ Every time the front-most w/;"	m	struct:ImGuiContext	typeref:typename:int
ViewportId	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                     ViewportId;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImGuiID
ViewportId	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                 ViewportId;                         \/\/ We backup the viewport id (/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiID
ViewportId	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID     ViewportId;$/;"	m	struct:ImGuiWindowSettings	typeref:typename:ImGuiID
ViewportOwned	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    ViewportOwned;$/;"	m	struct:ImGuiWindow	typeref:typename:bool
ViewportPos	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2                  ViewportPos;                        \/\/ We backup the viewport posi/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ViewportPos	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2ih    ViewportPos;$/;"	m	struct:ImGuiWindowSettings	typeref:typename:ImVec2ih
Viewports	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^        D3D10_VIEWPORT              Viewports[D3D10_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PI/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:D3D10_VIEWPORT[]	file:
Viewports	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^        D3D11_VIEWPORT              Viewports[D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PI/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:D3D11_VIEWPORT[]	file:
Viewports	build/_deps/imgui-proj-src/imgui.h	/^    ImVector<ImGuiViewport*>        Viewports;                              \/\/ Main viewports,/;"	m	struct:ImGuiPlatformIO	typeref:typename:ImVector<ImGuiViewport * >
Viewports	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVector<ImGuiViewportP*> Viewports;                        \/\/ Active viewports (always 1+/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiViewportP * >
ViewportsCount	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^        UINT                        ScissorRectsCount, ViewportsCount;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:UINT	file:
ViewportsCount	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^        UINT                        ScissorRectsCount, ViewportsCount;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:UINT	file:
Visible	build/_deps/imgui-proj-src/imgui.h	/^    unsigned int    Visible : 1;        \/\/ Flag to indicate glyph has no visible pixels (e.g. /;"	m	struct:ImFontGlyph	typeref:typename:unsigned int:1
VisibleMaskByIndex	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImBitArrayPtr               VisibleMaskByIndex;         \/\/ Column Index -> IsVisibleX|IsVi/;"	m	struct:ImGuiTable	typeref:typename:ImBitArrayPtr
VisibleTabId	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID             VisibleTabId;           \/\/ Can occasionally be != SelectedTabId (e.g. /;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiID
VisibleTabWasSubmitted	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                VisibleTabWasSubmitted;$/;"	m	struct:ImGuiTabBar	typeref:typename:bool
VisibleWindow	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiWindow*            VisibleWindow;              \/\/ Generally point to window which is /;"	m	struct:ImGuiDockNode	typeref:typename:ImGuiWindow *
Visuals	README.md	/^## Visuals$/;"	s
VkResult	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^enum VkResult { VK_RESULT_MAX_ENUM = 0x7FFFFFFF };$/;"	g	file:
VtxBuffer	build/_deps/imgui-proj-src/imgui.h	/^    ImVector<ImDrawVert>    VtxBuffer;          \/\/ Vertex buffer.$/;"	m	struct:ImDrawList	typeref:typename:ImVector<ImDrawVert>
VtxOffset	build/_deps/imgui-proj-src/imgui.h	/^    unsigned int    VtxOffset;          \/\/ 4    \/\/ Start offset in vertex buffer. ImGuiBacke/;"	m	struct:ImDrawCmd	typeref:typename:unsigned int
VtxOffset	build/_deps/imgui-proj-src/imgui.h	/^    unsigned int    VtxOffset;$/;"	m	struct:ImDrawCmdHeader	typeref:typename:unsigned int
VulkanInitInfo	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^    ImGui_ImplVulkan_InitInfo   VulkanInitInfo;$/;"	m	struct:ImGui_ImplVulkan_Data	typeref:typename:ImGui_ImplVulkan_InitInfo	file:
WGL_WindowData	build/_deps/imgui-proj-src/examples/example_win32_opengl3/main.cpp	/^struct WGL_WindowData { HDC hDC; };$/;"	s	file:
WIN32_LEAN_AND_MEAN	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define WIN32_LEAN_AND_MEAN /;"	d
WIN32_LEAN_AND_MEAN	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^#define WIN32_LEAN_AND_MEAN$/;"	d	file:
WIN32_LEAN_AND_MEAN	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^#define WIN32_LEAN_AND_MEAN$/;"	d	file:
WIN32_LEAN_AND_MEAN	build/_deps/imgui-proj-src/examples/example_win32_opengl3/main.cpp	/^#define WIN32_LEAN_AND_MEAN$/;"	d	file:
WIN32_LEAN_AND_MEAN	build/_deps/imgui-proj-src/imgui.cpp	/^#define WIN32_LEAN_AND_MEAN$/;"	d	file:
WINDOWS_HOVER_PADDING	build/_deps/imgui-proj-src/imgui.cpp	/^static const float WINDOWS_HOVER_PADDING                    = 4.0f;     \/\/ Extend outside wind/;"	v	typeref:typename:const float	file:
WINDOWS_MOUSE_WHEEL_SCROLL_LOCK_TIMER	build/_deps/imgui-proj-src/imgui.cpp	/^static const float WINDOWS_MOUSE_WHEEL_SCROLL_LOCK_TIMER    = 0.70f;    \/\/ Lock scrolled windo/;"	v	typeref:typename:const float	file:
WINDOWS_RESIZE_FROM_EDGES_FEEDBACK_TIMER	build/_deps/imgui-proj-src/imgui.cpp	/^static const float WINDOWS_RESIZE_FROM_EDGES_FEEDBACK_TIMER = 0.04f;    \/\/ Reduce visual noise/;"	v	typeref:typename:const float	file:
WINGDIAPI	build/_deps/imgui-proj-src/backends/imgui_impl_opengl2.cpp	/^#define WINGDIAPI /;"	d	file:
WINGDIAPI	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^ #define WINGDIAPI /;"	d
WITH_EXTRA_WARNINGS	build/_deps/imgui-proj-src/examples/example_null/Makefile	/^WITH_EXTRA_WARNINGS ?= 0$/;"	m
WITH_FREETYPE	build/_deps/imgui-proj-src/examples/example_null/Makefile	/^WITH_FREETYPE ?= 0$/;"	m
WM_DPICHANGED	build/_deps/imgui-proj-src/examples/example_win32_directx11/main.cpp	/^#define WM_DPICHANGED /;"	d	file:
WM_DPICHANGED	build/_deps/imgui-proj-src/examples/example_win32_directx9/main.cpp	/^#define WM_DPICHANGED /;"	d	file:
WM_MOUSEHWHEEL	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^#define WM_MOUSEHWHEEL /;"	d	file:
WRT_Content	build/_deps/imgui-proj-src/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anon86f0acb10103	file:
WRT_ContentIdeal	build/_deps/imgui-proj-src/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anon86f0acb10103	file:
WRT_ContentRegionRect	build/_deps/imgui-proj-src/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anon86f0acb10103	file:
WRT_Count	build/_deps/imgui-proj-src/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anon86f0acb10103	file:
WRT_InnerClipRect	build/_deps/imgui-proj-src/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anon86f0acb10103	file:
WRT_InnerRect	build/_deps/imgui-proj-src/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anon86f0acb10103	file:
WRT_OuterRect	build/_deps/imgui-proj-src/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anon86f0acb10103	file:
WRT_OuterRectClipped	build/_deps/imgui-proj-src/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anon86f0acb10103	file:
WRT_WorkRect	build/_deps/imgui-proj-src/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anon86f0acb10103	file:
WaitForLastSubmittedFrame	build/_deps/imgui-proj-src/examples/example_win32_directx12/main.cpp	/^void WaitForLastSubmittedFrame()$/;"	f	typeref:typename:void
WaitForNextFrameResources	build/_deps/imgui-proj-src/examples/example_win32_directx12/main.cpp	/^FrameContext* WaitForNextFrameResources()$/;"	f	typeref:typename:FrameContext *
WantApply	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                        WantApply;              \/\/ Set when loaded from .ini data (to /;"	m	struct:ImGuiTableSettings	typeref:typename:bool
WantApply	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool        WantApply;      \/\/ Set when loaded from .ini data (to enable merging\/loading /;"	m	struct:ImGuiWindowSettings	typeref:typename:bool
WantCaptureKeyboard	build/_deps/imgui-proj-src/imgui.h	/^    bool        WantCaptureKeyboard;                \/\/ Set when Dear ImGui will use keyboard i/;"	m	struct:ImGuiIO	typeref:typename:bool
WantCaptureKeyboardNextFrame	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                     WantCaptureKeyboardNextFrame;       \/\/ "$/;"	m	struct:ImGuiContext	typeref:typename:int
WantCaptureMouse	build/_deps/imgui-proj-src/imgui.h	/^    bool        WantCaptureMouse;                   \/\/ Set when Dear ImGui will use mouse inpu/;"	m	struct:ImGuiIO	typeref:typename:bool
WantCaptureMouseNextFrame	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                     WantCaptureMouseNextFrame;          \/\/ Explicit capture override v/;"	m	struct:ImGuiContext	typeref:typename:int
WantCaptureMouseUnlessPopupClose	build/_deps/imgui-proj-src/imgui.h	/^    bool        WantCaptureMouseUnlessPopupClose;   \/\/ Alternative to WantCaptureMouse: (WantC/;"	m	struct:ImGuiIO	typeref:typename:bool
WantClose	build/_deps/imgui-proj-src/imgui_demo.cpp	/^    bool        WantClose;  \/\/ Set when the document$/;"	m	struct:MyDocument	typeref:typename:bool	file:
WantClose	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                WantClose;              \/\/ Marked as closed by SetTabItemClosed()$/;"	m	struct:ImGuiTabItem	typeref:typename:bool
WantCloseAll	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    WantCloseAll            :1; \/\/ Set when closing all tabs at once.$/;"	m	struct:ImGuiDockNode	typeref:typename:bool:1
WantCloseTabId	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID                 WantCloseTabId;             \/\/ [Leaf node only] Set when closing a/;"	m	struct:ImGuiDockNode	typeref:typename:ImGuiID
WantCollapseToggle	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    WantCollapseToggle;$/;"	m	struct:ImGuiWindow	typeref:typename:bool
WantDelete	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool        WantDelete;     \/\/ Set to invalidate\/delete the settings entry$/;"	m	struct:ImGuiWindowSettings	typeref:typename:bool
WantFullRebuild	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                            WantFullRebuild;$/;"	m	struct:ImGuiDockContext	typeref:typename:bool
WantHiddenTabBarToggle	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    WantHiddenTabBarToggle  :1;$/;"	m	struct:ImGuiDockNode	typeref:typename:bool:1
WantHiddenTabBarUpdate	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    WantHiddenTabBarUpdate  :1;$/;"	m	struct:ImGuiDockNode	typeref:typename:bool:1
WantLayout	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                WantLayout;$/;"	m	struct:ImGuiTabBar	typeref:typename:bool
WantLockSizeOnce	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    WantLockSizeOnce        :1;$/;"	m	struct:ImGuiDockNode	typeref:typename:bool:1
WantMouseMove	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    WantMouseMove           :1; \/\/ After a node extraction we need to /;"	m	struct:ImGuiDockNode	typeref:typename:bool:1
WantSaveIniSettings	build/_deps/imgui-proj-src/imgui.h	/^    bool        WantSaveIniSettings;                \/\/ When manual .ini load\/save is active (/;"	m	struct:ImGuiIO	typeref:typename:bool
WantSetMousePos	build/_deps/imgui-proj-src/imgui.h	/^    bool        WantSetMousePos;                    \/\/ MousePos has been altered, backend shou/;"	m	struct:ImGuiIO	typeref:typename:bool
WantTextInput	build/_deps/imgui-proj-src/imgui.h	/^    bool        WantTextInput;                      \/\/ Mobile\/console: when set, you may disp/;"	m	struct:ImGuiIO	typeref:typename:bool
WantTextInputNextFrame	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                     WantTextInputNextFrame;$/;"	m	struct:ImGuiContext	typeref:typename:int
WantUpdateGamepadsList	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^    bool                          WantUpdateGamepadsList;$/;"	m	struct:ImGui_ImplSDL2_Data	typeref:typename:bool	file:
WantUpdateGamepadsList	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^    bool                    WantUpdateGamepadsList;$/;"	m	struct:ImGui_ImplSDL3_Data	typeref:typename:bool	file:
WantUpdateHasGamepad	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^    bool                        WantUpdateHasGamepad;$/;"	m	struct:ImGui_ImplWin32_Data	typeref:typename:bool	file:
WantUpdateMonitors	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^    bool                    WantUpdateMonitors;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:bool	file:
WantUpdateMonitors	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^    bool                    WantUpdateMonitors;$/;"	m	struct:ImGui_ImplSDL2_Data	typeref:typename:bool	file:
WantUpdateMonitors	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^    bool                    WantUpdateMonitors;$/;"	m	struct:ImGui_ImplSDL3_Data	typeref:typename:bool	file:
WantUpdateMonitors	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^    bool                        WantUpdateMonitors;$/;"	m	struct:ImGui_ImplWin32_Data	typeref:typename:bool	file:
WantVisible	build/_deps/imgui-proj-src/imgui.h	/^    bool    WantVisible;        \/\/ A widget wants the IME to be visible$/;"	m	struct:ImGuiPlatformImeData	typeref:typename:bool
WasActive	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    WasActive;$/;"	m	struct:ImGuiWindow	typeref:typename:bool
What are backends?	build/_deps/imgui-proj-src/docs/BACKENDS.md	/^### What are backends?$/;"	S
WheelX	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiInputEventMouseWheel    { float WheelX, WheelY; ImGuiMouseSource MouseSource; };$/;"	m	struct:ImGuiInputEventMouseWheel	typeref:typename:float
WheelY	build/_deps/imgui-proj-src/imgui_internal.h	/^struct ImGuiInputEventMouseWheel    { float WheelX, WheelY; ImGuiMouseSource MouseSource; };$/;"	m	struct:ImGuiInputEventMouseWheel	typeref:typename:float
WheelingAxisAvg	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2                  WheelingAxisAvg;$/;"	m	struct:ImGuiContext	typeref:typename:ImVec2
WheelingWindow	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiWindow*            WheelingWindow;                     \/\/ Track the window we started/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
WheelingWindowRefMousePos	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2                  WheelingWindowRefMousePos;$/;"	m	struct:ImGuiContext	typeref:typename:ImVec2
WheelingWindowReleaseTimer	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   WheelingWindowReleaseTimer;$/;"	m	struct:ImGuiContext	typeref:typename:float
WheelingWindowScrolledFrame	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                     WheelingWindowScrolledFrame;$/;"	m	struct:ImGuiContext	typeref:typename:int
WheelingWindowStartFrame	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                     WheelingWindowStartFrame;           \/\/ This may be set one frame b/;"	m	struct:ImGuiContext	typeref:typename:int
WheelingWindowWheelRemainder	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2                  WheelingWindowWheelRemainder;$/;"	m	struct:ImGuiContext	typeref:typename:ImVec2
Width	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.h	/^    int                 Width;$/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:int
Width	build/_deps/imgui-proj-src/imgui.h	/^    unsigned short  Width, Height;  \/\/ Input    \/\/ Desired rectangle dimension$/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:unsigned short
Width	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                       Width;              \/\/ Set by SetNextItemWidth()$/;"	m	struct:ImGuiNextItemData	typeref:typename:float
Width	build/_deps/imgui-proj-src/imgui_internal.h	/^    float               Width;                  \/\/ Width currently displayed$/;"	m	struct:ImGuiTabItem	typeref:typename:float
Width	build/_deps/imgui-proj-src/imgui_internal.h	/^    float       Width;$/;"	m	struct:ImGuiShrinkWidthItem	typeref:typename:float
Width	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^    float               Width;                  \/\/ Sum of width of tabs in this section (after/;"	m	struct:ImGuiTabBarSection	typeref:typename:float	file:
Width	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^        int         Width;              \/\/ Glyph's width in pixels.$/;"	m	struct:__anon9c8900c20110::GlyphInfo	typeref:typename:int	file:
WidthAllTabs	build/_deps/imgui-proj-src/imgui_internal.h	/^    float               WidthAllTabs;           \/\/ Actual width of all tabs (locked during lay/;"	m	struct:ImGuiTabBar	typeref:typename:float
WidthAllTabsIdeal	build/_deps/imgui-proj-src/imgui_internal.h	/^    float               WidthAllTabsIdeal;      \/\/ Ideal width if all tabs were visible and no/;"	m	struct:ImGuiTabBar	typeref:typename:float
WidthAuto	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   WidthAuto;                      \/\/ Automatic width$/;"	m	struct:ImGuiTableColumn	typeref:typename:float
WidthGiven	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   WidthGiven;                     \/\/ Final\/actual width visible == /;"	m	struct:ImGuiTableColumn	typeref:typename:float
WidthOrWeight	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   WidthOrWeight;$/;"	m	struct:ImGuiTableColumnSettings	typeref:typename:float
WidthRequest	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   WidthRequest;                   \/\/ Master width absolute value whe/;"	m	struct:ImGuiTableColumn	typeref:typename:float
Widths	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImU16       Widths[4];          \/\/ Width of:   Icon, Label, Shortcut, Mark  (accumulators /;"	m	struct:ImGuiMenuColumns	typeref:typename:ImU16[4]
Window	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^    GLFWwindow*             Window;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:GLFWwindow *	file:
Window	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^    GLFWwindow* Window;$/;"	m	struct:ImGui_ImplGlfw_ViewportData	typeref:typename:GLFWwindow *	file:
Window	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^    NSWindow*                   Window;$/;"	E	struct:ImGui_ImplOSX_Data
Window	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^    SDL_Window*             Window;$/;"	m	struct:ImGui_ImplSDL2_Data	typeref:typename:SDL_Window *	file:
Window	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^    SDL_Window*     Window;$/;"	m	struct:ImGui_ImplSDL2_ViewportData	typeref:typename:SDL_Window *	file:
Window	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^    SDL_Window*             Window;$/;"	m	struct:ImGui_ImplSDL3_Data	typeref:typename:SDL_Window *	file:
Window	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^    SDL_Window*     Window;$/;"	m	struct:ImGui_ImplSDL3_ViewportData	typeref:typename:SDL_Window *	file:
Window	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^    ImGui_ImplVulkanH_Window                Window;             \/\/ Used by secondary viewports/;"	m	struct:ImGui_ImplVulkan_ViewportData	typeref:typename:ImGui_ImplVulkanH_Window	file:
Window	build/_deps/imgui-proj-src/imgui.cpp	/^    struct DockRemainingWindowTask { ImGuiWindow* Window; ImGuiID DockId; DockRemainingWindowTas/;"	m	struct:ImGui::DockBuilderCopyDockSpace::DockRemainingWindowTask	typeref:typename:ImGuiWindow *	file:
Window	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiWindow*        Window;                 \/\/ Set when the viewport is owned by a window /;"	m	struct:ImGuiViewportP	typeref:typename:ImGuiWindow *
Window	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiWindow*        Window;                 \/\/ When TabItem is part of a DockNode's TabBar/;"	m	struct:ImGuiTabItem	typeref:typename:ImGuiWindow *
Window	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiWindow*        Window;         \/\/ Init,Move    \/\/ Best candidate window (result->It/;"	m	struct:ImGuiNavItemData	typeref:typename:ImGuiWindow *
Window	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiWindow*        Window;         \/\/ Resolved on BeginPopup() - may stay unresolved if u/;"	m	struct:ImGuiPopupData	typeref:typename:ImGuiWindow *
Window	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiWindow*        Window;$/;"	m	struct:ImGuiWindowStackData	typeref:typename:ImGuiWindow *
Window	imgui.ini	/^[Window][Dear ImGui Demo]$/;"	s
Window	imgui.ini	/^[Window][Debug##Default]$/;"	s
Window	imgui.ini	/^[Window][Hello, world!]$/;"	s
Window	imgui.ini	/^[Window][neditor]$/;"	s
WindowBorderSize	build/_deps/imgui-proj-src/imgui.h	/^    float       WindowBorderSize;           \/\/ Thickness of border around windows. Generally s/;"	m	struct:ImGuiStyle	typeref:typename:float
WindowBorderSize	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   WindowBorderSize;                   \/\/ Window border size at the t/;"	m	struct:ImGuiWindow	typeref:typename:float
WindowClass	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiWindowClass            WindowClass;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImGuiWindowClass
WindowClass	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiWindowClass        WindowClass;                        \/\/ Advanced users only. Set wi/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindowClass
WindowClass	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiWindowClass        WindowClass;                \/\/ [Root node only]$/;"	m	struct:ImGuiDockNode	typeref:typename:ImGuiWindowClass
WindowComparerByBeginOrder	build/_deps/imgui-proj-src/imgui.cpp	/^            struct Func { static int IMGUI_CDECL WindowComparerByBeginOrder(const void* lhs, con/;"	f	struct:ImGui::ShowMetricsWindow::Func	typeref:typename:int IMGUI_CDECL	file:
WindowID	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^    Uint32          WindowID;$/;"	m	struct:ImGui_ImplSDL2_ViewportData	typeref:typename:Uint32	file:
WindowID	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^    Uint32          WindowID;$/;"	m	struct:ImGui_ImplSDL3_ViewportData	typeref:typename:Uint32	file:
WindowID	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID             WindowID;$/;"	m	struct:ImGuiFocusScopeData	typeref:typename:ImGuiID
WindowID	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiID     WindowID;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImGuiID
WindowMenuButtonPosition	build/_deps/imgui-proj-src/imgui.h	/^    ImGuiDir    WindowMenuButtonPosition;   \/\/ Side of the collapsing\/docking button in the t/;"	m	struct:ImGuiStyle	typeref:typename:ImGuiDir
WindowMinSize	build/_deps/imgui-proj-src/imgui.h	/^    ImVec2      WindowMinSize;              \/\/ Minimum window size. This is a global setting. /;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
WindowOwned	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^    bool        WindowOwned;$/;"	m	struct:ImGui_ImplGlfw_ViewportData	typeref:typename:bool	file:
WindowOwned	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^    bool            WindowOwned;$/;"	m	struct:ImGui_ImplSDL2_ViewportData	typeref:typename:bool	file:
WindowOwned	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^    bool            WindowOwned;$/;"	m	struct:ImGui_ImplSDL3_ViewportData	typeref:typename:bool	file:
WindowOwned	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^    bool                                    WindowOwned;$/;"	m	struct:ImGui_ImplVulkan_ViewportData	typeref:typename:bool	file:
WindowPadding	build/_deps/imgui-proj-src/imgui.h	/^    ImVec2      WindowPadding;              \/\/ Padding within a window.$/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
WindowPadding	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2                  WindowPadding;                      \/\/ Window padding at the time /;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
WindowPosRelToAbs	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline ImVec2           WindowPosRelToAbs(ImGuiWindow* window, const ImVec2& p)  { ImVec2 of/;"	f	namespace:ImGui	typeref:typename:ImVec2
WindowRectAbsToRel	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline ImRect           WindowRectAbsToRel(ImGuiWindow* window, const ImRect& r) { ImVec2 of/;"	f	namespace:ImGui	typeref:typename:ImRect
WindowRectRelToAbs	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline ImRect           WindowRectRelToAbs(ImGuiWindow* window, const ImRect& r) { ImVec2 of/;"	f	namespace:ImGui	typeref:typename:ImRect
WindowResizeBorderExpectedRect	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImRect                  WindowResizeBorderExpectedRect;     \/\/ Expected border rect, switc/;"	m	struct:ImGuiContext	typeref:typename:ImRect
WindowResizeRelativeMode	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    WindowResizeRelativeMode;$/;"	m	struct:ImGuiContext	typeref:typename:bool
WindowRounding	build/_deps/imgui-proj-src/imgui.h	/^    float       WindowRounding;             \/\/ Radius of window corners rounding. Set to 0.0f /;"	m	struct:ImGuiStyle	typeref:typename:float
WindowRounding	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   WindowRounding;                     \/\/ Window rounding at the time/;"	m	struct:ImGuiWindow	typeref:typename:float
WindowSelectViewport	build/_deps/imgui-proj-src/imgui.cpp	/^static void ImGui::WindowSelectViewport(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void	file:
WindowSettingsHandler_ApplyAll	build/_deps/imgui-proj-src/imgui.cpp	/^static void WindowSettingsHandler_ApplyAll(ImGuiContext* ctx, ImGuiSettingsHandler*)$/;"	f	typeref:typename:void	file:
WindowSettingsHandler_ClearAll	build/_deps/imgui-proj-src/imgui.cpp	/^static void WindowSettingsHandler_ClearAll(ImGuiContext* ctx, ImGuiSettingsHandler*)$/;"	f	typeref:typename:void	file:
WindowSettingsHandler_ReadLine	build/_deps/imgui-proj-src/imgui.cpp	/^static void WindowSettingsHandler_ReadLine(ImGuiContext*, ImGuiSettingsHandler*, void* entry, co/;"	f	typeref:typename:void	file:
WindowSettingsHandler_ReadOpen	build/_deps/imgui-proj-src/imgui.cpp	/^static void* WindowSettingsHandler_ReadOpen(ImGuiContext*, ImGuiSettingsHandler*, const char* na/;"	f	typeref:typename:void *	file:
WindowSettingsHandler_WriteAll	build/_deps/imgui-proj-src/imgui.cpp	/^static void WindowSettingsHandler_WriteAll(ImGuiContext* ctx, ImGuiSettingsHandler* handler, ImG/;"	f	typeref:typename:void	file:
WindowSyncOwnedViewport	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGui::WindowSyncOwnedViewport(ImGuiWindow* window, ImGuiWindow* parent_window_in_stack)$/;"	f	class:ImGui	typeref:typename:void
WindowTitleAlign	build/_deps/imgui-proj-src/imgui.h	/^    ImVec2      WindowTitleAlign;           \/\/ Alignment for title bar text. Defaults to (0.0f/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
Windows	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVector<ImGuiWindow*>  Windows;                            \/\/ Windows, sorted in display /;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiWindow * >
Windows	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVector<ImGuiWindow*>  Windows;                    \/\/ Note: unordered list! Iterate TabBa/;"	m	struct:ImGuiDockNode	typeref:typename:ImVector<ImGuiWindow * >
Windows with Visual Studio's CLI	build/_deps/imgui-proj-src/examples/example_sdl2_opengl3/README.md	/^## Windows with Visual Studio's CLI$/;"	s
Windows with Visual Studio's CLI	build/_deps/imgui-proj-src/examples/example_sdl3_opengl3/README.md	/^## Windows with Visual Studio's CLI$/;"	s
Windows with Visual Studio's IDE	build/_deps/imgui-proj-src/examples/example_sdl2_opengl3/README.md	/^## Windows with Visual Studio's IDE$/;"	s
Windows with Visual Studio's IDE	build/_deps/imgui-proj-src/examples/example_sdl3_opengl3/README.md	/^## Windows with Visual Studio's IDE$/;"	s
WindowsActiveCount	build/_deps/imgui-proj-src/imgui_internal.h	/^    int                     WindowsActiveCount;                 \/\/ Number of unique windows su/;"	m	struct:ImGuiContext	typeref:typename:int
WindowsById	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImGuiStorage            WindowsById;                        \/\/ Map window's ImGuiID to ImG/;"	m	struct:ImGuiContext	typeref:typename:ImGuiStorage
WindowsFocusOrder	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVector<ImGuiWindow*>  WindowsFocusOrder;                  \/\/ Root windows, sorted in foc/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiWindow * >
WindowsHoverPadding	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2                  WindowsHoverPadding;                \/\/ Padding around resizable wi/;"	m	struct:ImGuiContext	typeref:typename:ImVec2
WindowsTempSortBuffer	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVector<ImGuiWindow*>  WindowsTempSortBuffer;              \/\/ Temporary buffer used in En/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiWindow * >
WithinEndChild	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    WithinEndChild;                     \/\/ Set within EndChild()$/;"	m	struct:ImGuiContext	typeref:typename:bool
WithinFrameScope	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    WithinFrameScope;                   \/\/ Set by NewFrame(), cleared /;"	m	struct:ImGuiContext	typeref:typename:bool
WithinFrameScopeWithImplicitWindow	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    WithinFrameScopeWithImplicitWindow; \/\/ Set by NewFrame(), cleared /;"	m	struct:ImGuiContext	typeref:typename:bool
WndProc	build/_deps/imgui-proj-src/examples/example_win32_directx10/main.cpp	/^LRESULT WINAPI WndProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam)$/;"	f	typeref:typename:LRESULT WINAPI
WndProc	build/_deps/imgui-proj-src/examples/example_win32_directx11/main.cpp	/^LRESULT WINAPI WndProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam)$/;"	f	typeref:typename:LRESULT WINAPI
WndProc	build/_deps/imgui-proj-src/examples/example_win32_directx12/main.cpp	/^LRESULT WINAPI WndProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam)$/;"	f	typeref:typename:LRESULT WINAPI
WndProc	build/_deps/imgui-proj-src/examples/example_win32_directx9/main.cpp	/^LRESULT WINAPI WndProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam)$/;"	f	typeref:typename:LRESULT WINAPI
WndProc	build/_deps/imgui-proj-src/examples/example_win32_opengl3/main.cpp	/^LRESULT WINAPI WndProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam)$/;"	f	typeref:typename:LRESULT WINAPI
WorkMaxX	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   WorkMaxX;                       \/\/ Contents region max ~(MaxX - Ce/;"	m	struct:ImGuiTableColumn	typeref:typename:float
WorkMinX	build/_deps/imgui-proj-src/imgui_internal.h	/^    float                   WorkMinX;                       \/\/ Contents region min ~(MinX + Ce/;"	m	struct:ImGuiTableColumn	typeref:typename:float
WorkOffsetMax	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2              WorkOffsetMax;          \/\/ Work Area: Offset from Pos+Size to bottom-r/;"	m	struct:ImGuiViewportP	typeref:typename:ImVec2
WorkOffsetMin	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImVec2              WorkOffsetMin;          \/\/ Work Area: Offset from Pos to top-left corn/;"	m	struct:ImGuiViewportP	typeref:typename:ImVec2
WorkPos	build/_deps/imgui-proj-src/imgui.h	/^    ImVec2              WorkPos;                \/\/ Work Area: Position of the viewport minus t/;"	m	struct:ImGuiViewport	typeref:typename:ImVec2
WorkPos	build/_deps/imgui-proj-src/imgui.h	/^    ImVec2  WorkPos, WorkSize;      \/\/ Coordinates without task bars \/ side bars \/ menu bars/;"	m	struct:ImGuiPlatformMonitor	typeref:typename:ImVec2
WorkRect	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImRect                      WorkRect;$/;"	m	struct:ImGuiTable	typeref:typename:ImRect
WorkRect	build/_deps/imgui-proj-src/imgui_internal.h	/^    ImRect                  WorkRect;                           \/\/ Initially covers the whole /;"	m	struct:ImGuiWindow	typeref:typename:ImRect
WorkSize	build/_deps/imgui-proj-src/imgui.h	/^    ImVec2              WorkSize;               \/\/ Work Area: Size of the viewport minus task /;"	m	struct:ImGuiViewport	typeref:typename:ImVec2
WorkSize	build/_deps/imgui-proj-src/imgui.h	/^    ImVec2  WorkPos, WorkSize;      \/\/ Coordinates without task bars \/ side bars \/ menu bars/;"	m	struct:ImGuiPlatformMonitor	typeref:typename:ImVec2
WriteAccessed	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool                    WriteAccessed;                      \/\/ Set to true when any widget/;"	m	struct:ImGuiWindow	typeref:typename:bool
WriteAllFn	build/_deps/imgui-proj-src/imgui_internal.h	/^    void        (*WriteAllFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler, ImGuiTextBuffer*/;"	m	struct:ImGuiSettingsHandler	typeref:typename:void (*)(ImGuiContext * ctx,ImGuiSettingsHandler * handler,ImGuiTextBuffer * out_buf)
X	build/_deps/imgui-proj-src/imgui.h	/^    unsigned short  X, Y;           \/\/ Output   \/\/ Packed position in Atlas$/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:unsigned short
X0	build/_deps/imgui-proj-src/imgui.h	/^    float           X0, Y0, X1, Y1;     \/\/ Glyph corners$/;"	m	struct:ImFontGlyph	typeref:typename:float
X1	build/_deps/imgui-proj-src/imgui.h	/^    float           X0, Y0, X1, Y1;     \/\/ Glyph corners$/;"	m	struct:ImFontGlyph	typeref:typename:float
XInputDLL	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^    HMODULE                     XInputDLL;$/;"	m	struct:ImGui_ImplWin32_Data	typeref:typename:HMODULE	file:
XInputGetCapabilities	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^    PFN_XInputGetCapabilities   XInputGetCapabilities;$/;"	m	struct:ImGui_ImplWin32_Data	typeref:typename:PFN_XInputGetCapabilities	file:
XInputGetState	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^    PFN_XInputGetState          XInputGetState;$/;"	m	struct:ImGui_ImplWin32_Data	typeref:typename:PFN_XInputGetState	file:
Y	build/_deps/imgui-proj-src/imgui.h	/^    unsigned short  X, Y;           \/\/ Output   \/\/ Packed position in Atlas$/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:unsigned short
Y0	build/_deps/imgui-proj-src/imgui.h	/^    float           X0, Y0, X1, Y1;     \/\/ Glyph corners$/;"	m	struct:ImFontGlyph	typeref:typename:float
Y1	build/_deps/imgui-proj-src/imgui.h	/^    float           X0, Y0, X1, Y1;     \/\/ Glyph corners$/;"	m	struct:ImFontGlyph	typeref:typename:float
[Return to Index](#index)	build/_deps/imgui-proj-src/docs/FAQ.md	/^##### [Return to Index](#index)$/;"	T
[Return to Index](#index)	build/_deps/imgui-proj-src/docs/FONTS.md	/^##### [Return to Index](#index)$/;"	T
^^ include paths                  ^^ source files                                                                                         ^^ output exe                         ^^ output dir  ^^ libraries	build/_deps/imgui-proj-src/examples/example_sdl2_sdlrenderer2/README.md	/^#                 ^^ include paths                  ^^ source files                             /;"	c
^^ include paths                  ^^ source files                                                                                    ^^ output exe                    ^^ output dir   ^^ libraries	build/_deps/imgui-proj-src/examples/example_sdl2_opengl3/README.md	/^#                 ^^ include paths                  ^^ source files                             /;"	c
^^ include paths                  ^^ source files                                                            ^^ output exe                    ^^ output dir   ^^ libraries	build/_deps/imgui-proj-src/examples/example_sdl2_opengl2/README.md	/^#          ^^ include paths                  ^^ source files                                    /;"	c
^^ include paths     ^^ source files                                                                                    ^^ output exe                    ^^ output dir   ^^ libraries	build/_deps/imgui-proj-src/examples/example_sdl3_opengl3/README.md	/^#                 ^^ include paths     ^^ source files                                          /;"	c
_CRT_SECURE_NO_WARNINGS	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp	/^#define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_CRT_SECURE_NO_WARNINGS	build/_deps/imgui-proj-src/imgui.cpp	/^#define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_CRT_SECURE_NO_WARNINGS	build/_deps/imgui-proj-src/imgui_demo.cpp	/^#define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_CRT_SECURE_NO_WARNINGS	build/_deps/imgui-proj-src/imgui_draw.cpp	/^#define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_CRT_SECURE_NO_WARNINGS	build/_deps/imgui-proj-src/imgui_tables.cpp	/^#define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_CRT_SECURE_NO_WARNINGS	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^#define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_CRT_SECURE_NO_WARNINGS	build/_deps/imgui-proj-src/misc/fonts/binary_to_compressed_c.cpp	/^#define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_CalcCircleAutoSegmentCount	build/_deps/imgui-proj-src/imgui_draw.cpp	/^int ImDrawList::_CalcCircleAutoSegmentCount(float radius) const$/;"	f	class:ImDrawList	typeref:typename:int
_Channels	build/_deps/imgui-proj-src/imgui.h	/^    ImVector<ImDrawChannel>     _Channels;   \/\/ Draw channels (not resized down so _Count migh/;"	m	struct:ImDrawListSplitter	typeref:typename:ImVector<ImDrawChannel>
_ClearFreeMemory	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImDrawList::_ClearFreeMemory()$/;"	f	class:ImDrawList	typeref:typename:void
_ClipRectStack	build/_deps/imgui-proj-src/imgui.h	/^    ImVector<ImVec4>        _ClipRectStack;     \/\/ [Internal]$/;"	m	struct:ImDrawList	typeref:typename:ImVector<ImVec4>
_CmdBuffer	build/_deps/imgui-proj-src/imgui.h	/^    ImVector<ImDrawCmd>         _CmdBuffer;$/;"	m	struct:ImDrawChannel	typeref:typename:ImVector<ImDrawCmd>
_CmdHeader	build/_deps/imgui-proj-src/imgui.h	/^    ImDrawCmdHeader         _CmdHeader;         \/\/ [Internal] template of active commands. Fie/;"	m	struct:ImDrawList	typeref:typename:ImDrawCmdHeader
_Count	build/_deps/imgui-proj-src/imgui.h	/^    int                         _Count;      \/\/ Number of active channels (1+)$/;"	m	struct:ImDrawListSplitter	typeref:typename:int
_Current	build/_deps/imgui-proj-src/imgui.h	/^    int                         _Current;    \/\/ Current channel number (0)$/;"	m	struct:ImDrawListSplitter	typeref:typename:int
_Data	build/_deps/imgui-proj-src/imgui.h	/^    ImDrawListSharedData*   _Data;              \/\/ Pointer to shared draw data (you can use Im/;"	m	struct:ImDrawList	typeref:typename:ImDrawListSharedData *
_FringeScale	build/_deps/imgui-proj-src/imgui.h	/^    float                   _FringeScale;       \/\/ [Internal] anti-alias fringe is scaled by t/;"	m	struct:ImDrawList	typeref:typename:float
_IdxBuffer	build/_deps/imgui-proj-src/imgui.h	/^    ImVector<ImDrawIdx>         _IdxBuffer;$/;"	m	struct:ImDrawChannel	typeref:typename:ImVector<ImDrawIdx>
_IdxWritePtr	build/_deps/imgui-proj-src/imgui.h	/^    ImDrawIdx*              _IdxWritePtr;       \/\/ [Internal] point within IdxBuffer.Data afte/;"	m	struct:ImDrawList	typeref:typename:ImDrawIdx *
_IsWindows10OrGreater	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^#define _IsWindows10OrGreater(/;"	d	file:
_IsWindows8OrGreater	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^#define _IsWindows8OrGreater(/;"	d	file:
_IsWindows8Point1OrGreater	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^#define _IsWindows8Point1OrGreater(/;"	d	file:
_IsWindowsVersionOrGreater	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^static BOOL _IsWindowsVersionOrGreater(WORD major, WORD minor, WORD)$/;"	f	typeref:typename:BOOL	file:
_IsWindowsVistaOrGreater	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^#define _IsWindowsVistaOrGreater(/;"	d	file:
_OnChangedClipRect	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImDrawList::_OnChangedClipRect()$/;"	f	class:ImDrawList	typeref:typename:void
_OnChangedTextureID	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImDrawList::_OnChangedTextureID()$/;"	f	class:ImDrawList	typeref:typename:void
_OnChangedVtxOffset	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImDrawList::_OnChangedVtxOffset()$/;"	f	class:ImDrawList	typeref:typename:void
_OwnerName	build/_deps/imgui-proj-src/imgui.h	/^    const char*             _OwnerName;         \/\/ Pointer to owner window's name for debuggin/;"	m	struct:ImDrawList	typeref:typename:const char *
_Path	build/_deps/imgui-proj-src/imgui.h	/^    ImVector<ImVec2>        _Path;              \/\/ [Internal] current path building$/;"	m	struct:ImDrawList	typeref:typename:ImVector<ImVec2>
_PathArcToFastEx	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImDrawList::_PathArcToFastEx(const ImVec2& center, float radius, int a_min_sample, int a_ma/;"	f	class:ImDrawList	typeref:typename:void
_PathArcToN	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImDrawList::_PathArcToN(const ImVec2& center, float radius, float a_min, float a_max, int n/;"	f	class:ImDrawList	typeref:typename:void
_PopUnusedDrawCmd	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImDrawList::_PopUnusedDrawCmd()$/;"	f	class:ImDrawList	typeref:typename:void
_ResetForNewFrame	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImDrawList::_ResetForNewFrame()$/;"	f	class:ImDrawList	typeref:typename:void
_Splitter	build/_deps/imgui-proj-src/imgui.h	/^    ImDrawListSplitter      _Splitter;          \/\/ [Internal] for channels api (note: prefer u/;"	m	struct:ImDrawList	typeref:typename:ImDrawListSplitter
_TextureIdStack	build/_deps/imgui-proj-src/imgui.h	/^    ImVector<ImTextureID>   _TextureIdStack;    \/\/ [Internal]$/;"	m	struct:ImDrawList	typeref:typename:ImVector<ImTextureID>
_TryMergeDrawCmds	build/_deps/imgui-proj-src/imgui_draw.cpp	/^void ImDrawList::_TryMergeDrawCmds()$/;"	f	class:ImDrawList	typeref:typename:void
_VtxCurrentIdx	build/_deps/imgui-proj-src/imgui.h	/^    unsigned int            _VtxCurrentIdx;     \/\/ [Internal] generally == VtxBuffer.Size unle/;"	m	struct:ImDrawList	typeref:typename:unsigned int
_VtxWritePtr	build/_deps/imgui-proj-src/imgui.h	/^    ImDrawVert*             _VtxWritePtr;       \/\/ [Internal] point within VtxBuffer.Data afte/;"	m	struct:ImDrawList	typeref:typename:ImDrawVert *
_WIN32	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^ #define _WIN32$/;"	d
__STB_INCLUDE_STB_TRUETYPE_H__	build/_deps/imgui-proj-src/imstb_truetype.h	/^#define __STB_INCLUDE_STB_TRUETYPE_H__$/;"	d
__anon03f3e07e0103	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^typedef enum { PROCESS_DPI_UNAWARE = 0, PROCESS_SYSTEM_DPI_AWARE = 1, PROCESS_PER_MONITOR_DPI_AW/;"	g	file:
__anon03f3e07e0203	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^typedef enum { MDT_EFFECTIVE_DPI = 0, MDT_ANGULAR_DPI = 1, MDT_RAW_DPI = 2, MDT_DEFAULT = MDT_EF/;"	g	file:
__anon0ee941840108	build/_deps/imgui-proj-src/imstb_textedit.h	/^{$/;"	s
__anon0ee941840208	build/_deps/imgui-proj-src/imstb_textedit.h	/^{$/;"	s
__anon0ee941840308	build/_deps/imgui-proj-src/imstb_textedit.h	/^{$/;"	s
__anon0ee941840408	build/_deps/imgui-proj-src/imstb_textedit.h	/^{$/;"	s
__anon0ee941840508	build/_deps/imgui-proj-src/imstb_textedit.h	/^{$/;"	s
__anon1b6430950102	build/_deps/imgui-proj-src/imgui_demo.cpp	/^        ImGui::Combo("combo 4 (function)", &item_current_4, [](void* data, int n) { return ((con/;"	f	function:ShowDemoWindowWidgets	file:
__anon1b6430950210	build/_deps/imgui-proj-src/imgui_demo.cpp	/^{$/;"	n	file:
__anon1bdcf5960102	build/_deps/imgui-proj-src/imgui.h	/^    float  operator[] (size_t idx) const    { IM_ASSERT(idx == 0 || idx == 1); return ((const fl/;"	f	struct:ImVec2	file:
__anon1bdcf5960202	build/_deps/imgui-proj-src/imgui.h	/^    inline const T&     operator[](int i) const             { IM_ASSERT(i >= 0 && i < Size); ret/;"	f	struct:ImVector	file:
__anon1bdcf5960302	build/_deps/imgui-proj-src/imgui.h	/^    inline char         operator[](int i) const { IM_ASSERT(Buf.Data != NULL); return Buf.Data[i/;"	f	struct:ImGuiTextBuffer	file:
__anon1bdcf5960402	build/_deps/imgui-proj-src/imgui.h	/^    const char*         begin() const           { return Buf.Data ? &Buf.front() : EmptyString; /;"	f	struct:ImGuiTextBuffer	file:
__anon1bdcf5960502	build/_deps/imgui-proj-src/imgui.h	/^    const char*         end() const             { return Buf.Data ? &Buf.back() : EmptyString; }/;"	f	struct:ImGuiTextBuffer	file:
__anon1bdcf5960602	build/_deps/imgui-proj-src/imgui.h	/^    int                 size() const            { return Buf.Size ? Buf.Size - 1 : 0; }$/;"	f	struct:ImGuiTextBuffer	file:
__anon1bdcf5960702	build/_deps/imgui-proj-src/imgui.h	/^    bool                empty() const           { return Buf.Size <= 1; }$/;"	f	struct:ImGuiTextBuffer	file:
__anon1bdcf596080a	build/_deps/imgui-proj-src/imgui.h	/^        union { int val_i; float val_f; void* val_p; };$/;"	u	struct:ImGuiStorage::ImGuiStoragePair
__anon6bce6ebe0108	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^    struct {$/;"	s	union:ImGL3WProcs
__anon6bce6ebe0208	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^static struct { int major, minor; } version;$/;"	s
__anon86f0acb10103	build/_deps/imgui-proj-src/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	g	function:ImGui::ShowMetricsWindow	file:
__anon86f0acb10203	build/_deps/imgui-proj-src/imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	g	function:ImGui::ShowMetricsWindow	file:
__anon86f0acb1030a	build/_deps/imgui-proj-src/imgui.cpp	/^    union { void* ptr; int integer; } tex_id_opaque;$/;"	u	function:FormatTextureIDForDebugDisplay	file:
__anon9c8900c20110	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^{$/;"	n	file:
__anonbedcada60103	build/_deps/imgui-proj-src/imstb_rectpack.h	/^{$/;"	g
__anonbedcada60203	build/_deps/imgui-proj-src/imstb_rectpack.h	/^{$/;"	g
__anonbedcada60308	build/_deps/imgui-proj-src/imstb_rectpack.h	/^{$/;"	s
__anonc52b7f120102	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool            operator[](int n) const     { n += OFFSET; IM_ASSERT(n >= 0 && n < BITCOUNT)/;"	f	struct:ImBitArray	file:
__anonc52b7f120202	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline const T&     operator[](int i) const     { const T* p = Data + i; IM_ASSERT(p >= Data/;"	f	struct:ImSpan	file:
__anonc52b7f12030a	build/_deps/imgui-proj-src/imgui_internal.h	/^    union           { int BackupInt[2]; float BackupFloat[2]; };$/;"	u	struct:ImGuiStyleMod
__anonc52b7f12040a	build/_deps/imgui-proj-src/imgui_internal.h	/^    {$/;"	u	struct:ImGuiInputEvent
__anond648eb7b0108	build/_deps/imgui-proj-src/imstb_truetype.h	/^{$/;"	s
__anond648eb7b0208	build/_deps/imgui-proj-src/imstb_truetype.h	/^{$/;"	s
__anond648eb7b0308	build/_deps/imgui-proj-src/imstb_truetype.h	/^{$/;"	s
__anond648eb7b0408	build/_deps/imgui-proj-src/imstb_truetype.h	/^{$/;"	s
__anond648eb7b0508	build/_deps/imgui-proj-src/imstb_truetype.h	/^{$/;"	s
__anond648eb7b0603	build/_deps/imgui-proj-src/imstb_truetype.h	/^   enum {$/;"	g
__anond648eb7b0708	build/_deps/imgui-proj-src/imstb_truetype.h	/^   {$/;"	s
__anond648eb7b0808	build/_deps/imgui-proj-src/imstb_truetype.h	/^{$/;"	s
__anond648eb7b0903	build/_deps/imgui-proj-src/imstb_truetype.h	/^enum { \/\/ platformID$/;"	g
__anond648eb7b0a03	build/_deps/imgui-proj-src/imstb_truetype.h	/^enum { \/\/ encodingID for STBTT_PLATFORM_ID_UNICODE$/;"	g
__anond648eb7b0b03	build/_deps/imgui-proj-src/imstb_truetype.h	/^enum { \/\/ encodingID for STBTT_PLATFORM_ID_MICROSOFT$/;"	g
__anond648eb7b0c03	build/_deps/imgui-proj-src/imstb_truetype.h	/^enum { \/\/ encodingID for STBTT_PLATFORM_ID_MAC; same as Script Manager codes$/;"	g
__anond648eb7b0d03	build/_deps/imgui-proj-src/imstb_truetype.h	/^enum { \/\/ languageID for STBTT_PLATFORM_ID_MICROSOFT; same as LCID...$/;"	g
__anond648eb7b0e03	build/_deps/imgui-proj-src/imstb_truetype.h	/^enum { \/\/ languageID for STBTT_PLATFORM_ID_MAC$/;"	g
__anond648eb7b0f08	build/_deps/imgui-proj-src/imstb_truetype.h	/^{$/;"	s
__anond648eb7b1008	build/_deps/imgui-proj-src/imstb_truetype.h	/^{$/;"	s
__anond648eb7b1108	build/_deps/imgui-proj-src/imstb_truetype.h	/^{$/;"	s
__anond648eb7b1208	build/_deps/imgui-proj-src/imstb_truetype.h	/^{$/;"	s
__anonf4d9bddd0108	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^typedef struct { int ignored; } *					uSynergyCookie;$/;"	s
__anonf4d9bddd0208	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^{$/;"	s
__gl3w_h_	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define __gl3w_h_$/;"	d
__gl_glcorearb_h_	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define __gl_glcorearb_h_ /;"	d
__gl_h_	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define __gl_h_$/;"	d
__glsl_shader_frag_spv	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^static uint32_t __glsl_shader_frag_spv[] =$/;"	v	typeref:typename:uint32_t[]	file:
__glsl_shader_vert_spv	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^static uint32_t __glsl_shader_vert_spv[] =$/;"	v	typeref:typename:uint32_t[]	file:
__has_include	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^#  define __has_include(/;"	d	file:
__has_include	build/CMakeFiles/3.26.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define __has_include(/;"	d	file:
__shader_frag_wgsl	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.cpp	/^static const char __shader_frag_wgsl[] = R"($/;"	v	typeref:typename:const char[]	file:
__shader_vert_wgsl	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.cpp	/^static const char __shader_vert_wgsl[] = R"($/;"	v	typeref:typename:const char[]	file:
_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp.i	build/Makefile	/^_deps\/imgui-proj-src\/backends\/imgui_impl_glfw.cpp.i:$/;"	t
_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp.o	build/Makefile	/^_deps\/imgui-proj-src\/backends\/imgui_impl_glfw.cpp.o:$/;"	t
_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp.s	build/Makefile	/^_deps\/imgui-proj-src\/backends\/imgui_impl_glfw.cpp.s:$/;"	t
_deps/imgui-proj-src/backends/imgui_impl_glfw.i	build/Makefile	/^_deps\/imgui-proj-src\/backends\/imgui_impl_glfw.i: _deps\/imgui-proj-src\/backends\/imgui_impl_/;"	t
_deps/imgui-proj-src/backends/imgui_impl_glfw.o	build/Makefile	/^_deps\/imgui-proj-src\/backends\/imgui_impl_glfw.o: _deps\/imgui-proj-src\/backends\/imgui_impl_/;"	t
_deps/imgui-proj-src/backends/imgui_impl_glfw.s	build/Makefile	/^_deps\/imgui-proj-src\/backends\/imgui_impl_glfw.s: _deps\/imgui-proj-src\/backends\/imgui_impl_/;"	t
_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp.i	build/Makefile	/^_deps\/imgui-proj-src\/backends\/imgui_impl_opengl3.cpp.i:$/;"	t
_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp.o	build/Makefile	/^_deps\/imgui-proj-src\/backends\/imgui_impl_opengl3.cpp.o:$/;"	t
_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp.s	build/Makefile	/^_deps\/imgui-proj-src\/backends\/imgui_impl_opengl3.cpp.s:$/;"	t
_deps/imgui-proj-src/backends/imgui_impl_opengl3.i	build/Makefile	/^_deps\/imgui-proj-src\/backends\/imgui_impl_opengl3.i: _deps\/imgui-proj-src\/backends\/imgui_im/;"	t
_deps/imgui-proj-src/backends/imgui_impl_opengl3.o	build/Makefile	/^_deps\/imgui-proj-src\/backends\/imgui_impl_opengl3.o: _deps\/imgui-proj-src\/backends\/imgui_im/;"	t
_deps/imgui-proj-src/backends/imgui_impl_opengl3.s	build/Makefile	/^_deps\/imgui-proj-src\/backends\/imgui_impl_opengl3.s: _deps\/imgui-proj-src\/backends\/imgui_im/;"	t
_deps/imgui-proj-src/imgui.cpp.i	build/Makefile	/^_deps\/imgui-proj-src\/imgui.cpp.i:$/;"	t
_deps/imgui-proj-src/imgui.cpp.o	build/Makefile	/^_deps\/imgui-proj-src\/imgui.cpp.o:$/;"	t
_deps/imgui-proj-src/imgui.cpp.s	build/Makefile	/^_deps\/imgui-proj-src\/imgui.cpp.s:$/;"	t
_deps/imgui-proj-src/imgui.i	build/Makefile	/^_deps\/imgui-proj-src\/imgui.i: _deps\/imgui-proj-src\/imgui.cpp.i$/;"	t
_deps/imgui-proj-src/imgui.o	build/Makefile	/^_deps\/imgui-proj-src\/imgui.o: _deps\/imgui-proj-src\/imgui.cpp.o$/;"	t
_deps/imgui-proj-src/imgui.s	build/Makefile	/^_deps\/imgui-proj-src\/imgui.s: _deps\/imgui-proj-src\/imgui.cpp.s$/;"	t
_deps/imgui-proj-src/imgui_demo.cpp.i	build/Makefile	/^_deps\/imgui-proj-src\/imgui_demo.cpp.i:$/;"	t
_deps/imgui-proj-src/imgui_demo.cpp.o	build/Makefile	/^_deps\/imgui-proj-src\/imgui_demo.cpp.o:$/;"	t
_deps/imgui-proj-src/imgui_demo.cpp.s	build/Makefile	/^_deps\/imgui-proj-src\/imgui_demo.cpp.s:$/;"	t
_deps/imgui-proj-src/imgui_demo.i	build/Makefile	/^_deps\/imgui-proj-src\/imgui_demo.i: _deps\/imgui-proj-src\/imgui_demo.cpp.i$/;"	t
_deps/imgui-proj-src/imgui_demo.o	build/Makefile	/^_deps\/imgui-proj-src\/imgui_demo.o: _deps\/imgui-proj-src\/imgui_demo.cpp.o$/;"	t
_deps/imgui-proj-src/imgui_demo.s	build/Makefile	/^_deps\/imgui-proj-src\/imgui_demo.s: _deps\/imgui-proj-src\/imgui_demo.cpp.s$/;"	t
_deps/imgui-proj-src/imgui_draw.cpp.i	build/Makefile	/^_deps\/imgui-proj-src\/imgui_draw.cpp.i:$/;"	t
_deps/imgui-proj-src/imgui_draw.cpp.o	build/Makefile	/^_deps\/imgui-proj-src\/imgui_draw.cpp.o:$/;"	t
_deps/imgui-proj-src/imgui_draw.cpp.s	build/Makefile	/^_deps\/imgui-proj-src\/imgui_draw.cpp.s:$/;"	t
_deps/imgui-proj-src/imgui_draw.i	build/Makefile	/^_deps\/imgui-proj-src\/imgui_draw.i: _deps\/imgui-proj-src\/imgui_draw.cpp.i$/;"	t
_deps/imgui-proj-src/imgui_draw.o	build/Makefile	/^_deps\/imgui-proj-src\/imgui_draw.o: _deps\/imgui-proj-src\/imgui_draw.cpp.o$/;"	t
_deps/imgui-proj-src/imgui_draw.s	build/Makefile	/^_deps\/imgui-proj-src\/imgui_draw.s: _deps\/imgui-proj-src\/imgui_draw.cpp.s$/;"	t
_deps/imgui-proj-src/imgui_tables.cpp.i	build/Makefile	/^_deps\/imgui-proj-src\/imgui_tables.cpp.i:$/;"	t
_deps/imgui-proj-src/imgui_tables.cpp.o	build/Makefile	/^_deps\/imgui-proj-src\/imgui_tables.cpp.o:$/;"	t
_deps/imgui-proj-src/imgui_tables.cpp.s	build/Makefile	/^_deps\/imgui-proj-src\/imgui_tables.cpp.s:$/;"	t
_deps/imgui-proj-src/imgui_tables.i	build/Makefile	/^_deps\/imgui-proj-src\/imgui_tables.i: _deps\/imgui-proj-src\/imgui_tables.cpp.i$/;"	t
_deps/imgui-proj-src/imgui_tables.o	build/Makefile	/^_deps\/imgui-proj-src\/imgui_tables.o: _deps\/imgui-proj-src\/imgui_tables.cpp.o$/;"	t
_deps/imgui-proj-src/imgui_tables.s	build/Makefile	/^_deps\/imgui-proj-src\/imgui_tables.s: _deps\/imgui-proj-src\/imgui_tables.cpp.s$/;"	t
_deps/imgui-proj-src/imgui_widgets.cpp.i	build/Makefile	/^_deps\/imgui-proj-src\/imgui_widgets.cpp.i:$/;"	t
_deps/imgui-proj-src/imgui_widgets.cpp.o	build/Makefile	/^_deps\/imgui-proj-src\/imgui_widgets.cpp.o:$/;"	t
_deps/imgui-proj-src/imgui_widgets.cpp.s	build/Makefile	/^_deps\/imgui-proj-src\/imgui_widgets.cpp.s:$/;"	t
_deps/imgui-proj-src/imgui_widgets.i	build/Makefile	/^_deps\/imgui-proj-src\/imgui_widgets.i: _deps\/imgui-proj-src\/imgui_widgets.cpp.i$/;"	t
_deps/imgui-proj-src/imgui_widgets.o	build/Makefile	/^_deps\/imgui-proj-src\/imgui_widgets.o: _deps\/imgui-proj-src\/imgui_widgets.cpp.o$/;"	t
_deps/imgui-proj-src/imgui_widgets.s	build/Makefile	/^_deps\/imgui-proj-src\/imgui_widgets.s: _deps\/imgui-proj-src\/imgui_widgets.cpp.s$/;"	t
_glfw3_h_	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^#define _glfw3_h_$/;"	d
_glfw3_native_h_	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3native.h	/^#define _glfw3_native_h_$/;"	d
_grow_capacity	build/_deps/imgui-proj-src/imgui.h	/^    inline int          _grow_capacity(int sz) const        { int new_capacity = Capacity ? (Cap/;"	f	struct:ImVector	typeref:typename:int
_windowResizeEastWestCursor	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^+ (id)_windowResizeEastWestCursor;$/;"	c	interface:NSCursor
_windowResizeNorthEastSouthWestCursor	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^+ (id)_windowResizeNorthEastSouthWestCursor;$/;"	c	interface:NSCursor
_windowResizeNorthSouthCursor	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^+ (id)_windowResizeNorthSouthCursor;$/;"	c	interface:NSCursor
_windowResizeNorthWestSouthEastCursor	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^+ (id)_windowResizeNorthWestSouthEastCursor;$/;"	c	interface:NSCursor
acceptsFirstResponder	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^{$/;"	m	implementation:KeyEventResponder
active_head	build/_deps/imgui-proj-src/imstb_rectpack.h	/^   stbrp_node *active_head;$/;"	m	struct:stbrp_context	typeref:typename:stbrp_node *
advance	build/_deps/imgui-proj-src/imstb_truetype.h	/^   int advance;$/;"	m	struct:stbtt_kerningentry	typeref:typename:int
align	build/_deps/imgui-proj-src/imstb_rectpack.h	/^   int align;$/;"	m	struct:stbrp_context	typeref:typename:int
all	build/Makefile	/^all: cmake_check_build_system$/;"	t
all	build/_deps/imgui-proj-src/examples/example_glfw_metal/Makefile	/^all: $(EXE)$/;"	t
all	build/_deps/imgui-proj-src/examples/example_glfw_opengl2/Makefile	/^all: $(EXE)$/;"	t
all	build/_deps/imgui-proj-src/examples/example_glfw_opengl3/Makefile	/^all: $(EXE)$/;"	t
all	build/_deps/imgui-proj-src/examples/example_glut_opengl2/Makefile	/^all: $(EXE)$/;"	t
all	build/_deps/imgui-proj-src/examples/example_null/Makefile	/^all: $(EXE)$/;"	t
all	build/_deps/imgui-proj-src/examples/example_sdl2_metal/Makefile	/^all: $(EXE)$/;"	t
all	build/_deps/imgui-proj-src/examples/example_sdl2_opengl2/Makefile	/^all: $(EXE)$/;"	t
all	build/_deps/imgui-proj-src/examples/example_sdl2_opengl3/Makefile	/^all: $(EXE)$/;"	t
all	build/_deps/imgui-proj-src/examples/example_sdl2_sdlrenderer2/Makefile	/^all: $(EXE)$/;"	t
all	build/_deps/imgui-proj-src/examples/example_sdl3_opengl3/Makefile	/^all: $(EXE)$/;"	t
all	build/_deps/imgui-proj-src/examples/example_sdl3_sdlrenderer3/Makefile	/^all: $(EXE)$/;"	t
all	build/_deps/imgui-proj-subbuild/Makefile	/^all: cmake_check_build_system$/;"	t
alloc_chunk	build/_deps/imgui-proj-src/imgui_internal.h	/^    T*      alloc_chunk(size_t sz)      { size_t HDR_SZ = 4; sz = IM_MEMALIGN(HDR_SZ + sz, 4u); /;"	f	struct:ImChunkStream	typeref:typename:T *
android_main	build/_deps/imgui-proj-src/examples/example_android_opengl3/main.cpp	/^void android_main(struct android_app* app)$/;"	f	typeref:typename:void
animationTimer	build/_deps/imgui-proj-src/examples/example_apple_opengl2/main.mm	/^    NSTimer*    animationTimer;$/;"	E	interface:AppView
animationTimerFired:	build/_deps/imgui-proj-src/examples/example_apple_opengl2/main.mm	/^-(void)animationTimerFired:(NSTimer*)timer  { [self setNeedsDisplay:YES]; }$/;"	m	implementation:AppView
append	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGuiTextBuffer::append(const char* str, const char* str_end)$/;"	f	class:ImGuiTextBuffer	typeref:typename:void
append	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGuiTextIndex::append(const char* base, int old_size, int new_size)$/;"	f	class:ImGuiTextIndex	typeref:typename:void
appendf	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGuiTextBuffer::appendf(const char* fmt, ...)$/;"	f	class:ImGuiTextBuffer	typeref:typename:void
appendfv	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGuiTextBuffer::appendfv(const char* fmt, va_list args)$/;"	f	class:ImGuiTextBuffer	typeref:typename:void
application:didFinishLaunchingWithOptions:	build/_deps/imgui-proj-src/examples/example_apple_metal/main.mm	/^{$/;"	m	implementation:AppDelegate
applicationDidFinishLaunching:	build/_deps/imgui-proj-src/examples/example_apple_opengl2/main.mm	/^{$/;"	m	implementation:AppDelegate
applicationShouldTerminateAfterLastWindowClosed:	build/_deps/imgui-proj-src/examples/example_apple_metal/main.mm	/^{$/;"	m	implementation:AppDelegate
applicationShouldTerminateAfterLastWindowClosed:	build/_deps/imgui-proj-src/examples/example_apple_opengl2/main.mm	/^{$/;"	m	implementation:AppDelegate
array_of_unicode_codepoints	build/_deps/imgui-proj-src/imstb_truetype.h	/^   int *array_of_unicode_codepoints;       \/\/ if non-zero, then this is an array of unicode co/;"	m	struct:__anond648eb7b0508	typeref:typename:int *
attributedSubstringForProposedRange:actualRange:	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^{$/;"	m	implementation:KeyEventResponder
b	build/_deps/imgui-proj-src/imgui.h	/^        const char*     b;$/;"	m	struct:ImGuiTextFilter::ImGuiTextRange	typeref:typename:const char *
back	build/_deps/imgui-proj-src/imgui.h	/^    inline T&           back()                              { IM_ASSERT(Size > 0); return Data[S/;"	f	struct:ImVector	typeref:typename:T &
back	build/_deps/imgui-proj-src/imgui.h	/^    inline const T&     back() const                        { IM_ASSERT(Size > 0); return Data[S/;"	f	struct:ImVector	typeref:typename:const T &
baseline_y_delta	build/_deps/imgui-proj-src/imstb_textedit.h	/^   float baseline_y_delta;  \/\/ position of baseline relative to previous row's baseline$/;"	m	struct:__anon0ee941840408	typeref:typename:float
begin	build/_deps/imgui-proj-src/imgui.h	/^    inline const T*     begin() const                       { return Data; }$/;"	f	struct:ImVector	typeref:typename:const T *
begin	build/_deps/imgui-proj-src/imgui_internal.h	/^    T*      begin()                     { size_t HDR_SZ = 4; if (!Buf.Data) return NULL; return /;"	f	struct:ImChunkStream	typeref:typename:T *
begin	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline const T*     begin() const               { return Data; }$/;"	f	struct:ImSpan	typeref:typename:const T *
binary_to_compressed_c	build/_deps/imgui-proj-src/misc/fonts/binary_to_compressed_c.cpp	/^bool binary_to_compressed_c(const char* filename, const char* symbol, bool use_base85_encoding, /;"	f	typeref:typename:bool
blue	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^    unsigned short* blue;$/;"	m	struct:GLFWgammaramp	typeref:typename:unsigned short *
blueBits	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^    int blueBits;$/;"	m	struct:GLFWvidmode	typeref:typename:int
bottom_y	build/_deps/imgui-proj-src/imstb_truetype.h	/^   int x,y,bottom_y;$/;"	m	struct:__anond648eb7b1108	typeref:typename:int
bounds	build/_deps/imgui-proj-src/imstb_truetype.h	/^   int bounds;$/;"	m	struct:__anond648eb7b0f08	typeref:typename:int
buffer	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^@property (nonatomic, strong) id<MTLBuffer> buffer;$/;"	p	interface:MetalBuffer
bufferCache	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^@property (nonatomic, strong) NSMutableArray<MetalBuffer*>* bufferCache;$/;"	p	interface:MetalContext
c_str	build/_deps/imgui-proj-src/imgui.h	/^    const char*         c_str() const           { return Buf.Data ? Buf.Data : EmptyString; }$/;"	f	struct:ImGuiTextBuffer	typeref:typename:const char *
canBecomeKeyWindow	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^{$/;"	m	implementation:ImGui_ImplOSX_Window
capacity	build/_deps/imgui-proj-src/imgui.h	/^    inline int          capacity() const                    { return Capacity; }$/;"	f	struct:ImVector	typeref:typename:int
cff	build/_deps/imgui-proj-src/imstb_truetype.h	/^   stbtt__buf cff;                    \/\/ cff font data$/;"	m	struct:stbtt_fontinfo	typeref:typename:stbtt__buf
char_storage	build/_deps/imgui-proj-src/imstb_textedit.h	/^   int                        char_storage;$/;"	m	struct:__anon0ee941840108	typeref:typename:int
characterIndexForPoint:	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^{$/;"	m	implementation:KeyEventResponder
chardata_for_range	build/_deps/imgui-proj-src/imstb_truetype.h	/^   stbtt_packedchar *chardata_for_range; \/\/ output$/;"	m	struct:__anond648eb7b0508	typeref:typename:stbtt_packedchar *
charstrings	build/_deps/imgui-proj-src/imstb_truetype.h	/^   stbtt__buf charstrings;            \/\/ the charstring index$/;"	m	struct:stbtt_fontinfo	typeref:typename:stbtt__buf
check_vk_result	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^static void check_vk_result(VkResult err)$/;"	f	typeref:typename:void	file:
check_vk_result	build/_deps/imgui-proj-src/examples/example_glfw_vulkan/main.cpp	/^static void check_vk_result(VkResult err)$/;"	f	typeref:typename:void	file:
check_vk_result	build/_deps/imgui-proj-src/examples/example_sdl2_vulkan/main.cpp	/^static void check_vk_result(VkResult err)$/;"	f	typeref:typename:void	file:
checkout_name	build/_deps/imgui-proj-subbuild/imgui-proj-populate-prefix/tmp/imgui-proj-populate-gitupdate.cmake	/^    set(checkout_name "docking")$/;"	v
checkout_name	build/_deps/imgui-proj-subbuild/imgui-proj-populate-prefix/tmp/imgui-proj-populate-gitupdate.cmake	/^  set(checkout_name "docking")$/;"	v
checkout_name	build/_deps/imgui-proj-subbuild/imgui-proj-populate-prefix/tmp/imgui-proj-populate-gitupdate.cmake	/^  set(checkout_name "origin\/docking")$/;"	v
chunk_size	build/_deps/imgui-proj-src/imgui_internal.h	/^    int     chunk_size(const T* p)      { return ((const int*)p)[-1]; }$/;"	f	struct:ImChunkStream	typeref:typename:int
clean	build/Makefile	/^clean:$/;"	t
clean	build/_deps/imgui-proj-src/examples/example_glfw_metal/Makefile	/^clean:$/;"	t
clean	build/_deps/imgui-proj-src/examples/example_glfw_opengl2/Makefile	/^clean:$/;"	t
clean	build/_deps/imgui-proj-src/examples/example_glfw_opengl3/Makefile	/^clean:$/;"	t
clean	build/_deps/imgui-proj-src/examples/example_glut_opengl2/Makefile	/^clean:$/;"	t
clean	build/_deps/imgui-proj-src/examples/example_null/Makefile	/^clean:$/;"	t
clean	build/_deps/imgui-proj-src/examples/example_sdl2_metal/Makefile	/^clean:$/;"	t
clean	build/_deps/imgui-proj-src/examples/example_sdl2_opengl2/Makefile	/^clean:$/;"	t
clean	build/_deps/imgui-proj-src/examples/example_sdl2_opengl3/Makefile	/^clean:$/;"	t
clean	build/_deps/imgui-proj-src/examples/example_sdl2_sdlrenderer2/Makefile	/^clean:$/;"	t
clean	build/_deps/imgui-proj-src/examples/example_sdl3_opengl3/Makefile	/^clean:$/;"	t
clean	build/_deps/imgui-proj-src/examples/example_sdl3_sdlrenderer3/Makefile	/^clean:$/;"	t
clean	build/_deps/imgui-proj-subbuild/Makefile	/^clean:$/;"	t
clean/fast	build/Makefile	/^clean\/fast: clean$/;"	t
clean/fast	build/_deps/imgui-proj-subbuild/Makefile	/^clean\/fast: clean$/;"	t
clear	build/_deps/imgui-proj-src/imgui.h	/^    inline void         clear()                             { if (Data) { Size = Capacity = 0; I/;"	f	struct:ImVector	typeref:typename:void
clear	build/_deps/imgui-proj-src/imgui_internal.h	/^    void            clear()                                 { LineOffsets.clear(); EndOffset = 0/;"	f	struct:ImGuiTextIndex	typeref:typename:void
clear	build/_deps/imgui-proj-src/imgui_internal.h	/^    void    clear()                     { Buf.clear(); }$/;"	f	struct:ImChunkStream	typeref:typename:void
clear_color	build/_deps/imgui-proj-src/examples/example_glut_opengl2/main.cpp	/^static ImVec4 clear_color = ImVec4(0.45f, 0.55f, 0.60f, 1.00f);$/;"	v	typeref:typename:ImVec4	file:
clear_delete	build/_deps/imgui-proj-src/imgui.h	/^    inline void         clear_delete()                      { for (int n = 0; n < Size; n++) IM_/;"	f	struct:ImVector	typeref:typename:void
clear_destruct	build/_deps/imgui-proj-src/imgui.h	/^    inline void         clear_destruct()                    { for (int n = 0; n < Size; n++) Dat/;"	f	struct:ImVector	typeref:typename:void
close_libgl	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^static void close_libgl(void) { FreeLibrary(libgl); }$/;"	f	typeref:typename:void
cmake_check_build_system	build/Makefile	/^cmake_check_build_system:$/;"	t
cmake_check_build_system	build/_deps/imgui-proj-subbuild/Makefile	/^cmake_check_build_system:$/;"	t
cmake_force	build/Makefile	/^cmake_force:$/;"	t
cmake_force	build/_deps/imgui-proj-subbuild/Makefile	/^cmake_force:$/;"	t
col	build/_deps/imgui-proj-src/backends/imgui_impl_allegro5.cpp	/^    ALLEGRO_COLOR   col;$/;"	m	struct:ImDrawVertAllegro	typeref:typename:ALLEGRO_COLOR	file:
col	build/_deps/imgui-proj-src/backends/imgui_impl_dx9.cpp	/^    D3DCOLOR col;$/;"	m	struct:CUSTOMVERTEX	typeref:typename:D3DCOLOR	file:
col	build/_deps/imgui-proj-src/imgui.h	/^    ImU32   col;$/;"	m	struct:ImDrawVert	typeref:typename:ImU32
colorPixelFormat	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^@property (nonatomic, assign) MTLPixelFormat colorPixelFormat;$/;"	p	interface:FramebufferDescriptor
command	build/compile_commands.json	/^  "command": "\/usr\/bin\/c++  -I\/home\/xundaoxd\/Workdir\/neditor -I\/home\/xundaoxd\/Workdir\//;"	s	object:7
command	build/compile_commands.json	/^  "command": "\/usr\/bin\/c++  -I\/home\/xundaoxd\/Workdir\/neditor\/build\/_deps\/imgui-proj-sr/;"	s	object:0
command	build/compile_commands.json	/^  "command": "\/usr\/bin\/c++  -I\/home\/xundaoxd\/Workdir\/neditor\/build\/_deps\/imgui-proj-sr/;"	s	object:1
command	build/compile_commands.json	/^  "command": "\/usr\/bin\/c++  -I\/home\/xundaoxd\/Workdir\/neditor\/build\/_deps\/imgui-proj-sr/;"	s	object:2
command	build/compile_commands.json	/^  "command": "\/usr\/bin\/c++  -I\/home\/xundaoxd\/Workdir\/neditor\/build\/_deps\/imgui-proj-sr/;"	s	object:3
command	build/compile_commands.json	/^  "command": "\/usr\/bin\/c++  -I\/home\/xundaoxd\/Workdir\/neditor\/build\/_deps\/imgui-proj-sr/;"	s	object:4
command	build/compile_commands.json	/^  "command": "\/usr\/bin\/c++  -I\/home\/xundaoxd\/Workdir\/neditor\/build\/_deps\/imgui-proj-sr/;"	s	object:5
command	build/compile_commands.json	/^  "command": "\/usr\/bin\/c++  -I\/home\/xundaoxd\/Workdir\/neditor\/build\/_deps\/imgui-proj-sr/;"	s	object:6
commandQueue	build/_deps/imgui-proj-src/examples/example_apple_metal/main.mm	/^@property (nonatomic, strong) id <MTLCommandQueue> commandQueue;$/;"	p	interface:AppViewController
configSubDirs	build/_deps/imgui-proj-subbuild/imgui-proj-populate-prefix/tmp/imgui-proj-populate-mkdirs.cmake	/^set(configSubDirs )$/;"	v
const	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^# define const$/;"	d	file:
const_iterator	build/_deps/imgui-proj-src/imgui.h	/^    typedef const value_type*   const_iterator;$/;"	t	struct:ImVector	typeref:typename:const value_type *
contains	build/_deps/imgui-proj-src/imgui.h	/^    inline bool         contains(const T& v) const          { const T* data = Data;  const T* da/;"	f	struct:ImVector	typeref:typename:bool
copyWithZone:	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^{$/;"	m	implementation:FramebufferDescriptor
current_frame	build/_deps/imgui-proj-src/imgui.h	/^    operator bool() const { int current_frame = ImGui::GetFrameCount(); if (RefFrame == current_/;"	m	struct:ImGuiOnceUponAFrame	typeref:typename:int
cursor	build/_deps/imgui-proj-src/imstb_textedit.h	/^   int cursor;$/;"	m	struct:__anon0ee941840308	typeref:typename:int
cursor	build/_deps/imgui-proj-src/imstb_truetype.h	/^   int cursor;$/;"	m	struct:__anond648eb7b0108	typeref:typename:int
cursor_at_end_of_line	build/_deps/imgui-proj-src/imstb_textedit.h	/^   unsigned char cursor_at_end_of_line; \/\/ not implemented yet$/;"	m	struct:__anon0ee941840308	typeref:typename:unsigned char
cx	build/_deps/imgui-proj-src/imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anond648eb7b0708	typeref:typename:stbtt_vertex_type
cx1	build/_deps/imgui-proj-src/imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anond648eb7b0708	typeref:typename:stbtt_vertex_type
cy	build/_deps/imgui-proj-src/imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anond648eb7b0708	typeref:typename:stbtt_vertex_type
cy1	build/_deps/imgui-proj-src/imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anond648eb7b0708	typeref:typename:stbtt_vertex_type
d3dpp	build/_deps/imgui-proj-src/backends/imgui_impl_dx9.cpp	/^    D3DPRESENT_PARAMETERS   d3dpp;$/;"	m	struct:ImGui_ImplDX9_ViewportData	typeref:typename:D3DPRESENT_PARAMETERS	file:
data	build/_deps/imgui-proj-src/imstb_truetype.h	/^   unsigned char  * data;              \/\/ pointer to .ttf file$/;"	m	struct:stbtt_fontinfo	typeref:typename:unsigned char *
data	build/_deps/imgui-proj-src/imstb_truetype.h	/^   unsigned char *data;$/;"	m	struct:__anond648eb7b0108	typeref:typename:unsigned char *
dealloc	build/_deps/imgui-proj-src/examples/example_apple_opengl2/main.mm	/^-(void)dealloc                              { animationTimer = nil; }$/;"	m	implementation:AppView
dealloc	build/_deps/imgui-proj-src/examples/example_apple_opengl2/main.mm	/^{$/;"	m	implementation:AppDelegate
debug_report	build/_deps/imgui-proj-src/examples/example_glfw_vulkan/main.cpp	/^static VKAPI_ATTR VkBool32 VKAPI_CALL debug_report(VkDebugReportFlagsEXT flags, VkDebugReportObj/;"	f	typeref:typename:VKAPI_ATTR VkBool32 VKAPI_CALL	file:
debug_report	build/_deps/imgui-proj-src/examples/example_sdl2_vulkan/main.cpp	/^static VKAPI_ATTR VkBool32 VKAPI_CALL debug_report(VkDebugReportFlagsEXT flags, VkDebugReportObj/;"	f	typeref:typename:VKAPI_ATTR VkBool32 VKAPI_CALL	file:
defaultQueue	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.cpp	/^    WGPUQueue               defaultQueue = nullptr;$/;"	m	struct:ImGui_ImplWGPU_Data	typeref:typename:WGPUQueue	file:
default_target	build/Makefile	/^default_target: all$/;"	t
default_target	build/_deps/imgui-proj-subbuild/Makefile	/^default_target: all$/;"	t
delete_length	build/_deps/imgui-proj-src/imstb_textedit.h	/^   IMSTB_TEXTEDIT_POSITIONTYPE  delete_length;$/;"	m	struct:__anon0ee941840108	typeref:typename:IMSTB_TEXTEDIT_POSITIONTYPE
depend	build/Makefile	/^depend:$/;"	t
depend	build/_deps/imgui-proj-subbuild/Makefile	/^depend:$/;"	t
depthPixelFormat	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^@property (nonatomic, assign) MTLPixelFormat depthPixelFormat;$/;"	p	interface:FramebufferDescriptor
depthStencilFormat	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.cpp	/^    WGPUTextureFormat       depthStencilFormat = WGPUTextureFormat_Undefined;$/;"	m	struct:ImGui_ImplWGPU_Data	typeref:typename:WGPUTextureFormat	file:
depthStencilState	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^@property (nonatomic, strong) id<MTLDepthStencilState>      depthStencilState;$/;"	p	interface:MetalContext
dequeueReusableBufferOfLength:device:	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^- (MetalBuffer*)dequeueReusableBufferOfLength:(NSUInteger)length device:(id<MTLDevice>)device;$/;"	m	interface:MetalContext
dequeueReusableBufferOfLength:device:	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^{$/;"	m	implementation:MetalContext
device	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^@property (nonatomic, strong) id<MTLDevice>                 device;$/;"	p	interface:MetalContext
device	build/_deps/imgui-proj-src/examples/example_apple_metal/main.mm	/^@property (nonatomic, strong) id <MTLDevice> device;$/;"	p	interface:AppViewController
direction	build/_deps/imgui-proj-src/imstb_truetype.h	/^   float direction;$/;"	m	struct:stbtt__active_edge	typeref:typename:float
direction	build/_deps/imgui-proj-src/imstb_truetype.h	/^   int direction;$/;"	m	struct:stbtt__active_edge	typeref:typename:int
directory	build/compile_commands.json	/^  "directory": "\/home\/xundaoxd\/Workdir\/neditor\/build",$/;"	s	object:0
directory	build/compile_commands.json	/^  "directory": "\/home\/xundaoxd\/Workdir\/neditor\/build",$/;"	s	object:1
directory	build/compile_commands.json	/^  "directory": "\/home\/xundaoxd\/Workdir\/neditor\/build",$/;"	s	object:2
directory	build/compile_commands.json	/^  "directory": "\/home\/xundaoxd\/Workdir\/neditor\/build",$/;"	s	object:3
directory	build/compile_commands.json	/^  "directory": "\/home\/xundaoxd\/Workdir\/neditor\/build",$/;"	s	object:4
directory	build/compile_commands.json	/^  "directory": "\/home\/xundaoxd\/Workdir\/neditor\/build",$/;"	s	object:5
directory	build/compile_commands.json	/^  "directory": "\/home\/xundaoxd\/Workdir\/neditor\/build",$/;"	s	object:6
directory	build/compile_commands.json	/^  "directory": "\/home\/xundaoxd\/Workdir\/neditor\/build",$/;"	s	object:7
displaysDidChange:	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^- (void)displaysDidChange:(NSNotification*)aNotification;$/;"	m	interface:ImGuiObserver
displaysDidChange:	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^{$/;"	m	implementation:ImGuiObserver
doCommandBySelector:	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^{$/;"	m	implementation:KeyEventResponder
drawInMTKView:	build/_deps/imgui-proj-src/examples/example_apple_metal/main.mm	/^{$/;"	m	implementation:AppViewController
drawRect:	build/_deps/imgui-proj-src/examples/example_apple_opengl2/main.mm	/^-(void)drawRect:(NSRect)bounds              { [self updateAndDrawDemoView]; }$/;"	m	implementation:AppView
dx	build/_deps/imgui-proj-src/imstb_truetype.h	/^   int x,dx;$/;"	m	struct:stbtt__active_edge	typeref:typename:int
e	build/_deps/imgui-proj-src/imgui.h	/^        const char*     e;$/;"	m	struct:ImGuiTextFilter::ImGuiTextRange	typeref:typename:const char *
edit_cache	build/Makefile	/^edit_cache:$/;"	t
edit_cache	build/_deps/imgui-proj-subbuild/Makefile	/^edit_cache:$/;"	t
edit_cache/fast	build/Makefile	/^edit_cache\/fast: edit_cache$/;"	t
edit_cache/fast	build/_deps/imgui-proj-subbuild/Makefile	/^edit_cache\/fast: edit_cache$/;"	t
empty	build/_deps/imgui-proj-src/imgui.h	/^        bool            empty() const                   { return b == e; }$/;"	f	struct:ImGuiTextFilter::ImGuiTextRange	typeref:typename:bool
empty	build/_deps/imgui-proj-src/imgui.h	/^    inline bool         empty() const                       { return Size == 0; }$/;"	f	struct:ImVector	typeref:typename:bool
empty	build/_deps/imgui-proj-src/imgui_internal.h	/^    bool    empty() const               { return Buf.Size == 0; }$/;"	f	struct:ImChunkStream	typeref:typename:bool
end	build/_deps/imgui-proj-src/imgui.h	/^    inline T*           end()                               { return Data + Size; }$/;"	f	struct:ImVector	typeref:typename:T *
end	build/_deps/imgui-proj-src/imgui.h	/^    inline const T*     end() const                         { return Data + Size; }$/;"	f	struct:ImVector	typeref:typename:const T *
end	build/_deps/imgui-proj-src/imgui_internal.h	/^    T*      end()                       { return (T*)(void*)(Buf.Data + Buf.Size); }$/;"	f	struct:ImChunkStream	typeref:typename:T *
end	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline T*           end()                       { return DataEnd; }$/;"	f	struct:ImSpan	typeref:typename:T *
end	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline const T*     end() const                 { return DataEnd; }$/;"	f	struct:ImSpan	typeref:typename:const T *
equal	build/_deps/imgui-proj-src/imstb_truetype.h	/^static int equal(float *a, float *b)$/;"	f	typeref:typename:int
erase	build/_deps/imgui-proj-src/imgui.h	/^    inline T*           erase(const T* it)                  { IM_ASSERT(it >= Data && it < Data /;"	f	struct:ImVector	typeref:typename:T *
erase	build/_deps/imgui-proj-src/imgui.h	/^    inline T*           erase(const T* it, const T* it_last){ IM_ASSERT(it >= Data && it < Data /;"	f	struct:ImVector	typeref:typename:T *
erase_unsorted	build/_deps/imgui-proj-src/imgui.h	/^    inline T*           erase_unsorted(const T* it)         { IM_ASSERT(it >= Data && it < Data /;"	f	struct:ImVector	typeref:typename:T *
err	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^    FT_Error            err = FT_Err_Ok;$/;"	m	struct:LunasvgPortState	typeref:typename:FT_Error	file:
error_code	build/_deps/imgui-proj-subbuild/imgui-proj-populate-prefix/tmp/imgui-proj-populate-gitclone.cmake	/^set(error_code 1)$/;"	v
error_log_file	build/_deps/imgui-proj-subbuild/imgui-proj-populate-prefix/tmp/imgui-proj-populate-gitupdate.cmake	/^    set(error_log_file ${CMAKE_CURRENT_LIST_DIR}\/rebase_error_${tag_timestamp}Z.log)$/;"	v
example_glfw_vulkan	build/_deps/imgui-proj-src/examples/example_glfw_vulkan/CMakeLists.txt	/^add_executable(example_glfw_vulkan ${sources} ${IMGUI_DIR}\/backends\/imgui_impl_glfw.cpp ${IMGU/;"	t
extra	build/_deps/imgui-proj-src/imstb_rectpack.h	/^   stbrp_node extra[2]; \/\/ we allocate two extra nodes so optimal user-node-count is 'width' n/;"	m	struct:stbrp_context	typeref:typename:stbrp_node[2]
ey	build/_deps/imgui-proj-src/imstb_truetype.h	/^   float ey;$/;"	m	struct:stbtt__active_edge	typeref:typename:float
fdselect	build/_deps/imgui-proj-src/imstb_truetype.h	/^   stbtt__buf fdselect;               \/\/ map from glyph to fontdict$/;"	m	struct:stbtt_fontinfo	typeref:typename:stbtt__buf
fdx	build/_deps/imgui-proj-src/imstb_truetype.h	/^   float fx,fdx,fdy;$/;"	m	struct:stbtt__active_edge	typeref:typename:float
fdy	build/_deps/imgui-proj-src/imstb_truetype.h	/^   float fx,fdx,fdy;$/;"	m	struct:stbtt__active_edge	typeref:typename:float
fetch_required	build/_deps/imgui-proj-subbuild/imgui-proj-populate-prefix/tmp/imgui-proj-populate-gitupdate.cmake	/^    set(fetch_required NO)$/;"	v
fetch_required	build/_deps/imgui-proj-subbuild/imgui-proj-populate-prefix/tmp/imgui-proj-populate-gitupdate.cmake	/^    set(fetch_required YES)$/;"	v
fetch_required	build/_deps/imgui-proj-subbuild/imgui-proj-populate-prefix/tmp/imgui-proj-populate-gitupdate.cmake	/^  set(fetch_required YES)$/;"	v
file	build/_deps/imgui-proj-subbuild/CMakeFiles/imgui-proj-populate.dir/Labels.json	/^			"file" : "\/mnt\/data\/Workdir\/neditor\/build\/_deps\/imgui-proj-subbuild\/CMakeFiles\/imgui/;"	s	object:sources.0
file	build/_deps/imgui-proj-subbuild/CMakeFiles/imgui-proj-populate.dir/Labels.json	/^			"file" : "\/mnt\/data\/Workdir\/neditor\/build\/_deps\/imgui-proj-subbuild\/CMakeFiles\/imgui/;"	s	object:sources.1
file	build/_deps/imgui-proj-subbuild/CMakeFiles/imgui-proj-populate.dir/Labels.json	/^			"file" : "\/mnt\/data\/Workdir\/neditor\/build\/_deps\/imgui-proj-subbuild\/CMakeFiles\/imgui/;"	s	object:sources.2
file	build/_deps/imgui-proj-subbuild/CMakeFiles/imgui-proj-populate.dir/Labels.json	/^			"file" : "\/mnt\/data\/Workdir\/neditor\/build\/_deps\/imgui-proj-subbuild\/imgui-proj-popula/;"	s	object:sources.10
file	build/_deps/imgui-proj-subbuild/CMakeFiles/imgui-proj-populate.dir/Labels.json	/^			"file" : "\/mnt\/data\/Workdir\/neditor\/build\/_deps\/imgui-proj-subbuild\/imgui-proj-popula/;"	s	object:sources.3
file	build/_deps/imgui-proj-subbuild/CMakeFiles/imgui-proj-populate.dir/Labels.json	/^			"file" : "\/mnt\/data\/Workdir\/neditor\/build\/_deps\/imgui-proj-subbuild\/imgui-proj-popula/;"	s	object:sources.4
file	build/_deps/imgui-proj-subbuild/CMakeFiles/imgui-proj-populate.dir/Labels.json	/^			"file" : "\/mnt\/data\/Workdir\/neditor\/build\/_deps\/imgui-proj-subbuild\/imgui-proj-popula/;"	s	object:sources.5
file	build/_deps/imgui-proj-subbuild/CMakeFiles/imgui-proj-populate.dir/Labels.json	/^			"file" : "\/mnt\/data\/Workdir\/neditor\/build\/_deps\/imgui-proj-subbuild\/imgui-proj-popula/;"	s	object:sources.6
file	build/_deps/imgui-proj-subbuild/CMakeFiles/imgui-proj-populate.dir/Labels.json	/^			"file" : "\/mnt\/data\/Workdir\/neditor\/build\/_deps\/imgui-proj-subbuild\/imgui-proj-popula/;"	s	object:sources.7
file	build/_deps/imgui-proj-subbuild/CMakeFiles/imgui-proj-populate.dir/Labels.json	/^			"file" : "\/mnt\/data\/Workdir\/neditor\/build\/_deps\/imgui-proj-subbuild\/imgui-proj-popula/;"	s	object:sources.8
file	build/_deps/imgui-proj-subbuild/CMakeFiles/imgui-proj-populate.dir/Labels.json	/^			"file" : "\/mnt\/data\/Workdir\/neditor\/build\/_deps\/imgui-proj-subbuild\/imgui-proj-popula/;"	s	object:sources.9
file	build/compile_commands.json	/^  "file": "\/home\/xundaoxd\/Workdir\/neditor\/build\/_deps\/imgui-proj-src\/backends\/imgui_imp/;"	s	object:5
file	build/compile_commands.json	/^  "file": "\/home\/xundaoxd\/Workdir\/neditor\/build\/_deps\/imgui-proj-src\/backends\/imgui_imp/;"	s	object:6
file	build/compile_commands.json	/^  "file": "\/home\/xundaoxd\/Workdir\/neditor\/build\/_deps\/imgui-proj-src\/imgui.cpp",$/;"	s	object:0
file	build/compile_commands.json	/^  "file": "\/home\/xundaoxd\/Workdir\/neditor\/build\/_deps\/imgui-proj-src\/imgui_demo.cpp",$/;"	s	object:1
file	build/compile_commands.json	/^  "file": "\/home\/xundaoxd\/Workdir\/neditor\/build\/_deps\/imgui-proj-src\/imgui_draw.cpp",$/;"	s	object:2
file	build/compile_commands.json	/^  "file": "\/home\/xundaoxd\/Workdir\/neditor\/build\/_deps\/imgui-proj-src\/imgui_tables.cpp",$/;"	s	object:3
file	build/compile_commands.json	/^  "file": "\/home\/xundaoxd\/Workdir\/neditor\/build\/_deps\/imgui-proj-src\/imgui_widgets.cpp",$/;"	s	object:4
file	build/compile_commands.json	/^  "file": "\/home\/xundaoxd\/Workdir\/neditor\/neditor\/neditor.cc",$/;"	s	object:7
find	build/_deps/imgui-proj-src/imgui.h	/^    inline T*           find(const T& v)                    { T* data = Data;  const T* data_end/;"	f	struct:ImVector	typeref:typename:T *
find	build/_deps/imgui-proj-src/imgui.h	/^    inline const T*     find(const T& v) const              { const T* data = Data;  const T* da/;"	f	struct:ImVector	typeref:typename:const T *
find_erase	build/_deps/imgui-proj-src/imgui.h	/^    inline bool         find_erase(const T& v)              { const T* it = find(v); if (it < Da/;"	f	struct:ImVector	typeref:typename:bool
find_erase_unsorted	build/_deps/imgui-proj-src/imgui.h	/^    inline bool         find_erase_unsorted(const T& v)     { const T* it = find(v); if (it < Da/;"	f	struct:ImVector	typeref:typename:bool
find_index	build/_deps/imgui-proj-src/imgui.h	/^    inline int          find_index(const T& v) const        { const T* data_end = Data + Size; c/;"	f	struct:ImVector	typeref:typename:int
firstRectForCharacterRange:actualRange:	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^{$/;"	m	implementation:KeyEventResponder
first_char	build/_deps/imgui-proj-src/imstb_textedit.h	/^   int first_char, length; \/\/ first char of row, and length$/;"	m	struct:__anon0ee941840508	typeref:typename:int
first_free	build/_deps/imgui-proj-src/imstb_truetype.h	/^   void   *first_free;$/;"	m	struct:stbtt__hheap	typeref:typename:void *
first_unicode_codepoint_in_range	build/_deps/imgui-proj-src/imstb_truetype.h	/^   int first_unicode_codepoint_in_range;  \/\/ if non-zero, then the chars are continuous, and t/;"	m	struct:__anond648eb7b0508	typeref:typename:int
first_x	build/_deps/imgui-proj-src/imstb_truetype.h	/^   float first_x, first_y;$/;"	m	struct:__anond648eb7b0f08	typeref:typename:float
first_y	build/_deps/imgui-proj-src/imstb_truetype.h	/^   float first_x, first_y;$/;"	m	struct:__anond648eb7b0f08	typeref:typename:float
fontTexture	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^@property (nonatomic, strong, nullable) id<MTLTexture>      fontTexture;$/;"	p	interface:MetalContext
font_size	build/_deps/imgui-proj-src/imstb_truetype.h	/^   float font_size;$/;"	m	struct:__anond648eb7b0508	typeref:typename:float
fontdicts	build/_deps/imgui-proj-src/imstb_truetype.h	/^   stbtt__buf fontdicts;              \/\/ array of font dicts$/;"	m	struct:stbtt_fontinfo	typeref:typename:stbtt__buf
fontstart	build/_deps/imgui-proj-src/imstb_truetype.h	/^   int              fontstart;         \/\/ offset of start of font$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
frameIndex	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.cpp	/^    unsigned int            frameIndex = UINT_MAX;$/;"	m	struct:ImGui_ImplWGPU_Data	typeref:typename:unsigned int	file:
framebufferDescriptor	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^@property (nonatomic, strong) FramebufferDescriptor*        framebufferDescriptor; \/\/ framebuf/;"	p	interface:MetalContext
free_head	build/_deps/imgui-proj-src/imstb_rectpack.h	/^   stbrp_node *free_head;$/;"	m	struct:stbrp_context	typeref:typename:stbrp_node *
front	build/_deps/imgui-proj-src/imgui.h	/^    inline T&           front()                             { IM_ASSERT(Size > 0); return Data[0/;"	f	struct:ImVector	typeref:typename:T &
front	build/_deps/imgui-proj-src/imgui.h	/^    inline const T&     front() const                       { IM_ASSERT(Size > 0); return Data[0/;"	f	struct:ImVector	typeref:typename:const T &
funcs	build/_deps/imgui-proj-src/imgui.cpp	/^            struct funcs { static bool IsLegacyNativeDupe(ImGuiKey key) { return key >= 0 && key/;"	s	function:ImGui::ShowMetricsWindow	file:
funcs	build/_deps/imgui-proj-src/imgui.cpp	/^            struct funcs { static bool IsLegacyNativeDupe(ImGuiKey) { return false; } };$/;"	s	function:ImGui::ShowMetricsWindow	file:
funcs	build/_deps/imgui-proj-src/imgui_demo.cpp	/^            struct funcs { static bool IsLegacyNativeDupe(ImGuiKey key) { return key >= 0 && key/;"	s	function:ShowDemoWindowInputs	file:
funcs	build/_deps/imgui-proj-src/imgui_demo.cpp	/^            struct funcs { static bool IsLegacyNativeDupe(ImGuiKey) { return false; } };$/;"	s	function:ShowDemoWindowInputs	file:
fx	build/_deps/imgui-proj-src/imstb_truetype.h	/^   float fx,fdx,fdy;$/;"	m	struct:stbtt__active_edge	typeref:typename:float
g_Allocator	build/_deps/imgui-proj-src/examples/example_glfw_vulkan/main.cpp	/^static VkAllocationCallbacks*   g_Allocator = nullptr;$/;"	v	typeref:typename:VkAllocationCallbacks *	file:
g_Allocator	build/_deps/imgui-proj-src/examples/example_sdl2_vulkan/main.cpp	/^static VkAllocationCallbacks*   g_Allocator = nullptr;$/;"	v	typeref:typename:VkAllocationCallbacks *	file:
g_App	build/_deps/imgui-proj-src/examples/example_android_opengl3/main.cpp	/^static struct android_app*  g_App = nullptr;$/;"	v	typeref:struct:android_app *	file:
g_DebugReport	build/_deps/imgui-proj-src/examples/example_glfw_vulkan/main.cpp	/^static VkDebugReportCallbackEXT g_DebugReport = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkDebugReportCallbackEXT	file:
g_DebugReport	build/_deps/imgui-proj-src/examples/example_sdl2_vulkan/main.cpp	/^static VkDebugReportCallbackEXT g_DebugReport = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkDebugReportCallbackEXT	file:
g_DescriptorPool	build/_deps/imgui-proj-src/examples/example_glfw_vulkan/main.cpp	/^static VkDescriptorPool         g_DescriptorPool = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkDescriptorPool	file:
g_DescriptorPool	build/_deps/imgui-proj-src/examples/example_sdl2_vulkan/main.cpp	/^static VkDescriptorPool         g_DescriptorPool = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkDescriptorPool	file:
g_Device	build/_deps/imgui-proj-src/examples/example_glfw_vulkan/main.cpp	/^static VkDevice                 g_Device = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkDevice	file:
g_Device	build/_deps/imgui-proj-src/examples/example_sdl2_vulkan/main.cpp	/^static VkDevice                 g_Device = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkDevice	file:
g_EglContext	build/_deps/imgui-proj-src/examples/example_android_opengl3/main.cpp	/^static EGLContext           g_EglContext = EGL_NO_CONTEXT;$/;"	v	typeref:typename:EGLContext	file:
g_EglDisplay	build/_deps/imgui-proj-src/examples/example_android_opengl3/main.cpp	/^static EGLDisplay           g_EglDisplay = EGL_NO_DISPLAY;$/;"	v	typeref:typename:EGLDisplay	file:
g_EglSurface	build/_deps/imgui-proj-src/examples/example_android_opengl3/main.cpp	/^static EGLSurface           g_EglSurface = EGL_NO_SURFACE;$/;"	v	typeref:typename:EGLSurface	file:
g_FunctionsLoaded	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^static bool g_FunctionsLoaded = false;$/;"	v	typeref:typename:bool	file:
g_FunctionsLoaded	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^static bool g_FunctionsLoaded = true;$/;"	v	typeref:typename:bool	file:
g_Height	build/_deps/imgui-proj-src/examples/example_win32_opengl3/main.cpp	/^static int              g_Height;$/;"	v	typeref:typename:int	file:
g_IniFilename	build/_deps/imgui-proj-src/examples/example_android_opengl3/main.cpp	/^static std::string          g_IniFilename = "";$/;"	v	typeref:typename:std::string	file:
g_Initialized	build/_deps/imgui-proj-src/examples/example_android_opengl3/main.cpp	/^static bool                 g_Initialized = false;$/;"	v	typeref:typename:bool	file:
g_Instance	build/_deps/imgui-proj-src/examples/example_glfw_vulkan/main.cpp	/^static VkInstance               g_Instance = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkInstance	file:
g_Instance	build/_deps/imgui-proj-src/examples/example_sdl2_vulkan/main.cpp	/^static VkInstance               g_Instance = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkInstance	file:
g_LogTag	build/_deps/imgui-proj-src/backends/imgui_impl_android.cpp	/^static char                                     g_LogTag[] = "ImGuiExample";$/;"	v	typeref:typename:char[]	file:
g_LogTag	build/_deps/imgui-proj-src/examples/example_android_opengl3/main.cpp	/^static char                 g_LogTag[] = "ImGuiExample";$/;"	v	typeref:typename:char[]	file:
g_MainWindow	build/_deps/imgui-proj-src/examples/example_win32_opengl3/main.cpp	/^static WGL_WindowData   g_MainWindow;$/;"	v	typeref:typename:WGL_WindowData	file:
g_MainWindowData	build/_deps/imgui-proj-src/examples/example_glfw_vulkan/main.cpp	/^static ImGui_ImplVulkanH_Window g_MainWindowData;$/;"	v	typeref:typename:ImGui_ImplVulkanH_Window	file:
g_MainWindowData	build/_deps/imgui-proj-src/examples/example_sdl2_vulkan/main.cpp	/^static ImGui_ImplVulkanH_Window g_MainWindowData;$/;"	v	typeref:typename:ImGui_ImplVulkanH_Window	file:
g_MinImageCount	build/_deps/imgui-proj-src/examples/example_glfw_vulkan/main.cpp	/^static int                      g_MinImageCount = 2;$/;"	v	typeref:typename:int	file:
g_MinImageCount	build/_deps/imgui-proj-src/examples/example_sdl2_vulkan/main.cpp	/^static uint32_t                 g_MinImageCount = 2;$/;"	v	typeref:typename:uint32_t	file:
g_PhysicalDevice	build/_deps/imgui-proj-src/examples/example_glfw_vulkan/main.cpp	/^static VkPhysicalDevice         g_PhysicalDevice = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkPhysicalDevice	file:
g_PhysicalDevice	build/_deps/imgui-proj-src/examples/example_sdl2_vulkan/main.cpp	/^static VkPhysicalDevice         g_PhysicalDevice = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkPhysicalDevice	file:
g_PipelineCache	build/_deps/imgui-proj-src/examples/example_glfw_vulkan/main.cpp	/^static VkPipelineCache          g_PipelineCache = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkPipelineCache	file:
g_PipelineCache	build/_deps/imgui-proj-src/examples/example_sdl2_vulkan/main.cpp	/^static VkPipelineCache          g_PipelineCache = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkPipelineCache	file:
g_Queue	build/_deps/imgui-proj-src/examples/example_glfw_vulkan/main.cpp	/^static VkQueue                  g_Queue = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkQueue	file:
g_Queue	build/_deps/imgui-proj-src/examples/example_sdl2_vulkan/main.cpp	/^static VkQueue                  g_Queue = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkQueue	file:
g_QueueFamily	build/_deps/imgui-proj-src/examples/example_glfw_vulkan/main.cpp	/^static uint32_t                 g_QueueFamily = (uint32_t)-1;$/;"	v	typeref:typename:uint32_t	file:
g_QueueFamily	build/_deps/imgui-proj-src/examples/example_sdl2_vulkan/main.cpp	/^static uint32_t                 g_QueueFamily = (uint32_t)-1;$/;"	v	typeref:typename:uint32_t	file:
g_ResizeHeight	build/_deps/imgui-proj-src/examples/example_win32_directx10/main.cpp	/^static UINT                     g_ResizeWidth = 0, g_ResizeHeight = 0;$/;"	v	typeref:typename:UINT	file:
g_ResizeHeight	build/_deps/imgui-proj-src/examples/example_win32_directx11/main.cpp	/^static UINT                     g_ResizeWidth = 0, g_ResizeHeight = 0;$/;"	v	typeref:typename:UINT	file:
g_ResizeHeight	build/_deps/imgui-proj-src/examples/example_win32_directx9/main.cpp	/^static UINT                     g_ResizeWidth = 0, g_ResizeHeight = 0;$/;"	v	typeref:typename:UINT	file:
g_ResizeWidth	build/_deps/imgui-proj-src/examples/example_win32_directx10/main.cpp	/^static UINT                     g_ResizeWidth = 0, g_ResizeHeight = 0;$/;"	v	typeref:typename:UINT	file:
g_ResizeWidth	build/_deps/imgui-proj-src/examples/example_win32_directx11/main.cpp	/^static UINT                     g_ResizeWidth = 0, g_ResizeHeight = 0;$/;"	v	typeref:typename:UINT	file:
g_ResizeWidth	build/_deps/imgui-proj-src/examples/example_win32_directx9/main.cpp	/^static UINT                     g_ResizeWidth = 0, g_ResizeHeight = 0;$/;"	v	typeref:typename:UINT	file:
g_SwapChainRebuild	build/_deps/imgui-proj-src/examples/example_glfw_vulkan/main.cpp	/^static bool                     g_SwapChainRebuild = false;$/;"	v	typeref:typename:bool	file:
g_SwapChainRebuild	build/_deps/imgui-proj-src/examples/example_sdl2_vulkan/main.cpp	/^static bool                     g_SwapChainRebuild = false;$/;"	v	typeref:typename:bool	file:
g_Time	build/_deps/imgui-proj-src/backends/imgui_impl_android.cpp	/^static double                                   g_Time = 0.0;$/;"	v	typeref:typename:double	file:
g_Time	build/_deps/imgui-proj-src/backends/imgui_impl_glut.cpp	/^static int g_Time = 0;          \/\/ Current time, in milliseconds$/;"	v	typeref:typename:int	file:
g_Width	build/_deps/imgui-proj-src/examples/example_win32_opengl3/main.cpp	/^static int              g_Width;$/;"	v	typeref:typename:int	file:
g_Window	build/_deps/imgui-proj-src/backends/imgui_impl_android.cpp	/^static ANativeWindow*                           g_Window;$/;"	v	typeref:typename:ANativeWindow *	file:
g_d3dpp	build/_deps/imgui-proj-src/examples/example_win32_directx9/main.cpp	/^static D3DPRESENT_PARAMETERS    g_d3dpp = {};$/;"	v	typeref:typename:D3DPRESENT_PARAMETERS	file:
g_fence	build/_deps/imgui-proj-src/examples/example_win32_directx12/main.cpp	/^static ID3D12Fence*                 g_fence = nullptr;$/;"	v	typeref:typename:ID3D12Fence *	file:
g_fenceEvent	build/_deps/imgui-proj-src/examples/example_win32_directx12/main.cpp	/^static HANDLE                       g_fenceEvent = nullptr;$/;"	v	typeref:typename:HANDLE	file:
g_fenceLastSignaledValue	build/_deps/imgui-proj-src/examples/example_win32_directx12/main.cpp	/^static UINT64                       g_fenceLastSignaledValue = 0;$/;"	v	typeref:typename:UINT64	file:
g_frameContext	build/_deps/imgui-proj-src/examples/example_win32_directx12/main.cpp	/^static FrameContext                 g_frameContext[NUM_FRAMES_IN_FLIGHT] = {};$/;"	v	typeref:typename:FrameContext[]	file:
g_frameIndex	build/_deps/imgui-proj-src/examples/example_win32_directx12/main.cpp	/^static UINT                         g_frameIndex = 0;$/;"	v	typeref:typename:UINT	file:
g_hRC	build/_deps/imgui-proj-src/examples/example_win32_opengl3/main.cpp	/^static HGLRC            g_hRC;$/;"	v	typeref:typename:HGLRC	file:
g_hSwapChainWaitableObject	build/_deps/imgui-proj-src/examples/example_win32_directx12/main.cpp	/^static HANDLE                       g_hSwapChainWaitableObject = nullptr;$/;"	v	typeref:typename:HANDLE	file:
g_mainRenderTargetDescriptor	build/_deps/imgui-proj-src/examples/example_win32_directx12/main.cpp	/^static D3D12_CPU_DESCRIPTOR_HANDLE  g_mainRenderTargetDescriptor[NUM_BACK_BUFFERS] = {};$/;"	v	typeref:typename:D3D12_CPU_DESCRIPTOR_HANDLE[]	file:
g_mainRenderTargetResource	build/_deps/imgui-proj-src/examples/example_win32_directx12/main.cpp	/^static ID3D12Resource*              g_mainRenderTargetResource[NUM_BACK_BUFFERS] = {};$/;"	v	typeref:typename:ID3D12Resource * []	file:
g_mainRenderTargetView	build/_deps/imgui-proj-src/examples/example_sdl2_directx11/main.cpp	/^static ID3D11RenderTargetView*  g_mainRenderTargetView = nullptr;$/;"	v	typeref:typename:ID3D11RenderTargetView *	file:
g_mainRenderTargetView	build/_deps/imgui-proj-src/examples/example_win32_directx10/main.cpp	/^static ID3D10RenderTargetView*  g_mainRenderTargetView = nullptr;$/;"	v	typeref:typename:ID3D10RenderTargetView *	file:
g_mainRenderTargetView	build/_deps/imgui-proj-src/examples/example_win32_directx11/main.cpp	/^static ID3D11RenderTargetView*  g_mainRenderTargetView = nullptr;$/;"	v	typeref:typename:ID3D11RenderTargetView *	file:
g_pD3D	build/_deps/imgui-proj-src/examples/example_win32_directx9/main.cpp	/^static LPDIRECT3D9              g_pD3D = nullptr;$/;"	v	typeref:typename:LPDIRECT3D9	file:
g_pSwapChain	build/_deps/imgui-proj-src/examples/example_sdl2_directx11/main.cpp	/^static IDXGISwapChain*          g_pSwapChain = nullptr;$/;"	v	typeref:typename:IDXGISwapChain *	file:
g_pSwapChain	build/_deps/imgui-proj-src/examples/example_win32_directx10/main.cpp	/^static IDXGISwapChain*          g_pSwapChain = nullptr;$/;"	v	typeref:typename:IDXGISwapChain *	file:
g_pSwapChain	build/_deps/imgui-proj-src/examples/example_win32_directx11/main.cpp	/^static IDXGISwapChain*          g_pSwapChain = nullptr;$/;"	v	typeref:typename:IDXGISwapChain *	file:
g_pSwapChain	build/_deps/imgui-proj-src/examples/example_win32_directx12/main.cpp	/^static IDXGISwapChain3*             g_pSwapChain = nullptr;$/;"	v	typeref:typename:IDXGISwapChain3 *	file:
g_pd3dCommandList	build/_deps/imgui-proj-src/examples/example_win32_directx12/main.cpp	/^static ID3D12GraphicsCommandList*   g_pd3dCommandList = nullptr;$/;"	v	typeref:typename:ID3D12GraphicsCommandList *	file:
g_pd3dCommandQueue	build/_deps/imgui-proj-src/examples/example_win32_directx12/main.cpp	/^static ID3D12CommandQueue*          g_pd3dCommandQueue = nullptr;$/;"	v	typeref:typename:ID3D12CommandQueue *	file:
g_pd3dDevice	build/_deps/imgui-proj-src/examples/example_sdl2_directx11/main.cpp	/^static ID3D11Device*            g_pd3dDevice = nullptr;$/;"	v	typeref:typename:ID3D11Device *	file:
g_pd3dDevice	build/_deps/imgui-proj-src/examples/example_win32_directx10/main.cpp	/^static ID3D10Device*            g_pd3dDevice = nullptr;$/;"	v	typeref:typename:ID3D10Device *	file:
g_pd3dDevice	build/_deps/imgui-proj-src/examples/example_win32_directx11/main.cpp	/^static ID3D11Device*            g_pd3dDevice = nullptr;$/;"	v	typeref:typename:ID3D11Device *	file:
g_pd3dDevice	build/_deps/imgui-proj-src/examples/example_win32_directx12/main.cpp	/^static ID3D12Device*                g_pd3dDevice = nullptr;$/;"	v	typeref:typename:ID3D12Device *	file:
g_pd3dDevice	build/_deps/imgui-proj-src/examples/example_win32_directx9/main.cpp	/^static LPDIRECT3DDEVICE9        g_pd3dDevice = nullptr;$/;"	v	typeref:typename:LPDIRECT3DDEVICE9	file:
g_pd3dDeviceContext	build/_deps/imgui-proj-src/examples/example_sdl2_directx11/main.cpp	/^static ID3D11DeviceContext*     g_pd3dDeviceContext = nullptr;$/;"	v	typeref:typename:ID3D11DeviceContext *	file:
g_pd3dDeviceContext	build/_deps/imgui-proj-src/examples/example_win32_directx11/main.cpp	/^static ID3D11DeviceContext*     g_pd3dDeviceContext = nullptr;$/;"	v	typeref:typename:ID3D11DeviceContext *	file:
g_pd3dRtvDescHeap	build/_deps/imgui-proj-src/examples/example_win32_directx12/main.cpp	/^static ID3D12DescriptorHeap*        g_pd3dRtvDescHeap = nullptr;$/;"	v	typeref:typename:ID3D12DescriptorHeap *	file:
g_pd3dSrvDescHeap	build/_deps/imgui-proj-src/examples/example_win32_directx12/main.cpp	/^static ID3D12DescriptorHeap*        g_pd3dSrvDescHeap = nullptr;$/;"	v	typeref:typename:ID3D12DescriptorHeap *	file:
get_hash_for_ref	build/_deps/imgui-proj-subbuild/imgui-proj-populate-prefix/tmp/imgui-proj-populate-gitupdate.cmake	/^function(get_hash_for_ref ref out_var err_var)$/;"	f
get_line_begin	build/_deps/imgui-proj-src/imgui_internal.h	/^    const char*     get_line_begin(const char* base, int n) { return base + LineOffsets[n]; }$/;"	f	struct:ImGuiTextIndex	typeref:typename:const char *
get_line_end	build/_deps/imgui-proj-src/imgui_internal.h	/^    const char*     get_line_end(const char* base, int n)   { return base + (n + 1 < LineOffsets/;"	f	struct:ImGuiTextIndex	typeref:typename:const char *
get_proc	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^static GL3WglProc get_proc(const char *proc)$/;"	f	typeref:typename:GL3WglProc
git_update_strategy	build/_deps/imgui-proj-subbuild/imgui-proj-populate-prefix/tmp/imgui-proj-populate-gitupdate.cmake	/^      set(git_update_strategy CHECKOUT)$/;"	v
git_update_strategy	build/_deps/imgui-proj-subbuild/imgui-proj-populate-prefix/tmp/imgui-proj-populate-gitupdate.cmake	/^    set(git_update_strategy CHECKOUT)$/;"	v
git_update_strategy	build/_deps/imgui-proj-subbuild/imgui-proj-populate-prefix/tmp/imgui-proj-populate-gitupdate.cmake	/^  set(git_update_strategy REBASE)$/;"	v
git_update_strategy	build/_deps/imgui-proj-subbuild/imgui-proj-populate-prefix/tmp/imgui-proj-populate-gitupdate.cmake	/^set(git_update_strategy "REBASE")$/;"	v
gl	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^    } gl;$/;"	m	union:ImGL3WProcs	typeref:struct:ImGL3WProcs::__anon6bce6ebe0108
glActiveTexture	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define glActiveTexture /;"	d
glAttachShader	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define glAttachShader /;"	d
glBindBuffer	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define glBindBuffer /;"	d
glBindSampler	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define glBindSampler /;"	d
glBindTexture	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define glBindTexture /;"	d
glBindVertexArray	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp	/^#define glBindVertexArray /;"	d	file:
glBindVertexArray	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define glBindVertexArray /;"	d
glBlendEquation	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define glBlendEquation /;"	d
glBlendEquationSeparate	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define glBlendEquationSeparate /;"	d
glBlendFuncSeparate	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define glBlendFuncSeparate /;"	d
glBufferData	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define glBufferData /;"	d
glBufferSubData	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define glBufferSubData /;"	d
glClear	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define glClear /;"	d
glClearColor	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define glClearColor /;"	d
glCompileShader	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define glCompileShader /;"	d
glCreateProgram	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define glCreateProgram /;"	d
glCreateShader	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define glCreateShader /;"	d
glDeleteBuffers	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define glDeleteBuffers /;"	d
glDeleteProgram	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define glDeleteProgram /;"	d
glDeleteShader	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define glDeleteShader /;"	d
glDeleteTextures	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define glDeleteTextures /;"	d
glDeleteVertexArrays	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp	/^#define glDeleteVertexArrays /;"	d	file:
glDeleteVertexArrays	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define glDeleteVertexArrays /;"	d
glDetachShader	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define glDetachShader /;"	d
glDisable	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define glDisable /;"	d
glDisableVertexAttribArray	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define glDisableVertexAttribArray /;"	d
glDrawElements	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define glDrawElements /;"	d
glDrawElementsBaseVertex	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define glDrawElementsBaseVertex /;"	d
glEnable	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define glEnable /;"	d
glEnableVertexAttribArray	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define glEnableVertexAttribArray /;"	d
glFlush	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define glFlush /;"	d
glGenBuffers	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define glGenBuffers /;"	d
glGenTextures	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define glGenTextures /;"	d
glGenVertexArrays	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3.cpp	/^#define glGenVertexArrays /;"	d	file:
glGenVertexArrays	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define glGenVertexArrays /;"	d
glGetAttribLocation	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define glGetAttribLocation /;"	d
glGetError	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define glGetError /;"	d
glGetIntegerv	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define glGetIntegerv /;"	d
glGetProgramInfoLog	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define glGetProgramInfoLog /;"	d
glGetProgramiv	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define glGetProgramiv /;"	d
glGetShaderInfoLog	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define glGetShaderInfoLog /;"	d
glGetShaderiv	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define glGetShaderiv /;"	d
glGetString	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define glGetString /;"	d
glGetStringi	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define glGetStringi /;"	d
glGetUniformLocation	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define glGetUniformLocation /;"	d
glGetVertexAttribPointerv	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define glGetVertexAttribPointerv /;"	d
glGetVertexAttribiv	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define glGetVertexAttribiv /;"	d
glIsEnabled	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define glIsEnabled /;"	d
glIsProgram	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define glIsProgram /;"	d
glLinkProgram	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define glLinkProgram /;"	d
glPixelStorei	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define glPixelStorei /;"	d
glPolygonMode	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define glPolygonMode /;"	d
glReadPixels	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define glReadPixels /;"	d
glScissor	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define glScissor /;"	d
glShaderSource	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define glShaderSource /;"	d
glTexImage2D	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define glTexImage2D /;"	d
glTexParameteri	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define glTexParameteri /;"	d
glUniform1i	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define glUniform1i /;"	d
glUniformMatrix4fv	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define glUniformMatrix4fv /;"	d
glUseProgram	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define glUseProgram /;"	d
glVertexAttribPointer	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define glVertexAttribPointer /;"	d
glViewport	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^#define glViewport /;"	d
glfw_error_callback	build/_deps/imgui-proj-src/examples/example_emscripten_wgpu/main.cpp	/^static void glfw_error_callback(int error, const char* description)$/;"	f	typeref:typename:void	file:
glfw_error_callback	build/_deps/imgui-proj-src/examples/example_glfw_metal/main.mm	/^static void glfw_error_callback(int error, const char* description)$/;"	f
glfw_error_callback	build/_deps/imgui-proj-src/examples/example_glfw_opengl2/main.cpp	/^static void glfw_error_callback(int error, const char* description)$/;"	f	typeref:typename:void	file:
glfw_error_callback	build/_deps/imgui-proj-src/examples/example_glfw_opengl3/main.cpp	/^static void glfw_error_callback(int error, const char* description)$/;"	f	typeref:typename:void	file:
glfw_error_callback	build/_deps/imgui-proj-src/examples/example_glfw_vulkan/main.cpp	/^static void glfw_error_callback(int error, const char* description)$/;"	f	typeref:typename:void	file:
glfw_error_callback	neditor/neditor.cc	/^static void glfw_error_callback(int error, const char *description) {$/;"	f	typeref:typename:void	file:
glyf	build/_deps/imgui-proj-src/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
glyph1	build/_deps/imgui-proj-src/imstb_truetype.h	/^   int glyph1; \/\/ use stbtt_FindGlyphIndex$/;"	m	struct:stbtt_kerningentry	typeref:typename:int
glyph2	build/_deps/imgui-proj-src/imstb_truetype.h	/^   int glyph2;$/;"	m	struct:stbtt_kerningentry	typeref:typename:int
gpos	build/_deps/imgui-proj-src/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
green	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^    unsigned short* green;$/;"	m	struct:GLFWgammaramp	typeref:typename:unsigned short *
greenBits	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^    int greenBits;$/;"	m	struct:GLFWvidmode	typeref:typename:int
gsubrs	build/_deps/imgui-proj-src/imstb_truetype.h	/^   stbtt__buf gsubrs;                 \/\/ global charstring subroutines index$/;"	m	struct:stbtt_fontinfo	typeref:typename:stbtt__buf
h	build/_deps/imgui-proj-src/imstb_rectpack.h	/^   stbrp_coord    w, h;$/;"	m	struct:stbrp_rect	typeref:typename:stbrp_coord
h	build/_deps/imgui-proj-src/imstb_truetype.h	/^   int id,w,h,was_packed;$/;"	m	struct:stbrp_rect	typeref:typename:int
h	build/_deps/imgui-proj-src/imstb_truetype.h	/^   int w,h,stride;$/;"	m	struct:__anond648eb7b0808	typeref:typename:int
hDC	build/_deps/imgui-proj-src/examples/example_win32_opengl3/main.cpp	/^struct WGL_WindowData { HDC hDC; };$/;"	m	struct:WGL_WindowData	typeref:typename:HDC	file:
hFontSrvCpuDescHandle	build/_deps/imgui-proj-src/backends/imgui_impl_dx12.cpp	/^    D3D12_CPU_DESCRIPTOR_HANDLE hFontSrvCpuDescHandle;$/;"	m	struct:ImGui_ImplDX12_Data	typeref:typename:D3D12_CPU_DESCRIPTOR_HANDLE	file:
hFontSrvGpuDescHandle	build/_deps/imgui-proj-src/backends/imgui_impl_dx12.cpp	/^    D3D12_GPU_DESCRIPTOR_HANDLE hFontSrvGpuDescHandle;$/;"	m	struct:ImGui_ImplDX12_Data	typeref:typename:D3D12_GPU_DESCRIPTOR_HANDLE	file:
hWnd	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^    HWND                        hWnd;$/;"	m	struct:ImGui_ImplWin32_Data	typeref:typename:HWND	file:
h_oversample	build/_deps/imgui-proj-src/imstb_truetype.h	/^   unsigned char h_oversample, v_oversample; \/\/ don't set these, they're used internally$/;"	m	struct:__anond648eb7b0508	typeref:typename:unsigned char
h_oversample	build/_deps/imgui-proj-src/imstb_truetype.h	/^   unsigned int   h_oversample, v_oversample;$/;"	m	struct:stbtt_pack_context	typeref:typename:unsigned int
handleAppCmd	build/_deps/imgui-proj-src/examples/example_android_opengl3/main.cpp	/^static void handleAppCmd(struct android_app* app, int32_t appCmd)$/;"	f	typeref:typename:void	file:
handleInputEvent	build/_deps/imgui-proj-src/examples/example_android_opengl3/main.cpp	/^static int32_t handleInputEvent(struct android_app* app, AInputEvent* inputEvent)$/;"	f	typeref:typename:int32_t	file:
hasMarkedText	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^{$/;"	m	implementation:KeyEventResponder
has_preferred_x	build/_deps/imgui-proj-src/imstb_textedit.h	/^   unsigned char has_preferred_x;$/;"	m	struct:__anon0ee941840308	typeref:typename:unsigned char
hash	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^{$/;"	m	implementation:FramebufferDescriptor
head	build/_deps/imgui-proj-src/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
head	build/_deps/imgui-proj-src/imstb_truetype.h	/^   struct stbtt__hheap_chunk *head;$/;"	m	struct:stbtt__hheap	typeref:struct:stbtt__hheap_chunk *
height	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^    int height;$/;"	m	struct:GLFWimage	typeref:typename:int
height	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^    int height;$/;"	m	struct:GLFWvidmode	typeref:typename:int
height	build/_deps/imgui-proj-src/imstb_rectpack.h	/^   int height;$/;"	m	struct:stbrp_context	typeref:typename:int
height	build/_deps/imgui-proj-src/imstb_textedit.h	/^   float height; \/\/ height of line$/;"	m	struct:__anon0ee941840508	typeref:typename:float
height	build/_deps/imgui-proj-src/imstb_truetype.h	/^   int   height;$/;"	m	struct:stbtt_pack_context	typeref:typename:int
height	build/_deps/imgui-proj-src/imstb_truetype.h	/^   int width,height;$/;"	m	struct:__anond648eb7b1108	typeref:typename:int
help	build/Makefile	/^help:$/;"	t
help	build/_deps/imgui-proj-subbuild/Makefile	/^help:$/;"	t
heuristic	build/_deps/imgui-proj-src/imstb_rectpack.h	/^   int heuristic;$/;"	m	struct:stbrp_context	typeref:typename:int
hhea	build/_deps/imgui-proj-src/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
hmtx	build/_deps/imgui-proj-src/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
iOS / OSX Metal example	build/_deps/imgui-proj-src/examples/example_apple_metal/README.md	/^# iOS \/ OSX Metal example$/;"	c
id	build/_deps/imgui-proj-src/imstb_rectpack.h	/^   int            id;$/;"	m	struct:stbrp_rect	typeref:typename:int
id	build/_deps/imgui-proj-src/imstb_truetype.h	/^   int id,w,h,was_packed;$/;"	m	struct:stbrp_rect	typeref:typename:int
ignored	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^typedef struct { int ignored; } *					uSynergyCookie;$/;"	m	struct:__anonf4d9bddd0108	typeref:typename:int
imgl3wGetProcAddress	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^GL3WglProc imgl3wGetProcAddress(const char *proc) { return get_proc(proc); }$/;"	f	typeref:typename:GL3WglProc
imgl3wInit	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^int imgl3wInit(void)$/;"	f	typeref:typename:int
imgl3wInit2	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^int imgl3wInit2(GL3WGetProcAddressProc proc)$/;"	f	typeref:typename:int
imgl3wIsSupported	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^int imgl3wIsSupported(int major, int minor)$/;"	f	typeref:typename:int
imgl3wProcs	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^GL3W_API union ImGL3WProcs imgl3wProcs;$/;"	v	typeref:union:ImGL3WProcs
imgui	build/Makefile	/^imgui: cmake_check_build_system$/;"	t
imgui	cmake/Findimgui.cmake	/^add_library(imgui$/;"	t
imgui-proj-populate	build/_deps/imgui-proj-subbuild/CMakeLists.txt	/^project(imgui-proj-populate NONE)$/;"	p
imgui-proj-populate	build/_deps/imgui-proj-subbuild/Makefile	/^imgui-proj-populate: cmake_check_build_system$/;"	t
imgui-proj-populate/fast	build/_deps/imgui-proj-subbuild/Makefile	/^imgui-proj-populate\/fast:$/;"	t
imgui/fast	build/Makefile	/^imgui\/fast:$/;"	t
imgui_example_glfw_vulkan	build/_deps/imgui-proj-src/examples/example_glfw_vulkan/CMakeLists.txt	/^project(imgui_example_glfw_vulkan C CXX)$/;"	p
imgui_freetype	build/_deps/imgui-proj-src/misc/freetype/README.md	/^# imgui_freetype$/;"	c
indexToLocFormat	build/_deps/imgui-proj-src/imstb_truetype.h	/^   int indexToLocFormat;              \/\/ format needed to map from glyph index to glyph$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
index_from_ptr	build/_deps/imgui-proj-src/imgui.h	/^    inline int          index_from_ptr(const T* it) const   { IM_ASSERT(it >= Data && it < Data /;"	f	struct:ImVector	typeref:typename:int
index_from_ptr	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline int  index_from_ptr(const T* it) const   { IM_ASSERT(it >= Data && it < DataEnd); con/;"	f	struct:ImSpan	typeref:typename:int
index_map	build/_deps/imgui-proj-src/imstb_truetype.h	/^   int index_map;                     \/\/ a cmap mapping for our chosen character encoding$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
info_arch	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v	typeref:typename:char const *
info_arch	build/CMakeFiles/3.26.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v	typeref:typename:char const *
info_compiler	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v	typeref:typename:char const *
info_compiler	build/CMakeFiles/3.26.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v	typeref:typename:char const *
info_cray	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v	typeref:typename:char const *
info_cray	build/CMakeFiles/3.26.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v	typeref:typename:char const *
info_language_extensions_default	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^const char* info_language_extensions_default = "INFO" ":" "extensions_default["$/;"	v	typeref:typename:const char *
info_language_extensions_default	build/CMakeFiles/3.26.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^const char* info_language_extensions_default = "INFO" ":" "extensions_default["$/;"	v	typeref:typename:const char *
info_language_standard_default	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^const char* info_language_standard_default =$/;"	v	typeref:typename:const char *
info_language_standard_default	build/CMakeFiles/3.26.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^const char* info_language_standard_default = "INFO" ":" "standard_default["$/;"	v	typeref:typename:const char *
info_platform	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v	typeref:typename:char const *
info_platform	build/CMakeFiles/3.26.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v	typeref:typename:char const *
info_simulate	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v	typeref:typename:char const *
info_simulate	build/CMakeFiles/3.26.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v	typeref:typename:char const *
info_simulate_version	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^char const info_simulate_version[] = {$/;"	v	typeref:typename:char const[]
info_simulate_version	build/CMakeFiles/3.26.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_simulate_version[] = {$/;"	v	typeref:typename:char const[]
info_version	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^char const info_version[] = {$/;"	v	typeref:typename:char const[]
info_version	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^char const* info_version = "INFO" ":" "compiler_version[" COMPILER_VERSION "]";$/;"	v	typeref:typename:char const *
info_version	build/CMakeFiles/3.26.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version[] = {$/;"	v	typeref:typename:char const[]
info_version	build/CMakeFiles/3.26.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_version = "INFO" ":" "compiler_version[" COMPILER_VERSION "]";$/;"	v	typeref:typename:char const *
info_version_internal	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^char const info_version_internal[] = {$/;"	v	typeref:typename:char const[]
info_version_internal	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^char const* info_version_internal = "INFO" ":" "compiler_version_internal[" COMPILER_VERSION_INT/;"	v	typeref:typename:char const *
info_version_internal	build/CMakeFiles/3.26.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version_internal[] = {$/;"	v	typeref:typename:char const[]
info_version_internal	build/CMakeFiles/3.26.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_version_internal = "INFO" ":" "compiler_version_internal[" COMPILER_VERSION_INT/;"	v	typeref:typename:char const *
init	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^{$/;"	m	implementation:MetalContext
init	build/_deps/imgui-proj-src/examples/example_apple_metal/main.mm	/^{$/;"	m	implementation:AppDelegate
initInfo	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.cpp	/^    ImGui_ImplWGPU_InitInfo initInfo;$/;"	m	struct:ImGui_ImplWGPU_Data	typeref:typename:ImGui_ImplWGPU_InitInfo	file:
initWithBuffer:	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^- (instancetype)initWithBuffer:(id<MTLBuffer>)buffer;$/;"	m	interface:MetalBuffer
initWithBuffer:	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^{$/;"	m	implementation:MetalBuffer
initWithNibName:bundle:	build/_deps/imgui-proj-src/examples/example_apple_metal/main.mm	/^{$/;"	m	implementation:AppViewController
initWithRenderPassDescriptor:	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^- (instancetype)initWithRenderPassDescriptor:(MTLRenderPassDescriptor*)renderPassDescriptor;$/;"	m	interface:FramebufferDescriptor
initWithRenderPassDescriptor:	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^{$/;"	m	implementation:FramebufferDescriptor
init_mode	build/_deps/imgui-proj-src/imstb_rectpack.h	/^   int init_mode;$/;"	m	struct:stbrp_context	typeref:typename:int
init_submodules	build/_deps/imgui-proj-subbuild/imgui-proj-populate-prefix/tmp/imgui-proj-populate-gitclone.cmake	/^set(init_submodules TRUE)$/;"	v
init_submodules	build/_deps/imgui-proj-subbuild/imgui-proj-populate-prefix/tmp/imgui-proj-populate-gitupdate.cmake	/^set(init_submodules "TRUE")$/;"	v
initialize	build/_deps/imgui-proj-src/examples/example_apple_opengl2/main.mm	/^{$/;"	m	implementation:AppView
initialized	build/_deps/imgui-proj-src/imstb_textedit.h	/^   unsigned char initialized;$/;"	m	struct:__anon0ee941840308	typeref:typename:unsigned char
insert	build/_deps/imgui-proj-src/imgui.h	/^    inline T*           insert(const T* it, const T& v)     { IM_ASSERT(it >= Data && it <= Data/;"	f	struct:ImVector	typeref:typename:T *
insertText:replacementRange:	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^{$/;"	m	implementation:KeyEventResponder
insert_length	build/_deps/imgui-proj-src/imstb_textedit.h	/^   IMSTB_TEXTEDIT_POSITIONTYPE  insert_length;$/;"	m	struct:__anon0ee941840108	typeref:typename:IMSTB_TEXTEDIT_POSITIONTYPE
insert_mode	build/_deps/imgui-proj-src/imstb_textedit.h	/^   unsigned char insert_mode;$/;"	m	struct:__anon0ee941840308	typeref:typename:unsigned char
integer	build/_deps/imgui-proj-src/imgui.cpp	/^    union { void* ptr; int integer; } tex_id_opaque;$/;"	m	union:FormatTextureIDForDebugDisplay::__anon86f0acb1030a	typeref:typename:int	file:
invert	build/_deps/imgui-proj-src/imstb_truetype.h	/^   int invert;$/;"	m	struct:stbtt__edge	typeref:typename:int
isEqual:	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^{$/;"	m	implementation:FramebufferDescriptor
is_separator	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static bool is_separator(unsigned int c)$/;"	f	namespace:ImStb	typeref:typename:bool	file:
is_word_boundary	build/_deps/imgui-proj-src/imstb_textedit.h	/^static int is_word_boundary( IMSTB_TEXTEDIT_STRING *str, int idx )$/;"	f	typeref:typename:int
is_word_boundary_from_left	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static int is_word_boundary_from_left(ImGuiInputTextState* obj, int idx)$/;"	f	namespace:ImStb	typeref:typename:int	file:
is_word_boundary_from_right	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static int is_word_boundary_from_right(ImGuiInputTextState* obj, int idx)$/;"	f	namespace:ImStb	typeref:typename:int	file:
iterator	build/_deps/imgui-proj-src/imgui.h	/^    typedef value_type*         iterator;$/;"	t	struct:ImVector	typeref:typename:value_type *
kern	build/_deps/imgui-proj-src/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
key	build/_deps/imgui-proj-src/imgui.h	/^        ImGuiID key;$/;"	m	struct:ImGuiStorage::ImGuiStoragePair	typeref:typename:ImGuiID
keyDown:	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^{$/;"	m	implementation:KeyEventResponder
keyUp:	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^{$/;"	m	implementation:KeyEventResponder
khronos_float_t	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef          float         khronos_float_t;$/;"	t	typeref:typename:float
khronos_int16_t	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef signed   short int     khronos_int16_t;$/;"	t	typeref:typename:signed short int
khronos_int64_t	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef          int64_t       khronos_int64_t;$/;"	t	typeref:typename:int64_t
khronos_int64_t	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef signed   __int64       khronos_int64_t;$/;"	t	typeref:typename:signed __int64
khronos_int64_t	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef signed   long long     khronos_int64_t;$/;"	t	typeref:typename:signed long long
khronos_int8_t	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef signed   char          khronos_int8_t;$/;"	t	typeref:typename:signed char
khronos_intptr_t	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef signed   long  int     khronos_intptr_t;$/;"	t	typeref:typename:signed long int
khronos_intptr_t	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef signed   long long int khronos_intptr_t;$/;"	t	typeref:typename:signed long long int
khronos_ssize_t	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef signed   long  int     khronos_ssize_t;$/;"	t	typeref:typename:signed long int
khronos_ssize_t	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef signed   long long int khronos_ssize_t;$/;"	t	typeref:typename:signed long long int
khronos_uint16_t	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef unsigned short int     khronos_uint16_t;$/;"	t	typeref:typename:unsigned short int
khronos_uint64_t	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef          uint64_t      khronos_uint64_t;$/;"	t	typeref:typename:uint64_t
khronos_uint64_t	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef unsigned __int64       khronos_uint64_t;$/;"	t	typeref:typename:unsigned __int64
khronos_uint64_t	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef unsigned long long     khronos_uint64_t;$/;"	t	typeref:typename:unsigned long long
khronos_uint8_t	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^typedef unsigned char          khronos_uint8_t;$/;"	t	typeref:typename:unsigned char
labels	build/_deps/imgui-proj-subbuild/CMakeFiles/imgui-proj-populate.dir/Labels.json	/^		"labels" : $/;"	a	object:target
lastBufferCachePurge	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^@property (nonatomic, assign) double                        lastBufferCachePurge;$/;"	p	interface:MetalContext
lastReuseTime	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^@property (nonatomic, assign) double        lastReuseTime;$/;"	p	interface:MetalBuffer
length	build/_deps/imgui-proj-src/imstb_textedit.h	/^   int first_char, length; \/\/ first char of row, and length$/;"	m	struct:__anon0ee941840508	typeref:typename:int
libgl	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^static HMODULE libgl;$/;"	v	typeref:typename:HMODULE
loadView	build/_deps/imgui-proj-src/examples/example_apple_metal/main.mm	/^{$/;"	m	implementation:AppViewController
load_procs	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^static void load_procs(GL3WGetProcAddressProc proc)$/;"	f	typeref:typename:void
loca	build/_deps/imgui-proj-src/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
m_clientHeight	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^	uint16_t						m_clientHeight;									\/* Height of screen *\/$/;"	m	struct:__anonf4d9bddd0208	typeref:typename:uint16_t
m_clientName	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^	const char*						m_clientName;									\/* Name of Synergy Screen \/ Client *\/$/;"	m	struct:__anonf4d9bddd0208	typeref:typename:const char *
m_clientWidth	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^	uint16_t						m_clientWidth;									\/* Width of screen *\/$/;"	m	struct:__anonf4d9bddd0208	typeref:typename:uint16_t
m_clipboardCallback	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^	uSynergyClipboardCallback		m_clipboardCallback;							\/* Callback for clipboard events *\/$/;"	m	struct:__anonf4d9bddd0208	typeref:typename:uSynergyClipboardCallback
m_connectFunc	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^	uSynergyConnectFunc				m_connectFunc;									\/* Connect function *\/$/;"	m	struct:__anonf4d9bddd0208	typeref:typename:uSynergyConnectFunc
m_connected	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^	uSynergyBool					m_connected;									\/* Is our socket connected? *\/$/;"	m	struct:__anonf4d9bddd0208	typeref:typename:uSynergyBool
m_cookie	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^	uSynergyCookie					m_cookie;										\/* Cookie pointer passed to callback functions (can be N/;"	m	struct:__anonf4d9bddd0208	typeref:typename:uSynergyCookie
m_getTimeFunc	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^	uSynergyGetTimeFunc				m_getTimeFunc;									\/* Get current time function *\/$/;"	m	struct:__anonf4d9bddd0208	typeref:typename:uSynergyGetTimeFunc
m_hasReceivedHello	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^	uSynergyBool					m_hasReceivedHello;								\/* Have we received a 'Hello' from the server? *\/$/;"	m	struct:__anonf4d9bddd0208	typeref:typename:uSynergyBool
m_isCaptured	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^	uSynergyBool					m_isCaptured;									\/* Is Synergy active (i.e. this client is receiving inp/;"	m	struct:__anonf4d9bddd0208	typeref:typename:uSynergyBool
m_joystickButtons	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^	uint16_t						m_joystickButtons[USYNERGY_NUM_JOYSTICKS];		\/* Joystick button state *\/$/;"	m	struct:__anonf4d9bddd0208	typeref:typename:uint16_t[]
m_joystickCallback	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^	uSynergyJoystickCallback		m_joystickCallback;								\/* Callback for joystick events *\/$/;"	m	struct:__anonf4d9bddd0208	typeref:typename:uSynergyJoystickCallback
m_joystickSticks	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^	int8_t							m_joystickSticks[USYNERGY_NUM_JOYSTICKS][4];	\/* Joystick stick position in 2 axes/;"	m	struct:__anonf4d9bddd0208	typeref:typename:int8_t[][4]
m_keyboardCallback	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^	uSynergyKeyboardCallback		m_keyboardCallback;								\/* Callback for keyboard events *\/$/;"	m	struct:__anonf4d9bddd0208	typeref:typename:uSynergyKeyboardCallback
m_lastMessageTime	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^	uint32_t						m_lastMessageTime;								\/* Time at which last message was received *\/$/;"	m	struct:__anonf4d9bddd0208	typeref:typename:uint32_t
m_mouseButtonLeft	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^	uSynergyBool					m_mouseButtonLeft;								\/* Mouse left button *\/$/;"	m	struct:__anonf4d9bddd0208	typeref:typename:uSynergyBool
m_mouseButtonMiddle	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^	uSynergyBool					m_mouseButtonMiddle;							\/* Mouse middle button *\/$/;"	m	struct:__anonf4d9bddd0208	typeref:typename:uSynergyBool
m_mouseButtonRight	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^	uSynergyBool					m_mouseButtonRight;								\/* Mouse right button *\/$/;"	m	struct:__anonf4d9bddd0208	typeref:typename:uSynergyBool
m_mouseCallback	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^	uSynergyMouseCallback			m_mouseCallback;								\/* Callback for mouse events *\/$/;"	m	struct:__anonf4d9bddd0208	typeref:typename:uSynergyMouseCallback
m_mouseWheelX	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^	int16_t							m_mouseWheelX;									\/* Mouse wheel X position *\/$/;"	m	struct:__anonf4d9bddd0208	typeref:typename:int16_t
m_mouseWheelY	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^	int16_t							m_mouseWheelY;									\/* Mouse wheel Y position *\/$/;"	m	struct:__anonf4d9bddd0208	typeref:typename:int16_t
m_mouseX	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^	uint16_t						m_mouseX;										\/* Mouse X position *\/$/;"	m	struct:__anonf4d9bddd0208	typeref:typename:uint16_t
m_mouseY	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^	uint16_t						m_mouseY;										\/* Mouse Y position *\/$/;"	m	struct:__anonf4d9bddd0208	typeref:typename:uint16_t
m_receiveBuffer	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^	uint8_t							m_receiveBuffer[USYNERGY_RECEIVE_BUFFER_SIZE];	\/* Receive buffer *\/$/;"	m	struct:__anonf4d9bddd0208	typeref:typename:uint8_t[]
m_receiveFunc	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^	uSynergyReceiveFunc				m_receiveFunc;									\/* Receive data function *\/$/;"	m	struct:__anonf4d9bddd0208	typeref:typename:uSynergyReceiveFunc
m_receiveOfs	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^	int								m_receiveOfs;									\/* Receive buffer offset *\/$/;"	m	struct:__anonf4d9bddd0208	typeref:typename:int
m_replyBuffer	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^	uint8_t							m_replyBuffer[USYNERGY_REPLY_BUFFER_SIZE];		\/* Reply buffer *\/$/;"	m	struct:__anonf4d9bddd0208	typeref:typename:uint8_t[]
m_replyCur	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^	uint8_t*						m_replyCur;										\/* Write offset into reply buffer *\/$/;"	m	struct:__anonf4d9bddd0208	typeref:typename:uint8_t *
m_screenActiveCallback	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^	uSynergyScreenActiveCallback	m_screenActiveCallback;							\/* Callback for entering and leavin/;"	m	struct:__anonf4d9bddd0208	typeref:typename:uSynergyScreenActiveCallback
m_sendFunc	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^	uSynergySendFunc				m_sendFunc;										\/* Send data function *\/$/;"	m	struct:__anonf4d9bddd0208	typeref:typename:uSynergySendFunc
m_sequenceNumber	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^	uint32_t						m_sequenceNumber;								\/* Packet sequence number *\/$/;"	m	struct:__anonf4d9bddd0208	typeref:typename:uint32_t
m_sleepFunc	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^	uSynergySleepFunc				m_sleepFunc;									\/* Thread sleep function *\/$/;"	m	struct:__anonf4d9bddd0208	typeref:typename:uSynergySleepFunc
m_traceFunc	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^	uSynergyTraceFunc				m_traceFunc;									\/* Function for tracing status (can be NULL) *\/$/;"	m	struct:__anonf4d9bddd0208	typeref:typename:uSynergyTraceFunc
macOS	build/_deps/imgui-proj-src/examples/example_sdl2_opengl3/README.md	/^## macOS$/;"	s
macOS	build/_deps/imgui-proj-src/examples/example_sdl3_opengl3/README.md	/^## macOS$/;"	s
main	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^int main(argc, argv) int argc; char *argv[];$/;"	f
main	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^void main() {}$/;"	f	typeref:typename:void
main	build/CMakeFiles/3.26.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f	typeref:typename:int
main	build/_deps/imgui-proj-src/examples/example_allegro5/main.cpp	/^int main(int, char**)$/;"	f	typeref:typename:int
main	build/_deps/imgui-proj-src/examples/example_apple_metal/main.mm	/^int main(int argc, char * argv[])$/;"	f
main	build/_deps/imgui-proj-src/examples/example_apple_metal/main.mm	/^int main(int argc, const char * argv[])$/;"	f
main	build/_deps/imgui-proj-src/examples/example_apple_opengl2/main.mm	/^int main(int argc, const char* argv[])$/;"	f
main	build/_deps/imgui-proj-src/examples/example_emscripten_wgpu/main.cpp	/^int main(int, char**)$/;"	f	typeref:typename:int
main	build/_deps/imgui-proj-src/examples/example_glfw_metal/main.mm	/^int main(int, char**)$/;"	f
main	build/_deps/imgui-proj-src/examples/example_glfw_opengl2/main.cpp	/^int main(int, char**)$/;"	f	typeref:typename:int
main	build/_deps/imgui-proj-src/examples/example_glfw_opengl3/main.cpp	/^int main(int, char**)$/;"	f	typeref:typename:int
main	build/_deps/imgui-proj-src/examples/example_glfw_vulkan/main.cpp	/^int main(int, char**)$/;"	f	typeref:typename:int
main	build/_deps/imgui-proj-src/examples/example_glut_opengl2/main.cpp	/^int main(int argc, char** argv)$/;"	f	typeref:typename:int
main	build/_deps/imgui-proj-src/examples/example_null/main.cpp	/^int main(int, char**)$/;"	f	typeref:typename:int
main	build/_deps/imgui-proj-src/examples/example_sdl2_directx11/main.cpp	/^int main(int, char**)$/;"	f	typeref:typename:int
main	build/_deps/imgui-proj-src/examples/example_sdl2_metal/main.mm	/^int main(int, char**)$/;"	f
main	build/_deps/imgui-proj-src/examples/example_sdl2_opengl2/main.cpp	/^int main(int, char**)$/;"	f	typeref:typename:int
main	build/_deps/imgui-proj-src/examples/example_sdl2_opengl3/main.cpp	/^int main(int, char**)$/;"	f	typeref:typename:int
main	build/_deps/imgui-proj-src/examples/example_sdl2_sdlrenderer2/main.cpp	/^int main(int, char**)$/;"	f	typeref:typename:int
main	build/_deps/imgui-proj-src/examples/example_sdl2_vulkan/main.cpp	/^int main(int, char**)$/;"	f	typeref:typename:int
main	build/_deps/imgui-proj-src/examples/example_sdl3_opengl3/main.cpp	/^int main(int, char**)$/;"	f	typeref:typename:int
main	build/_deps/imgui-proj-src/examples/example_sdl3_sdlrenderer3/main.cpp	/^int main(int, char**)$/;"	f	typeref:typename:int
main	build/_deps/imgui-proj-src/examples/example_win32_directx10/main.cpp	/^int main(int, char**)$/;"	f	typeref:typename:int
main	build/_deps/imgui-proj-src/examples/example_win32_directx11/main.cpp	/^int main(int, char**)$/;"	f	typeref:typename:int
main	build/_deps/imgui-proj-src/examples/example_win32_directx12/main.cpp	/^int main(int, char**)$/;"	f	typeref:typename:int
main	build/_deps/imgui-proj-src/examples/example_win32_directx9/main.cpp	/^int main(int, char**)$/;"	f	typeref:typename:int
main	build/_deps/imgui-proj-src/examples/example_win32_opengl3/main.cpp	/^int main(int, char**)$/;"	f	typeref:typename:int
main	build/_deps/imgui-proj-src/misc/fonts/binary_to_compressed_c.cpp	/^int main(int argc, char** argv)$/;"	f	typeref:typename:int
main	neditor/neditor.cc	/^int main(int argc, char *argv[]) {$/;"	f	typeref:typename:int
main_clipboard	build/_deps/imgui-proj-src/imgui.cpp	/^static PasteboardRef main_clipboard = 0;$/;"	v	typeref:typename:PasteboardRef	file:
major	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^static struct { int major, minor; } version;$/;"	m	struct:__anon6bce6ebe0208	typeref:typename:int
markedRange	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^{$/;"	m	implementation:KeyEventResponder
matrix	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^    lunasvg::Matrix     matrix;$/;"	m	struct:LunasvgPortState	typeref:typename:lunasvg::Matrix	file:
max_size	build/_deps/imgui-proj-src/imgui.h	/^    inline int          max_size() const                    { return 0x7FFFFFFF \/ (int)sizeof(T/;"	f	struct:ImVector	typeref:typename:int
max_x	build/_deps/imgui-proj-src/imstb_truetype.h	/^   stbtt_int32 min_x, max_x, min_y, max_y;$/;"	m	struct:__anond648eb7b0f08	typeref:typename:stbtt_int32
max_y	build/_deps/imgui-proj-src/imstb_truetype.h	/^   stbtt_int32 min_x, max_x, min_y, max_y;$/;"	m	struct:__anond648eb7b0f08	typeref:typename:stbtt_int32
min_x	build/_deps/imgui-proj-src/imstb_truetype.h	/^   stbtt_int32 min_x, max_x, min_y, max_y;$/;"	m	struct:__anond648eb7b0f08	typeref:typename:stbtt_int32
min_y	build/_deps/imgui-proj-src/imstb_truetype.h	/^   stbtt_int32 min_x, max_x, min_y, max_y;$/;"	m	struct:__anond648eb7b0f08	typeref:typename:stbtt_int32
minor	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^static struct { int major, minor; } version;$/;"	m	struct:__anon6bce6ebe0208	typeref:typename:int
mtkView	build/_deps/imgui-proj-src/examples/example_apple_metal/main.mm	/^@property (nonatomic, readonly) MTKView *mtkView;$/;"	p	interface:AppViewController
mtkView	build/_deps/imgui-proj-src/examples/example_apple_metal/main.mm	/^{$/;"	m	implementation:AppViewController
mtkView:drawableSizeWillChange:	build/_deps/imgui-proj-src/examples/example_apple_metal/main.mm	/^{$/;"	m	implementation:AppViewController
mvp	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^    float   mvp[4][4];$/;"	m	struct:VERTEX_CONSTANT_BUFFER_DX10	typeref:typename:float[4][4]	file:
mvp	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^    float   mvp[4][4];$/;"	m	struct:VERTEX_CONSTANT_BUFFER_DX11	typeref:typename:float[4][4]	file:
mvp	build/_deps/imgui-proj-src/backends/imgui_impl_dx12.cpp	/^    float   mvp[4][4];$/;"	m	struct:VERTEX_CONSTANT_BUFFER_DX12	typeref:typename:float[4][4]	file:
name	build/_deps/imgui-proj-subbuild/CMakeFiles/imgui-proj-populate.dir/Labels.json	/^		"name" : "imgui-proj-populate"$/;"	s	object:target
neditor	CMakeLists.txt	/^add_executable(neditor ${SRCS})$/;"	t
neditor	CMakeLists.txt	/^project(neditor VERSION 0.0.1)$/;"	p
neditor	README.md	/^# neditor$/;"	c
neditor	build/Makefile	/^neditor: cmake_check_build_system$/;"	t
neditor/fast	build/Makefile	/^neditor\/fast:$/;"	t
neditor/neditor.cc.i	build/Makefile	/^neditor\/neditor.cc.i:$/;"	t
neditor/neditor.cc.o	build/Makefile	/^neditor\/neditor.cc.o:$/;"	t
neditor/neditor.cc.s	build/Makefile	/^neditor\/neditor.cc.s:$/;"	t
neditor/neditor.i	build/Makefile	/^neditor\/neditor.i: neditor\/neditor.cc.i$/;"	t
neditor/neditor.o	build/Makefile	/^neditor\/neditor.o: neditor\/neditor.cc.o$/;"	t
neditor/neditor.s	build/Makefile	/^neditor\/neditor.s: neditor\/neditor.cc.s$/;"	t
next	build/_deps/imgui-proj-src/imstb_rectpack.h	/^   stbrp_node  *next;$/;"	m	struct:stbrp_node	typeref:typename:stbrp_node *
next	build/_deps/imgui-proj-src/imstb_truetype.h	/^   struct stbtt__active_edge *next;$/;"	m	struct:stbtt__active_edge	typeref:struct:stbtt__active_edge *
next	build/_deps/imgui-proj-src/imstb_truetype.h	/^   struct stbtt__hheap_chunk *next;$/;"	m	struct:stbtt__hheap_chunk	typeref:struct:stbtt__hheap_chunk *
next_chunk	build/_deps/imgui-proj-src/imgui_internal.h	/^    T*      next_chunk(T* p)            { size_t HDR_SZ = 4; IM_ASSERT(p >= begin() && p < end()/;"	f	struct:ImChunkStream	typeref:typename:T *
nodes	build/_deps/imgui-proj-src/imstb_truetype.h	/^   void  *nodes;$/;"	m	struct:stbtt_pack_context	typeref:typename:void *
numFramesInFlight	build/_deps/imgui-proj-src/backends/imgui_impl_dx12.cpp	/^    UINT                        numFramesInFlight;$/;"	m	struct:ImGui_ImplDX12_Data	typeref:typename:UINT	file:
numFramesInFlight	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.cpp	/^    unsigned int            numFramesInFlight = 0;$/;"	m	struct:ImGui_ImplWGPU_Data	typeref:typename:unsigned int	file:
numGlyphs	build/_deps/imgui-proj-src/imstb_truetype.h	/^   int numGlyphs;                     \/\/ number of glyphs, needed for range checking$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
num_chars	build/_deps/imgui-proj-src/imstb_textedit.h	/^   int num_chars;$/;"	m	struct:__anon0ee941840408	typeref:typename:int
num_chars	build/_deps/imgui-proj-src/imstb_truetype.h	/^   int num_chars;$/;"	m	struct:__anond648eb7b0508	typeref:typename:int
num_nodes	build/_deps/imgui-proj-src/imstb_rectpack.h	/^   int num_nodes;$/;"	m	struct:stbrp_context	typeref:typename:int
num_remaining_in_head_chunk	build/_deps/imgui-proj-src/imstb_truetype.h	/^   int    num_remaining_in_head_chunk;$/;"	m	struct:stbtt__hheap	typeref:typename:int
num_vertices	build/_deps/imgui-proj-src/imstb_truetype.h	/^   int num_vertices;$/;"	m	struct:__anond648eb7b0f08	typeref:typename:int
number_of_tries	build/_deps/imgui-proj-subbuild/imgui-proj-populate-prefix/tmp/imgui-proj-populate-gitclone.cmake	/^set(number_of_tries 0)$/;"	v
offset_from_ptr	build/_deps/imgui-proj-src/imgui_internal.h	/^    int     offset_from_ptr(const T* p) { IM_ASSERT(p >= begin() && p < end()); const ptrdiff_t /;"	f	struct:ImChunkStream	typeref:typename:int
onApplicationBecomeActive:	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^- (void)onApplicationBecomeActive:(NSNotification*)aNotification;$/;"	m	interface:ImGuiObserver
onApplicationBecomeActive:	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^{$/;"	m	implementation:ImGuiObserver
onApplicationBecomeInactive:	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^- (void)onApplicationBecomeInactive:(NSNotification*)aNotification;$/;"	m	interface:ImGuiObserver
onApplicationBecomeInactive:	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^{$/;"	m	implementation:ImGuiObserver
open_libgl	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^static int open_libgl(void)$/;"	f	typeref:typename:int
operator !=	build/_deps/imgui-proj-src/imgui.h	/^static inline bool    operator!=(const ImVec2& lhs, const ImVec2& rhs)  { return lhs.x != rhs.x /;"	f	typeref:typename:bool
operator !=	build/_deps/imgui-proj-src/imgui.h	/^static inline bool    operator!=(const ImVec4& lhs, const ImVec4& rhs)  { return lhs.x != rhs.x /;"	f	typeref:typename:bool
operator *	build/_deps/imgui-proj-src/imgui.h	/^static inline ImVec2  operator*(const ImVec2& lhs, const ImVec2& rhs)   { return ImVec2(lhs.x * /;"	f	typeref:typename:ImVec2
operator *	build/_deps/imgui-proj-src/imgui.h	/^static inline ImVec2  operator*(const ImVec2& lhs, const float rhs)     { return ImVec2(lhs.x * /;"	f	typeref:typename:IM_MSVC_RUNTIME_CHECKS_OFF ImVec2
operator *	build/_deps/imgui-proj-src/imgui.h	/^static inline ImVec4  operator*(const ImVec4& lhs, const ImVec4& rhs)   { return ImVec4(lhs.x * /;"	f	typeref:typename:ImVec4
operator *=	build/_deps/imgui-proj-src/imgui.h	/^static inline ImVec2& operator*=(ImVec2& lhs, const ImVec2& rhs)        { lhs.x *= rhs.x; lhs.y /;"	f	typeref:typename:ImVec2 &
operator *=	build/_deps/imgui-proj-src/imgui.h	/^static inline ImVec2& operator*=(ImVec2& lhs, const float rhs)          { lhs.x *= rhs; lhs.y *=/;"	f	typeref:typename:ImVec2 &
operator +	build/_deps/imgui-proj-src/imgui.h	/^static inline ImVec2  operator+(const ImVec2& lhs, const ImVec2& rhs)   { return ImVec2(lhs.x + /;"	f	typeref:typename:ImVec2
operator +	build/_deps/imgui-proj-src/imgui.h	/^static inline ImVec4  operator+(const ImVec4& lhs, const ImVec4& rhs)   { return ImVec4(lhs.x + /;"	f	typeref:typename:ImVec4
operator +	neditor/Editor.h	/^inline ImVec2 operator+(const ImVec2 &a, const ImVec2 &b) {$/;"	f	typeref:typename:ImVec2
operator +=	build/_deps/imgui-proj-src/imgui.h	/^static inline ImVec2& operator+=(ImVec2& lhs, const ImVec2& rhs)        { lhs.x += rhs.x; lhs.y /;"	f	typeref:typename:ImVec2 &
operator -	build/_deps/imgui-proj-src/imgui.h	/^static inline ImVec2  operator-(const ImVec2& lhs)                      { return ImVec2(-lhs.x, /;"	f	typeref:typename:ImVec2
operator -	build/_deps/imgui-proj-src/imgui.h	/^static inline ImVec2  operator-(const ImVec2& lhs, const ImVec2& rhs)   { return ImVec2(lhs.x - /;"	f	typeref:typename:ImVec2
operator -	build/_deps/imgui-proj-src/imgui.h	/^static inline ImVec4  operator-(const ImVec4& lhs, const ImVec4& rhs)   { return ImVec4(lhs.x - /;"	f	typeref:typename:ImVec4
operator -	neditor/Editor.h	/^inline ImVec2 operator-(const ImVec2 &a, const ImVec2 &b) {$/;"	f	typeref:typename:ImVec2
operator -=	build/_deps/imgui-proj-src/imgui.h	/^static inline ImVec2& operator-=(ImVec2& lhs, const ImVec2& rhs)        { lhs.x -= rhs.x; lhs.y /;"	f	typeref:typename:ImVec2 &
operator /	build/_deps/imgui-proj-src/imgui.h	/^static inline ImVec2  operator\/(const ImVec2& lhs, const ImVec2& rhs)   { return ImVec2(lhs.x \//;"	f	typeref:typename:ImVec2
operator /	build/_deps/imgui-proj-src/imgui.h	/^static inline ImVec2  operator\/(const ImVec2& lhs, const float rhs)     { return ImVec2(lhs.x \//;"	f	typeref:typename:ImVec2
operator /=	build/_deps/imgui-proj-src/imgui.h	/^static inline ImVec2& operator\/=(ImVec2& lhs, const ImVec2& rhs)        { lhs.x \/= rhs.x; lhs./;"	f	typeref:typename:ImVec2 &
operator /=	build/_deps/imgui-proj-src/imgui.h	/^static inline ImVec2& operator\/=(ImVec2& lhs, const float rhs)          { lhs.x \/= rhs; lhs.y /;"	f	typeref:typename:ImVec2 &
operator <<	neditor/Editor.h	/^inline std::ostream &operator<<(std::ostream &os, const ImVec2 &point) {$/;"	f	typeref:typename:std::ostream &
operator =	build/_deps/imgui-proj-src/imgui.h	/^    inline ImVector<T>& operator=(const ImVector<T>& src)   { clear(); resize(src.Size); if (src/;"	f	struct:ImVector	typeref:typename:ImVector<T> &
operator ==	build/_deps/imgui-proj-src/imgui.h	/^static inline bool    operator==(const ImVec2& lhs, const ImVec2& rhs)  { return lhs.x == rhs.x /;"	f	typeref:typename:bool
operator ==	build/_deps/imgui-proj-src/imgui.h	/^static inline bool    operator==(const ImVec4& lhs, const ImVec4& rhs)  { return lhs.x == rhs.x /;"	f	typeref:typename:bool
operator []	build/_deps/imgui-proj-src/imgui.h	/^    inline T&           operator[](int i)                   { IM_ASSERT(i >= 0 && i < Size); ret/;"	f	struct:ImVector	typeref:typename:T &
operator []	build/_deps/imgui-proj-src/imgui.h	/^    inline char         operator[](int i) const { IM_ASSERT(Buf.Data != NULL); return Buf.Data[i/;"	f	struct:ImGuiTextBuffer	typeref:typename:char
operator []	build/_deps/imgui-proj-src/imgui.h	/^    inline const T&     operator[](int i) const             { IM_ASSERT(i >= 0 && i < Size); ret/;"	f	struct:ImVector	typeref:typename:const T &
operator []	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline T&           operator[](int i)           { T* p = Data + i; IM_ASSERT(p >= Data && p /;"	f	struct:ImSpan	typeref:typename:T &
operator []	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline const T&     operator[](int i) const     { const T* p = Data + i; IM_ASSERT(p >= Data/;"	f	struct:ImSpan	typeref:typename:const T &
operator [] 	build/_deps/imgui-proj-src/imgui.h	/^    float& operator[] (size_t idx)          { IM_ASSERT(idx == 0 || idx == 1); return ((float*)(/;"	f	struct:ImVec2	typeref:typename:float &
operator delete	build/_deps/imgui-proj-src/imgui.h	/^inline void  operator delete(void*, ImNewWrapper, void*)   {} \/\/ This is only required so we c/;"	f	typeref:typename:void
operator new	build/_deps/imgui-proj-src/imgui.h	/^inline void* operator new(size_t, ImNewWrapper, void* ptr) { return ptr; }$/;"	f	typeref:typename:void *
or for 64-bit:	build/_deps/imgui-proj-src/examples/example_sdl2_opengl2/README.md	/^# or for 64-bit:$/;"	c
or for 64-bit:	build/_deps/imgui-proj-src/examples/example_sdl2_opengl3/README.md	/^# or for 64-bit:$/;"	c
or for 64-bit:	build/_deps/imgui-proj-src/examples/example_sdl2_sdlrenderer2/README.md	/^# or for 64-bit:$/;"	c
or for 64-bit:	build/_deps/imgui-proj-src/examples/example_sdl3_opengl3/README.md	/^# or for 64-bit:$/;"	c
outliterals	build/_deps/imgui-proj-src/misc/fonts/binary_to_compressed_c.cpp	/^static void outliterals(stb_uchar *in, int numlit)$/;"	f	typeref:typename:void	file:
output	build/compile_commands.json	/^  "output": "CMakeFiles\/imgui.dir\/_deps\/imgui-proj-src\/backends\/imgui_impl_glfw.cpp.o"$/;"	s	object:5
output	build/compile_commands.json	/^  "output": "CMakeFiles\/imgui.dir\/_deps\/imgui-proj-src\/backends\/imgui_impl_opengl3.cpp.o"$/;"	s	object:6
output	build/compile_commands.json	/^  "output": "CMakeFiles\/imgui.dir\/_deps\/imgui-proj-src\/imgui.cpp.o"$/;"	s	object:0
output	build/compile_commands.json	/^  "output": "CMakeFiles\/imgui.dir\/_deps\/imgui-proj-src\/imgui_demo.cpp.o"$/;"	s	object:1
output	build/compile_commands.json	/^  "output": "CMakeFiles\/imgui.dir\/_deps\/imgui-proj-src\/imgui_draw.cpp.o"$/;"	s	object:2
output	build/compile_commands.json	/^  "output": "CMakeFiles\/imgui.dir\/_deps\/imgui-proj-src\/imgui_tables.cpp.o"$/;"	s	object:3
output	build/compile_commands.json	/^  "output": "CMakeFiles\/imgui.dir\/_deps\/imgui-proj-src\/imgui_widgets.cpp.o"$/;"	s	object:4
output	build/compile_commands.json	/^  "output": "CMakeFiles\/neditor.dir\/neditor\/neditor.cc.o"$/;"	s	object:7
pBlendState	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^    ID3D10BlendState*           pBlendState;$/;"	m	struct:ImGui_ImplDX10_Data	typeref:typename:ID3D10BlendState *	file:
pBlendState	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^    ID3D11BlendState*           pBlendState;$/;"	m	struct:ImGui_ImplDX11_Data	typeref:typename:ID3D11BlendState *	file:
pDepthStencilState	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^    ID3D10DepthStencilState*    pDepthStencilState;$/;"	m	struct:ImGui_ImplDX10_Data	typeref:typename:ID3D10DepthStencilState *	file:
pDepthStencilState	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^    ID3D11DepthStencilState*    pDepthStencilState;$/;"	m	struct:ImGui_ImplDX11_Data	typeref:typename:ID3D11DepthStencilState *	file:
pFactory	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^    IDXGIFactory*               pFactory;$/;"	m	struct:ImGui_ImplDX10_Data	typeref:typename:IDXGIFactory *	file:
pFactory	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^    IDXGIFactory*               pFactory;$/;"	m	struct:ImGui_ImplDX11_Data	typeref:typename:IDXGIFactory *	file:
pFontSampler	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^    ID3D10SamplerState*         pFontSampler;$/;"	m	struct:ImGui_ImplDX10_Data	typeref:typename:ID3D10SamplerState *	file:
pFontSampler	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^    ID3D11SamplerState*         pFontSampler;$/;"	m	struct:ImGui_ImplDX11_Data	typeref:typename:ID3D11SamplerState *	file:
pFontTextureResource	build/_deps/imgui-proj-src/backends/imgui_impl_dx12.cpp	/^    ID3D12Resource*             pFontTextureResource;$/;"	m	struct:ImGui_ImplDX12_Data	typeref:typename:ID3D12Resource *	file:
pFontTextureView	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^    ID3D10ShaderResourceView*   pFontTextureView;$/;"	m	struct:ImGui_ImplDX10_Data	typeref:typename:ID3D10ShaderResourceView *	file:
pFontTextureView	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^    ID3D11ShaderResourceView*   pFontTextureView;$/;"	m	struct:ImGui_ImplDX11_Data	typeref:typename:ID3D11ShaderResourceView *	file:
pFrameResources	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.cpp	/^    FrameResources*         pFrameResources = nullptr;$/;"	m	struct:ImGui_ImplWGPU_Data	typeref:typename:FrameResources *	file:
pIB	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^    ID3D10Buffer*               pIB;$/;"	m	struct:ImGui_ImplDX10_Data	typeref:typename:ID3D10Buffer *	file:
pIB	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^    ID3D11Buffer*               pIB;$/;"	m	struct:ImGui_ImplDX11_Data	typeref:typename:ID3D11Buffer *	file:
pIB	build/_deps/imgui-proj-src/backends/imgui_impl_dx9.cpp	/^    LPDIRECT3DINDEXBUFFER9      pIB;$/;"	m	struct:ImGui_ImplDX9_Data	typeref:typename:LPDIRECT3DINDEXBUFFER9	file:
pInputLayout	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^    ID3D10InputLayout*          pInputLayout;$/;"	m	struct:ImGui_ImplDX10_Data	typeref:typename:ID3D10InputLayout *	file:
pInputLayout	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^    ID3D11InputLayout*          pInputLayout;$/;"	m	struct:ImGui_ImplDX11_Data	typeref:typename:ID3D11InputLayout *	file:
pPipelineState	build/_deps/imgui-proj-src/backends/imgui_impl_dx12.cpp	/^    ID3D12PipelineState*        pPipelineState;$/;"	m	struct:ImGui_ImplDX12_Data	typeref:typename:ID3D12PipelineState *	file:
pPixelShader	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^    ID3D10PixelShader*          pPixelShader;$/;"	m	struct:ImGui_ImplDX10_Data	typeref:typename:ID3D10PixelShader *	file:
pPixelShader	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^    ID3D11PixelShader*          pPixelShader;$/;"	m	struct:ImGui_ImplDX11_Data	typeref:typename:ID3D11PixelShader *	file:
pRasterizerState	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^    ID3D10RasterizerState*      pRasterizerState;$/;"	m	struct:ImGui_ImplDX10_Data	typeref:typename:ID3D10RasterizerState *	file:
pRasterizerState	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^    ID3D11RasterizerState*      pRasterizerState;$/;"	m	struct:ImGui_ImplDX11_Data	typeref:typename:ID3D11RasterizerState *	file:
pRootSignature	build/_deps/imgui-proj-src/backends/imgui_impl_dx12.cpp	/^    ID3D12RootSignature*        pRootSignature;$/;"	m	struct:ImGui_ImplDX12_Data	typeref:typename:ID3D12RootSignature *	file:
pVB	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^    ID3D10Buffer*               pVB;$/;"	m	struct:ImGui_ImplDX10_Data	typeref:typename:ID3D10Buffer *	file:
pVB	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^    ID3D11Buffer*               pVB;$/;"	m	struct:ImGui_ImplDX11_Data	typeref:typename:ID3D11Buffer *	file:
pVB	build/_deps/imgui-proj-src/backends/imgui_impl_dx9.cpp	/^    LPDIRECT3DVERTEXBUFFER9     pVB;$/;"	m	struct:ImGui_ImplDX9_Data	typeref:typename:LPDIRECT3DVERTEXBUFFER9	file:
pVertexConstantBuffer	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^    ID3D10Buffer*               pVertexConstantBuffer;$/;"	m	struct:ImGui_ImplDX10_Data	typeref:typename:ID3D10Buffer *	file:
pVertexConstantBuffer	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^    ID3D11Buffer*               pVertexConstantBuffer;$/;"	m	struct:ImGui_ImplDX11_Data	typeref:typename:ID3D11Buffer *	file:
pVertexShader	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^    ID3D10VertexShader*         pVertexShader;$/;"	m	struct:ImGui_ImplDX10_Data	typeref:typename:ID3D10VertexShader *	file:
pVertexShader	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^    ID3D11VertexShader*         pVertexShader;$/;"	m	struct:ImGui_ImplDX11_Data	typeref:typename:ID3D11VertexShader *	file:
pack_info	build/_deps/imgui-proj-src/imstb_truetype.h	/^   void *pack_info;$/;"	m	struct:stbtt_pack_context	typeref:typename:void *
padding	build/_deps/imgui-proj-src/imstb_truetype.h	/^      unsigned char type,padding;$/;"	m	struct:__anond648eb7b0708	typeref:typename:unsigned char
padding	build/_deps/imgui-proj-src/imstb_truetype.h	/^   int   padding;$/;"	m	struct:stbtt_pack_context	typeref:typename:int
padding1	build/_deps/imgui-proj-src/imstb_textedit.h	/^   unsigned char padding1, padding2, padding3;$/;"	m	struct:__anon0ee941840308	typeref:typename:unsigned char
padding2	build/_deps/imgui-proj-src/imstb_textedit.h	/^   unsigned char padding1, padding2, padding3;$/;"	m	struct:__anon0ee941840308	typeref:typename:unsigned char
padding3	build/_deps/imgui-proj-src/imstb_textedit.h	/^   unsigned char padding1, padding2, padding3;$/;"	m	struct:__anon0ee941840308	typeref:typename:unsigned char
parse_version	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^static int parse_version(void)$/;"	f	typeref:typename:int
pd3dDevice	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^    ID3D10Device*               pd3dDevice;$/;"	m	struct:ImGui_ImplDX10_Data	typeref:typename:ID3D10Device *	file:
pd3dDevice	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^    ID3D11Device*               pd3dDevice;$/;"	m	struct:ImGui_ImplDX11_Data	typeref:typename:ID3D11Device *	file:
pd3dDevice	build/_deps/imgui-proj-src/backends/imgui_impl_dx12.cpp	/^    ID3D12Device*               pd3dDevice;$/;"	m	struct:ImGui_ImplDX12_Data	typeref:typename:ID3D12Device *	file:
pd3dDevice	build/_deps/imgui-proj-src/backends/imgui_impl_dx9.cpp	/^    LPDIRECT3DDEVICE9           pd3dDevice;$/;"	m	struct:ImGui_ImplDX9_Data	typeref:typename:LPDIRECT3DDEVICE9	file:
pd3dDeviceContext	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^    ID3D11DeviceContext*        pd3dDeviceContext;$/;"	m	struct:ImGui_ImplDX11_Data	typeref:typename:ID3D11DeviceContext *	file:
pd3dSrvDescHeap	build/_deps/imgui-proj-src/backends/imgui_impl_dx12.cpp	/^    ID3D12DescriptorHeap*       pd3dSrvDescHeap;$/;"	m	struct:ImGui_ImplDX12_Data	typeref:typename:ID3D12DescriptorHeap *	file:
pipelineState	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.cpp	/^    WGPURenderPipeline      pipelineState = nullptr;$/;"	m	struct:ImGui_ImplWGPU_Data	typeref:typename:WGPURenderPipeline	file:
pixels	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^    unsigned char* pixels;$/;"	m	struct:GLFWimage	typeref:typename:unsigned char *
pixels	build/_deps/imgui-proj-src/imstb_truetype.h	/^   unsigned char *pixels;$/;"	m	struct:__anond648eb7b0808	typeref:typename:unsigned char *
pixels	build/_deps/imgui-proj-src/imstb_truetype.h	/^   unsigned char *pixels;$/;"	m	struct:stbtt_pack_context	typeref:typename:unsigned char *
pop_back	build/_deps/imgui-proj-src/imgui.h	/^    inline void         pop_back()                          { IM_ASSERT(Size > 0); Size--; }$/;"	f	struct:ImVector	typeref:typename:void
pos	build/_deps/imgui-proj-src/backends/imgui_impl_allegro5.cpp	/^    ImVec2          pos;$/;"	m	struct:ImDrawVertAllegro	typeref:typename:ImVec2	file:
pos	build/_deps/imgui-proj-src/backends/imgui_impl_dx9.cpp	/^    float    pos[3];$/;"	m	struct:CUSTOMVERTEX	typeref:typename:float[3]	file:
pos	build/_deps/imgui-proj-src/imgui.h	/^    ImVec2  pos;$/;"	m	struct:ImDrawVert	typeref:typename:ImVec2
preferred_x	build/_deps/imgui-proj-src/imstb_textedit.h	/^   float preferred_x; \/\/ this determines where the cursor up\/down tries to seek to along x$/;"	m	struct:__anon0ee941840308	typeref:typename:float
preinstall	build/Makefile	/^preinstall: all$/;"	t
preinstall	build/_deps/imgui-proj-subbuild/Makefile	/^preinstall: all$/;"	t
preinstall/fast	build/Makefile	/^preinstall\/fast:$/;"	t
preinstall/fast	build/_deps/imgui-proj-subbuild/Makefile	/^preinstall\/fast:$/;"	t
prepareOpenGL	build/_deps/imgui-proj-src/examples/example_apple_opengl2/main.mm	/^{$/;"	m	implementation:AppView
prev_first	build/_deps/imgui-proj-src/imstb_textedit.h	/^   int prev_first;  \/\/ first char of previous row$/;"	m	struct:__anon0ee941840508	typeref:typename:int
prev_link	build/_deps/imgui-proj-src/imstb_rectpack.h	/^   stbrp_node **prev_link;$/;"	m	struct:__anonbedcada60308	typeref:typename:stbrp_node **
proc_names	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^static const char *proc_names[] = {$/;"	v	typeref:typename:const char * []
proggy_clean_ttf_compressed_data_base85	build/_deps/imgui-proj-src/imgui_draw.cpp	/^static const char proggy_clean_ttf_compressed_data_base85[11980 + 1] =$/;"	v	typeref:typename:const char[]	file:
ptr	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^    GL3WglProc ptr[59];$/;"	m	union:ImGL3WProcs	typeref:typename:GL3WglProc[59]
ptr	build/_deps/imgui-proj-src/imgui.cpp	/^    union { void* ptr; int integer; } tex_id_opaque;$/;"	m	union:FormatTextureIDForDebugDisplay::__anon86f0acb1030a	typeref:typename:void *	file:
ptr_from_offset	build/_deps/imgui-proj-src/imgui_internal.h	/^    T*      ptr_from_offset(int off)    { IM_ASSERT(off >= 4 && off < Buf.Size); return (T*)(voi/;"	f	struct:ImChunkStream	typeref:typename:T *
push_back	build/_deps/imgui-proj-src/imgui.h	/^    inline void         push_back(const T& v)               { if (Size == Capacity) reserve(_gro/;"	f	struct:ImVector	typeref:typename:void
push_front	build/_deps/imgui-proj-src/imgui.h	/^    inline void         push_front(const T& v)              { if (Size == 0) push_back(v); else /;"	f	struct:ImVector	typeref:typename:void
pvertices	build/_deps/imgui-proj-src/imstb_truetype.h	/^   stbtt_vertex *pvertices;$/;"	m	struct:__anond648eb7b0f08	typeref:typename:stbtt_vertex *
qnxnto	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v	typeref:typename:char const *
qnxnto	build/CMakeFiles/3.26.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v	typeref:typename:char const *
rebuild_cache	build/Makefile	/^rebuild_cache:$/;"	t
rebuild_cache	build/_deps/imgui-proj-subbuild/Makefile	/^rebuild_cache:$/;"	t
rebuild_cache/fast	build/Makefile	/^rebuild_cache\/fast: rebuild_cache$/;"	t
rebuild_cache/fast	build/_deps/imgui-proj-subbuild/Makefile	/^rebuild_cache\/fast: rebuild_cache$/;"	t
rect_height_compare	build/_deps/imgui-proj-src/imstb_rectpack.h	/^static int STBRP__CDECL rect_height_compare(const void *a, const void *b)$/;"	f	typeref:typename:int STBRP__CDECL
rect_original_order	build/_deps/imgui-proj-src/imstb_rectpack.h	/^static int STBRP__CDECL rect_original_order(const void *a, const void *b)$/;"	f	typeref:typename:int STBRP__CDECL
red	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^    unsigned short* red;$/;"	m	struct:GLFWgammaramp	typeref:typename:unsigned short *
redBits	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^    int redBits;$/;"	m	struct:GLFWvidmode	typeref:typename:int
redo_char_point	build/_deps/imgui-proj-src/imstb_textedit.h	/^   int undo_char_point, redo_char_point;$/;"	m	struct:__anon0ee941840208	typeref:typename:int
redo_point	build/_deps/imgui-proj-src/imstb_textedit.h	/^   short undo_point, redo_point;$/;"	m	struct:__anon0ee941840208	typeref:typename:short
refreshRate	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^    int refreshRate;$/;"	m	struct:GLFWvidmode	typeref:typename:int
renderPipelineStateCache	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^@property (nonatomic, strong) NSMutableDictionary*          renderPipelineStateCache; \/\/ pipel/;"	p	interface:MetalContext
renderPipelineStateForFramebufferDescriptor:device:	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^- (id<MTLRenderPipelineState>)renderPipelineStateForFramebufferDescriptor:(FramebufferDescriptor/;"	m	interface:MetalContext
renderPipelineStateForFramebufferDescriptor:device:	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^{$/;"	m	implementation:MetalContext
renderResources	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.cpp	/^    RenderResources         renderResources;$/;"	m	struct:ImGui_ImplWGPU_Data	typeref:typename:RenderResources	file:
renderTargetFormat	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.cpp	/^    WGPUTextureFormat       renderTargetFormat = WGPUTextureFormat_Undefined;$/;"	m	struct:ImGui_ImplWGPU_Data	typeref:typename:WGPUTextureFormat	file:
reserve	build/_deps/imgui-proj-src/imgui.h	/^    inline void         reserve(int new_capacity)           { if (new_capacity <= Capacity) retu/;"	f	struct:ImVector	typeref:typename:void
reserve	build/_deps/imgui-proj-src/imgui.h	/^    void                reserve(int capacity)   { Buf.reserve(capacity); }$/;"	f	struct:ImGuiTextBuffer	typeref:typename:void
reserve_discard	build/_deps/imgui-proj-src/imgui.h	/^    inline void         reserve_discard(int new_capacity)   { if (new_capacity <= Capacity) retu/;"	f	struct:ImVector	typeref:typename:void
reshape	build/_deps/imgui-proj-src/examples/example_apple_opengl2/main.mm	/^-(void)reshape                              { [super reshape]; [[self openGLContext] update]; [s/;"	m	implementation:AppView
resize	build/_deps/imgui-proj-src/imgui.h	/^    inline void         resize(int new_size)                { if (new_size > Capacity) reserve(_/;"	f	struct:ImVector	typeref:typename:void
resize	build/_deps/imgui-proj-src/imgui.h	/^    inline void         resize(int new_size, const T& v)    { if (new_size > Capacity) reserve(_/;"	f	struct:ImVector	typeref:typename:void
resize_border_def	build/_deps/imgui-proj-src/imgui.cpp	/^static const ImGuiResizeBorderDef resize_border_def[4] =$/;"	v	typeref:typename:const ImGuiResizeBorderDef[4]	file:
resize_grip_def	build/_deps/imgui-proj-src/imgui.cpp	/^static const ImGuiResizeGripDef resize_grip_def[4] =$/;"	v	typeref:typename:const ImGuiResizeGripDef[4]	file:
row_count_per_page	build/_deps/imgui-proj-src/imstb_textedit.h	/^   int row_count_per_page;$/;"	m	struct:__anon0ee941840308	typeref:typename:int
s0	build/_deps/imgui-proj-src/imstb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anond648eb7b0308	typeref:typename:float
s1	build/_deps/imgui-proj-src/imstb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anond648eb7b0308	typeref:typename:float
sAddString	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.c	/^static void sAddString(uSynergyContext *context, const char *string)$/;"	f	typeref:typename:void	file:
sAddUInt16	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.c	/^static void sAddUInt16(uSynergyContext *context, uint16_t value)$/;"	f	typeref:typename:void	file:
sAddUInt32	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.c	/^static void sAddUInt32(uSynergyContext *context, uint32_t value)$/;"	f	typeref:typename:void	file:
sAddUInt8	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.c	/^static void sAddUInt8(uSynergyContext *context, uint8_t value)$/;"	f	typeref:typename:void	file:
sNetToNative16	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.c	/^static int16_t sNetToNative16(const unsigned char *value)$/;"	f	typeref:typename:int16_t	file:
sNetToNative32	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.c	/^static int32_t sNetToNative32(const unsigned char *value)$/;"	f	typeref:typename:int32_t	file:
sProcessMessage	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.c	/^static void sProcessMessage(uSynergyContext *context, const uint8_t *message)$/;"	f	typeref:typename:void	file:
sSendJoystickCallback	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.c	/^static void sSendJoystickCallback(uSynergyContext *context, uint8_t joyNum)$/;"	f	typeref:typename:void	file:
sSendKeyboardCallback	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.c	/^static void sSendKeyboardCallback(uSynergyContext *context, uint16_t key, uint16_t modifiers, uS/;"	f	typeref:typename:void	file:
sSendMouseCallback	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.c	/^static void sSendMouseCallback(uSynergyContext *context)$/;"	f	typeref:typename:void	file:
sSendReply	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.c	/^static uSynergyBool sSendReply(uSynergyContext *context)$/;"	f	typeref:typename:uSynergyBool	file:
sSetDisconnected	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.c	/^static void sSetDisconnected(uSynergyContext *context)$/;"	f	typeref:typename:void	file:
sTrace	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.c	/^static void sTrace(uSynergyContext *context, const char* text)$/;"	f	typeref:typename:void	file:
sUpdateContext	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.c	/^static void sUpdateContext(uSynergyContext *context)$/;"	f	typeref:typename:void	file:
s_current_sort_specs	build/_deps/imgui-proj-src/imgui_demo.cpp	/^    static const ImGuiTableSortSpecs* s_current_sort_specs;$/;"	m	struct:__anon1b6430950210::MyItem	typeref:typename:const ImGuiTableSortSpecs *	file:
s_current_sort_specs	build/_deps/imgui-proj-src/imgui_demo.cpp	/^const ImGuiTableSortSpecs* MyItem::s_current_sort_specs = NULL;$/;"	m	class:__anon1b6430950210::MyItem	typeref:typename:const ImGuiTableSortSpecs *
sampleCount	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^@property (nonatomic, assign) unsigned long  sampleCount;$/;"	p	interface:FramebufferDescriptor
select_end	build/_deps/imgui-proj-src/imstb_textedit.h	/^   int select_end;$/;"	m	struct:__anon0ee941840308	typeref:typename:int
select_start	build/_deps/imgui-proj-src/imstb_textedit.h	/^   int select_start;          \/\/ selection start point$/;"	m	struct:__anon0ee941840308	typeref:typename:int
selectedRange	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^{$/;"	m	implementation:KeyEventResponder
set	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline void         set(T* data, T* data_end)   { Data = data; DataEnd = data_end; }$/;"	f	struct:ImSpan	typeref:typename:void
set	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline void         set(T* data, int size)      { Data = data; DataEnd = data + size; }$/;"	f	struct:ImSpan	typeref:typename:void
setImePosX:imePosY:	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^{$/;"	m	implementation:KeyEventResponder
setMarkedText:selectedRange:replacementRange:	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^{$/;"	m	implementation:KeyEventResponder
setupMenu	build/_deps/imgui-proj-src/examples/example_apple_opengl2/main.mm	/^{$/;"	m	implementation:AppDelegate
show_another_window	build/_deps/imgui-proj-src/examples/example_glut_opengl2/main.cpp	/^static bool show_another_window = false;$/;"	v	typeref:typename:bool	file:
show_demo_window	build/_deps/imgui-proj-src/examples/example_glut_opengl2/main.cpp	/^static bool show_demo_window = true;$/;"	v	typeref:typename:bool	file:
shrink	build/_deps/imgui-proj-src/imgui.h	/^    inline void         shrink(int new_size)                { IM_ASSERT(new_size <= Size); Size /;"	f	struct:ImVector	typeref:typename:void
single_line	build/_deps/imgui-proj-src/imstb_textedit.h	/^   unsigned char single_line;$/;"	m	struct:__anon0ee941840308	typeref:typename:unsigned char
size	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^    unsigned int size;$/;"	m	struct:GLFWgammaramp	typeref:typename:unsigned int
size	build/_deps/imgui-proj-src/imgui.h	/^    inline int          size() const                        { return Size; }$/;"	f	struct:ImVector	typeref:typename:int
size	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline int          size() const                { return (int)(ptrdiff_t)(DataEnd - Data); }$/;"	f	struct:ImSpan	typeref:typename:int
size	build/_deps/imgui-proj-src/imgui_internal.h	/^    int             size()                                  { return LineOffsets.Size; }$/;"	f	struct:ImGuiTextIndex	typeref:typename:int
size	build/_deps/imgui-proj-src/imgui_internal.h	/^    int     size() const                { return Buf.Size; }$/;"	f	struct:ImChunkStream	typeref:typename:int
size	build/_deps/imgui-proj-src/imstb_truetype.h	/^   int size;$/;"	m	struct:__anond648eb7b0108	typeref:typename:int
size_in_bytes	build/_deps/imgui-proj-src/imgui.h	/^    inline int          size_in_bytes() const               { return Size * (int)sizeof(T); }$/;"	f	struct:ImVector	typeref:typename:int
size_in_bytes	build/_deps/imgui-proj-src/imgui_internal.h	/^    inline int          size_in_bytes() const       { return (int)(ptrdiff_t)(DataEnd - Data) * /;"	f	struct:ImSpan	typeref:typename:int
skip_missing	build/_deps/imgui-proj-src/imstb_truetype.h	/^   int   skip_missing;$/;"	m	struct:stbtt_pack_context	typeref:typename:int
snprintf	build/_deps/imgui-proj-src/imgui_demo.cpp	/^#define snprintf /;"	d	file:
sources	build/_deps/imgui-proj-subbuild/CMakeFiles/imgui-proj-populate.dir/Labels.json	/^	"sources" : $/;"	a
split	build/_deps/imgui-proj-src/imgui.cpp	/^void ImGuiTextFilter::ImGuiTextRange::split(char separator, ImVector<ImGuiTextRange>* out) const$/;"	f	class:ImGuiTextFilter::ImGuiTextRange	typeref:typename:void
started	build/_deps/imgui-proj-src/imstb_truetype.h	/^   int started;$/;"	m	struct:__anond648eb7b0f08	typeref:typename:int
stb__barrier_in_b	build/_deps/imgui-proj-src/imgui_draw.cpp	/^static const unsigned char *stb__barrier_in_b;$/;"	v	typeref:typename:const unsigned char *	file:
stb__barrier_out_b	build/_deps/imgui-proj-src/imgui_draw.cpp	/^static unsigned char *stb__barrier_out_e, *stb__barrier_out_b;$/;"	v	typeref:typename:unsigned char **	file:
stb__barrier_out_e	build/_deps/imgui-proj-src/imgui_draw.cpp	/^static unsigned char *stb__barrier_out_e, *stb__barrier_out_b;$/;"	v	typeref:typename:unsigned char *	file:
stb__dout	build/_deps/imgui-proj-src/imgui_draw.cpp	/^static unsigned char *stb__dout;$/;"	v	typeref:typename:unsigned char *	file:
stb__hashsize	build/_deps/imgui-proj-src/misc/fonts/binary_to_compressed_c.cpp	/^static  stb_uint stb__hashsize = 32768;$/;"	v	typeref:typename:stb_uint	file:
stb__hc	build/_deps/imgui-proj-src/misc/fonts/binary_to_compressed_c.cpp	/^#define stb__hc(/;"	d	file:
stb__hc2	build/_deps/imgui-proj-src/misc/fonts/binary_to_compressed_c.cpp	/^#define stb__hc2(/;"	d	file:
stb__hc3	build/_deps/imgui-proj-src/misc/fonts/binary_to_compressed_c.cpp	/^#define stb__hc3(/;"	d	file:
stb__in2	build/_deps/imgui-proj-src/imgui_draw.cpp	/^#define stb__in2(/;"	d	file:
stb__in3	build/_deps/imgui-proj-src/imgui_draw.cpp	/^#define stb__in3(/;"	d	file:
stb__in4	build/_deps/imgui-proj-src/imgui_draw.cpp	/^#define stb__in4(/;"	d	file:
stb__lit	build/_deps/imgui-proj-src/imgui_draw.cpp	/^static void stb__lit(const unsigned char *data, unsigned int length)$/;"	f	typeref:typename:void	file:
stb__match	build/_deps/imgui-proj-src/imgui_draw.cpp	/^static void stb__match(const unsigned char *data, unsigned int length)$/;"	f	typeref:typename:void	file:
stb__nc	build/_deps/imgui-proj-src/misc/fonts/binary_to_compressed_c.cpp	/^#define stb__nc(/;"	d	file:
stb__out	build/_deps/imgui-proj-src/misc/fonts/binary_to_compressed_c.cpp	/^static stb_uchar *stb__out;$/;"	v	typeref:typename:stb_uchar *	file:
stb__outbytes	build/_deps/imgui-proj-src/misc/fonts/binary_to_compressed_c.cpp	/^static stb_uint   stb__outbytes;$/;"	v	typeref:typename:stb_uint	file:
stb__outfile	build/_deps/imgui-proj-src/misc/fonts/binary_to_compressed_c.cpp	/^static FILE      *stb__outfile;$/;"	v	typeref:typename:FILE *	file:
stb__running_adler	build/_deps/imgui-proj-src/misc/fonts/binary_to_compressed_c.cpp	/^static unsigned int stb__running_adler;$/;"	v	typeref:typename:unsigned int	file:
stb__window	build/_deps/imgui-proj-src/misc/fonts/binary_to_compressed_c.cpp	/^static int stb__window = 0x40000; \/\/ 256K$/;"	v	typeref:typename:int	file:
stb__write	build/_deps/imgui-proj-src/misc/fonts/binary_to_compressed_c.cpp	/^static void stb__write(unsigned char v)$/;"	f	typeref:typename:void	file:
stb_adler32	build/_deps/imgui-proj-src/imgui_draw.cpp	/^static unsigned int stb_adler32(unsigned int adler32, unsigned char *buffer, unsigned int buflen/;"	f	typeref:typename:unsigned int	file:
stb_adler32	build/_deps/imgui-proj-src/misc/fonts/binary_to_compressed_c.cpp	/^static stb_uint stb_adler32(stb_uint adler32, stb_uchar *buffer, stb_uint buflen)$/;"	f	typeref:typename:stb_uint	file:
stb_compress	build/_deps/imgui-proj-src/misc/fonts/binary_to_compressed_c.cpp	/^stb_uint stb_compress(stb_uchar *out, stb_uchar *input, stb_uint length)$/;"	f	typeref:typename:stb_uint
stb_compress_chunk	build/_deps/imgui-proj-src/misc/fonts/binary_to_compressed_c.cpp	/^static int stb_compress_chunk(stb_uchar *history,$/;"	f	typeref:typename:int	file:
stb_compress_inner	build/_deps/imgui-proj-src/misc/fonts/binary_to_compressed_c.cpp	/^static int stb_compress_inner(stb_uchar *input, stb_uint length)$/;"	f	typeref:typename:int	file:
stb_decompress	build/_deps/imgui-proj-src/imgui_draw.cpp	/^static unsigned int stb_decompress(unsigned char *output, const unsigned char *i, unsigned int \//;"	f	typeref:typename:unsigned int	file:
stb_decompress_length	build/_deps/imgui-proj-src/imgui_draw.cpp	/^static unsigned int stb_decompress_length(const unsigned char *input)$/;"	f	typeref:typename:unsigned int	file:
stb_decompress_token	build/_deps/imgui-proj-src/imgui_draw.cpp	/^static const unsigned char *stb_decompress_token(const unsigned char *i)$/;"	f	typeref:typename:const unsigned char *	file:
stb_matchlen	build/_deps/imgui-proj-src/misc/fonts/binary_to_compressed_c.cpp	/^static unsigned int stb_matchlen(stb_uchar *m1, stb_uchar *m2, stb_uint maxlen)$/;"	f	typeref:typename:unsigned int	file:
stb_not_crap	build/_deps/imgui-proj-src/misc/fonts/binary_to_compressed_c.cpp	/^static int stb_not_crap(int best, int dist)$/;"	f	typeref:typename:int	file:
stb_out	build/_deps/imgui-proj-src/misc/fonts/binary_to_compressed_c.cpp	/^#define stb_out(/;"	d	file:
stb_out2	build/_deps/imgui-proj-src/misc/fonts/binary_to_compressed_c.cpp	/^static void stb_out2(stb_uint v) { stb_out(v >> 8); stb_out(v); }$/;"	f	typeref:typename:void	file:
stb_out3	build/_deps/imgui-proj-src/misc/fonts/binary_to_compressed_c.cpp	/^static void stb_out3(stb_uint v) { stb_out(v >> 16); stb_out(v >> 8); stb_out(v); }$/;"	f	typeref:typename:void	file:
stb_out4	build/_deps/imgui-proj-src/misc/fonts/binary_to_compressed_c.cpp	/^static void stb_out4(stb_uint v) { stb_out(v >> 24); stb_out(v >> 16); stb_out(v >> 8 ); stb_out/;"	f	typeref:typename:void	file:
stb_text_create_undo_record	build/_deps/imgui-proj-src/imstb_textedit.h	/^static StbUndoRecord *stb_text_create_undo_record(StbUndoState *state, int numchars)$/;"	f	typeref:typename:StbUndoRecord *
stb_text_createundo	build/_deps/imgui-proj-src/imstb_textedit.h	/^static IMSTB_TEXTEDIT_CHARTYPE *stb_text_createundo(StbUndoState *state, int pos, int insert_len/;"	f	typeref:typename:IMSTB_TEXTEDIT_CHARTYPE *
stb_text_locate_coord	build/_deps/imgui-proj-src/imstb_textedit.h	/^static int stb_text_locate_coord(IMSTB_TEXTEDIT_STRING *str, float x, float y)$/;"	f	typeref:typename:int
stb_text_makeundo_delete	build/_deps/imgui-proj-src/imstb_textedit.h	/^static void stb_text_makeundo_delete(IMSTB_TEXTEDIT_STRING *str, STB_TexteditState *state, int w/;"	f	typeref:typename:void
stb_text_makeundo_insert	build/_deps/imgui-proj-src/imstb_textedit.h	/^static void stb_text_makeundo_insert(STB_TexteditState *state, int where, int length)$/;"	f	typeref:typename:void
stb_text_makeundo_replace	build/_deps/imgui-proj-src/imstb_textedit.h	/^static void stb_text_makeundo_replace(IMSTB_TEXTEDIT_STRING *str, STB_TexteditState *state, int /;"	f	typeref:typename:void
stb_text_redo	build/_deps/imgui-proj-src/imstb_textedit.h	/^static void stb_text_redo(IMSTB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_text_undo	build/_deps/imgui-proj-src/imstb_textedit.h	/^static void stb_text_undo(IMSTB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_textedit_clamp	build/_deps/imgui-proj-src/imstb_textedit.h	/^static void stb_textedit_clamp(IMSTB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_textedit_clear_state	build/_deps/imgui-proj-src/imstb_textedit.h	/^static void stb_textedit_clear_state(STB_TexteditState *state, int is_single_line)$/;"	f	typeref:typename:void
stb_textedit_click	build/_deps/imgui-proj-src/imstb_textedit.h	/^static void stb_textedit_click(IMSTB_TEXTEDIT_STRING *str, STB_TexteditState *state, float x, fl/;"	f	typeref:typename:void
stb_textedit_cut	build/_deps/imgui-proj-src/imstb_textedit.h	/^static int stb_textedit_cut(IMSTB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f	typeref:typename:int
stb_textedit_delete	build/_deps/imgui-proj-src/imstb_textedit.h	/^static void stb_textedit_delete(IMSTB_TEXTEDIT_STRING *str, STB_TexteditState *state, int where,/;"	f	typeref:typename:void
stb_textedit_delete_selection	build/_deps/imgui-proj-src/imstb_textedit.h	/^static void stb_textedit_delete_selection(IMSTB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_textedit_discard_redo	build/_deps/imgui-proj-src/imstb_textedit.h	/^static void stb_textedit_discard_redo(StbUndoState *state)$/;"	f	typeref:typename:void
stb_textedit_discard_undo	build/_deps/imgui-proj-src/imstb_textedit.h	/^static void stb_textedit_discard_undo(StbUndoState *state)$/;"	f	typeref:typename:void
stb_textedit_drag	build/_deps/imgui-proj-src/imstb_textedit.h	/^static void stb_textedit_drag(IMSTB_TEXTEDIT_STRING *str, STB_TexteditState *state, float x, flo/;"	f	typeref:typename:void
stb_textedit_find_charpos	build/_deps/imgui-proj-src/imstb_textedit.h	/^static void stb_textedit_find_charpos(StbFindState *find, IMSTB_TEXTEDIT_STRING *str, int n, int/;"	f	typeref:typename:void
stb_textedit_flush_redo	build/_deps/imgui-proj-src/imstb_textedit.h	/^static void stb_textedit_flush_redo(StbUndoState *state)$/;"	f	typeref:typename:void
stb_textedit_initialize_state	build/_deps/imgui-proj-src/imstb_textedit.h	/^static void stb_textedit_initialize_state(STB_TexteditState *state, int is_single_line)$/;"	f	typeref:typename:void
stb_textedit_key	build/_deps/imgui-proj-src/imstb_textedit.h	/^static void stb_textedit_key(IMSTB_TEXTEDIT_STRING *str, STB_TexteditState *state, STB_TEXTEDIT_/;"	f	typeref:typename:void
stb_textedit_move_to_first	build/_deps/imgui-proj-src/imstb_textedit.h	/^static void stb_textedit_move_to_first(STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_textedit_move_to_last	build/_deps/imgui-proj-src/imstb_textedit.h	/^static void stb_textedit_move_to_last(IMSTB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_textedit_move_to_word_next	build/_deps/imgui-proj-src/imstb_textedit.h	/^static int stb_textedit_move_to_word_next( IMSTB_TEXTEDIT_STRING *str, int c )$/;"	f	typeref:typename:int
stb_textedit_move_to_word_previous	build/_deps/imgui-proj-src/imstb_textedit.h	/^static int stb_textedit_move_to_word_previous( IMSTB_TEXTEDIT_STRING *str, int c )$/;"	f	typeref:typename:int
stb_textedit_paste	build/_deps/imgui-proj-src/imstb_textedit.h	/^static int stb_textedit_paste(IMSTB_TEXTEDIT_STRING *str, STB_TexteditState *state, IMSTB_TEXTED/;"	f	typeref:typename:int
stb_textedit_paste_internal	build/_deps/imgui-proj-src/imstb_textedit.h	/^static int stb_textedit_paste_internal(IMSTB_TEXTEDIT_STRING *str, STB_TexteditState *state, IMS/;"	f	typeref:typename:int
stb_textedit_prep_selection_at_cursor	build/_deps/imgui-proj-src/imstb_textedit.h	/^static void stb_textedit_prep_selection_at_cursor(STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_textedit_replace	build/_deps/imgui-proj-src/imgui_widgets.cpp	/^static void stb_textedit_replace(ImGuiInputTextState* str, STB_TexteditState* state, const IMSTB/;"	f	namespace:ImStb	typeref:typename:void	file:
stb_textedit_sortselection	build/_deps/imgui-proj-src/imstb_textedit.h	/^static void stb_textedit_sortselection(STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_uchar	build/_deps/imgui-proj-src/misc/fonts/binary_to_compressed_c.cpp	/^typedef unsigned char stb_uchar;$/;"	t	typeref:typename:unsigned char	file:
stb_uint	build/_deps/imgui-proj-src/misc/fonts/binary_to_compressed_c.cpp	/^typedef unsigned int stb_uint;$/;"	t	typeref:typename:unsigned int	file:
stbrp__findresult	build/_deps/imgui-proj-src/imstb_rectpack.h	/^} stbrp__findresult;$/;"	t	typeref:struct:__anonbedcada60308
stbrp__skyline_find_best_pos	build/_deps/imgui-proj-src/imstb_rectpack.h	/^static stbrp__findresult stbrp__skyline_find_best_pos(stbrp_context *c, int width, int height)$/;"	f	typeref:typename:stbrp__findresult
stbrp__skyline_find_min_y	build/_deps/imgui-proj-src/imstb_rectpack.h	/^static int stbrp__skyline_find_min_y(stbrp_context *c, stbrp_node *first, int x0, int width, int/;"	f	typeref:typename:int
stbrp__skyline_pack_rectangle	build/_deps/imgui-proj-src/imstb_rectpack.h	/^static stbrp__findresult stbrp__skyline_pack_rectangle(stbrp_context *context, int width, int he/;"	f	typeref:typename:stbrp__findresult
stbrp_context	build/_deps/imgui-proj-src/imstb_rectpack.h	/^struct stbrp_context$/;"	s
stbrp_context	build/_deps/imgui-proj-src/imstb_rectpack.h	/^typedef struct stbrp_context stbrp_context;$/;"	t	typeref:struct:stbrp_context
stbrp_context	build/_deps/imgui-proj-src/imstb_truetype.h	/^} stbrp_context;$/;"	t	typeref:struct:__anond648eb7b1108
stbrp_coord	build/_deps/imgui-proj-src/imstb_rectpack.h	/^typedef int            stbrp_coord;$/;"	t	typeref:typename:int
stbrp_coord	build/_deps/imgui-proj-src/imstb_truetype.h	/^typedef int stbrp_coord;$/;"	t	typeref:typename:int
stbrp_init_target	build/_deps/imgui-proj-src/imstb_rectpack.h	/^STBRP_DEF void stbrp_init_target(stbrp_context *context, int width, int height, stbrp_node *node/;"	f	typeref:typename:STBRP_DEF void
stbrp_init_target	build/_deps/imgui-proj-src/imstb_truetype.h	/^static void stbrp_init_target(stbrp_context *con, int pw, int ph, stbrp_node *nodes, int num_nod/;"	f	typeref:typename:void
stbrp_node	build/_deps/imgui-proj-src/imstb_rectpack.h	/^struct stbrp_node$/;"	s
stbrp_node	build/_deps/imgui-proj-src/imstb_rectpack.h	/^typedef struct stbrp_node    stbrp_node;$/;"	t	typeref:struct:stbrp_node
stbrp_node	build/_deps/imgui-proj-src/imstb_truetype.h	/^} stbrp_node;$/;"	t	typeref:struct:__anond648eb7b1208
stbrp_pack_rects	build/_deps/imgui-proj-src/imstb_rectpack.h	/^STBRP_DEF int stbrp_pack_rects(stbrp_context *context, stbrp_rect *rects, int num_rects)$/;"	f	typeref:typename:STBRP_DEF int
stbrp_pack_rects	build/_deps/imgui-proj-src/imstb_truetype.h	/^static void stbrp_pack_rects(stbrp_context *con, stbrp_rect *rects, int num_rects)$/;"	f	typeref:typename:void
stbrp_rect	build/_deps/imgui-proj-src/imstb_rectpack.h	/^struct stbrp_rect$/;"	s
stbrp_rect	build/_deps/imgui-proj-src/imstb_rectpack.h	/^typedef struct stbrp_rect    stbrp_rect;$/;"	t	typeref:struct:stbrp_rect
stbrp_rect	build/_deps/imgui-proj-src/imstb_truetype.h	/^struct stbrp_rect$/;"	s
stbrp_rect	build/_deps/imgui-proj-src/imstb_truetype.h	/^typedef struct stbrp_rect stbrp_rect;$/;"	t	typeref:struct:stbrp_rect
stbrp_setup_allow_out_of_mem	build/_deps/imgui-proj-src/imstb_rectpack.h	/^STBRP_DEF void stbrp_setup_allow_out_of_mem(stbrp_context *context, int allow_out_of_mem)$/;"	f	typeref:typename:STBRP_DEF void
stbrp_setup_heuristic	build/_deps/imgui-proj-src/imstb_rectpack.h	/^STBRP_DEF void stbrp_setup_heuristic(stbrp_context *context, int heuristic)$/;"	f	typeref:typename:STBRP_DEF void
stbtt_BakeFontBitmap	build/_deps/imgui-proj-src/imstb_truetype.h	/^STBTT_DEF int stbtt_BakeFontBitmap(const unsigned char *data, int offset,$/;"	f	typeref:typename:STBTT_DEF int
stbtt_BakeFontBitmap_internal	build/_deps/imgui-proj-src/imstb_truetype.h	/^static int stbtt_BakeFontBitmap_internal(unsigned char *data, int offset,  \/\/ font location (u/;"	f	typeref:typename:int
stbtt_CompareUTF8toUTF16_bigendian	build/_deps/imgui-proj-src/imstb_truetype.h	/^STBTT_DEF int stbtt_CompareUTF8toUTF16_bigendian(const char *s1, int len1, const char *s2, int l/;"	f	typeref:typename:STBTT_DEF int
stbtt_CompareUTF8toUTF16_bigendian_internal	build/_deps/imgui-proj-src/imstb_truetype.h	/^static int stbtt_CompareUTF8toUTF16_bigendian_internal(char *s1, int len1, char *s2, int len2)$/;"	f	typeref:typename:int
stbtt_FindGlyphIndex	build/_deps/imgui-proj-src/imstb_truetype.h	/^STBTT_DEF int stbtt_FindGlyphIndex(const stbtt_fontinfo *info, int unicode_codepoint)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_FindMatchingFont	build/_deps/imgui-proj-src/imstb_truetype.h	/^STBTT_DEF int stbtt_FindMatchingFont(const unsigned char *fontdata, const char *name, int flags)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_FindMatchingFont_internal	build/_deps/imgui-proj-src/imstb_truetype.h	/^static int stbtt_FindMatchingFont_internal(unsigned char *font_collection, char *name_utf8, stbt/;"	f	typeref:typename:int
stbtt_FindSVGDoc	build/_deps/imgui-proj-src/imstb_truetype.h	/^STBTT_DEF stbtt_uint8 *stbtt_FindSVGDoc(const stbtt_fontinfo *info, int gl)$/;"	f	typeref:typename:STBTT_DEF stbtt_uint8 *
stbtt_FlattenCurves	build/_deps/imgui-proj-src/imstb_truetype.h	/^static stbtt__point *stbtt_FlattenCurves(stbtt_vertex *vertices, int num_verts, float objspace_f/;"	f	typeref:typename:stbtt__point *
stbtt_FreeBitmap	build/_deps/imgui-proj-src/imstb_truetype.h	/^STBTT_DEF void stbtt_FreeBitmap(unsigned char *bitmap, void *userdata)$/;"	f	typeref:typename:STBTT_DEF void
stbtt_FreeSDF	build/_deps/imgui-proj-src/imstb_truetype.h	/^STBTT_DEF void stbtt_FreeSDF(unsigned char *bitmap, void *userdata)$/;"	f	typeref:typename:STBTT_DEF void
stbtt_FreeShape	build/_deps/imgui-proj-src/imstb_truetype.h	/^STBTT_DEF void stbtt_FreeShape(const stbtt_fontinfo *info, stbtt_vertex *v)$/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetBakedQuad	build/_deps/imgui-proj-src/imstb_truetype.h	/^STBTT_DEF void stbtt_GetBakedQuad(const stbtt_bakedchar *chardata, int pw, int ph, int char_inde/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetCodepointBitmap	build/_deps/imgui-proj-src/imstb_truetype.h	/^STBTT_DEF unsigned char *stbtt_GetCodepointBitmap(const stbtt_fontinfo *info, float scale_x, flo/;"	f	typeref:typename:STBTT_DEF unsigned char *
stbtt_GetCodepointBitmapBox	build/_deps/imgui-proj-src/imstb_truetype.h	/^STBTT_DEF void stbtt_GetCodepointBitmapBox(const stbtt_fontinfo *font, int codepoint, float scal/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetCodepointBitmapBoxSubpixel	build/_deps/imgui-proj-src/imstb_truetype.h	/^STBTT_DEF void stbtt_GetCodepointBitmapBoxSubpixel(const stbtt_fontinfo *font, int codepoint, fl/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetCodepointBitmapSubpixel	build/_deps/imgui-proj-src/imstb_truetype.h	/^STBTT_DEF unsigned char *stbtt_GetCodepointBitmapSubpixel(const stbtt_fontinfo *info, float scal/;"	f	typeref:typename:STBTT_DEF unsigned char *
stbtt_GetCodepointBox	build/_deps/imgui-proj-src/imstb_truetype.h	/^STBTT_DEF int stbtt_GetCodepointBox(const stbtt_fontinfo *info, int codepoint, int *x0, int *y0,/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetCodepointHMetrics	build/_deps/imgui-proj-src/imstb_truetype.h	/^STBTT_DEF void stbtt_GetCodepointHMetrics(const stbtt_fontinfo *info, int codepoint, int *advanc/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetCodepointKernAdvance	build/_deps/imgui-proj-src/imstb_truetype.h	/^STBTT_DEF int  stbtt_GetCodepointKernAdvance(const stbtt_fontinfo *info, int ch1, int ch2)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetCodepointSDF	build/_deps/imgui-proj-src/imstb_truetype.h	/^STBTT_DEF unsigned char * stbtt_GetCodepointSDF(const stbtt_fontinfo *info, float scale, int cod/;"	f	typeref:typename:STBTT_DEF unsigned char *
stbtt_GetCodepointSVG	build/_deps/imgui-proj-src/imstb_truetype.h	/^STBTT_DEF int stbtt_GetCodepointSVG(const stbtt_fontinfo *info, int unicode_codepoint, const cha/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetCodepointShape	build/_deps/imgui-proj-src/imstb_truetype.h	/^STBTT_DEF int stbtt_GetCodepointShape(const stbtt_fontinfo *info, int unicode_codepoint, stbtt_v/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetFontBoundingBox	build/_deps/imgui-proj-src/imstb_truetype.h	/^STBTT_DEF void stbtt_GetFontBoundingBox(const stbtt_fontinfo *info, int *x0, int *y0, int *x1, i/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetFontNameString	build/_deps/imgui-proj-src/imstb_truetype.h	/^STBTT_DEF const char *stbtt_GetFontNameString(const stbtt_fontinfo *font, int *length, int platf/;"	f	typeref:typename:STBTT_DEF const char *
stbtt_GetFontOffsetForIndex	build/_deps/imgui-proj-src/imstb_truetype.h	/^STBTT_DEF int stbtt_GetFontOffsetForIndex(const unsigned char *data, int index)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetFontOffsetForIndex_internal	build/_deps/imgui-proj-src/imstb_truetype.h	/^static int stbtt_GetFontOffsetForIndex_internal(unsigned char *font_collection, int index)$/;"	f	typeref:typename:int
stbtt_GetFontVMetrics	build/_deps/imgui-proj-src/imstb_truetype.h	/^STBTT_DEF void stbtt_GetFontVMetrics(const stbtt_fontinfo *info, int *ascent, int *descent, int /;"	f	typeref:typename:STBTT_DEF void
stbtt_GetFontVMetricsOS2	build/_deps/imgui-proj-src/imstb_truetype.h	/^STBTT_DEF int  stbtt_GetFontVMetricsOS2(const stbtt_fontinfo *info, int *typoAscent, int *typoDe/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetGlyphBitmap	build/_deps/imgui-proj-src/imstb_truetype.h	/^STBTT_DEF unsigned char *stbtt_GetGlyphBitmap(const stbtt_fontinfo *info, float scale_x, float s/;"	f	typeref:typename:STBTT_DEF unsigned char *
stbtt_GetGlyphBitmapBox	build/_deps/imgui-proj-src/imstb_truetype.h	/^STBTT_DEF void stbtt_GetGlyphBitmapBox(const stbtt_fontinfo *font, int glyph, float scale_x, flo/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetGlyphBitmapBoxSubpixel	build/_deps/imgui-proj-src/imstb_truetype.h	/^STBTT_DEF void stbtt_GetGlyphBitmapBoxSubpixel(const stbtt_fontinfo *font, int glyph, float scal/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetGlyphBitmapSubpixel	build/_deps/imgui-proj-src/imstb_truetype.h	/^STBTT_DEF unsigned char *stbtt_GetGlyphBitmapSubpixel(const stbtt_fontinfo *info, float scale_x,/;"	f	typeref:typename:STBTT_DEF unsigned char *
stbtt_GetGlyphBox	build/_deps/imgui-proj-src/imstb_truetype.h	/^STBTT_DEF int stbtt_GetGlyphBox(const stbtt_fontinfo *info, int glyph_index, int *x0, int *y0, i/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetGlyphHMetrics	build/_deps/imgui-proj-src/imstb_truetype.h	/^STBTT_DEF void stbtt_GetGlyphHMetrics(const stbtt_fontinfo *info, int glyph_index, int *advanceW/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetGlyphKernAdvance	build/_deps/imgui-proj-src/imstb_truetype.h	/^STBTT_DEF int  stbtt_GetGlyphKernAdvance(const stbtt_fontinfo *info, int g1, int g2)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetGlyphSDF	build/_deps/imgui-proj-src/imstb_truetype.h	/^STBTT_DEF unsigned char * stbtt_GetGlyphSDF(const stbtt_fontinfo *info, float scale, int glyph, /;"	f	typeref:typename:STBTT_DEF unsigned char *
stbtt_GetGlyphSVG	build/_deps/imgui-proj-src/imstb_truetype.h	/^STBTT_DEF int stbtt_GetGlyphSVG(const stbtt_fontinfo *info, int gl, const char **svg)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetGlyphShape	build/_deps/imgui-proj-src/imstb_truetype.h	/^STBTT_DEF int stbtt_GetGlyphShape(const stbtt_fontinfo *info, int glyph_index, stbtt_vertex **pv/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetKerningTable	build/_deps/imgui-proj-src/imstb_truetype.h	/^STBTT_DEF int stbtt_GetKerningTable(const stbtt_fontinfo *info, stbtt_kerningentry* table, int t/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetKerningTableLength	build/_deps/imgui-proj-src/imstb_truetype.h	/^STBTT_DEF int  stbtt_GetKerningTableLength(const stbtt_fontinfo *info)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetNumberOfFonts	build/_deps/imgui-proj-src/imstb_truetype.h	/^STBTT_DEF int stbtt_GetNumberOfFonts(const unsigned char *data)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetNumberOfFonts_internal	build/_deps/imgui-proj-src/imstb_truetype.h	/^static int stbtt_GetNumberOfFonts_internal(unsigned char *font_collection)$/;"	f	typeref:typename:int
stbtt_GetPackedQuad	build/_deps/imgui-proj-src/imstb_truetype.h	/^STBTT_DEF void stbtt_GetPackedQuad(const stbtt_packedchar *chardata, int pw, int ph, int char_in/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetScaledFontVMetrics	build/_deps/imgui-proj-src/imstb_truetype.h	/^STBTT_DEF void stbtt_GetScaledFontVMetrics(const unsigned char *fontdata, int index, float size,/;"	f	typeref:typename:STBTT_DEF void
stbtt_InitFont	build/_deps/imgui-proj-src/imstb_truetype.h	/^STBTT_DEF int stbtt_InitFont(stbtt_fontinfo *info, const unsigned char *data, int offset)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_InitFont_internal	build/_deps/imgui-proj-src/imstb_truetype.h	/^static int stbtt_InitFont_internal(stbtt_fontinfo *info, unsigned char *data, int fontstart)$/;"	f	typeref:typename:int
stbtt_IsGlyphEmpty	build/_deps/imgui-proj-src/imstb_truetype.h	/^STBTT_DEF int stbtt_IsGlyphEmpty(const stbtt_fontinfo *info, int glyph_index)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_MakeCodepointBitmap	build/_deps/imgui-proj-src/imstb_truetype.h	/^STBTT_DEF void stbtt_MakeCodepointBitmap(const stbtt_fontinfo *info, unsigned char *output, int /;"	f	typeref:typename:STBTT_DEF void
stbtt_MakeCodepointBitmapSubpixel	build/_deps/imgui-proj-src/imstb_truetype.h	/^STBTT_DEF void stbtt_MakeCodepointBitmapSubpixel(const stbtt_fontinfo *info, unsigned char *outp/;"	f	typeref:typename:STBTT_DEF void
stbtt_MakeCodepointBitmapSubpixelPrefilter	build/_deps/imgui-proj-src/imstb_truetype.h	/^STBTT_DEF void stbtt_MakeCodepointBitmapSubpixelPrefilter(const stbtt_fontinfo *info, unsigned c/;"	f	typeref:typename:STBTT_DEF void
stbtt_MakeGlyphBitmap	build/_deps/imgui-proj-src/imstb_truetype.h	/^STBTT_DEF void stbtt_MakeGlyphBitmap(const stbtt_fontinfo *info, unsigned char *output, int out_/;"	f	typeref:typename:STBTT_DEF void
stbtt_MakeGlyphBitmapSubpixel	build/_deps/imgui-proj-src/imstb_truetype.h	/^STBTT_DEF void stbtt_MakeGlyphBitmapSubpixel(const stbtt_fontinfo *info, unsigned char *output, /;"	f	typeref:typename:STBTT_DEF void
stbtt_MakeGlyphBitmapSubpixelPrefilter	build/_deps/imgui-proj-src/imstb_truetype.h	/^STBTT_DEF void stbtt_MakeGlyphBitmapSubpixelPrefilter(const stbtt_fontinfo *info, unsigned char /;"	f	typeref:typename:STBTT_DEF void
stbtt_PackBegin	build/_deps/imgui-proj-src/imstb_truetype.h	/^STBTT_DEF int stbtt_PackBegin(stbtt_pack_context *spc, unsigned char *pixels, int pw, int ph, in/;"	f	typeref:typename:STBTT_DEF int
stbtt_PackEnd	build/_deps/imgui-proj-src/imstb_truetype.h	/^STBTT_DEF void stbtt_PackEnd  (stbtt_pack_context *spc)$/;"	f	typeref:typename:STBTT_DEF void
stbtt_PackFontRange	build/_deps/imgui-proj-src/imstb_truetype.h	/^STBTT_DEF int stbtt_PackFontRange(stbtt_pack_context *spc, const unsigned char *fontdata, int fo/;"	f	typeref:typename:STBTT_DEF int
stbtt_PackFontRanges	build/_deps/imgui-proj-src/imstb_truetype.h	/^STBTT_DEF int stbtt_PackFontRanges(stbtt_pack_context *spc, const unsigned char *fontdata, int f/;"	f	typeref:typename:STBTT_DEF int
stbtt_PackFontRangesGatherRects	build/_deps/imgui-proj-src/imstb_truetype.h	/^STBTT_DEF int stbtt_PackFontRangesGatherRects(stbtt_pack_context *spc, const stbtt_fontinfo *inf/;"	f	typeref:typename:STBTT_DEF int
stbtt_PackFontRangesPackRects	build/_deps/imgui-proj-src/imstb_truetype.h	/^STBTT_DEF void stbtt_PackFontRangesPackRects(stbtt_pack_context *spc, stbrp_rect *rects, int num/;"	f	typeref:typename:STBTT_DEF void
stbtt_PackFontRangesRenderIntoRects	build/_deps/imgui-proj-src/imstb_truetype.h	/^STBTT_DEF int stbtt_PackFontRangesRenderIntoRects(stbtt_pack_context *spc, const stbtt_fontinfo /;"	f	typeref:typename:STBTT_DEF int
stbtt_PackSetOversampling	build/_deps/imgui-proj-src/imstb_truetype.h	/^STBTT_DEF void stbtt_PackSetOversampling(stbtt_pack_context *spc, unsigned int h_oversample, uns/;"	f	typeref:typename:STBTT_DEF void
stbtt_PackSetSkipMissingCodepoints	build/_deps/imgui-proj-src/imstb_truetype.h	/^STBTT_DEF void stbtt_PackSetSkipMissingCodepoints(stbtt_pack_context *spc, int skip)$/;"	f	typeref:typename:STBTT_DEF void
stbtt_Rasterize	build/_deps/imgui-proj-src/imstb_truetype.h	/^STBTT_DEF void stbtt_Rasterize(stbtt__bitmap *result, float flatness_in_pixels, stbtt_vertex *ve/;"	f	typeref:typename:STBTT_DEF void
stbtt_ScaleForMappingEmToPixels	build/_deps/imgui-proj-src/imstb_truetype.h	/^STBTT_DEF float stbtt_ScaleForMappingEmToPixels(const stbtt_fontinfo *info, float pixels)$/;"	f	typeref:typename:STBTT_DEF float
stbtt_ScaleForPixelHeight	build/_deps/imgui-proj-src/imstb_truetype.h	/^STBTT_DEF float stbtt_ScaleForPixelHeight(const stbtt_fontinfo *info, float height)$/;"	f	typeref:typename:STBTT_DEF float
stbtt__CompareUTF8toUTF16_bigendian_prefix	build/_deps/imgui-proj-src/imstb_truetype.h	/^static stbtt_int32 stbtt__CompareUTF8toUTF16_bigendian_prefix(stbtt_uint8 *s1, stbtt_int32 len1,/;"	f	typeref:typename:stbtt_int32
stbtt__GetCoverageIndex	build/_deps/imgui-proj-src/imstb_truetype.h	/^static stbtt_int32 stbtt__GetCoverageIndex(stbtt_uint8 *coverageTable, int glyph)$/;"	f	typeref:typename:stbtt_int32
stbtt__GetGlyfOffset	build/_deps/imgui-proj-src/imstb_truetype.h	/^static int stbtt__GetGlyfOffset(const stbtt_fontinfo *info, int glyph_index)$/;"	f	typeref:typename:int
stbtt__GetGlyphClass	build/_deps/imgui-proj-src/imstb_truetype.h	/^static stbtt_int32  stbtt__GetGlyphClass(stbtt_uint8 *classDefTable, int glyph)$/;"	f	typeref:typename:stbtt_int32
stbtt__GetGlyphGPOSInfoAdvance	build/_deps/imgui-proj-src/imstb_truetype.h	/^static stbtt_int32 stbtt__GetGlyphGPOSInfoAdvance(const stbtt_fontinfo *info, int glyph1, int gl/;"	f	typeref:typename:stbtt_int32
stbtt__GetGlyphInfoT2	build/_deps/imgui-proj-src/imstb_truetype.h	/^static int stbtt__GetGlyphInfoT2(const stbtt_fontinfo *info, int glyph_index, int *x0, int *y0, /;"	f	typeref:typename:int
stbtt__GetGlyphKernInfoAdvance	build/_deps/imgui-proj-src/imstb_truetype.h	/^static int stbtt__GetGlyphKernInfoAdvance(const stbtt_fontinfo *info, int glyph1, int glyph2)$/;"	f	typeref:typename:int
stbtt__GetGlyphShapeT2	build/_deps/imgui-proj-src/imstb_truetype.h	/^static int stbtt__GetGlyphShapeT2(const stbtt_fontinfo *info, int glyph_index, stbtt_vertex **pv/;"	f	typeref:typename:int
stbtt__GetGlyphShapeTT	build/_deps/imgui-proj-src/imstb_truetype.h	/^static int stbtt__GetGlyphShapeTT(const stbtt_fontinfo *info, int glyph_index, stbtt_vertex **pv/;"	f	typeref:typename:int
stbtt__active_edge	build/_deps/imgui-proj-src/imstb_truetype.h	/^typedef struct stbtt__active_edge$/;"	s
stbtt__active_edge	build/_deps/imgui-proj-src/imstb_truetype.h	/^} stbtt__active_edge;$/;"	t	typeref:struct:stbtt__active_edge
stbtt__add_point	build/_deps/imgui-proj-src/imstb_truetype.h	/^static void stbtt__add_point(stbtt__point *points, int n, float x, float y)$/;"	f	typeref:typename:void
stbtt__bitmap	build/_deps/imgui-proj-src/imstb_truetype.h	/^} stbtt__bitmap;$/;"	t	typeref:struct:__anond648eb7b0808
stbtt__buf	build/_deps/imgui-proj-src/imstb_truetype.h	/^} stbtt__buf;$/;"	t	typeref:struct:__anond648eb7b0108
stbtt__buf_get	build/_deps/imgui-proj-src/imstb_truetype.h	/^static stbtt_uint32 stbtt__buf_get(stbtt__buf *b, int n)$/;"	f	typeref:typename:stbtt_uint32
stbtt__buf_get16	build/_deps/imgui-proj-src/imstb_truetype.h	/^#define stbtt__buf_get16(/;"	d
stbtt__buf_get32	build/_deps/imgui-proj-src/imstb_truetype.h	/^#define stbtt__buf_get32(/;"	d
stbtt__buf_get8	build/_deps/imgui-proj-src/imstb_truetype.h	/^static stbtt_uint8 stbtt__buf_get8(stbtt__buf *b)$/;"	f	typeref:typename:stbtt_uint8
stbtt__buf_peek8	build/_deps/imgui-proj-src/imstb_truetype.h	/^static stbtt_uint8 stbtt__buf_peek8(stbtt__buf *b)$/;"	f	typeref:typename:stbtt_uint8
stbtt__buf_range	build/_deps/imgui-proj-src/imstb_truetype.h	/^static stbtt__buf stbtt__buf_range(const stbtt__buf *b, int o, int s)$/;"	f	typeref:typename:stbtt__buf
stbtt__buf_seek	build/_deps/imgui-proj-src/imstb_truetype.h	/^static void stbtt__buf_seek(stbtt__buf *b, int o)$/;"	f	typeref:typename:void
stbtt__buf_skip	build/_deps/imgui-proj-src/imstb_truetype.h	/^static void stbtt__buf_skip(stbtt__buf *b, int o)$/;"	f	typeref:typename:void
stbtt__cff_get_index	build/_deps/imgui-proj-src/imstb_truetype.h	/^static stbtt__buf stbtt__cff_get_index(stbtt__buf *b)$/;"	f	typeref:typename:stbtt__buf
stbtt__cff_index_count	build/_deps/imgui-proj-src/imstb_truetype.h	/^static int stbtt__cff_index_count(stbtt__buf *b)$/;"	f	typeref:typename:int
stbtt__cff_index_get	build/_deps/imgui-proj-src/imstb_truetype.h	/^static stbtt__buf stbtt__cff_index_get(stbtt__buf b, int i)$/;"	f	typeref:typename:stbtt__buf
stbtt__cff_int	build/_deps/imgui-proj-src/imstb_truetype.h	/^static stbtt_uint32 stbtt__cff_int(stbtt__buf *b)$/;"	f	typeref:typename:stbtt_uint32
stbtt__cff_skip_operand	build/_deps/imgui-proj-src/imstb_truetype.h	/^static void stbtt__cff_skip_operand(stbtt__buf *b) {$/;"	f	typeref:typename:void
stbtt__check_size16	build/_deps/imgui-proj-src/imstb_truetype.h	/^   typedef char stbtt__check_size16[sizeof(stbtt_int16)==2 ? 1 : -1];$/;"	t	typeref:typename:char[sizeof (stbtt_int16)==2?1:-1]
stbtt__check_size32	build/_deps/imgui-proj-src/imstb_truetype.h	/^   typedef char stbtt__check_size32[sizeof(stbtt_int32)==4 ? 1 : -1];$/;"	t	typeref:typename:char[sizeof (stbtt_int32)==4?1:-1]
stbtt__cid_get_glyph_subrs	build/_deps/imgui-proj-src/imstb_truetype.h	/^static stbtt__buf stbtt__cid_get_glyph_subrs(const stbtt_fontinfo *info, int glyph_index)$/;"	f	typeref:typename:stbtt__buf
stbtt__close_shape	build/_deps/imgui-proj-src/imstb_truetype.h	/^static int stbtt__close_shape(stbtt_vertex *vertices, int num_vertices, int was_off, int start_o/;"	f	typeref:typename:int
stbtt__compute_crossings_x	build/_deps/imgui-proj-src/imstb_truetype.h	/^static int stbtt__compute_crossings_x(float x, float y, int nverts, stbtt_vertex *verts)$/;"	f	typeref:typename:int
stbtt__csctx	build/_deps/imgui-proj-src/imstb_truetype.h	/^} stbtt__csctx;$/;"	t	typeref:struct:__anond648eb7b0f08
stbtt__csctx_close_shape	build/_deps/imgui-proj-src/imstb_truetype.h	/^static void stbtt__csctx_close_shape(stbtt__csctx *ctx)$/;"	f	typeref:typename:void
stbtt__csctx_rccurve_to	build/_deps/imgui-proj-src/imstb_truetype.h	/^static void stbtt__csctx_rccurve_to(stbtt__csctx *ctx, float dx1, float dy1, float dx2, float dy/;"	f	typeref:typename:void
stbtt__csctx_rline_to	build/_deps/imgui-proj-src/imstb_truetype.h	/^static void stbtt__csctx_rline_to(stbtt__csctx *ctx, float dx, float dy)$/;"	f	typeref:typename:void
stbtt__csctx_rmove_to	build/_deps/imgui-proj-src/imstb_truetype.h	/^static void stbtt__csctx_rmove_to(stbtt__csctx *ctx, float dx, float dy)$/;"	f	typeref:typename:void
stbtt__csctx_v	build/_deps/imgui-proj-src/imstb_truetype.h	/^static void stbtt__csctx_v(stbtt__csctx *c, stbtt_uint8 type, stbtt_int32 x, stbtt_int32 y, stbt/;"	f	typeref:typename:void
stbtt__cuberoot	build/_deps/imgui-proj-src/imstb_truetype.h	/^static float stbtt__cuberoot( float x )$/;"	f	typeref:typename:float
stbtt__dict_get	build/_deps/imgui-proj-src/imstb_truetype.h	/^static stbtt__buf stbtt__dict_get(stbtt__buf *b, int key)$/;"	f	typeref:typename:stbtt__buf
stbtt__dict_get_ints	build/_deps/imgui-proj-src/imstb_truetype.h	/^static void stbtt__dict_get_ints(stbtt__buf *b, int key, int outcount, stbtt_uint32 *out)$/;"	f	typeref:typename:void
stbtt__edge	build/_deps/imgui-proj-src/imstb_truetype.h	/^typedef struct stbtt__edge {$/;"	s
stbtt__edge	build/_deps/imgui-proj-src/imstb_truetype.h	/^} stbtt__edge;$/;"	t	typeref:struct:stbtt__edge
stbtt__fill_active_edges	build/_deps/imgui-proj-src/imstb_truetype.h	/^static void stbtt__fill_active_edges(unsigned char *scanline, int len, stbtt__active_edge *e, in/;"	f	typeref:typename:void
stbtt__fill_active_edges_new	build/_deps/imgui-proj-src/imstb_truetype.h	/^static void stbtt__fill_active_edges_new(float *scanline, float *scanline_fill, int len, stbtt__/;"	f	typeref:typename:void
stbtt__find_table	build/_deps/imgui-proj-src/imstb_truetype.h	/^static stbtt_uint32 stbtt__find_table(stbtt_uint8 *data, stbtt_uint32 fontstart, const char *tag/;"	f	typeref:typename:stbtt_uint32
stbtt__get_subr	build/_deps/imgui-proj-src/imstb_truetype.h	/^static stbtt__buf stbtt__get_subr(stbtt__buf idx, int n)$/;"	f	typeref:typename:stbtt__buf
stbtt__get_subrs	build/_deps/imgui-proj-src/imstb_truetype.h	/^static stbtt__buf stbtt__get_subrs(stbtt__buf cff, stbtt__buf fontdict)$/;"	f	typeref:typename:stbtt__buf
stbtt__get_svg	build/_deps/imgui-proj-src/imstb_truetype.h	/^static int stbtt__get_svg(stbtt_fontinfo *info)$/;"	f	typeref:typename:int
stbtt__h_prefilter	build/_deps/imgui-proj-src/imstb_truetype.h	/^static void stbtt__h_prefilter(unsigned char *pixels, int w, int h, int stride_in_bytes, unsigne/;"	f	typeref:typename:void
stbtt__handle_clipped_edge	build/_deps/imgui-proj-src/imstb_truetype.h	/^static void stbtt__handle_clipped_edge(float *scanline, int x, stbtt__active_edge *e, float x0, /;"	f	typeref:typename:void
stbtt__hheap	build/_deps/imgui-proj-src/imstb_truetype.h	/^typedef struct stbtt__hheap$/;"	s
stbtt__hheap	build/_deps/imgui-proj-src/imstb_truetype.h	/^} stbtt__hheap;$/;"	t	typeref:struct:stbtt__hheap
stbtt__hheap_alloc	build/_deps/imgui-proj-src/imstb_truetype.h	/^static void *stbtt__hheap_alloc(stbtt__hheap *hh, size_t size, void *userdata)$/;"	f	typeref:typename:void *
stbtt__hheap_chunk	build/_deps/imgui-proj-src/imstb_truetype.h	/^typedef struct stbtt__hheap_chunk$/;"	s
stbtt__hheap_chunk	build/_deps/imgui-proj-src/imstb_truetype.h	/^} stbtt__hheap_chunk;$/;"	t	typeref:struct:stbtt__hheap_chunk
stbtt__hheap_cleanup	build/_deps/imgui-proj-src/imstb_truetype.h	/^static void stbtt__hheap_cleanup(stbtt__hheap *hh, void *userdata)$/;"	f	typeref:typename:void
stbtt__hheap_free	build/_deps/imgui-proj-src/imstb_truetype.h	/^static void stbtt__hheap_free(stbtt__hheap *hh, void *p)$/;"	f	typeref:typename:void
stbtt__isfont	build/_deps/imgui-proj-src/imstb_truetype.h	/^static int stbtt__isfont(stbtt_uint8 *font)$/;"	f	typeref:typename:int
stbtt__matches	build/_deps/imgui-proj-src/imstb_truetype.h	/^static int stbtt__matches(stbtt_uint8 *fc, stbtt_uint32 offset, stbtt_uint8 *name, stbtt_int32 f/;"	f	typeref:typename:int
stbtt__matchpair	build/_deps/imgui-proj-src/imstb_truetype.h	/^static int stbtt__matchpair(stbtt_uint8 *fc, stbtt_uint32 nm, stbtt_uint8 *name, stbtt_int32 nle/;"	f	typeref:typename:int
stbtt__new_active	build/_deps/imgui-proj-src/imstb_truetype.h	/^static stbtt__active_edge *stbtt__new_active(stbtt__hheap *hh, stbtt__edge *e, int off_x, float /;"	f	typeref:typename:stbtt__active_edge *
stbtt__new_buf	build/_deps/imgui-proj-src/imstb_truetype.h	/^static stbtt__buf stbtt__new_buf(const void *p, size_t size)$/;"	f	typeref:typename:stbtt__buf
stbtt__oversample_shift	build/_deps/imgui-proj-src/imstb_truetype.h	/^static float stbtt__oversample_shift(int oversample)$/;"	f	typeref:typename:float
stbtt__point	build/_deps/imgui-proj-src/imstb_truetype.h	/^} stbtt__point;$/;"	t	typeref:struct:__anond648eb7b1008
stbtt__position_trapezoid_area	build/_deps/imgui-proj-src/imstb_truetype.h	/^static float stbtt__position_trapezoid_area(float height, float tx0, float tx1, float bx0, float/;"	f	typeref:typename:float
stbtt__rasterize	build/_deps/imgui-proj-src/imstb_truetype.h	/^static void stbtt__rasterize(stbtt__bitmap *result, stbtt__point *pts, int *wcount, int windings/;"	f	typeref:typename:void
stbtt__rasterize_sorted_edges	build/_deps/imgui-proj-src/imstb_truetype.h	/^static void stbtt__rasterize_sorted_edges(stbtt__bitmap *result, stbtt__edge *e, int n, int vsub/;"	f	typeref:typename:void
stbtt__ray_intersect_bezier	build/_deps/imgui-proj-src/imstb_truetype.h	/^static int stbtt__ray_intersect_bezier(float orig[2], float ray[2], float q0[2], float q1[2], fl/;"	f	typeref:typename:int
stbtt__run_charstring	build/_deps/imgui-proj-src/imstb_truetype.h	/^static int stbtt__run_charstring(const stbtt_fontinfo *info, int glyph_index, stbtt__csctx *c)$/;"	f	typeref:typename:int
stbtt__sized_trapezoid_area	build/_deps/imgui-proj-src/imstb_truetype.h	/^static float stbtt__sized_trapezoid_area(float height, float top_width, float bottom_width)$/;"	f	typeref:typename:float
stbtt__sized_triangle_area	build/_deps/imgui-proj-src/imstb_truetype.h	/^static float stbtt__sized_triangle_area(float height, float width)$/;"	f	typeref:typename:float
stbtt__solve_cubic	build/_deps/imgui-proj-src/imstb_truetype.h	/^static int stbtt__solve_cubic(float a, float b, float c, float* r)$/;"	f	typeref:typename:int
stbtt__sort_edges	build/_deps/imgui-proj-src/imstb_truetype.h	/^static void stbtt__sort_edges(stbtt__edge *p, int n)$/;"	f	typeref:typename:void
stbtt__sort_edges_ins_sort	build/_deps/imgui-proj-src/imstb_truetype.h	/^static void stbtt__sort_edges_ins_sort(stbtt__edge *p, int n)$/;"	f	typeref:typename:void
stbtt__sort_edges_quicksort	build/_deps/imgui-proj-src/imstb_truetype.h	/^static void stbtt__sort_edges_quicksort(stbtt__edge *p, int n)$/;"	f	typeref:typename:void
stbtt__tesselate_cubic	build/_deps/imgui-proj-src/imstb_truetype.h	/^static void stbtt__tesselate_cubic(stbtt__point *points, int *num_points, float x0, float y0, fl/;"	f	typeref:typename:void
stbtt__tesselate_curve	build/_deps/imgui-proj-src/imstb_truetype.h	/^static int stbtt__tesselate_curve(stbtt__point *points, int *num_points, float x0, float y0, flo/;"	f	typeref:typename:int
stbtt__test_oversample_pow2	build/_deps/imgui-proj-src/imstb_truetype.h	/^typedef int stbtt__test_oversample_pow2[(STBTT_MAX_OVERSAMPLE & (STBTT_MAX_OVERSAMPLE-1)) == 0 ?/;"	t	typeref:typename:int[(STBTT_MAX_OVERSAMPLE & (STBTT_MAX_OVERSAMPLE-1))==0?1:-1]
stbtt__track_vertex	build/_deps/imgui-proj-src/imstb_truetype.h	/^static void stbtt__track_vertex(stbtt__csctx *c, stbtt_int32 x, stbtt_int32 y)$/;"	f	typeref:typename:void
stbtt__v_prefilter	build/_deps/imgui-proj-src/imstb_truetype.h	/^static void stbtt__v_prefilter(unsigned char *pixels, int w, int h, int stride_in_bytes, unsigne/;"	f	typeref:typename:void
stbtt_aligned_quad	build/_deps/imgui-proj-src/imstb_truetype.h	/^} stbtt_aligned_quad;$/;"	t	typeref:struct:__anond648eb7b0308
stbtt_bakedchar	build/_deps/imgui-proj-src/imstb_truetype.h	/^} stbtt_bakedchar;$/;"	t	typeref:struct:__anond648eb7b0208
stbtt_fontinfo	build/_deps/imgui-proj-src/imstb_truetype.h	/^struct stbtt_fontinfo$/;"	s
stbtt_fontinfo	build/_deps/imgui-proj-src/imstb_truetype.h	/^typedef struct stbtt_fontinfo stbtt_fontinfo;$/;"	t	typeref:struct:stbtt_fontinfo
stbtt_int16	build/_deps/imgui-proj-src/imstb_truetype.h	/^   typedef signed   short  stbtt_int16;$/;"	t	typeref:typename:signed short
stbtt_int32	build/_deps/imgui-proj-src/imstb_truetype.h	/^   typedef signed   int    stbtt_int32;$/;"	t	typeref:typename:signed int
stbtt_int8	build/_deps/imgui-proj-src/imstb_truetype.h	/^   typedef signed   char   stbtt_int8;$/;"	t	typeref:typename:signed char
stbtt_kerningentry	build/_deps/imgui-proj-src/imstb_truetype.h	/^typedef struct stbtt_kerningentry$/;"	s
stbtt_kerningentry	build/_deps/imgui-proj-src/imstb_truetype.h	/^} stbtt_kerningentry;$/;"	t	typeref:struct:stbtt_kerningentry
stbtt_pack_context	build/_deps/imgui-proj-src/imstb_truetype.h	/^struct stbtt_pack_context {$/;"	s
stbtt_pack_context	build/_deps/imgui-proj-src/imstb_truetype.h	/^typedef struct stbtt_pack_context stbtt_pack_context;$/;"	t	typeref:struct:stbtt_pack_context
stbtt_pack_range	build/_deps/imgui-proj-src/imstb_truetype.h	/^} stbtt_pack_range;$/;"	t	typeref:struct:__anond648eb7b0508
stbtt_packedchar	build/_deps/imgui-proj-src/imstb_truetype.h	/^} stbtt_packedchar;$/;"	t	typeref:struct:__anond648eb7b0408
stbtt_setvertex	build/_deps/imgui-proj-src/imstb_truetype.h	/^static void stbtt_setvertex(stbtt_vertex *v, stbtt_uint8 type, stbtt_int32 x, stbtt_int32 y, stb/;"	f	typeref:typename:void
stbtt_tag	build/_deps/imgui-proj-src/imstb_truetype.h	/^#define stbtt_tag(/;"	d
stbtt_tag4	build/_deps/imgui-proj-src/imstb_truetype.h	/^#define stbtt_tag4(/;"	d
stbtt_uint16	build/_deps/imgui-proj-src/imstb_truetype.h	/^   typedef unsigned short  stbtt_uint16;$/;"	t	typeref:typename:unsigned short
stbtt_uint32	build/_deps/imgui-proj-src/imstb_truetype.h	/^   typedef unsigned int    stbtt_uint32;$/;"	t	typeref:typename:unsigned int
stbtt_uint8	build/_deps/imgui-proj-src/imstb_truetype.h	/^   typedef unsigned char   stbtt_uint8;$/;"	t	typeref:typename:unsigned char
stbtt_vertex	build/_deps/imgui-proj-src/imstb_truetype.h	/^   } stbtt_vertex;$/;"	t	typeref:struct:__anond648eb7b0708
stbtt_vertex_type	build/_deps/imgui-proj-src/imstb_truetype.h	/^   #define stbtt_vertex_type /;"	d
stencilPixelFormat	build/_deps/imgui-proj-src/backends/imgui_impl_metal.mm	/^@property (nonatomic, assign) MTLPixelFormat stencilPixelFormat;$/;"	p	interface:FramebufferDescriptor
stride	build/_deps/imgui-proj-src/imstb_truetype.h	/^   int w,h,stride;$/;"	m	struct:__anond648eb7b0808	typeref:typename:int
stride_in_bytes	build/_deps/imgui-proj-src/imstb_truetype.h	/^   int   stride_in_bytes;$/;"	m	struct:stbtt_pack_context	typeref:typename:int
subrs	build/_deps/imgui-proj-src/imstb_truetype.h	/^   stbtt__buf subrs;                  \/\/ private charstring subroutines index$/;"	m	struct:stbtt_fontinfo	typeref:typename:stbtt__buf
svg	build/_deps/imgui-proj-src/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
svg	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^    std::unique_ptr<lunasvg::Document> svg = nullptr;$/;"	m	struct:LunasvgPortState	typeref:typename:std::unique_ptr<lunasvg::Document>	file:
swap	build/_deps/imgui-proj-src/imgui.h	/^    inline void         swap(ImVector<T>& rhs)              { int rhs_size = rhs.Size; rhs.Size /;"	f	struct:ImVector	typeref:typename:void
swap	build/_deps/imgui-proj-src/imgui_internal.h	/^    void    swap(ImChunkStream<T>& rhs) { rhs.Buf.swap(Buf); }$/;"	f	struct:ImChunkStream	typeref:typename:void
sy	build/_deps/imgui-proj-src/imstb_truetype.h	/^   float sy;$/;"	m	struct:stbtt__active_edge	typeref:typename:float
t0	build/_deps/imgui-proj-src/imstb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anond648eb7b0308	typeref:typename:float
t1	build/_deps/imgui-proj-src/imstb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anond648eb7b0308	typeref:typename:float
tag_name	build/_deps/imgui-proj-subbuild/imgui-proj-populate-prefix/tmp/imgui-proj-populate-gitupdate.cmake	/^    set(tag_name _cmake_ExternalProject_moved_from_here_${tag_timestamp}Z)$/;"	v
target	build/_deps/imgui-proj-subbuild/CMakeFiles/imgui-proj-populate.dir/Labels.json	/^	"target" : $/;"	o
touchesBegan:withEvent:	build/_deps/imgui-proj-src/examples/example_apple_metal/main.mm	/^-(void)touchesBegan:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event      { [self updateIO/;"	m	implementation:AppViewController
touchesCancelled:withEvent:	build/_deps/imgui-proj-src/examples/example_apple_metal/main.mm	/^-(void)touchesCancelled:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event  { [self updateIO/;"	m	implementation:AppViewController
touchesEnded:withEvent:	build/_deps/imgui-proj-src/examples/example_apple_metal/main.mm	/^-(void)touchesEnded:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event      { [self updateIO/;"	m	implementation:AppViewController
touchesMoved:withEvent:	build/_deps/imgui-proj-src/examples/example_apple_metal/main.mm	/^-(void)touchesMoved:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event      { [self updateIO/;"	m	implementation:AppViewController
ttBYTE	build/_deps/imgui-proj-src/imstb_truetype.h	/^#define ttBYTE(/;"	d
ttCHAR	build/_deps/imgui-proj-src/imstb_truetype.h	/^#define ttCHAR(/;"	d
ttFixed	build/_deps/imgui-proj-src/imstb_truetype.h	/^#define ttFixed(/;"	d
ttLONG	build/_deps/imgui-proj-src/imstb_truetype.h	/^static stbtt_int32 ttLONG(stbtt_uint8 *p)    { return (p[0]<<24) + (p[1]<<16) + (p[2]<<8) + p[3]/;"	f	typeref:typename:stbtt_int32
ttSHORT	build/_deps/imgui-proj-src/imstb_truetype.h	/^static stbtt_int16 ttSHORT(stbtt_uint8 *p)   { return p[0]*256 + p[1]; }$/;"	f	typeref:typename:stbtt_int16
ttULONG	build/_deps/imgui-proj-src/imstb_truetype.h	/^static stbtt_uint32 ttULONG(stbtt_uint8 *p)  { return (p[0]<<24) + (p[1]<<16) + (p[2]<<8) + p[3]/;"	f	typeref:typename:stbtt_uint32
ttUSHORT	build/_deps/imgui-proj-src/imstb_truetype.h	/^static stbtt_uint16 ttUSHORT(stbtt_uint8 *p) { return p[0]*256 + p[1]; }$/;"	f	typeref:typename:stbtt_uint16
type	build/_deps/imgui-proj-src/imstb_truetype.h	/^      unsigned char type,padding;$/;"	m	struct:__anond648eb7b0708	typeref:typename:unsigned char
uSynergyBool	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^typedef int			uSynergyBool;$/;"	t	typeref:typename:int
uSynergyClipboardCallback	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^typedef void		(*uSynergyClipboardCallback)(uSynergyCookie cookie, enum uSynergyClipboardFormat f/;"	t	typeref:typename:void (*)(uSynergyCookie cookie,enum uSynergyClipboardFormat format,const uint8_t * data,uint32_t size)
uSynergyClipboardFormat	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^enum uSynergyClipboardFormat$/;"	g
uSynergyConnectFunc	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^typedef uSynergyBool (*uSynergyConnectFunc)(uSynergyCookie cookie);$/;"	t	typeref:typename:uSynergyBool (*)(uSynergyCookie cookie)
uSynergyContext	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^} uSynergyContext;$/;"	t	typeref:struct:__anonf4d9bddd0208
uSynergyCookie	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^typedef struct { int ignored; } *					uSynergyCookie;$/;"	t	typeref:struct:__anonf4d9bddd0108 *
uSynergyGetTimeFunc	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^typedef uint32_t	(*uSynergyGetTimeFunc)();$/;"	t	typeref:typename:uint32_t (*)()
uSynergyInit	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.c	/^void uSynergyInit(uSynergyContext *context)$/;"	f	typeref:typename:void
uSynergyJoystickCallback	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^typedef void		(*uSynergyJoystickCallback)(uSynergyCookie cookie, uint8_t joyNum, uint16_t button/;"	t	typeref:typename:void (*)(uSynergyCookie cookie,uint8_t joyNum,uint16_t buttons,int8_t leftStickX,int8_t leftStickY,int8_t rightStickX,int8_t rightStickY)
uSynergyKeyboardCallback	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^typedef void		(*uSynergyKeyboardCallback)(uSynergyCookie cookie, uint16_t key, uint16_t modifier/;"	t	typeref:typename:void (*)(uSynergyCookie cookie,uint16_t key,uint16_t modifiers,uSynergyBool down,uSynergyBool repeat)
uSynergyMouseCallback	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^typedef void		(*uSynergyMouseCallback)(uSynergyCookie cookie, uint16_t x, uint16_t y, int16_t wh/;"	t	typeref:typename:void (*)(uSynergyCookie cookie,uint16_t x,uint16_t y,int16_t wheelX,int16_t wheelY,uSynergyBool buttonLeft,uSynergyBool buttonRight,uSynergyBool buttonMiddle)
uSynergyReceiveFunc	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^typedef uSynergyBool (*uSynergyReceiveFunc)(uSynergyCookie cookie, uint8_t *buffer, int maxLengt/;"	t	typeref:typename:uSynergyBool (*)(uSynergyCookie cookie,uint8_t * buffer,int maxLength,int * outLength)
uSynergyScreenActiveCallback	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^typedef void		(*uSynergyScreenActiveCallback)(uSynergyCookie cookie, uSynergyBool active);$/;"	t	typeref:typename:void (*)(uSynergyCookie cookie,uSynergyBool active)
uSynergySendClipboard	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.c	/^void uSynergySendClipboard(uSynergyContext *context, const char *text)$/;"	f	typeref:typename:void
uSynergySendFunc	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^typedef uSynergyBool (*uSynergySendFunc)(uSynergyCookie cookie, const uint8_t *buffer, int lengt/;"	t	typeref:typename:uSynergyBool (*)(uSynergyCookie cookie,const uint8_t * buffer,int length)
uSynergySleepFunc	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^typedef void		(*uSynergySleepFunc)(uSynergyCookie cookie, int timeMs);$/;"	t	typeref:typename:void (*)(uSynergyCookie cookie,int timeMs)
uSynergyTraceFunc	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.h	/^typedef void		(*uSynergyTraceFunc)(uSynergyCookie cookie, const char *text);$/;"	t	typeref:typename:void (*)(uSynergyCookie cookie,const char * text)
uSynergyUpdate	build/_deps/imgui-proj-src/examples/libs/usynergy/uSynergy.c	/^void uSynergyUpdate(uSynergyContext *context)$/;"	f	typeref:typename:void
undo_char	build/_deps/imgui-proj-src/imstb_textedit.h	/^   IMSTB_TEXTEDIT_CHARTYPE  undo_char[IMSTB_TEXTEDIT_UNDOCHARCOUNT];$/;"	m	struct:__anon0ee941840208	typeref:typename:IMSTB_TEXTEDIT_CHARTYPE[]
undo_char_point	build/_deps/imgui-proj-src/imstb_textedit.h	/^   int undo_char_point, redo_char_point;$/;"	m	struct:__anon0ee941840208	typeref:typename:int
undo_point	build/_deps/imgui-proj-src/imstb_textedit.h	/^   short undo_point, redo_point;$/;"	m	struct:__anon0ee941840208	typeref:typename:short
undo_rec	build/_deps/imgui-proj-src/imstb_textedit.h	/^   StbUndoRecord          undo_rec [IMSTB_TEXTEDIT_UNDOSTATECOUNT];$/;"	m	struct:__anon0ee941840208	typeref:typename:StbUndoRecord[]
undostate	build/_deps/imgui-proj-src/imstb_textedit.h	/^   StbUndoState undostate;$/;"	m	struct:__anon0ee941840308	typeref:typename:StbUndoState
unmarkText	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^{$/;"	m	implementation:KeyEventResponder
updateAndDrawDemoView	build/_deps/imgui-proj-src/examples/example_apple_opengl2/main.mm	/^{$/;"	m	implementation:AppView
updateIOWithTouchEvent:	build/_deps/imgui-proj-src/examples/example_apple_metal/main.mm	/^{$/;"	m	implementation:AppViewController
updateImePosWithView:	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^{$/;"	m	implementation:KeyEventResponder
user_allocator_context	build/_deps/imgui-proj-src/imstb_truetype.h	/^   void *user_allocator_context;$/;"	m	struct:stbtt_pack_context	typeref:typename:void *
userdata	build/_deps/imgui-proj-src/imstb_truetype.h	/^   void           * userdata;$/;"	m	struct:stbtt_fontinfo	typeref:typename:void *
uv	build/_deps/imgui-proj-src/backends/imgui_impl_allegro5.cpp	/^    ImVec2          uv;$/;"	m	struct:ImDrawVertAllegro	typeref:typename:ImVec2	file:
uv	build/_deps/imgui-proj-src/backends/imgui_impl_dx9.cpp	/^    float    uv[2];$/;"	m	struct:CUSTOMVERTEX	typeref:typename:float[2]	file:
uv	build/_deps/imgui-proj-src/imgui.h	/^    ImVec2  uv;$/;"	m	struct:ImDrawVert	typeref:typename:ImVec2
v_oversample	build/_deps/imgui-proj-src/imstb_truetype.h	/^   unsigned char h_oversample, v_oversample; \/\/ don't set these, they're used internally$/;"	m	struct:__anond648eb7b0508	typeref:typename:unsigned char
v_oversample	build/_deps/imgui-proj-src/imstb_truetype.h	/^   unsigned int   h_oversample, v_oversample;$/;"	m	struct:stbtt_pack_context	typeref:typename:unsigned int
va_copy	build/_deps/imgui-proj-src/imgui.cpp	/^#define va_copy(/;"	d	file:
val_f	build/_deps/imgui-proj-src/imgui.h	/^        union { int val_i; float val_f; void* val_p; };$/;"	m	union:ImGuiStorage::ImGuiStoragePair::__anon1bdcf596080a	typeref:typename:float
val_i	build/_deps/imgui-proj-src/imgui.h	/^        union { int val_i; float val_f; void* val_p; };$/;"	m	union:ImGuiStorage::ImGuiStoragePair::__anon1bdcf596080a	typeref:typename:int
val_p	build/_deps/imgui-proj-src/imgui.h	/^        union { int val_i; float val_f; void* val_p; };$/;"	m	union:ImGuiStorage::ImGuiStoragePair::__anon1bdcf596080a	typeref:typename:void *
validAttributesForMarkedText	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^{$/;"	m	implementation:KeyEventResponder
value_type	build/_deps/imgui-proj-src/imgui.h	/^    typedef T                   value_type;$/;"	t	struct:ImVector	typeref:typename:T
version	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^static struct { int major, minor; } version;$/;"	v	typeref:struct:__anon6bce6ebe0208
viewDidLoad	build/_deps/imgui-proj-src/examples/example_apple_metal/main.mm	/^{$/;"	m	implementation:AppViewController
viewDidMoveToWindow	build/_deps/imgui-proj-src/backends/imgui_impl_osx.mm	/^{$/;"	m	implementation:KeyEventResponder
viewWillAppear	build/_deps/imgui-proj-src/examples/example_apple_metal/main.mm	/^{$/;"	m	implementation:AppViewController
volatile	build/CMakeFiles/3.26.5/CompilerIdC/CMakeCCompilerId.c	/^# define volatile$/;"	d	file:
vsnprintf	build/_deps/imgui-proj-src/imgui.cpp	/^#define vsnprintf /;"	d	file:
vsnprintf	build/_deps/imgui-proj-src/imgui_demo.cpp	/^#define vsnprintf /;"	d	file:
w	build/_deps/imgui-proj-src/imgui.h	/^    float                                                     x, y, z, w;$/;"	m	struct:ImVec4	typeref:typename:float
w	build/_deps/imgui-proj-src/imstb_rectpack.h	/^   stbrp_coord    w, h;$/;"	m	struct:stbrp_rect	typeref:typename:stbrp_coord
w	build/_deps/imgui-proj-src/imstb_truetype.h	/^   int id,w,h,was_packed;$/;"	m	struct:stbrp_rect	typeref:typename:int
w	build/_deps/imgui-proj-src/imstb_truetype.h	/^   int w,h,stride;$/;"	m	struct:__anond648eb7b0808	typeref:typename:int
was_packed	build/_deps/imgui-proj-src/imstb_rectpack.h	/^   int            was_packed;  \/\/ non-zero if valid packing$/;"	m	struct:stbrp_rect	typeref:typename:int
was_packed	build/_deps/imgui-proj-src/imstb_truetype.h	/^   int id,w,h,was_packed;$/;"	m	struct:stbrp_rect	typeref:typename:int
wgl_get_proc_address	build/_deps/imgui-proj-src/backends/imgui_impl_opengl3_loader.h	/^static GL3WglGetProcAddr wgl_get_proc_address;$/;"	v	typeref:typename:GL3WglGetProcAddr
wgpuDevice	build/_deps/imgui-proj-src/backends/imgui_impl_wgpu.cpp	/^    WGPUDevice              wgpuDevice = nullptr;$/;"	m	struct:ImGui_ImplWGPU_Data	typeref:typename:WGPUDevice	file:
wgpu_device	build/_deps/imgui-proj-src/examples/example_emscripten_wgpu/main.cpp	/^static WGPUDevice        wgpu_device = nullptr;$/;"	v	typeref:typename:WGPUDevice	file:
wgpu_error_callback	build/_deps/imgui-proj-src/examples/example_emscripten_wgpu/main.cpp	/^static void wgpu_error_callback(WGPUErrorType error_type, const char* message, void*)$/;"	f	typeref:typename:void	file:
wgpu_preferred_fmt	build/_deps/imgui-proj-src/examples/example_emscripten_wgpu/main.cpp	/^static WGPUTextureFormat wgpu_preferred_fmt = WGPUTextureFormat_RGBA8Unorm;$/;"	v	typeref:typename:WGPUTextureFormat	file:
wgpu_surface	build/_deps/imgui-proj-src/examples/example_emscripten_wgpu/main.cpp	/^static WGPUSurface       wgpu_surface = nullptr;$/;"	v	typeref:typename:WGPUSurface	file:
wgpu_swap_chain	build/_deps/imgui-proj-src/examples/example_emscripten_wgpu/main.cpp	/^static WGPUSwapChain     wgpu_swap_chain = nullptr;$/;"	v	typeref:typename:WGPUSwapChain	file:
wgpu_swap_chain_height	build/_deps/imgui-proj-src/examples/example_emscripten_wgpu/main.cpp	/^static int               wgpu_swap_chain_height = 0;$/;"	v	typeref:typename:int	file:
wgpu_swap_chain_width	build/_deps/imgui-proj-src/examples/example_emscripten_wgpu/main.cpp	/^static int               wgpu_swap_chain_width = 0;$/;"	v	typeref:typename:int	file:
where	build/_deps/imgui-proj-src/imstb_textedit.h	/^   IMSTB_TEXTEDIT_POSITIONTYPE  where;$/;"	m	struct:__anon0ee941840108	typeref:typename:IMSTB_TEXTEDIT_POSITIONTYPE
width	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^    int width;$/;"	m	struct:GLFWimage	typeref:typename:int
width	build/_deps/imgui-proj-src/examples/libs/glfw/include/GLFW/glfw3.h	/^    int width;$/;"	m	struct:GLFWvidmode	typeref:typename:int
width	build/_deps/imgui-proj-src/imstb_rectpack.h	/^   int width;$/;"	m	struct:stbrp_context	typeref:typename:int
width	build/_deps/imgui-proj-src/imstb_truetype.h	/^   int   width;$/;"	m	struct:stbtt_pack_context	typeref:typename:int
width	build/_deps/imgui-proj-src/imstb_truetype.h	/^   int width,height;$/;"	m	struct:__anond648eb7b1108	typeref:typename:int
window	build/_deps/imgui-proj-src/examples/example_apple_metal/main.mm	/^@property (nonatomic, strong) NSWindow *window;$/;"	p	interface:AppDelegate
window	build/_deps/imgui-proj-src/examples/example_apple_metal/main.mm	/^@property (strong, nonatomic) UIWindow *window;$/;"	p	interface:AppDelegate
window	build/_deps/imgui-proj-src/examples/example_apple_opengl2/main.mm	/^@property (nonatomic, readonly) NSWindow* window;$/;"	p	interface:AppDelegate
window	build/_deps/imgui-proj-src/examples/example_apple_opengl2/main.mm	/^{$/;"	m	implementation:AppDelegate
windowWillClose:	build/_deps/imgui-proj-src/examples/example_apple_metal/main.mm	/^{$/;"	m	implementation:AppViewController
x	build/_deps/imgui-proj-src/imgui.h	/^    float                                                     x, y, z, w;$/;"	m	struct:ImVec4	typeref:typename:float
x	build/_deps/imgui-proj-src/imgui.h	/^    float                                   x, y;$/;"	m	struct:ImVec2	typeref:typename:float
x	build/_deps/imgui-proj-src/imgui_internal.h	/^    float   x;$/;"	m	struct:ImVec1	typeref:typename:float
x	build/_deps/imgui-proj-src/imgui_internal.h	/^    short   x, y;$/;"	m	struct:ImVec2ih	typeref:typename:short
x	build/_deps/imgui-proj-src/imstb_rectpack.h	/^   int x,y;$/;"	m	struct:__anonbedcada60308	typeref:typename:int
x	build/_deps/imgui-proj-src/imstb_rectpack.h	/^   stbrp_coord    x, y;$/;"	m	struct:stbrp_rect	typeref:typename:stbrp_coord
x	build/_deps/imgui-proj-src/imstb_rectpack.h	/^   stbrp_coord  x,y;$/;"	m	struct:stbrp_node	typeref:typename:stbrp_coord
x	build/_deps/imgui-proj-src/imstb_textedit.h	/^   float x,y;    \/\/ position of n'th character$/;"	m	struct:__anon0ee941840508	typeref:typename:float
x	build/_deps/imgui-proj-src/imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anond648eb7b0708	typeref:typename:stbtt_vertex_type
x	build/_deps/imgui-proj-src/imstb_truetype.h	/^   float x, y;$/;"	m	struct:__anond648eb7b0f08	typeref:typename:float
x	build/_deps/imgui-proj-src/imstb_truetype.h	/^   float x,y;$/;"	m	struct:__anond648eb7b1008	typeref:typename:float
x	build/_deps/imgui-proj-src/imstb_truetype.h	/^   int x,dx;$/;"	m	struct:stbtt__active_edge	typeref:typename:int
x	build/_deps/imgui-proj-src/imstb_truetype.h	/^   int x,y,bottom_y;$/;"	m	struct:__anond648eb7b1108	typeref:typename:int
x	build/_deps/imgui-proj-src/imstb_truetype.h	/^   stbrp_coord x,y;$/;"	m	struct:stbrp_rect	typeref:typename:stbrp_coord
x	build/_deps/imgui-proj-src/imstb_truetype.h	/^   unsigned char x;$/;"	m	struct:__anond648eb7b1208	typeref:typename:unsigned char
x0	build/_deps/imgui-proj-src/imstb_textedit.h	/^   float x0,x1;             \/\/ starting x location, end x location (allows for align=right, et/;"	m	struct:__anon0ee941840408	typeref:typename:float
x0	build/_deps/imgui-proj-src/imstb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge	typeref:typename:float
x0	build/_deps/imgui-proj-src/imstb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anond648eb7b0308	typeref:typename:float
x0	build/_deps/imgui-proj-src/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anond648eb7b0208	typeref:typename:unsigned short
x0	build/_deps/imgui-proj-src/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anond648eb7b0408	typeref:typename:unsigned short
x1	build/_deps/imgui-proj-src/imstb_textedit.h	/^   float x0,x1;             \/\/ starting x location, end x location (allows for align=right, et/;"	m	struct:__anon0ee941840408	typeref:typename:float
x1	build/_deps/imgui-proj-src/imstb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge	typeref:typename:float
x1	build/_deps/imgui-proj-src/imstb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anond648eb7b0308	typeref:typename:float
x1	build/_deps/imgui-proj-src/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anond648eb7b0208	typeref:typename:unsigned short
x1	build/_deps/imgui-proj-src/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anond648eb7b0408	typeref:typename:unsigned short
xadvance	build/_deps/imgui-proj-src/imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anond648eb7b0208	typeref:typename:float
xadvance	build/_deps/imgui-proj-src/imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anond648eb7b0408	typeref:typename:float
xoff	build/_deps/imgui-proj-src/imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anond648eb7b0208	typeref:typename:float
xoff	build/_deps/imgui-proj-src/imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anond648eb7b0408	typeref:typename:float
xoff2	build/_deps/imgui-proj-src/imstb_truetype.h	/^   float xoff2,yoff2;$/;"	m	struct:__anond648eb7b0408	typeref:typename:float
y	build/_deps/imgui-proj-src/imgui.h	/^    float                                                     x, y, z, w;$/;"	m	struct:ImVec4	typeref:typename:float
y	build/_deps/imgui-proj-src/imgui.h	/^    float                                   x, y;$/;"	m	struct:ImVec2	typeref:typename:float
y	build/_deps/imgui-proj-src/imgui_internal.h	/^    short   x, y;$/;"	m	struct:ImVec2ih	typeref:typename:short
y	build/_deps/imgui-proj-src/imstb_rectpack.h	/^   int x,y;$/;"	m	struct:__anonbedcada60308	typeref:typename:int
y	build/_deps/imgui-proj-src/imstb_rectpack.h	/^   stbrp_coord    x, y;$/;"	m	struct:stbrp_rect	typeref:typename:stbrp_coord
y	build/_deps/imgui-proj-src/imstb_rectpack.h	/^   stbrp_coord  x,y;$/;"	m	struct:stbrp_node	typeref:typename:stbrp_coord
y	build/_deps/imgui-proj-src/imstb_textedit.h	/^   float x,y;    \/\/ position of n'th character$/;"	m	struct:__anon0ee941840508	typeref:typename:float
y	build/_deps/imgui-proj-src/imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anond648eb7b0708	typeref:typename:stbtt_vertex_type
y	build/_deps/imgui-proj-src/imstb_truetype.h	/^   float x, y;$/;"	m	struct:__anond648eb7b0f08	typeref:typename:float
y	build/_deps/imgui-proj-src/imstb_truetype.h	/^   float x,y;$/;"	m	struct:__anond648eb7b1008	typeref:typename:float
y	build/_deps/imgui-proj-src/imstb_truetype.h	/^   int x,y,bottom_y;$/;"	m	struct:__anond648eb7b1108	typeref:typename:int
y	build/_deps/imgui-proj-src/imstb_truetype.h	/^   stbrp_coord x,y;$/;"	m	struct:stbrp_rect	typeref:typename:stbrp_coord
y0	build/_deps/imgui-proj-src/imstb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge	typeref:typename:float
y0	build/_deps/imgui-proj-src/imstb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anond648eb7b0308	typeref:typename:float
y0	build/_deps/imgui-proj-src/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anond648eb7b0208	typeref:typename:unsigned short
y0	build/_deps/imgui-proj-src/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anond648eb7b0408	typeref:typename:unsigned short
y1	build/_deps/imgui-proj-src/imstb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge	typeref:typename:float
y1	build/_deps/imgui-proj-src/imstb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anond648eb7b0308	typeref:typename:float
y1	build/_deps/imgui-proj-src/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anond648eb7b0208	typeref:typename:unsigned short
y1	build/_deps/imgui-proj-src/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anond648eb7b0408	typeref:typename:unsigned short
ymax	build/_deps/imgui-proj-src/imstb_textedit.h	/^   float ymin,ymax;         \/\/ height of row above and below baseline$/;"	m	struct:__anon0ee941840408	typeref:typename:float
ymin	build/_deps/imgui-proj-src/imstb_textedit.h	/^   float ymin,ymax;         \/\/ height of row above and below baseline$/;"	m	struct:__anon0ee941840408	typeref:typename:float
yoff	build/_deps/imgui-proj-src/imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anond648eb7b0208	typeref:typename:float
yoff	build/_deps/imgui-proj-src/imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anond648eb7b0408	typeref:typename:float
yoff2	build/_deps/imgui-proj-src/imstb_truetype.h	/^   float xoff2,yoff2;$/;"	m	struct:__anond648eb7b0408	typeref:typename:float
z	build/_deps/imgui-proj-src/imgui.h	/^    float                                                     x, y, z, w;$/;"	m	struct:ImVec4	typeref:typename:float
~ExampleAppConsole	build/_deps/imgui-proj-src/imgui_demo.cpp	/^    ~ExampleAppConsole()$/;"	f	struct:ExampleAppConsole	file:
~FreeTypeFont	build/_deps/imgui-proj-src/misc/freetype/imgui_freetype.cpp	/^        ~FreeTypeFont()         { CloseFont(); }$/;"	f	struct:__anon9c8900c20110::FreeTypeFont	file:
~ImDrawList	build/_deps/imgui-proj-src/imgui.h	/^    ~ImDrawList() { _ClearFreeMemory(); }$/;"	f	struct:ImDrawList
~ImDrawListSplitter	build/_deps/imgui-proj-src/imgui.h	/^    inline ~ImDrawListSplitter() { ClearFreeMemory(); }$/;"	f	struct:ImDrawListSplitter
~ImFont	build/_deps/imgui-proj-src/imgui_draw.cpp	/^ImFont::~ImFont()$/;"	f	class:ImFont
~ImFontAtlas	build/_deps/imgui-proj-src/imgui_draw.cpp	/^ImFontAtlas::~ImFontAtlas()$/;"	f	class:ImFontAtlas
~ImGuiDockNode	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiDockNode::~ImGuiDockNode()$/;"	f	class:ImGuiDockNode
~ImGuiListClipper	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiListClipper::~ImGuiListClipper()$/;"	f	class:ImGuiListClipper
~ImGuiTable	build/_deps/imgui-proj-src/imgui_internal.h	/^    ~ImGuiTable()               { IM_FREE(RawData); }$/;"	f	struct:ImGuiTable
~ImGuiViewport	build/_deps/imgui-proj-src/imgui.h	/^    ~ImGuiViewport()    { IM_ASSERT(PlatformUserData == NULL && RendererUserData == NULL); }$/;"	f	struct:ImGuiViewport
~ImGuiViewportP	build/_deps/imgui-proj-src/imgui_internal.h	/^    ~ImGuiViewportP()                   { if (BgFgDrawLists[0]) IM_DELETE(BgFgDrawLists[0]); if /;"	f	struct:ImGuiViewportP
~ImGuiWindow	build/_deps/imgui-proj-src/imgui.cpp	/^ImGuiWindow::~ImGuiWindow()$/;"	f	class:ImGuiWindow
~ImGui_ImplDX10_ViewportData	build/_deps/imgui-proj-src/backends/imgui_impl_dx10.cpp	/^    ~ImGui_ImplDX10_ViewportData()  { IM_ASSERT(SwapChain == nullptr && RTView == nullptr); }$/;"	f	struct:ImGui_ImplDX10_ViewportData	file:
~ImGui_ImplDX11_ViewportData	build/_deps/imgui-proj-src/backends/imgui_impl_dx11.cpp	/^    ~ImGui_ImplDX11_ViewportData()  { IM_ASSERT(SwapChain == nullptr && RTView == nullptr); }$/;"	f	struct:ImGui_ImplDX11_ViewportData	file:
~ImGui_ImplDX12_ViewportData	build/_deps/imgui-proj-src/backends/imgui_impl_dx12.cpp	/^    ~ImGui_ImplDX12_ViewportData()$/;"	f	struct:ImGui_ImplDX12_ViewportData	file:
~ImGui_ImplDX9_ViewportData	build/_deps/imgui-proj-src/backends/imgui_impl_dx9.cpp	/^    ~ImGui_ImplDX9_ViewportData() { IM_ASSERT(SwapChain == nullptr); }$/;"	f	struct:ImGui_ImplDX9_ViewportData	file:
~ImGui_ImplGlfw_ViewportData	build/_deps/imgui-proj-src/backends/imgui_impl_glfw.cpp	/^    ~ImGui_ImplGlfw_ViewportData() { IM_ASSERT(Window == nullptr); }$/;"	f	struct:ImGui_ImplGlfw_ViewportData	file:
~ImGui_ImplSDL2_ViewportData	build/_deps/imgui-proj-src/backends/imgui_impl_sdl2.cpp	/^    ~ImGui_ImplSDL2_ViewportData() { IM_ASSERT(Window == nullptr && GLContext == nullptr); }$/;"	f	struct:ImGui_ImplSDL2_ViewportData	file:
~ImGui_ImplSDL3_ViewportData	build/_deps/imgui-proj-src/backends/imgui_impl_sdl3.cpp	/^    ~ImGui_ImplSDL3_ViewportData() { IM_ASSERT(Window == nullptr && GLContext == nullptr); }$/;"	f	struct:ImGui_ImplSDL3_ViewportData	file:
~ImGui_ImplVulkan_ViewportData	build/_deps/imgui-proj-src/backends/imgui_impl_vulkan.cpp	/^    ~ImGui_ImplVulkan_ViewportData()        { }$/;"	f	struct:ImGui_ImplVulkan_ViewportData	file:
~ImGui_ImplWin32_ViewportData	build/_deps/imgui-proj-src/backends/imgui_impl_win32.cpp	/^    ~ImGui_ImplWin32_ViewportData() { IM_ASSERT(Hwnd == nullptr); }$/;"	f	struct:ImGui_ImplWin32_ViewportData	file:
~ImPool	build/_deps/imgui-proj-src/imgui_internal.h	/^    ~ImPool()   { Clear(); }$/;"	f	struct:ImPool
~ImVector	build/_deps/imgui-proj-src/imgui.h	/^    inline ~ImVector()                                      { if (Data) IM_FREE(Data); } \/\/ Im/;"	f	struct:ImVector
